/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/js/controller/index.js":
/*!************************************!*\
  !*** ./app/js/controller/index.js ***!
  \************************************/
/*! exports provided: app */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"app\", function() { return app; });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./app/js/model/index.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\nvar app = {\n  init: function init() {\n    this.initOSB();\n    this.pah();\n    this.ip(); // this.test()\n    // this.slt()\n  },\n  initOSB: function initOSB() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_1__[\"sidebarWrapper\"]);\n  },\n  // slt(){\n  // \tsidebarListsToggle(sidebarListItems)\n  // }\n  pah: function pah() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"playAudioHover\"])(_view__WEBPACK_IMPORTED_MODULE_1__[\"rows\"]);\n  },\n  ip: function ip() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initPopups\"])();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29udHJvbGxlci9pbmRleC5qcz9kZmM2Il0sIm5hbWVzIjpbImFwcCIsImluaXQiLCJpbml0T1NCIiwicGFoIiwiaXAiLCJpbml0T3ZlcmxheVNjcm9sbGJhcnMiLCJzaWRlYmFyV3JhcHBlciIsInBsYXlBdWRpb0hvdmVyIiwicm93cyIsImluaXRQb3B1cHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVQTtBQVFBLElBQU1BLEdBQUcsR0FBRztBQUNYQyxNQURXLGtCQUNKO0FBQ04sU0FBS0MsT0FBTDtBQUNBLFNBQUtDLEdBQUw7QUFDQSxTQUFLQyxFQUFMLEdBSE0sQ0FJTjtBQUNBO0FBQ0EsR0FQVTtBQVNYRixTQVRXLHFCQVNGO0FBQ1JHLHdFQUFxQixDQUFDQyxvREFBRCxDQUFyQjtBQUNBLEdBWFU7QUFZWDtBQUNBO0FBQ0E7QUFDQUgsS0FmVyxpQkFlTjtBQUNKSSxpRUFBYyxDQUFDQywwQ0FBRCxDQUFkO0FBQ0EsR0FqQlU7QUFtQlhKLElBbkJXLGdCQW1CUDtBQUNISyw2REFBVTtBQUNWO0FBckJVLENBQVoiLCJmaWxlIjoiLi9hcHAvanMvY29udHJvbGxlci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcblxyXG5cdGluaXRPdmVybGF5U2Nyb2xsYmFycyxcclxuXHQvLyBzaWRlYmFyTGlzdHNUb2dnbGUsXHJcblx0cGxheUF1ZGlvSG92ZXIsXHJcblx0aW5pdFBvcHVwc1xyXG5cclxufSBmcm9tICcuLi9tb2RlbCdcclxuXHJcblxyXG5pbXBvcnQge1xyXG5cclxuXHRzaWRlYmFyV3JhcHBlcixcclxuXHRzaWRlYmFyTGlzdEl0ZW1zLFxyXG5cdHJvd3NcclxuXHJcbn0gZnJvbSAnLi4vdmlldydcclxuXHJcbmNvbnN0IGFwcCA9IHtcclxuXHRpbml0KCkge1xyXG5cdFx0dGhpcy5pbml0T1NCKClcclxuXHRcdHRoaXMucGFoKClcclxuXHRcdHRoaXMuaXAoKVxyXG5cdFx0Ly8gdGhpcy50ZXN0KClcclxuXHRcdC8vIHRoaXMuc2x0KClcclxuXHR9LFxyXG5cclxuXHRpbml0T1NCKCl7XHJcblx0XHRpbml0T3ZlcmxheVNjcm9sbGJhcnMoc2lkZWJhcldyYXBwZXIpXHJcblx0fSxcclxuXHQvLyBzbHQoKXtcclxuXHQvLyBcdHNpZGViYXJMaXN0c1RvZ2dsZShzaWRlYmFyTGlzdEl0ZW1zKVxyXG5cdC8vIH1cclxuXHRwYWgoKXtcclxuXHRcdHBsYXlBdWRpb0hvdmVyKHJvd3MpXHJcblx0fSxcclxuXHJcblx0aXAoKXtcclxuXHRcdGluaXRQb3B1cHMoKVxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQge1xyXG5cdGFwcFxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/controller/index.js\n");

/***/ }),

/***/ "./app/js/main.js":
/*!************************!*\
  !*** ./app/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller */ \"./app/js/controller/index.js\");\n;\n\n\nif (document.readyState !== 'loading') {\n  _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n} else {\n  document.addEventListener('DOMContentLoaded', function () {\n    _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbWFpbi5qcz80M2M0Il0sIm5hbWVzIjpbImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFwcCIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQzs7QUFFRCxJQUFJQSxRQUFRLENBQUNDLFVBQVQsS0FBd0IsU0FBNUIsRUFBd0M7QUFDcENDLGlEQUFHLENBQUNDLElBQUo7QUFDSCxDQUZELE1BRU87QUFDSEgsVUFBUSxDQUFDSSxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtBQUN0REYsbURBQUcsQ0FBQ0MsSUFBSjtBQUNILEdBRkQ7QUFHSCIsImZpbGUiOiIuL2FwcC9qcy9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiO2ltcG9ydCB7YXBwfSBmcm9tICcuL2NvbnRyb2xsZXInXHJcblxyXG5pZiggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnICkge1xyXG4gICAgYXBwLmluaXQoKTtcclxufSBlbHNlIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXBwLmluaXQoKTtcclxuICAgIH0pO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/main.js\n");

/***/ }),

/***/ "./app/js/model/OverlayScrollbarsInit.js":
/*!***********************************************!*\
  !*** ./app/js/model/OverlayScrollbarsInit.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n\n\nvar initOverlayScrollbars = function initOverlayScrollbars(node) {\n  var instance = Object(_libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"OverlayScrollbars\"])(node, {\n    className: \"os-theme-dark\",\n    sizeAutoCapable: true,\n    paddingAbsolute: true,\n    scrollbars: {\n      clickScrolling: true,\n      autoHide: 'leave',\n      autoHideDelay: 50\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initOverlayScrollbars);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvT3ZlcmxheVNjcm9sbGJhcnNJbml0LmpzP2YzYzYiXSwibmFtZXMiOlsiaW5pdE92ZXJsYXlTY3JvbGxiYXJzIiwibm9kZSIsImluc3RhbmNlIiwiT3ZlcmxheVNjcm9sbGJhcnMiLCJjbGFzc05hbWUiLCJzaXplQXV0b0NhcGFibGUiLCJwYWRkaW5nQWJzb2x1dGUiLCJzY3JvbGxiYXJzIiwiY2xpY2tTY3JvbGxpbmciLCJhdXRvSGlkZSIsImF1dG9IaWRlRGVsYXkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFJQSxJQUFNQSxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLENBQUNDLElBQUQsRUFBUztBQUN0QyxNQUFJQyxRQUFRLEdBQUdDLG9FQUFpQixDQUFDRixJQUFELEVBQU87QUFDdkNHLGFBQVMsRUFBUyxlQURxQjtBQUV2Q0MsbUJBQWUsRUFBRyxJQUZxQjtBQUd2Q0MsbUJBQWUsRUFBRyxJQUhxQjtBQUl2Q0MsY0FBVSxFQUFHO0FBQ1pDLG9CQUFjLEVBQUcsSUFETDtBQUVaQyxjQUFRLEVBQUcsT0FGQztBQUdaQyxtQkFBYSxFQUFFO0FBSEg7QUFKMEIsR0FBUCxDQUFoQztBQVVBLENBWEQ7O0FBZ0JlVixvRkFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9PdmVybGF5U2Nyb2xsYmFyc0luaXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge092ZXJsYXlTY3JvbGxiYXJzfSBmcm9tICcuLi8uLi9saWJzL2xpYnMnXHJcblxyXG5cclxuXHJcbmNvbnN0IGluaXRPdmVybGF5U2Nyb2xsYmFycyA9IChub2RlKT0+IHtcclxuXHRsZXQgaW5zdGFuY2UgPSBPdmVybGF5U2Nyb2xsYmFycyhub2RlLCB7XHJcblx0Y2xhc3NOYW1lICAgICAgIDogXCJvcy10aGVtZS1kYXJrXCIsXHJcblx0c2l6ZUF1dG9DYXBhYmxlIDogdHJ1ZSxcclxuXHRwYWRkaW5nQWJzb2x1dGUgOiB0cnVlLFxyXG5cdHNjcm9sbGJhcnMgOiB7XHJcblx0XHRjbGlja1Njcm9sbGluZyA6IHRydWUsXHJcblx0XHRhdXRvSGlkZSA6ICdsZWF2ZScsXHJcblx0XHRhdXRvSGlkZURlbGF5OiA1MFxyXG5cdH1cclxufSk7IFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0T3ZlcmxheVNjcm9sbGJhcnNcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/OverlayScrollbarsInit.js\n");

/***/ }),

/***/ "./app/js/model/index.js":
/*!*******************************!*\
  !*** ./app/js/model/index.js ***!
  \*******************************/
/*! exports provided: initOverlayScrollbars, sidebarListsToggle, playAudioHover, initPopups */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _OverlayScrollbarsInit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OverlayScrollbarsInit */ \"./app/js/model/OverlayScrollbarsInit.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initOverlayScrollbars\", function() { return _OverlayScrollbarsInit__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _sidebarListsToggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sidebarListsToggle */ \"./app/js/model/sidebarListsToggle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sidebarListsToggle\", function() { return _sidebarListsToggle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _playAudioHover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playAudioHover */ \"./app/js/model/playAudioHover.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"playAudioHover\", function() { return _playAudioHover__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _initPopups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./initPopups */ \"./app/js/model/initPopups.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initPopups\", function() { return _initPopups__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5kZXguanM/YzgzZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluaXRPdmVybGF5U2Nyb2xsYmFycyBmcm9tICcuL092ZXJsYXlTY3JvbGxiYXJzSW5pdCdcclxuaW1wb3J0IHNpZGViYXJMaXN0c1RvZ2dsZSBmcm9tICcuL3NpZGViYXJMaXN0c1RvZ2dsZSdcclxuaW1wb3J0IHBsYXlBdWRpb0hvdmVyIGZyb20gJy4vcGxheUF1ZGlvSG92ZXInXHJcbmltcG9ydCBpbml0UG9wdXBzIGZyb20gJy4vaW5pdFBvcHVwcydcclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQge1xyXG5cdGluaXRPdmVybGF5U2Nyb2xsYmFycyxcclxuXHRzaWRlYmFyTGlzdHNUb2dnbGUsXHJcblx0cGxheUF1ZGlvSG92ZXIsXHJcblx0aW5pdFBvcHVwc1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/index.js\n");

/***/ }),

/***/ "./app/js/model/initPopups.js":
/*!************************************!*\
  !*** ./app/js/model/initPopups.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./popup */ \"./app/js/model/popup.js\");\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n\n\n\nvar initPopups = function initPopups() {\n  var countryPopup = new _popup__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('.country-filter-wrapper', {\n    view: true,\n    contents: \"#country-popup\" // pointerPosition: 'right',\n    // size_pointer_position: 20,\n\n  });\n  var typeManufacturyPopup = new _popup__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('.type-manufactury-filter-wrapper', {\n    view: true,\n    contents: \"#type-manufactury-popup\" // pointerPosition: 'right',\n    // size_pointer_position: 20,\n\n  });\n  var contaxtPopup = new _popup__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('.contact-filter-wrapper', {\n    view: true,\n    contents: \"#contact-popup\" // pointerPosition: 'right',\n    // size_pointer_position: 20,\n\n  });\n  console.log(countryPopup); // document.querySelectorAll('.sidebar__filter-item').forEach(el => {\n  // \tel.addEventListener('click', function(){\n  // \t\tMicroModal.show('modal-1')\n  // \t})\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initPopups);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5pdFBvcHVwcy5qcz8wZjU4Il0sIm5hbWVzIjpbImluaXRQb3B1cHMiLCJjb3VudHJ5UG9wdXAiLCJQb3B1cE1EIiwidmlldyIsImNvbnRlbnRzIiwidHlwZU1hbnVmYWN0dXJ5UG9wdXAiLCJjb250YXh0UG9wdXAiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBOztBQUlBLElBQU1BLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQUs7QUFDdkIsTUFBSUMsWUFBWSxHQUFHLElBQUlDLDhDQUFKLENBQVkseUJBQVosRUFBc0M7QUFDeERDLFFBQUksRUFBRSxJQURrRDtBQUV4REMsWUFBUSxrQkFGZ0QsQ0FHeEQ7QUFDQTs7QUFKd0QsR0FBdEMsQ0FBbkI7QUFTQSxNQUFJQyxvQkFBb0IsR0FBRyxJQUFJSCw4Q0FBSixDQUFZLGtDQUFaLEVBQStDO0FBQ3pFQyxRQUFJLEVBQUUsSUFEbUU7QUFFekVDLFlBQVEsMkJBRmlFLENBR3pFO0FBQ0E7O0FBSnlFLEdBQS9DLENBQTNCO0FBU0EsTUFBSUUsWUFBWSxHQUFHLElBQUlKLDhDQUFKLENBQVkseUJBQVosRUFBc0M7QUFDeERDLFFBQUksRUFBRSxJQURrRDtBQUV4REMsWUFBUSxrQkFGZ0QsQ0FHeEQ7QUFDQTs7QUFKd0QsR0FBdEMsQ0FBbkI7QUFRQUcsU0FBTyxDQUFDQyxHQUFSLENBQVlQLFlBQVosRUEzQnVCLENBNkJ2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsQ0FuQ0Q7O0FBc0NlRCx5RUFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9pbml0UG9wdXBzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBvcHVwTUQgZnJvbSAnLi9wb3B1cCdcclxuXHJcbmltcG9ydCB7TWljcm9Nb2RhbH0gZnJvbSAnLi4vLi4vbGlicy9saWJzJ1xyXG5cclxuXHJcblxyXG5jb25zdCBpbml0UG9wdXBzID0gKCk9PiB7XHJcblx0bGV0IGNvdW50cnlQb3B1cCA9IG5ldyBQb3B1cE1EKCcuY291bnRyeS1maWx0ZXItd3JhcHBlcicse1xyXG5cdFx0dmlldzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRzOiBgI2NvdW50cnktcG9wdXBgLFxyXG5cdFx0Ly8gcG9pbnRlclBvc2l0aW9uOiAncmlnaHQnLFxyXG5cdFx0Ly8gc2l6ZV9wb2ludGVyX3Bvc2l0aW9uOiAyMCxcclxuXHJcblx0fSlcclxuXHJcblxyXG5cdGxldCB0eXBlTWFudWZhY3R1cnlQb3B1cCA9IG5ldyBQb3B1cE1EKCcudHlwZS1tYW51ZmFjdHVyeS1maWx0ZXItd3JhcHBlcicse1xyXG5cdFx0dmlldzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRzOiBgI3R5cGUtbWFudWZhY3R1cnktcG9wdXBgLFxyXG5cdFx0Ly8gcG9pbnRlclBvc2l0aW9uOiAncmlnaHQnLFxyXG5cdFx0Ly8gc2l6ZV9wb2ludGVyX3Bvc2l0aW9uOiAyMCxcclxuXHJcblx0fSlcclxuXHJcblxyXG5cdGxldCBjb250YXh0UG9wdXAgPSBuZXcgUG9wdXBNRCgnLmNvbnRhY3QtZmlsdGVyLXdyYXBwZXInLHtcclxuXHRcdHZpZXc6IHRydWUsXHJcblx0XHRjb250ZW50czogYCNjb250YWN0LXBvcHVwYCxcclxuXHRcdC8vIHBvaW50ZXJQb3NpdGlvbjogJ3JpZ2h0JyxcclxuXHRcdC8vIHNpemVfcG9pbnRlcl9wb3NpdGlvbjogMjAsXHJcblxyXG5cdH0pXHJcblxyXG5cdGNvbnNvbGUubG9nKGNvdW50cnlQb3B1cClcclxuXHJcblx0Ly8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXJfX2ZpbHRlci1pdGVtJykuZm9yRWFjaChlbCA9PiB7XHJcblx0Ly8gXHRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcblx0Ly8gXHRcdE1pY3JvTW9kYWwuc2hvdygnbW9kYWwtMScpXHJcblx0Ly8gXHR9KVxyXG5cdC8vIH0pXHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdFBvcHVwcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/initPopups.js\n");

/***/ }),

/***/ "./app/js/model/playAudioHover.js":
/*!****************************************!*\
  !*** ./app/js/model/playAudioHover.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// import {sidebarWrapper} from '../view'\nvar playAudioHover = function playAudioHover(items) {\n  var audio = document.createElement('audio'); // let source = document.createElement('source')\n  // let source2 = document.createElement('source')\n  // source.setAttribute('src', 'audio/click.mp3')\n  // source2.setAttribute('src', 'audio/click.ogg')\n\n  audio.innerHTML = \"\\n\\t<source src=\\\"audio/1.mp3\\\"><source>\\n\\n\\t\";\n  audio.volume = 0.04;\n  items.forEach(function (item) {\n    item.addEventListener('mouseenter', function () {\n      audio.play();\n    }); // item.addEventListener('mouseleave', function(){\n    // \taudio.pause();\n    // })\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (playAudioHover);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvcGxheUF1ZGlvSG92ZXIuanM/ZmEzYSJdLCJuYW1lcyI6WyJwbGF5QXVkaW9Ib3ZlciIsIml0ZW1zIiwiYXVkaW8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ2b2x1bWUiLCJmb3JFYWNoIiwiaXRlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5Il0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBRUEsSUFBTUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDQyxLQUFELEVBQVc7QUFDakMsTUFBSUMsS0FBSyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWixDQURpQyxDQUVqQztBQUNBO0FBRUE7QUFDQTs7QUFHQUYsT0FBSyxDQUFDRyxTQUFOO0FBS0FILE9BQUssQ0FBQ0ksTUFBTixHQUFlLElBQWY7QUFFQUwsT0FBSyxDQUFDTSxPQUFOLENBQWMsVUFBQUMsSUFBSSxFQUFHO0FBQ3BCQSxRQUFJLENBQUNDLGdCQUFMLENBQXNCLFlBQXRCLEVBQW9DLFlBQVU7QUFDN0NQLFdBQUssQ0FBQ1EsSUFBTjtBQUNBLEtBRkQsRUFEb0IsQ0FJcEI7QUFDQTtBQUNBO0FBQ0EsR0FQRDtBQVFBLENBeEJEOztBQTJCZVYsNkVBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvcGxheUF1ZGlvSG92ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy8gaW1wb3J0IHtzaWRlYmFyV3JhcHBlcn0gZnJvbSAnLi4vdmlldydcclxuXHJcbmNvbnN0IHBsYXlBdWRpb0hvdmVyID0gKGl0ZW1zKSA9PiB7XHJcblx0bGV0IGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKVxyXG5cdC8vIGxldCBzb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKVxyXG5cdC8vIGxldCBzb3VyY2UyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJylcclxuXHJcblx0Ly8gc291cmNlLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2F1ZGlvL2NsaWNrLm1wMycpXHJcblx0Ly8gc291cmNlMi5zZXRBdHRyaWJ1dGUoJ3NyYycsICdhdWRpby9jbGljay5vZ2cnKVxyXG5cclxuXHJcblx0YXVkaW8uaW5uZXJIVE1MID0gYFxyXG5cdDxzb3VyY2Ugc3JjPVwiYXVkaW8vMS5tcDNcIj48c291cmNlPlxyXG5cclxuXHRgXHJcblxyXG5cdGF1ZGlvLnZvbHVtZSA9IDAuMDRcclxuXHJcblx0aXRlbXMuZm9yRWFjaChpdGVtPT4ge1xyXG5cdFx0aXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24oKXtcclxuXHRcdFx0YXVkaW8ucGxheSgpO1xyXG5cdFx0fSlcclxuXHRcdC8vIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XHJcblx0XHQvLyBcdGF1ZGlvLnBhdXNlKCk7XHJcblx0XHQvLyB9KVxyXG5cdH0pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBwbGF5QXVkaW9Ib3ZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/playAudioHover.js\n");

/***/ }),

/***/ "./app/js/model/popup.js":
/*!*******************************!*\
  !*** ./app/js/model/popup.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nvar PopupMD = /*#__PURE__*/function () {\n  function PopupMD(element) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PopupMD);\n\n    //модальное окно\n    this.modal = '<div class=\"modal_short\">\\n' + '    <svg>\\n' + '        <polygon points=\"0 10 10 0 10 20\"></polygon>\\n' + '    </svg>\\n' + '</div>'; //--------------------------------------------------------setting popup (поля модального окна)\n    //контейнер для содержимого (контент )\n\n    this.contents = ''; //позиция указателя. Возможные варианты: left, right, center.\n\n    this.pointer_position = 'center'; //размер отступа пипки от края. По умолчанию 0 //center\n\n    this.size_pointer_position = 0; //размер отступа модального окна. По умолчанию 0\n\n    this.size_position = 0; //сторона указателя. Возможные варианты: left, right, top, bottom.\n\n    this.modal_side = 'right'; //закрывать ли модальное окно, после вызова другого. Возможные варианты: true, false.\n\n    this.only_one = true; //дополнительные елементы при клике на которые не закрывать модальное окно. Передавать нужно название класса\n\n    this.element_off_close = []; //отображение попап окна. Возможные варианты: true, false.\n\n    this.view = false; //елемент по клику на который будет вылазить модальное окно\n\n    this.element = undefined; //стили елемента\n\n    this.style = ''; //отступ от позиционируемого елемента\n\n    this.margin_element = 0; //клонировать содержимое для модального окна или вырезать. Возможные варианты: true, false.\n\n    this.clone_contents = true; //уникальный атрибут елемента, при клике на который будет закрываться модальное окно. Не сработает без контента.\n\n    this.close_button = '.modal_close'; //закрывать ли модальное окно при кликах вне его границы. Возможные варианты: true, false.\n\n    this.close_auto = true; //-------------------------------------------------------начало работы\n\n    var indexOldElement = PopupMD.checkIndex(element);\n\n    if (indexOldElement === -1) {\n      //Метод преобразования строки в объект DOM\n      var DOMElement = document.createElement('div');\n      DOMElement.innerHTML = this.modal;\n      this.modal = DOMElement.children[0]; // console.log(DOMElement.innerHTML)\n      //вызов базовой настройки\n\n      this.firstSetting(data); //вызов метода проверки на то, стоит ли закрывать предыдущее модальное окно. Объязательный вызов перед методом setListObject()\n\n      PopupMD.checkPreviousModal(); //вызов отображение модального окна\n\n      if (this.view) {\n        this.popupView(element);\n      } //вызов метода который прицепит событие закрытия модального окна на кнопку\n\n\n      this.closeButton(element); //вызов добавления в список только что созданых объектов\n\n      this.setListObject(element); //вызов автозакрытия модального окна, при мисскликах или же спецом вне окна\n\n      if (this.close_auto) {\n        this.addEventDocument(element);\n      }\n    } else {\n      //console.log('This object isset ' + indexOldElement);\n      //console.log(PopupMD.list_object);\n      PopupMD.closeModal(indexOldElement);\n    }\n  } //Базовая настройка\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PopupMD, [{\n    key: \"firstSetting\",\n    value: function firstSetting(data) {\n      if (data['pointerPosition'] !== undefined) {\n        if (['left', 'right', 'center'].indexOf(data['pointerPosition']) !== -1) {\n          this.pointer_position = data['pointerPosition'];\n        }\n      }\n\n      if (data['sizePointerPosition'] !== undefined) {\n        this.size_pointer_position = data['sizePointerPosition'];\n      }\n\n      if (data['modalSide'] !== undefined) {\n        if (['left', 'right', 'top', 'bottom'].indexOf(data['modalSide']) !== -1) {\n          this.modal_side = data['modalSide'];\n        }\n      }\n\n      if (data['onlyOne'] !== undefined) {\n        if (typeof data['onlyOne'] === 'boolean') {\n          this.only_one = data['onlyOne'];\n        }\n      }\n\n      if (data['elementOffClose'] !== undefined) {\n        if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(data['elementOffClose']) === 'object') {\n          this.element_off_close = data['elementOffClose'];\n        }\n      }\n\n      if (data['view'] !== undefined) {\n        if (typeof data['view'] === 'boolean') {\n          this.view = data['view'];\n        }\n      }\n\n      if (data['contents'] !== undefined) {\n        this.contents = data['contents'];\n      }\n\n      if (data['cloneContents'] !== undefined) {\n        if (typeof data['cloneContents'] === 'boolean') {\n          this.clone_contents = data['cloneContents'];\n        }\n      }\n\n      if (data['style'] !== undefined) {\n        if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(data['style']) === 'object') {\n          this.style = data['style'];\n        }\n      }\n\n      if (data['marginElement'] !== undefined) {\n        this.margin_element = data['marginElement'];\n      }\n\n      if (data['sizePosition'] !== undefined) {\n        this.size_position = data['sizePosition'];\n      }\n\n      if (data['closeButton'] !== undefined) {\n        this.close_button = data['closeButton'];\n      }\n\n      if (data['closeAuto'] !== undefined) {\n        if (typeof data['closeAuto'] === 'boolean') {\n          this.close_auto = data['closeAuto'];\n        }\n      }\n    } //Отображение модального окна\n\n  }, {\n    key: \"popupView\",\n    value: function popupView(element) {\n      this.element = document.querySelector(element);\n      var parent = this.element.parentElement; //так как мы передали елемент на который нам нужно кликать, мы должны рядом с ним впихнуть модальное окно.\n\n      parent.style.position = 'relative';\n      parent.append(this.modal); //this.element = document.querySelector(element); //определяю елемент на который нужно ориентироваться, делаю это второй раз, потому что добавление через innerHTML ломает указатель\n\n      this.modal = parent.children[parent.children.length - 1];\n\n      if (this.modal.style.display === 'none') {\n        this.modal.style.display = 'block';\n      } //вызываем функцию добавления содержимого в модальное окно\n\n\n      this.cloneContents(); //присваиваем стили\n\n      if (this.style !== '') {\n        this.setStyleModal();\n      } //позиция модального окна\n\n\n      this.savePositionModal();\n    } //функция вырезания или клонирования содержимого (контента) в модальное окно\n\n  }, {\n    key: \"cloneContents\",\n    value: function cloneContents() {\n      if (this.contents !== '') {\n        var content = '';\n        var div_content = document.querySelector(this.contents);\n\n        if (div_content !== null) {\n          if (this.clone_contents) {\n            content = div_content.cloneNode(true);\n          } else {\n            content = div_content;\n          }\n\n          if (content.style.display === 'none') {\n            content.style.display = 'block';\n          }\n\n          this.modal.append(content);\n        }\n      }\n    } //Вычисляем положение модального окна и соответствующей ему пипки\n\n  }, {\n    key: \"pointerSide\",\n    value: function pointerSide() {\n      var top, left, svgRotate, svgLeft, svgTop, svgTranslateX, svgTranslateY;\n\n      switch (this.modal_side) {\n        case 'top':\n          this.pointerPosition(this.modal.offsetWidth);\n          top = this.element.offsetTop - this.modal.offsetHeight - 8 - this.margin_element;\n          left = this.element.offsetLeft - (this.modal.offsetWidth - this.element.offsetWidth) / 2 + this.size_pointer_position;\n          svgRotate = 270;\n          svgLeft = this.size_pointer_position;\n          svgTop = this.modal.offsetHeight;\n          svgTranslateX = 50;\n          svgTranslateY = 40;\n          break;\n\n        case 'right':\n          console.log(this.modal.offsetHeight);\n          this.pointerPosition(this.modal.offsetHeight);\n          top = this.element.offsetTop + this.element.offsetHeight / 2 - this.modal.offsetHeight / 2 + this.size_pointer_position; // top = -this.modal.offsetHeight / 2;\n\n          left = this.element.offsetLeft + this.element.offsetWidth + 19 + this.margin_element;\n          svgRotate = 0;\n          svgLeft = 0;\n          svgTop = this.size_pointer_position;\n          svgTranslateX = 70;\n          svgTranslateY = 50;\n          break;\n\n        case 'bottom':\n          this.pointerPosition(this.modal.offsetWidth);\n          top = this.element.offsetTop + this.element.offsetHeight + 8 + this.margin_element;\n          left = this.element.offsetLeft - (this.modal.offsetWidth - this.element.offsetWidth) / 2 + this.size_position; //+ this.size_pointer_position\n\n          svgRotate = 90;\n          svgLeft = this.size_pointer_position;\n          svgTop = 0;\n          svgTranslateX = 50;\n          svgTranslateY = 60;\n          break;\n\n        case 'left':\n          this.pointerPosition(this.modal.offsetHeight);\n          top = this.element.offsetTop + this.element.offsetHeight / 2 - this.modal.offsetHeight / 2 + this.size_pointer_position;\n          left = this.element.offsetLeft - this.modal.offsetWidth - 8 - this.margin_element;\n          svgRotate = 180;\n          svgLeft = this.modal.offsetWidth;\n          svgTop = this.size_pointer_position;\n          svgTranslateX = 30;\n          svgTranslateY = 50;\n          break;\n      }\n\n      return {\n        'top': top,\n        'left': left,\n        'svgRotate': svgRotate,\n        'svgLeft': svgLeft,\n        'svgTop': svgTop,\n        'svgTranslateX': svgTranslateX,\n        'svgTranslateY': svgTranslateY\n      };\n    } //сохраняем позицию модального окна\n\n  }, {\n    key: \"savePositionModal\",\n    value: function savePositionModal() {\n      var pointer_side = this.pointerSide();\n      this.modal.style.top = pointer_side['top'] + 'px';\n      this.modal.style.left = pointer_side['left'] + 'px';\n      this.modal.children[0].style.transform = 'translate(-' + pointer_side['svgTranslateX'] + '%,-' + pointer_side['svgTranslateY'] + '%) rotate(' + pointer_side['svgRotate'] + 'deg)';\n      this.modal.children[0].style.top = pointer_side['svgTop'] + 'px';\n      this.modal.children[0].style.left = pointer_side['svgLeft'] + 'px';\n    } //функция которая автоматически разсчитывает позицию пипки модального окна, в случае если его позиция не задана пользователем.\n\n  }, {\n    key: \"pointerPosition\",\n    value: function pointerPosition(size) {\n      if (['left', 'right'].indexOf(this.pointer_position) !== -1) {\n        if (this.size_pointer_position === 0) {\n          // проверяем задавал ли позицию пользователь\n          this.size_pointer_position = size * 0.20 > 10 ? size / 4 : 0; // это если размер окажется меньше 10px, то проигнорировать отступ\n        }\n\n        if (this.pointer_position === 'left') {\n          // реверс\n          this.size_pointer_position = -this.size_pointer_position;\n        }\n      } else {\n        this.size_pointer_position = size / 2 - this.size_pointer_position;\n      }\n    } //присваиваем стили модальному окну\n\n  }, {\n    key: \"setStyleModal\",\n    value: function setStyleModal() {\n      if (this.style['color'] !== undefined) {\n        this.modal.style.color = this.style['color'];\n      }\n\n      if (this.style['backgroundColor'] !== undefined) {\n        this.modal.style.backgroundColor = this.style['backgroundColor'];\n        this.modal.children[0].children[0].style.stroke = this.style['backgroundColor'];\n        this.modal.children[0].children[0].style.fill = this.style['backgroundColor'];\n      }\n\n      if (this.style['borderRadius'] !== undefined) {\n        this.modal.style.borderRadius = this.style['borderRadius'];\n      }\n\n      if (this.style['padding'] !== undefined) {\n        this.modal.style.padding = this.style['padding'];\n      }\n    } //автозакрытие модального окна, при мисскликах или же спецом вне окна addEventDocument(),removeEventDocument(),checkEventClick(,)\n    //добавления события клика к документу\n\n  }, {\n    key: \"addEventDocument\",\n    value: function addEventDocument(element) {\n      var main = this;\n\n      document.querySelector(element).onmousedown = function (e) {\n        // console.log('This is I');\n        e.stopPropagation();\n      };\n\n      document.onmousedown = function (e) {\n        main.checkEventClick(e, element);\n      };\n    } //удаление события клика к документу\n\n  }, {\n    key: \"checkEventClick\",\n    //проверка клика. Если клик вне модального окна, тогда вызываем метод закрытия модального окна closeModal().\n    value: function checkEventClick(event, target) {\n      var index = PopupMD.checkIndex(target);\n\n      if (index !== -1) {\n        var data_number = PopupMD.list_object.data_number[index];\n        var element = event.target;\n\n        while (true) {\n          if (this.element_off_close.length) {\n            var temp = false;\n\n            for (var i = 0; i < this.element_off_close.length; i++) {\n              if (element.classList.contains(this.element_off_close[i])) {\n                temp = true;\n                break;\n              }\n            }\n\n            if (temp) {\n              break;\n            }\n          }\n\n          if (element.getAttribute('data-number') === data_number.toString()) {\n            break;\n          }\n\n          if (element.nodeName !== 'HTML') {\n            element = element.parentElement;\n          } else {\n            PopupMD.closeModal(index);\n            break;\n          }\n        }\n      }\n    } //закрытие модального окна\n\n  }, {\n    key: \"closeButton\",\n    //закрытие модального окна по клике на кнопку, для более точного определения елемента, используется так же идентификатор контента, если контента не будет, работать также не будет.\n    value: function closeButton(element) {\n      var button = document.querySelector(this.contents + ' ' + this.close_button);\n\n      if (button !== null) {\n        if (!button.hasAttribute('onclick')) {\n          button.setAttribute('onclick', 'PopupMD.closeModal(PopupMD.checkIndex(\\'' + element + '\\'))');\n        }\n      }\n    } //проверка на то, нужно ли закрывать ранее созданное модальное окно (only_one)\n\n  }, {\n    key: \"setListObject\",\n    //добавления в список только что созданых объектов\n    value: function setListObject(element) {\n      var number = 0;\n\n      if (PopupMD.list_object.data_number.length !== 0) {\n        number = PopupMD.list_object.data_number[PopupMD.list_object.data_number.length - 1];\n      }\n\n      this.modal.setAttribute('data-number', number + 1);\n      this.modal.setAttribute('data-modal', 'PopupMD');\n      PopupMD.list_object.element.push(element);\n      PopupMD.list_object.data_number.push(number + 1);\n      PopupMD.list_object.only_one.push(this.only_one);\n      PopupMD.list_object.clone_contents.push(this.clone_contents);\n      PopupMD.list_object.close_auto.push(this.close_auto);\n      PopupMD.list_object[\"this\"].push(this); //console.log('new object');\n    } //Уничтожение класса. Вызывается после добавление модального окна.\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      delete this;\n    }\n  }], [{\n    key: \"removeEventDocument\",\n    value: function removeEventDocument() {\n      document.onmousedown = null;\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal(index) {\n      var target = PopupMD.list_object.data_number[index];\n      var modal = document.querySelector('[data-number=\"' + target + '\"]'); //вызов проверки на дочерние модальные окна. Если модальные окна будут обнаружены, мы создадим рекурсию.\n\n      PopupMD.checkChildrenModal(target);\n\n      if (!PopupMD.list_object.clone_contents[index]) {\n        var body = document.body;\n        modal.children[1].style.display = 'none';\n\n        for (var i = body.children.length - 1; i >= 0; i--) {\n          if (body.children[i].nodeName !== 'SCRIPT') {\n            body.children[i].after(modal.children[1]);\n            break;\n          }\n\n          if (i === 0) {\n            body.append(modal.children[1]);\n          }\n        }\n      } //проверяем не висит ли событие на документе (оно нужно для того что бы закрывать окна вне их клика)\n\n\n      if (PopupMD.list_object.close_auto[index]) {\n        if (document.onmousedown !== null) {\n          PopupMD.removeEventDocument();\n        }\n      }\n\n      PopupMD.list_object.element.splice(index, 1);\n      PopupMD.list_object.data_number.splice(index, 1);\n      PopupMD.list_object.only_one.splice(index, 1);\n      PopupMD.list_object.clone_contents.splice(index, 1);\n      PopupMD.list_object.close_auto.splice(index, 1);\n      PopupMD.list_object[\"this\"].splice(index, 1);\n      modal.remove();\n    } //проверяем есть ли у модального окна, дочерние модальные окна, это избавит нас от потери данных.\n\n  }, {\n    key: \"checkChildrenModal\",\n    value: function checkChildrenModal(target) {\n      var modalChildren = document.querySelector('[data-number=\"' + target + '\"]' + ' ' + '[data-modal=\"PopupMD\"]');\n\n      if (modalChildren !== null) {\n        var number = modalChildren.getAttribute('data-number');\n\n        if (number !== null) {\n          PopupMD.closeModal(PopupMD.checkIndexOnNumber(number));\n        }\n      }\n    }\n  }, {\n    key: \"checkPreviousModal\",\n    value: function checkPreviousModal() {\n      var index = PopupMD.list_object.only_one.length - 1;\n\n      for (var i = index; i >= 0; i--) {\n        //console.log(PopupMD.list_object.only_one[i] + i);\n        if (PopupMD.list_object.only_one[i]) {\n          PopupMD.closeModal(i);\n        } else {//break; //тут возможен баг, когда у родительського модального окна будет параметр only_one=true, а у дочерних наоборот, тогда и родительський елемент останется висеть.\n        }\n      }\n    } //определения индекса модального окна в масиве, по названию атрибута, для дальнейшей работы с ним\n\n  }, {\n    key: \"checkIndex\",\n    value: function checkIndex(element) {\n      //console.log(element);\n      return PopupMD.list_object.element.indexOf(element);\n    } //определения индекса модального окна в масиве, по номеру модального окна, для дальнейшей работы с ним\n\n  }, {\n    key: \"checkIndexOnNumber\",\n    value: function checkIndexOnNumber(number) {\n      return PopupMD.list_object.data_number.indexOf(parseInt(number));\n    }\n  }]);\n\n  return PopupMD;\n}();\n\nPopupMD.list_object = {\n  \"element\": [],\n  //атрибут который затриггерил объект\n  \"data_number\": [],\n  //атрибут по которому можно идентифицировать модально окно\n  \"only_one\": [],\n  //значение что обозначает состояние модального окна, после вызова второго. Закрывать или нет.\n  \"clone_contents\": [],\n  //клонирован ли контент, если нет, то нужно его вернуть по закрытию.\n  \"close_auto\": [],\n  //автозакрытие модального окна\n  \"this\": [] //пока не знаю, пригодится ли этот параметр\n\n}; // Я закончил на том, что обнаружил баг с настройкой \"only_one\", не правильно закрывать только последне открытое модальное окно, нужно закрывать сразу все, так как могут быть вложения.\n// Короче нужно переделать функцию checkPreviousModal()\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PopupMD);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/model/popup.js\n");

/***/ }),

/***/ "./app/js/model/sidebarListsToggle.js":
/*!********************************************!*\
  !*** ./app/js/model/sidebarListsToggle.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// import {OverlayScrollbars} from '../../libs/libs'\n// import {sidebarWrapper} from '../view'\nvar sidebarListsToggle = function sidebarListsToggle(items) {\n  items.forEach(function (item, i, arr) {\n    item.addEventListener('click', function () {\n      arr.forEach(function (a) {\n        a.classList.remove('active');\n      });\n      this.classList.add('active');\n    });\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (sidebarListsToggle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2lkZWJhckxpc3RzVG9nZ2xlLmpzP2ZhODIiXSwibmFtZXMiOlsic2lkZWJhckxpc3RzVG9nZ2xlIiwiaXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsImkiLCJhcnIiLCJhZGRFdmVudExpc3RlbmVyIiwiYSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBR0EsSUFBTUEsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFDQyxLQUFELEVBQVU7QUFDcENBLE9BQUssQ0FBQ0MsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBT0MsQ0FBUCxFQUFVQyxHQUFWLEVBQWlCO0FBRTlCRixRQUFJLENBQUNHLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFlBQVk7QUFDMUNELFNBQUcsQ0FBQ0gsT0FBSixDQUFZLFVBQUFLLENBQUMsRUFBRztBQUNmQSxTQUFDLENBQUNDLFNBQUYsQ0FBWUMsTUFBWixDQUFtQixRQUFuQjtBQUNBLE9BRkQ7QUFHQSxXQUFLRCxTQUFMLENBQWVFLEdBQWYsQ0FBbUIsUUFBbkI7QUFDQSxLQUxEO0FBTUEsR0FSRDtBQVNBLENBVkQ7O0FBZWVWLGlGQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL3NpZGViYXJMaXN0c1RvZ2dsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7T3ZlcmxheVNjcm9sbGJhcnN9IGZyb20gJy4uLy4uL2xpYnMvbGlicydcclxuLy8gaW1wb3J0IHtzaWRlYmFyV3JhcHBlcn0gZnJvbSAnLi4vdmlldydcclxuXHJcblxyXG5jb25zdCBzaWRlYmFyTGlzdHNUb2dnbGUgPSAoaXRlbXMpPT4ge1xyXG5cdGl0ZW1zLmZvckVhY2goKGl0ZW0sIGksIGFycik9PiB7XHJcblx0XHRcclxuXHRcdGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGFyci5mb3JFYWNoKGE9PiB7XHJcblx0XHRcdFx0YS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG5cdFx0XHR9KVxyXG5cdFx0XHR0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcblx0XHR9KVxyXG5cdH0pXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNpZGViYXJMaXN0c1RvZ2dsZVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/sidebarListsToggle.js\n");

/***/ }),

/***/ "./app/js/view/index.js":
/*!******************************!*\
  !*** ./app/js/view/index.js ***!
  \******************************/
/*! exports provided: sidebarWrapper, sidebarListItems, rows */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidebarWrapper\", function() { return sidebarWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidebarListItems\", function() { return sidebarListItems; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rows\", function() { return rows; });\nvar sidebarWrapper = document.querySelector('.sidebar__wrapper');\nvar sidebarListItems = document.querySelectorAll('.sidebar__list-item');\nvar rows = document.querySelectorAll('.row');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvdmlldy9pbmRleC5qcz9hY2Y1Il0sIm5hbWVzIjpbInNpZGViYXJXcmFwcGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2lkZWJhckxpc3RJdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyb3dzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU1BLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLG1CQUF2QixDQUF2QjtBQUNBLElBQU1DLGdCQUFnQixHQUFHRixRQUFRLENBQUNHLGdCQUFULENBQTBCLHFCQUExQixDQUF6QjtBQUNBLElBQU1DLElBQUksR0FBR0osUUFBUSxDQUFDRyxnQkFBVCxDQUEwQixNQUExQixDQUFiIiwiZmlsZSI6Ii4vYXBwL2pzL3ZpZXcvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzaWRlYmFyV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyX193cmFwcGVyJyk7XHJcbmNvbnN0IHNpZGViYXJMaXN0SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2lkZWJhcl9fbGlzdC1pdGVtJyk7XHJcbmNvbnN0IHJvd3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucm93Jyk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0c2lkZWJhcldyYXBwZXIsXHJcblx0c2lkZWJhckxpc3RJdGVtcyxcclxuXHRyb3dzXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/view/index.js\n");

/***/ }),

/***/ "./app/libs/libs.js":
/*!**************************!*\
  !*** ./app/libs/libs.js ***!
  \**************************/
/*! exports provided: OverlayScrollbars, MicroModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var overlayscrollbars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! overlayscrollbars */ \"./node_modules/overlayscrollbars/js/OverlayScrollbars.js\");\n/* harmony import */ var overlayscrollbars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(overlayscrollbars__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"OverlayScrollbars\", function() { return overlayscrollbars__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MicroModal\", function() { return micromodal__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n// import noUiSlider from 'nouislider'\n// import wNumb from 'wNumb'\n// import Chart from 'chart.js'\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGlicy9saWJzLmpzPzcxYWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vYXBwL2xpYnMvbGlicy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBub1VpU2xpZGVyIGZyb20gJ25vdWlzbGlkZXInXHJcbi8vIGltcG9ydCB3TnVtYiBmcm9tICd3TnVtYidcclxuLy8gaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0LmpzJ1xyXG5pbXBvcnQgT3ZlcmxheVNjcm9sbGJhcnMgZnJvbSAnb3ZlcmxheXNjcm9sbGJhcnMnXHJcbmltcG9ydCBNaWNyb01vZGFsIGZyb20gJ21pY3JvbW9kYWwnXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHtcclxuXHRPdmVybGF5U2Nyb2xsYmFycyxcclxuXHRNaWNyb01vZGFsXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/libs/libs.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcz85NzBiIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0Q7QUFDOUMsTUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFDdEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNEO0FBQ0Y7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsZUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz81YmMzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBRSxjQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtBQUNBRCxjQUFVLENBQUNFLFlBQVgsR0FBMEIsSUFBMUI7QUFDQSxRQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QjtBQUMzQkMsVUFBTSxDQUFDQyxjQUFQLENBQXNCVCxNQUF0QixFQUE4QkksVUFBVSxDQUFDTSxHQUF6QyxFQUE4Q04sVUFBOUM7QUFDRDtBQUNGOztBQUVELFNBQVNPLFlBQVQsQ0FBc0JDLFdBQXRCLEVBQW1DQyxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFDMUQsTUFBSUQsVUFBSixFQUFnQmQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBakI7QUFDaEIsTUFBSUMsV0FBSixFQUFpQmYsaUJBQWlCLENBQUNhLFdBQUQsRUFBY0UsV0FBZCxDQUFqQjtBQUNqQixTQUFPRixXQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sWUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanM/NzAzNyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCOztBQUVBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPQSxNQUFNLENBQUNDLFFBQWQsS0FBMkIsUUFBL0QsRUFBeUU7QUFDdkVDLFVBQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQy9DLGFBQU8sT0FBT0EsR0FBZDtBQUNELEtBRkQ7QUFHRCxHQUpELE1BSU87QUFDTEcsVUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxPQUFPLEdBQUcsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDL0MsYUFBT0EsR0FBRyxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBekIsSUFBdUNELEdBQUcsQ0FBQ0ssV0FBSixLQUFvQkosTUFBM0QsSUFBcUVELEdBQUcsS0FBS0MsTUFBTSxDQUFDSyxTQUFwRixHQUFnRyxRQUFoRyxHQUEyRyxPQUFPTixHQUF6SDtBQUNELEtBRkQ7QUFHRDs7QUFFRCxTQUFPRCxPQUFPLENBQUNDLEdBQUQsQ0FBZDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/typeof.js\n");

/***/ }),

/***/ "./node_modules/micromodal/dist/micromodal.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/micromodal/dist/micromodal.es.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar MicroModal = function () {\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(_ref) {\n      var targetModal = _ref.targetModal,\n          _ref$triggers = _ref.triggers,\n          triggers = _ref$triggers === void 0 ? [] : _ref$triggers,\n          _ref$onShow = _ref.onShow,\n          onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,\n          _ref$onClose = _ref.onClose,\n          onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n          _ref$openTrigger = _ref.openTrigger,\n          openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,\n          _ref$closeTrigger = _ref.closeTrigger,\n          closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,\n          _ref$openClass = _ref.openClass,\n          openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,\n          _ref$disableScroll = _ref.disableScroll,\n          disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,\n          _ref$disableFocus = _ref.disableFocus,\n          disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,\n          _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,\n          awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,\n          _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,\n          awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,\n          _ref$debugMode = _ref.debugMode,\n          debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;\n\n      _classCallCheck(this, Modal); // Save a reference of the modal\n\n\n      this.modal = document.getElementById(targetModal); // Save a reference to the passed config\n\n      this.config = {\n        debugMode: debugMode,\n        disableScroll: disableScroll,\n        openTrigger: openTrigger,\n        closeTrigger: closeTrigger,\n        openClass: openClass,\n        onShow: onShow,\n        onClose: onClose,\n        awaitCloseAnimation: awaitCloseAnimation,\n        awaitOpenAnimation: awaitOpenAnimation,\n        disableFocus: disableFocus\n      }; // Register click events only if pre binding eventListeners\n\n      if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners\n\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n\n    _createClass(Modal, [{\n      key: \"registerTriggers\",\n      value: function registerTriggers() {\n        var _this = this;\n\n        for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {\n          triggers[_key] = arguments[_key];\n        }\n\n        triggers.filter(Boolean).forEach(function (trigger) {\n          trigger.addEventListener('click', function (event) {\n            return _this.showModal(event);\n          });\n        });\n      }\n    }, {\n      key: \"showModal\",\n      value: function showModal() {\n        var _this2 = this;\n\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.activeElement = document.activeElement;\n        this.modal.setAttribute('aria-hidden', 'false');\n        this.modal.classList.add(this.config.openClass);\n        this.scrollBehaviour('disable');\n        this.addEventListeners();\n\n        if (this.config.awaitOpenAnimation) {\n          var handler = function handler() {\n            _this2.modal.removeEventListener('animationend', handler, false);\n\n            _this2.setFocusToFirstNode();\n          };\n\n          this.modal.addEventListener('animationend', handler, false);\n        } else {\n          this.setFocusToFirstNode();\n        }\n\n        this.config.onShow(this.modal, this.activeElement, event);\n      }\n    }, {\n      key: \"closeModal\",\n      value: function closeModal() {\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var modal = this.modal;\n        this.modal.setAttribute('aria-hidden', 'true');\n        this.removeEventListeners();\n        this.scrollBehaviour('enable');\n\n        if (this.activeElement && this.activeElement.focus) {\n          this.activeElement.focus();\n        }\n\n        this.config.onClose(this.modal, this.activeElement, event);\n\n        if (this.config.awaitCloseAnimation) {\n          var openClass = this.config.openClass; // <- old school ftw\n\n          this.modal.addEventListener('animationend', function handler() {\n            modal.classList.remove(openClass);\n            modal.removeEventListener('animationend', handler, false);\n          }, false);\n        } else {\n          modal.classList.remove(this.config.openClass);\n        }\n      }\n    }, {\n      key: \"closeModalById\",\n      value: function closeModalById(targetModal) {\n        this.modal = document.getElementById(targetModal);\n        if (this.modal) this.closeModal();\n      }\n    }, {\n      key: \"scrollBehaviour\",\n      value: function scrollBehaviour(toggle) {\n        if (!this.config.disableScroll) return;\n        var body = document.querySelector('body');\n\n        switch (toggle) {\n          case 'enable':\n            Object.assign(body.style, {\n              overflow: ''\n            });\n            break;\n\n          case 'disable':\n            Object.assign(body.style, {\n              overflow: 'hidden'\n            });\n            break;\n        }\n      }\n    }, {\n      key: \"addEventListeners\",\n      value: function addEventListeners() {\n        this.modal.addEventListener('touchstart', this.onClick);\n        this.modal.addEventListener('click', this.onClick);\n        document.addEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"removeEventListeners\",\n      value: function removeEventListeners() {\n        this.modal.removeEventListener('touchstart', this.onClick);\n        this.modal.removeEventListener('click', this.onClick);\n        document.removeEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (event.target.hasAttribute(this.config.closeTrigger)) {\n          this.closeModal(event);\n        }\n      }\n    }, {\n      key: \"onKeydown\",\n      value: function onKeydown(event) {\n        if (event.keyCode === 27) this.closeModal(event); // esc\n\n        if (event.keyCode === 9) this.retainFocus(event); // tab\n      }\n    }, {\n      key: \"getFocusableNodes\",\n      value: function getFocusableNodes() {\n        var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n        return Array.apply(void 0, _toConsumableArray(nodes));\n      }\n      /**\n       * Tries to set focus on a node which is not a close trigger\n       * if no other nodes exist then focuses on first close trigger\n       */\n\n    }, {\n      key: \"setFocusToFirstNode\",\n      value: function setFocusToFirstNode() {\n        var _this3 = this;\n\n        if (this.config.disableFocus) return;\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes\n        // could not think of a better name :(\n\n        var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {\n          return !node.hasAttribute(_this3.config.closeTrigger);\n        });\n        if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n        if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n      }\n    }, {\n      key: \"retainFocus\",\n      value: function retainFocus(event) {\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return;\n        /**\n         * Filters nodes which are hidden to prevent\n         * focus leak outside modal\n         */\n\n        focusableNodes = focusableNodes.filter(function (node) {\n          return node.offsetParent !== null;\n        }); // if disableFocus is true\n\n        if (!this.modal.contains(document.activeElement)) {\n          focusableNodes[0].focus();\n        } else {\n          var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n          if (event.shiftKey && focusedItemIndex === 0) {\n            focusableNodes[focusableNodes.length - 1].focus();\n            event.preventDefault();\n          }\n\n          if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n            focusableNodes[0].focus();\n            event.preventDefault();\n          }\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n  // Keep a reference to the opened modal\n\n\n  var activeModal = null;\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n\n  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {\n    var triggerMap = [];\n    triggers.forEach(function (trigger) {\n      var targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n    return triggerMap;\n  };\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n\n\n  var validateModalPresence = function validateModalPresence(id) {\n    if (!document.getElementById(id)) {\n      console.warn(\"MicroModal: \\u2757Seems like you have missed %c'\".concat(id, \"'\"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<div class=\\\"modal\\\" id=\\\"\".concat(id, \"\\\"></div>\"));\n      return false;\n    }\n  };\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n\n\n  var validateTriggerPresence = function validateTriggerPresence(triggers) {\n    if (triggers.length <= 0) {\n      console.warn(\"MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<a href=\\\"#\\\" data-micromodal-trigger=\\\"my-modal\\\"></a>\");\n      return false;\n    }\n  };\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n\n\n  var validateArgs = function validateArgs(triggers, triggerMap) {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n\n    for (var id in triggerMap) {\n      validateModalPresence(id);\n    }\n\n    return true;\n  };\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n\n\n  var init = function init(config) {\n    // Create an config object with default openTrigger\n    var options = Object.assign({}, {\n      openTrigger: 'data-micromodal-trigger'\n    }, config); // Collects all the nodes with the trigger\n\n    var triggers = _toConsumableArray(document.querySelectorAll(\"[\".concat(options.openTrigger, \"]\"))); // Makes a mappings of modals with their trigger nodes\n\n\n    var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance\n\n    for (var key in triggerMap) {\n      var value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = _toConsumableArray(value);\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n\n\n  var show = function show(targetModal, config) {\n    var options = config || {};\n    options.targetModal = targetModal; // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close\n\n    if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal\n\n    activeModal = new Modal(options); // eslint-disable-line no-new\n\n    activeModal.showModal();\n  };\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n\n\n  var close = function close(targetModal) {\n    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();\n  };\n\n  return {\n    init: init,\n    show: show,\n    close: close\n  };\n}();\n\nwindow.MicroModal = MicroModal;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MicroModal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tb2RhbC9kaXN0L21pY3JvbW9kYWwuZXMuanM/YTFiNyJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmcm9tIiwibyIsIm1pbkxlbiIsIm4iLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiTWljcm9Nb2RhbCIsIkZPQ1VTQUJMRV9FTEVNRU5UUyIsIk1vZGFsIiwiX3JlZiIsInRhcmdldE1vZGFsIiwiX3JlZiR0cmlnZ2VycyIsInRyaWdnZXJzIiwiX3JlZiRvblNob3ciLCJvblNob3ciLCJfcmVmJG9uQ2xvc2UiLCJvbkNsb3NlIiwiX3JlZiRvcGVuVHJpZ2dlciIsIm9wZW5UcmlnZ2VyIiwiX3JlZiRjbG9zZVRyaWdnZXIiLCJjbG9zZVRyaWdnZXIiLCJfcmVmJG9wZW5DbGFzcyIsIm9wZW5DbGFzcyIsIl9yZWYkZGlzYWJsZVNjcm9sbCIsImRpc2FibGVTY3JvbGwiLCJfcmVmJGRpc2FibGVGb2N1cyIsImRpc2FibGVGb2N1cyIsIl9yZWYkYXdhaXRDbG9zZUFuaW1hdCIsImF3YWl0Q2xvc2VBbmltYXRpb24iLCJfcmVmJGF3YWl0T3BlbkFuaW1hdGkiLCJhd2FpdE9wZW5BbmltYXRpb24iLCJfcmVmJGRlYnVnTW9kZSIsImRlYnVnTW9kZSIsIm1vZGFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbmZpZyIsInJlZ2lzdGVyVHJpZ2dlcnMiLCJhcHBseSIsIm9uQ2xpY2siLCJiaW5kIiwib25LZXlkb3duIiwidmFsdWUiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJfa2V5IiwiZmlsdGVyIiwiQm9vbGVhbiIsImZvckVhY2giLCJ0cmlnZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwic2hvd01vZGFsIiwiX3RoaXMyIiwidW5kZWZpbmVkIiwiYWN0aXZlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsInNjcm9sbEJlaGF2aW91ciIsImFkZEV2ZW50TGlzdGVuZXJzIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRGb2N1c1RvRmlyc3ROb2RlIiwiY2xvc2VNb2RhbCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiZm9jdXMiLCJyZW1vdmUiLCJjbG9zZU1vZGFsQnlJZCIsInRvZ2dsZSIsImJvZHkiLCJxdWVyeVNlbGVjdG9yIiwiYXNzaWduIiwic3R5bGUiLCJvdmVyZmxvdyIsImhhc0F0dHJpYnV0ZSIsImtleUNvZGUiLCJyZXRhaW5Gb2N1cyIsImdldEZvY3VzYWJsZU5vZGVzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3RoaXMzIiwiZm9jdXNhYmxlTm9kZXMiLCJub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzIiwibm9kZSIsIm9mZnNldFBhcmVudCIsImNvbnRhaW5zIiwiZm9jdXNlZEl0ZW1JbmRleCIsImluZGV4T2YiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwiYWN0aXZlTW9kYWwiLCJnZW5lcmF0ZVRyaWdnZXJNYXAiLCJ0cmlnZ2VyQXR0ciIsInRyaWdnZXJNYXAiLCJhdHRyaWJ1dGVzIiwicHVzaCIsInZhbGlkYXRlTW9kYWxQcmVzZW5jZSIsImlkIiwiY29uc29sZSIsIndhcm4iLCJjb25jYXQiLCJ2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSIsInZhbGlkYXRlQXJncyIsImluaXQiLCJvcHRpb25zIiwic2hvdyIsImNsb3NlIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLFNBQVNBLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRDtBQUM5QyxNQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QztBQUN0QyxVQUFNLElBQUlDLFNBQUosQ0FBYyxtQ0FBZCxDQUFOO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBRSxjQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtBQUNBRCxjQUFVLENBQUNFLFlBQVgsR0FBMEIsSUFBMUI7QUFDQSxRQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QjtBQUMzQkMsVUFBTSxDQUFDQyxjQUFQLENBQXNCVCxNQUF0QixFQUE4QkksVUFBVSxDQUFDTSxHQUF6QyxFQUE4Q04sVUFBOUM7QUFDRDtBQUNGOztBQUVELFNBQVNPLFlBQVQsQ0FBc0JkLFdBQXRCLEVBQW1DZSxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFDMUQsTUFBSUQsVUFBSixFQUFnQmIsaUJBQWlCLENBQUNGLFdBQVcsQ0FBQ2lCLFNBQWIsRUFBd0JGLFVBQXhCLENBQWpCO0FBQ2hCLE1BQUlDLFdBQUosRUFBaUJkLGlCQUFpQixDQUFDRixXQUFELEVBQWNnQixXQUFkLENBQWpCO0FBQ2pCLFNBQU9oQixXQUFQO0FBQ0Q7O0FBRUQsU0FBU2tCLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztBQUMvQixTQUFPQyxrQkFBa0IsQ0FBQ0QsR0FBRCxDQUFsQixJQUEyQkUsZ0JBQWdCLENBQUNGLEdBQUQsQ0FBM0MsSUFBb0RHLDJCQUEyQixDQUFDSCxHQUFELENBQS9FLElBQXdGSSxrQkFBa0IsRUFBakg7QUFDRDs7QUFFRCxTQUFTSCxrQkFBVCxDQUE0QkQsR0FBNUIsRUFBaUM7QUFDL0IsTUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWNOLEdBQWQsQ0FBSixFQUF3QixPQUFPTyxpQkFBaUIsQ0FBQ1AsR0FBRCxDQUF4QjtBQUN6Qjs7QUFFRCxTQUFTRSxnQkFBVCxDQUEwQk0sSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxNQUFNLENBQUNDLFFBQVAsSUFBbUJsQixNQUFNLENBQUNnQixJQUFELENBQTlELEVBQXNFLE9BQU9ILEtBQUssQ0FBQ00sSUFBTixDQUFXSCxJQUFYLENBQVA7QUFDdkU7O0FBRUQsU0FBU0wsMkJBQVQsQ0FBcUNTLENBQXJDLEVBQXdDQyxNQUF4QyxFQUFnRDtBQUM5QyxNQUFJLENBQUNELENBQUwsRUFBUTtBQUNSLE1BQUksT0FBT0EsQ0FBUCxLQUFhLFFBQWpCLEVBQTJCLE9BQU9MLGlCQUFpQixDQUFDSyxDQUFELEVBQUlDLE1BQUosQ0FBeEI7QUFDM0IsTUFBSUMsQ0FBQyxHQUFHdEIsTUFBTSxDQUFDTSxTQUFQLENBQWlCaUIsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixDQUEvQixFQUFrQ0ssS0FBbEMsQ0FBd0MsQ0FBeEMsRUFBMkMsQ0FBQyxDQUE1QyxDQUFSO0FBQ0EsTUFBSUgsQ0FBQyxLQUFLLFFBQU4sSUFBa0JGLENBQUMsQ0FBQ00sV0FBeEIsRUFBcUNKLENBQUMsR0FBR0YsQ0FBQyxDQUFDTSxXQUFGLENBQWNDLElBQWxCO0FBQ3JDLE1BQUlMLENBQUMsS0FBSyxLQUFOLElBQWVBLENBQUMsS0FBSyxLQUF6QixFQUFnQyxPQUFPVCxLQUFLLENBQUNNLElBQU4sQ0FBV0csQ0FBWCxDQUFQO0FBQ2hDLE1BQUlBLENBQUMsS0FBSyxXQUFOLElBQXFCLDJDQUEyQ00sSUFBM0MsQ0FBZ0ROLENBQWhELENBQXpCLEVBQTZFLE9BQU9QLGlCQUFpQixDQUFDSyxDQUFELEVBQUlDLE1BQUosQ0FBeEI7QUFDOUU7O0FBRUQsU0FBU04saUJBQVQsQ0FBMkJQLEdBQTNCLEVBQWdDcUIsR0FBaEMsRUFBcUM7QUFDbkMsTUFBSUEsR0FBRyxJQUFJLElBQVAsSUFBZUEsR0FBRyxHQUFHckIsR0FBRyxDQUFDYixNQUE3QixFQUFxQ2tDLEdBQUcsR0FBR3JCLEdBQUcsQ0FBQ2IsTUFBVjs7QUFFckMsT0FBSyxJQUFJRCxDQUFDLEdBQUcsQ0FBUixFQUFXb0MsSUFBSSxHQUFHLElBQUlqQixLQUFKLENBQVVnQixHQUFWLENBQXZCLEVBQXVDbkMsQ0FBQyxHQUFHbUMsR0FBM0MsRUFBZ0RuQyxDQUFDLEVBQWpELEVBQXFEb0MsSUFBSSxDQUFDcEMsQ0FBRCxDQUFKLEdBQVVjLEdBQUcsQ0FBQ2QsQ0FBRCxDQUFiOztBQUVyRCxTQUFPb0MsSUFBUDtBQUNEOztBQUVELFNBQVNsQixrQkFBVCxHQUE4QjtBQUM1QixRQUFNLElBQUl0QixTQUFKLENBQWMsc0lBQWQsQ0FBTjtBQUNEOztBQUVELElBQUl5QyxVQUFVLEdBQUcsWUFBWTtBQUUzQixNQUFJQyxrQkFBa0IsR0FBRyxDQUFDLFNBQUQsRUFBWSxZQUFaLEVBQTBCLCtEQUExQixFQUEyRiwyQ0FBM0YsRUFBd0ksNkNBQXhJLEVBQXVMLDJDQUF2TCxFQUFvTyxRQUFwTyxFQUE4TyxRQUE5TyxFQUF3UCxPQUF4UCxFQUFpUSxtQkFBalEsRUFBc1IsaUNBQXRSLENBQXpCOztBQUVBLE1BQUlDLEtBQUssR0FBRyxhQUFhLFlBQVk7QUFDbkMsYUFBU0EsS0FBVCxDQUFlQyxJQUFmLEVBQXFCO0FBQ25CLFVBQUlDLFdBQVcsR0FBR0QsSUFBSSxDQUFDQyxXQUF2QjtBQUFBLFVBQ0lDLGFBQWEsR0FBR0YsSUFBSSxDQUFDRyxRQUR6QjtBQUFBLFVBRUlBLFFBQVEsR0FBR0QsYUFBYSxLQUFLLEtBQUssQ0FBdkIsR0FBMkIsRUFBM0IsR0FBZ0NBLGFBRi9DO0FBQUEsVUFHSUUsV0FBVyxHQUFHSixJQUFJLENBQUNLLE1BSHZCO0FBQUEsVUFJSUEsTUFBTSxHQUFHRCxXQUFXLEtBQUssS0FBSyxDQUFyQixHQUF5QixZQUFZLENBQUUsQ0FBdkMsR0FBMENBLFdBSnZEO0FBQUEsVUFLSUUsWUFBWSxHQUFHTixJQUFJLENBQUNPLE9BTHhCO0FBQUEsVUFNSUEsT0FBTyxHQUFHRCxZQUFZLEtBQUssS0FBSyxDQUF0QixHQUEwQixZQUFZLENBQUUsQ0FBeEMsR0FBMkNBLFlBTnpEO0FBQUEsVUFPSUUsZ0JBQWdCLEdBQUdSLElBQUksQ0FBQ1MsV0FQNUI7QUFBQSxVQVFJQSxXQUFXLEdBQUdELGdCQUFnQixLQUFLLEtBQUssQ0FBMUIsR0FBOEIseUJBQTlCLEdBQTBEQSxnQkFSNUU7QUFBQSxVQVNJRSxpQkFBaUIsR0FBR1YsSUFBSSxDQUFDVyxZQVQ3QjtBQUFBLFVBVUlBLFlBQVksR0FBR0QsaUJBQWlCLEtBQUssS0FBSyxDQUEzQixHQUErQix1QkFBL0IsR0FBeURBLGlCQVY1RTtBQUFBLFVBV0lFLGNBQWMsR0FBR1osSUFBSSxDQUFDYSxTQVgxQjtBQUFBLFVBWUlBLFNBQVMsR0FBR0QsY0FBYyxLQUFLLEtBQUssQ0FBeEIsR0FBNEIsU0FBNUIsR0FBd0NBLGNBWnhEO0FBQUEsVUFhSUUsa0JBQWtCLEdBQUdkLElBQUksQ0FBQ2UsYUFiOUI7QUFBQSxVQWNJQSxhQUFhLEdBQUdELGtCQUFrQixLQUFLLEtBQUssQ0FBNUIsR0FBZ0MsS0FBaEMsR0FBd0NBLGtCQWQ1RDtBQUFBLFVBZUlFLGlCQUFpQixHQUFHaEIsSUFBSSxDQUFDaUIsWUFmN0I7QUFBQSxVQWdCSUEsWUFBWSxHQUFHRCxpQkFBaUIsS0FBSyxLQUFLLENBQTNCLEdBQStCLEtBQS9CLEdBQXVDQSxpQkFoQjFEO0FBQUEsVUFpQklFLHFCQUFxQixHQUFHbEIsSUFBSSxDQUFDbUIsbUJBakJqQztBQUFBLFVBa0JJQSxtQkFBbUIsR0FBR0QscUJBQXFCLEtBQUssS0FBSyxDQUEvQixHQUFtQyxLQUFuQyxHQUEyQ0EscUJBbEJyRTtBQUFBLFVBbUJJRSxxQkFBcUIsR0FBR3BCLElBQUksQ0FBQ3FCLGtCQW5CakM7QUFBQSxVQW9CSUEsa0JBQWtCLEdBQUdELHFCQUFxQixLQUFLLEtBQUssQ0FBL0IsR0FBbUMsS0FBbkMsR0FBMkNBLHFCQXBCcEU7QUFBQSxVQXFCSUUsY0FBYyxHQUFHdEIsSUFBSSxDQUFDdUIsU0FyQjFCO0FBQUEsVUFzQklBLFNBQVMsR0FBR0QsY0FBYyxLQUFLLEtBQUssQ0FBeEIsR0FBNEIsS0FBNUIsR0FBb0NBLGNBdEJwRDs7QUF3QkFyRSxxQkFBZSxDQUFDLElBQUQsRUFBTzhDLEtBQVAsQ0FBZixDQXpCbUIsQ0EyQm5COzs7QUFDQSxXQUFLeUIsS0FBTCxHQUFhQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0J6QixXQUF4QixDQUFiLENBNUJtQixDQTRCZ0M7O0FBRW5ELFdBQUswQixNQUFMLEdBQWM7QUFDWkosaUJBQVMsRUFBRUEsU0FEQztBQUVaUixxQkFBYSxFQUFFQSxhQUZIO0FBR1pOLG1CQUFXLEVBQUVBLFdBSEQ7QUFJWkUsb0JBQVksRUFBRUEsWUFKRjtBQUtaRSxpQkFBUyxFQUFFQSxTQUxDO0FBTVpSLGNBQU0sRUFBRUEsTUFOSTtBQU9aRSxlQUFPLEVBQUVBLE9BUEc7QUFRWlksMkJBQW1CLEVBQUVBLG1CQVJUO0FBU1pFLDBCQUFrQixFQUFFQSxrQkFUUjtBQVVaSixvQkFBWSxFQUFFQTtBQVZGLE9BQWQsQ0E5Qm1CLENBeUNoQjs7QUFFSCxVQUFJZCxRQUFRLENBQUMxQyxNQUFULEdBQWtCLENBQXRCLEVBQXlCLEtBQUttRSxnQkFBTCxDQUFzQkMsS0FBdEIsQ0FBNEIsSUFBNUIsRUFBa0N4RCxrQkFBa0IsQ0FBQzhCLFFBQUQsQ0FBcEQsRUEzQ04sQ0EyQ3VFOztBQUUxRixXQUFLMkIsT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYUMsSUFBYixDQUFrQixJQUFsQixDQUFmO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixLQUFLQSxTQUFMLENBQWVELElBQWYsQ0FBb0IsSUFBcEIsQ0FBakI7QUFDRDtBQUNEOzs7Ozs7O0FBT0E5RCxnQkFBWSxDQUFDOEIsS0FBRCxFQUFRLENBQUM7QUFDbkIvQixTQUFHLEVBQUUsa0JBRGM7QUFFbkJpRSxXQUFLLEVBQUUsU0FBU0wsZ0JBQVQsR0FBNEI7QUFDakMsWUFBSU0sS0FBSyxHQUFHLElBQVo7O0FBRUEsYUFBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQzNFLE1BQXJCLEVBQTZCMEMsUUFBUSxHQUFHLElBQUl4QixLQUFKLENBQVV3RCxJQUFWLENBQXhDLEVBQXlERSxJQUFJLEdBQUcsQ0FBckUsRUFBd0VBLElBQUksR0FBR0YsSUFBL0UsRUFBcUZFLElBQUksRUFBekYsRUFBNkY7QUFDM0ZsQyxrQkFBUSxDQUFDa0MsSUFBRCxDQUFSLEdBQWlCRCxTQUFTLENBQUNDLElBQUQsQ0FBMUI7QUFDRDs7QUFFRGxDLGdCQUFRLENBQUNtQyxNQUFULENBQWdCQyxPQUFoQixFQUF5QkMsT0FBekIsQ0FBaUMsVUFBVUMsT0FBVixFQUFtQjtBQUNsREEsaUJBQU8sQ0FBQ0MsZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsVUFBVUMsS0FBVixFQUFpQjtBQUNqRCxtQkFBT1QsS0FBSyxDQUFDVSxTQUFOLENBQWdCRCxLQUFoQixDQUFQO0FBQ0QsV0FGRDtBQUdELFNBSkQ7QUFLRDtBQWRrQixLQUFELEVBZWpCO0FBQ0QzRSxTQUFHLEVBQUUsV0FESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVNXLFNBQVQsR0FBcUI7QUFDMUIsWUFBSUMsTUFBTSxHQUFHLElBQWI7O0FBRUEsWUFBSUYsS0FBSyxHQUFHUCxTQUFTLENBQUMzRSxNQUFWLEdBQW1CLENBQW5CLElBQXdCMkUsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQlUsU0FBekMsR0FBcURWLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLElBQWhGO0FBQ0EsYUFBS1csYUFBTCxHQUFxQnRCLFFBQVEsQ0FBQ3NCLGFBQTlCO0FBQ0EsYUFBS3ZCLEtBQUwsQ0FBV3dCLFlBQVgsQ0FBd0IsYUFBeEIsRUFBdUMsT0FBdkM7QUFDQSxhQUFLeEIsS0FBTCxDQUFXeUIsU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsS0FBS3ZCLE1BQUwsQ0FBWWQsU0FBckM7QUFDQSxhQUFLc0MsZUFBTCxDQUFxQixTQUFyQjtBQUNBLGFBQUtDLGlCQUFMOztBQUVBLFlBQUksS0FBS3pCLE1BQUwsQ0FBWU4sa0JBQWhCLEVBQW9DO0FBQ2xDLGNBQUlnQyxPQUFPLEdBQUcsU0FBU0EsT0FBVCxHQUFtQjtBQUMvQlIsa0JBQU0sQ0FBQ3JCLEtBQVAsQ0FBYThCLG1CQUFiLENBQWlDLGNBQWpDLEVBQWlERCxPQUFqRCxFQUEwRCxLQUExRDs7QUFFQVIsa0JBQU0sQ0FBQ1UsbUJBQVA7QUFDRCxXQUpEOztBQU1BLGVBQUsvQixLQUFMLENBQVdrQixnQkFBWCxDQUE0QixjQUE1QixFQUE0Q1csT0FBNUMsRUFBcUQsS0FBckQ7QUFDRCxTQVJELE1BUU87QUFDTCxlQUFLRSxtQkFBTDtBQUNEOztBQUVELGFBQUs1QixNQUFMLENBQVl0QixNQUFaLENBQW1CLEtBQUttQixLQUF4QixFQUErQixLQUFLdUIsYUFBcEMsRUFBbURKLEtBQW5EO0FBQ0Q7QUF6QkEsS0FmaUIsRUF5Q2pCO0FBQ0QzRSxTQUFHLEVBQUUsWUFESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVN1QixVQUFULEdBQXNCO0FBQzNCLFlBQUliLEtBQUssR0FBR1AsU0FBUyxDQUFDM0UsTUFBVixHQUFtQixDQUFuQixJQUF3QjJFLFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUJVLFNBQXpDLEdBQXFEVixTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxJQUFoRjtBQUNBLFlBQUlaLEtBQUssR0FBRyxLQUFLQSxLQUFqQjtBQUNBLGFBQUtBLEtBQUwsQ0FBV3dCLFlBQVgsQ0FBd0IsYUFBeEIsRUFBdUMsTUFBdkM7QUFDQSxhQUFLUyxvQkFBTDtBQUNBLGFBQUtOLGVBQUwsQ0FBcUIsUUFBckI7O0FBRUEsWUFBSSxLQUFLSixhQUFMLElBQXNCLEtBQUtBLGFBQUwsQ0FBbUJXLEtBQTdDLEVBQW9EO0FBQ2xELGVBQUtYLGFBQUwsQ0FBbUJXLEtBQW5CO0FBQ0Q7O0FBRUQsYUFBSy9CLE1BQUwsQ0FBWXBCLE9BQVosQ0FBb0IsS0FBS2lCLEtBQXpCLEVBQWdDLEtBQUt1QixhQUFyQyxFQUFvREosS0FBcEQ7O0FBRUEsWUFBSSxLQUFLaEIsTUFBTCxDQUFZUixtQkFBaEIsRUFBcUM7QUFDbkMsY0FBSU4sU0FBUyxHQUFHLEtBQUtjLE1BQUwsQ0FBWWQsU0FBNUIsQ0FEbUMsQ0FDSTs7QUFFdkMsZUFBS1csS0FBTCxDQUFXa0IsZ0JBQVgsQ0FBNEIsY0FBNUIsRUFBNEMsU0FBU1csT0FBVCxHQUFtQjtBQUM3RDdCLGlCQUFLLENBQUN5QixTQUFOLENBQWdCVSxNQUFoQixDQUF1QjlDLFNBQXZCO0FBQ0FXLGlCQUFLLENBQUM4QixtQkFBTixDQUEwQixjQUExQixFQUEwQ0QsT0FBMUMsRUFBbUQsS0FBbkQ7QUFDRCxXQUhELEVBR0csS0FISDtBQUlELFNBUEQsTUFPTztBQUNMN0IsZUFBSyxDQUFDeUIsU0FBTixDQUFnQlUsTUFBaEIsQ0FBdUIsS0FBS2hDLE1BQUwsQ0FBWWQsU0FBbkM7QUFDRDtBQUNGO0FBekJBLEtBekNpQixFQW1FakI7QUFDRDdDLFNBQUcsRUFBRSxnQkFESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVMyQixjQUFULENBQXdCM0QsV0FBeEIsRUFBcUM7QUFDMUMsYUFBS3VCLEtBQUwsR0FBYUMsUUFBUSxDQUFDQyxjQUFULENBQXdCekIsV0FBeEIsQ0FBYjtBQUNBLFlBQUksS0FBS3VCLEtBQVQsRUFBZ0IsS0FBS2dDLFVBQUw7QUFDakI7QUFMQSxLQW5FaUIsRUF5RWpCO0FBQ0R4RixTQUFHLEVBQUUsaUJBREo7QUFFRGlFLFdBQUssRUFBRSxTQUFTa0IsZUFBVCxDQUF5QlUsTUFBekIsRUFBaUM7QUFDdEMsWUFBSSxDQUFDLEtBQUtsQyxNQUFMLENBQVlaLGFBQWpCLEVBQWdDO0FBQ2hDLFlBQUkrQyxJQUFJLEdBQUdyQyxRQUFRLENBQUNzQyxhQUFULENBQXVCLE1BQXZCLENBQVg7O0FBRUEsZ0JBQVFGLE1BQVI7QUFDRSxlQUFLLFFBQUw7QUFDRS9GLGtCQUFNLENBQUNrRyxNQUFQLENBQWNGLElBQUksQ0FBQ0csS0FBbkIsRUFBMEI7QUFDeEJDLHNCQUFRLEVBQUU7QUFEYyxhQUExQjtBQUdBOztBQUVGLGVBQUssU0FBTDtBQUNFcEcsa0JBQU0sQ0FBQ2tHLE1BQVAsQ0FBY0YsSUFBSSxDQUFDRyxLQUFuQixFQUEwQjtBQUN4QkMsc0JBQVEsRUFBRTtBQURjLGFBQTFCO0FBR0E7QUFYSjtBQWFEO0FBbkJBLEtBekVpQixFQTZGakI7QUFDRGxHLFNBQUcsRUFBRSxtQkFESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVNtQixpQkFBVCxHQUE2QjtBQUNsQyxhQUFLNUIsS0FBTCxDQUFXa0IsZ0JBQVgsQ0FBNEIsWUFBNUIsRUFBMEMsS0FBS1osT0FBL0M7QUFDQSxhQUFLTixLQUFMLENBQVdrQixnQkFBWCxDQUE0QixPQUE1QixFQUFxQyxLQUFLWixPQUExQztBQUNBTCxnQkFBUSxDQUFDaUIsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUMsS0FBS1YsU0FBMUM7QUFDRDtBQU5BLEtBN0ZpQixFQW9HakI7QUFDRGhFLFNBQUcsRUFBRSxzQkFESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVN3QixvQkFBVCxHQUFnQztBQUNyQyxhQUFLakMsS0FBTCxDQUFXOEIsbUJBQVgsQ0FBK0IsWUFBL0IsRUFBNkMsS0FBS3hCLE9BQWxEO0FBQ0EsYUFBS04sS0FBTCxDQUFXOEIsbUJBQVgsQ0FBK0IsT0FBL0IsRUFBd0MsS0FBS3hCLE9BQTdDO0FBQ0FMLGdCQUFRLENBQUM2QixtQkFBVCxDQUE2QixTQUE3QixFQUF3QyxLQUFLdEIsU0FBN0M7QUFDRDtBQU5BLEtBcEdpQixFQTJHakI7QUFDRGhFLFNBQUcsRUFBRSxTQURKO0FBRURpRSxXQUFLLEVBQUUsU0FBU0gsT0FBVCxDQUFpQmEsS0FBakIsRUFBd0I7QUFDN0IsWUFBSUEsS0FBSyxDQUFDckYsTUFBTixDQUFhNkcsWUFBYixDQUEwQixLQUFLeEMsTUFBTCxDQUFZaEIsWUFBdEMsQ0FBSixFQUF5RDtBQUN2RCxlQUFLNkMsVUFBTCxDQUFnQmIsS0FBaEI7QUFDRDtBQUNGO0FBTkEsS0EzR2lCLEVBa0hqQjtBQUNEM0UsU0FBRyxFQUFFLFdBREo7QUFFRGlFLFdBQUssRUFBRSxTQUFTRCxTQUFULENBQW1CVyxLQUFuQixFQUEwQjtBQUMvQixZQUFJQSxLQUFLLENBQUN5QixPQUFOLEtBQWtCLEVBQXRCLEVBQTBCLEtBQUtaLFVBQUwsQ0FBZ0JiLEtBQWhCLEVBREssQ0FDbUI7O0FBRWxELFlBQUlBLEtBQUssQ0FBQ3lCLE9BQU4sS0FBa0IsQ0FBdEIsRUFBeUIsS0FBS0MsV0FBTCxDQUFpQjFCLEtBQWpCLEVBSE0sQ0FHbUI7QUFDbkQ7QUFOQSxLQWxIaUIsRUF5SGpCO0FBQ0QzRSxTQUFHLEVBQUUsbUJBREo7QUFFRGlFLFdBQUssRUFBRSxTQUFTcUMsaUJBQVQsR0FBNkI7QUFDbEMsWUFBSUMsS0FBSyxHQUFHLEtBQUsvQyxLQUFMLENBQVdnRCxnQkFBWCxDQUE0QjFFLGtCQUE1QixDQUFaO0FBQ0EsZUFBT25CLEtBQUssQ0FBQ2tELEtBQU4sQ0FBWSxLQUFLLENBQWpCLEVBQW9CeEQsa0JBQWtCLENBQUNrRyxLQUFELENBQXRDLENBQVA7QUFDRDtBQUNEOzs7OztBQU5DLEtBekhpQixFQW9JakI7QUFDRHZHLFNBQUcsRUFBRSxxQkFESjtBQUVEaUUsV0FBSyxFQUFFLFNBQVNzQixtQkFBVCxHQUErQjtBQUNwQyxZQUFJa0IsTUFBTSxHQUFHLElBQWI7O0FBRUEsWUFBSSxLQUFLOUMsTUFBTCxDQUFZVixZQUFoQixFQUE4QjtBQUM5QixZQUFJeUQsY0FBYyxHQUFHLEtBQUtKLGlCQUFMLEVBQXJCLENBSm9DLENBSVc7O0FBRS9DLFlBQUlJLGNBQWMsQ0FBQ2pILE1BQWYsS0FBMEIsQ0FBOUIsRUFBaUMsT0FORyxDQU1LO0FBQ3pDOztBQUVBLFlBQUlrSCw0QkFBNEIsR0FBR0QsY0FBYyxDQUFDcEMsTUFBZixDQUFzQixVQUFVc0MsSUFBVixFQUFnQjtBQUN2RSxpQkFBTyxDQUFDQSxJQUFJLENBQUNULFlBQUwsQ0FBa0JNLE1BQU0sQ0FBQzlDLE1BQVAsQ0FBY2hCLFlBQWhDLENBQVI7QUFDRCxTQUZrQyxDQUFuQztBQUdBLFlBQUlnRSw0QkFBNEIsQ0FBQ2xILE1BQTdCLEdBQXNDLENBQTFDLEVBQTZDa0gsNEJBQTRCLENBQUMsQ0FBRCxDQUE1QixDQUFnQ2pCLEtBQWhDO0FBQzdDLFlBQUlpQiw0QkFBNEIsQ0FBQ2xILE1BQTdCLEtBQXdDLENBQTVDLEVBQStDaUgsY0FBYyxDQUFDLENBQUQsQ0FBZCxDQUFrQmhCLEtBQWxCO0FBQ2hEO0FBaEJBLEtBcElpQixFQXFKakI7QUFDRDFGLFNBQUcsRUFBRSxhQURKO0FBRURpRSxXQUFLLEVBQUUsU0FBU29DLFdBQVQsQ0FBcUIxQixLQUFyQixFQUE0QjtBQUNqQyxZQUFJK0IsY0FBYyxHQUFHLEtBQUtKLGlCQUFMLEVBQXJCLENBRGlDLENBQ2M7O0FBRS9DLFlBQUlJLGNBQWMsQ0FBQ2pILE1BQWYsS0FBMEIsQ0FBOUIsRUFBaUM7QUFDakM7Ozs7O0FBS0FpSCxzQkFBYyxHQUFHQSxjQUFjLENBQUNwQyxNQUFmLENBQXNCLFVBQVVzQyxJQUFWLEVBQWdCO0FBQ3JELGlCQUFPQSxJQUFJLENBQUNDLFlBQUwsS0FBc0IsSUFBN0I7QUFDRCxTQUZnQixDQUFqQixDQVRpQyxDQVc3Qjs7QUFFSixZQUFJLENBQUMsS0FBS3JELEtBQUwsQ0FBV3NELFFBQVgsQ0FBb0JyRCxRQUFRLENBQUNzQixhQUE3QixDQUFMLEVBQWtEO0FBQ2hEMkIsd0JBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0JoQixLQUFsQjtBQUNELFNBRkQsTUFFTztBQUNMLGNBQUlxQixnQkFBZ0IsR0FBR0wsY0FBYyxDQUFDTSxPQUFmLENBQXVCdkQsUUFBUSxDQUFDc0IsYUFBaEMsQ0FBdkI7O0FBRUEsY0FBSUosS0FBSyxDQUFDc0MsUUFBTixJQUFrQkYsZ0JBQWdCLEtBQUssQ0FBM0MsRUFBOEM7QUFDNUNMLDBCQUFjLENBQUNBLGNBQWMsQ0FBQ2pILE1BQWYsR0FBd0IsQ0FBekIsQ0FBZCxDQUEwQ2lHLEtBQTFDO0FBQ0FmLGlCQUFLLENBQUN1QyxjQUFOO0FBQ0Q7O0FBRUQsY0FBSSxDQUFDdkMsS0FBSyxDQUFDc0MsUUFBUCxJQUFtQlAsY0FBYyxDQUFDakgsTUFBZixHQUF3QixDQUEzQyxJQUFnRHNILGdCQUFnQixLQUFLTCxjQUFjLENBQUNqSCxNQUFmLEdBQXdCLENBQWpHLEVBQW9HO0FBQ2xHaUgsMEJBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0JoQixLQUFsQjtBQUNBZixpQkFBSyxDQUFDdUMsY0FBTjtBQUNEO0FBQ0Y7QUFDRjtBQTlCQSxLQXJKaUIsQ0FBUixDQUFaOztBQXNMQSxXQUFPbkYsS0FBUDtBQUNELEdBL093QixFQUF6QjtBQWdQQTs7Ozs7QUFLQTs7O0FBR0EsTUFBSW9GLFdBQVcsR0FBRyxJQUFsQjtBQUNBOzs7Ozs7OztBQVFBLE1BQUlDLGtCQUFrQixHQUFHLFNBQVNBLGtCQUFULENBQTRCakYsUUFBNUIsRUFBc0NrRixXQUF0QyxFQUFtRDtBQUMxRSxRQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFDQW5GLFlBQVEsQ0FBQ3FDLE9BQVQsQ0FBaUIsVUFBVUMsT0FBVixFQUFtQjtBQUNsQyxVQUFJeEMsV0FBVyxHQUFHd0MsT0FBTyxDQUFDOEMsVUFBUixDQUFtQkYsV0FBbkIsRUFBZ0NwRCxLQUFsRDtBQUNBLFVBQUlxRCxVQUFVLENBQUNyRixXQUFELENBQVYsS0FBNEI2QyxTQUFoQyxFQUEyQ3dDLFVBQVUsQ0FBQ3JGLFdBQUQsQ0FBVixHQUEwQixFQUExQjtBQUMzQ3FGLGdCQUFVLENBQUNyRixXQUFELENBQVYsQ0FBd0J1RixJQUF4QixDQUE2Qi9DLE9BQTdCO0FBQ0QsS0FKRDtBQUtBLFdBQU82QyxVQUFQO0FBQ0QsR0FSRDtBQVNBOzs7Ozs7OztBQVFBLE1BQUlHLHFCQUFxQixHQUFHLFNBQVNBLHFCQUFULENBQStCQyxFQUEvQixFQUFtQztBQUM3RCxRQUFJLENBQUNqRSxRQUFRLENBQUNDLGNBQVQsQ0FBd0JnRSxFQUF4QixDQUFMLEVBQWtDO0FBQ2hDQyxhQUFPLENBQUNDLElBQVIsQ0FBYSxtREFBbURDLE1BQW5ELENBQTBESCxFQUExRCxFQUE4RCxHQUE5RCxDQUFiLEVBQWlGLDZEQUFqRixFQUFnSiwrREFBaEo7QUFDQUMsYUFBTyxDQUFDQyxJQUFSLENBQWEsWUFBYixFQUEyQiw2REFBM0IsRUFBMEYsNkJBQTZCQyxNQUE3QixDQUFvQ0gsRUFBcEMsRUFBd0MsV0FBeEMsQ0FBMUY7QUFDQSxhQUFPLEtBQVA7QUFDRDtBQUNGLEdBTkQ7QUFPQTs7Ozs7Ozs7QUFRQSxNQUFJSSx1QkFBdUIsR0FBRyxTQUFTQSx1QkFBVCxDQUFpQzNGLFFBQWpDLEVBQTJDO0FBQ3ZFLFFBQUlBLFFBQVEsQ0FBQzFDLE1BQVQsSUFBbUIsQ0FBdkIsRUFBMEI7QUFDeEJrSSxhQUFPLENBQUNDLElBQVIsQ0FBYSxzRUFBYixFQUFxRiw2REFBckYsRUFBb0osaUJBQXBKO0FBQ0FELGFBQU8sQ0FBQ0MsSUFBUixDQUFhLFlBQWIsRUFBMkIsNkRBQTNCLEVBQTBGLHlEQUExRjtBQUNBLGFBQU8sS0FBUDtBQUNEO0FBQ0YsR0FORDtBQU9BOzs7Ozs7Ozs7QUFTQSxNQUFJRyxZQUFZLEdBQUcsU0FBU0EsWUFBVCxDQUFzQjVGLFFBQXRCLEVBQWdDbUYsVUFBaEMsRUFBNEM7QUFDN0RRLDJCQUF1QixDQUFDM0YsUUFBRCxDQUF2QjtBQUNBLFFBQUksQ0FBQ21GLFVBQUwsRUFBaUIsT0FBTyxJQUFQOztBQUVqQixTQUFLLElBQUlJLEVBQVQsSUFBZUosVUFBZixFQUEyQjtBQUN6QkcsMkJBQXFCLENBQUNDLEVBQUQsQ0FBckI7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQVREO0FBVUE7Ozs7Ozs7QUFPQSxNQUFJTSxJQUFJLEdBQUcsU0FBU0EsSUFBVCxDQUFjckUsTUFBZCxFQUFzQjtBQUMvQjtBQUNBLFFBQUlzRSxPQUFPLEdBQUduSSxNQUFNLENBQUNrRyxNQUFQLENBQWMsRUFBZCxFQUFrQjtBQUM5QnZELGlCQUFXLEVBQUU7QUFEaUIsS0FBbEIsRUFFWGtCLE1BRlcsQ0FBZCxDQUYrQixDQUluQjs7QUFFWixRQUFJeEIsUUFBUSxHQUFHOUIsa0JBQWtCLENBQUNvRCxRQUFRLENBQUMrQyxnQkFBVCxDQUEwQixJQUFJcUIsTUFBSixDQUFXSSxPQUFPLENBQUN4RixXQUFuQixFQUFnQyxHQUFoQyxDQUExQixDQUFELENBQWpDLENBTitCLENBTXFFOzs7QUFHcEcsUUFBSTZFLFVBQVUsR0FBR0Ysa0JBQWtCLENBQUNqRixRQUFELEVBQVc4RixPQUFPLENBQUN4RixXQUFuQixDQUFuQyxDQVQrQixDQVNxQzs7QUFFcEUsUUFBSXdGLE9BQU8sQ0FBQzFFLFNBQVIsS0FBc0IsSUFBdEIsSUFBOEJ3RSxZQUFZLENBQUM1RixRQUFELEVBQVdtRixVQUFYLENBQVosS0FBdUMsS0FBekUsRUFBZ0YsT0FYakQsQ0FXeUQ7O0FBRXhGLFNBQUssSUFBSXRILEdBQVQsSUFBZ0JzSCxVQUFoQixFQUE0QjtBQUMxQixVQUFJckQsS0FBSyxHQUFHcUQsVUFBVSxDQUFDdEgsR0FBRCxDQUF0QjtBQUNBaUksYUFBTyxDQUFDaEcsV0FBUixHQUFzQmpDLEdBQXRCO0FBQ0FpSSxhQUFPLENBQUM5RixRQUFSLEdBQW1COUIsa0JBQWtCLENBQUM0RCxLQUFELENBQXJDO0FBQ0FrRCxpQkFBVyxHQUFHLElBQUlwRixLQUFKLENBQVVrRyxPQUFWLENBQWQsQ0FKMEIsQ0FJUTtBQUNuQztBQUNGLEdBbkJEO0FBb0JBOzs7Ozs7OztBQVFBLE1BQUlDLElBQUksR0FBRyxTQUFTQSxJQUFULENBQWNqRyxXQUFkLEVBQTJCMEIsTUFBM0IsRUFBbUM7QUFDNUMsUUFBSXNFLE9BQU8sR0FBR3RFLE1BQU0sSUFBSSxFQUF4QjtBQUNBc0UsV0FBTyxDQUFDaEcsV0FBUixHQUFzQkEsV0FBdEIsQ0FGNEMsQ0FFVDs7QUFFbkMsUUFBSWdHLE9BQU8sQ0FBQzFFLFNBQVIsS0FBc0IsSUFBdEIsSUFBOEJrRSxxQkFBcUIsQ0FBQ3hGLFdBQUQsQ0FBckIsS0FBdUMsS0FBekUsRUFBZ0YsT0FKcEMsQ0FJNEM7O0FBRXhGLFFBQUlrRixXQUFKLEVBQWlCQSxXQUFXLENBQUMxQixvQkFBWixHQU4yQixDQU1TOztBQUVyRDBCLGVBQVcsR0FBRyxJQUFJcEYsS0FBSixDQUFVa0csT0FBVixDQUFkLENBUjRDLENBUVY7O0FBRWxDZCxlQUFXLENBQUN2QyxTQUFaO0FBQ0QsR0FYRDtBQVlBOzs7Ozs7O0FBT0EsTUFBSXVELEtBQUssR0FBRyxTQUFTQSxLQUFULENBQWVsRyxXQUFmLEVBQTRCO0FBQ3RDQSxlQUFXLEdBQUdrRixXQUFXLENBQUN2QixjQUFaLENBQTJCM0QsV0FBM0IsQ0FBSCxHQUE2Q2tGLFdBQVcsQ0FBQzNCLFVBQVosRUFBeEQ7QUFDRCxHQUZEOztBQUlBLFNBQU87QUFDTHdDLFFBQUksRUFBRUEsSUFERDtBQUVMRSxRQUFJLEVBQUVBLElBRkQ7QUFHTEMsU0FBSyxFQUFFQTtBQUhGLEdBQVA7QUFLRCxDQTlYZ0IsRUFBakI7O0FBK1hBQyxNQUFNLENBQUN2RyxVQUFQLEdBQW9CQSxVQUFwQjtBQUVlQSx5RUFBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9taWNyb21vZGFsL2Rpc3QvbWljcm9tb2RhbC5lcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obik7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgTWljcm9Nb2RhbCA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgRk9DVVNBQkxFX0VMRU1FTlRTID0gWydhW2hyZWZdJywgJ2FyZWFbaHJlZl0nLCAnaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdHlwZT1cImhpZGRlblwiXSk6bm90KFthcmlhLWhpZGRlbl0pJywgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pJywgJ3RleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnaWZyYW1lJywgJ29iamVjdCcsICdlbWJlZCcsICdbY29udGVudGVkaXRhYmxlXScsICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXhePVwiLVwiXSknXTtcblxuICB2YXIgTW9kYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsKF9yZWYpIHtcbiAgICAgIHZhciB0YXJnZXRNb2RhbCA9IF9yZWYudGFyZ2V0TW9kYWwsXG4gICAgICAgICAgX3JlZiR0cmlnZ2VycyA9IF9yZWYudHJpZ2dlcnMsXG4gICAgICAgICAgdHJpZ2dlcnMgPSBfcmVmJHRyaWdnZXJzID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkdHJpZ2dlcnMsXG4gICAgICAgICAgX3JlZiRvblNob3cgPSBfcmVmLm9uU2hvdyxcbiAgICAgICAgICBvblNob3cgPSBfcmVmJG9uU2hvdyA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uU2hvdyxcbiAgICAgICAgICBfcmVmJG9uQ2xvc2UgPSBfcmVmLm9uQ2xvc2UsXG4gICAgICAgICAgb25DbG9zZSA9IF9yZWYkb25DbG9zZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xvc2UsXG4gICAgICAgICAgX3JlZiRvcGVuVHJpZ2dlciA9IF9yZWYub3BlblRyaWdnZXIsXG4gICAgICAgICAgb3BlblRyaWdnZXIgPSBfcmVmJG9wZW5UcmlnZ2VyID09PSB2b2lkIDAgPyAnZGF0YS1taWNyb21vZGFsLXRyaWdnZXInIDogX3JlZiRvcGVuVHJpZ2dlcixcbiAgICAgICAgICBfcmVmJGNsb3NlVHJpZ2dlciA9IF9yZWYuY2xvc2VUcmlnZ2VyLFxuICAgICAgICAgIGNsb3NlVHJpZ2dlciA9IF9yZWYkY2xvc2VUcmlnZ2VyID09PSB2b2lkIDAgPyAnZGF0YS1taWNyb21vZGFsLWNsb3NlJyA6IF9yZWYkY2xvc2VUcmlnZ2VyLFxuICAgICAgICAgIF9yZWYkb3BlbkNsYXNzID0gX3JlZi5vcGVuQ2xhc3MsXG4gICAgICAgICAgb3BlbkNsYXNzID0gX3JlZiRvcGVuQ2xhc3MgPT09IHZvaWQgMCA/ICdpcy1vcGVuJyA6IF9yZWYkb3BlbkNsYXNzLFxuICAgICAgICAgIF9yZWYkZGlzYWJsZVNjcm9sbCA9IF9yZWYuZGlzYWJsZVNjcm9sbCxcbiAgICAgICAgICBkaXNhYmxlU2Nyb2xsID0gX3JlZiRkaXNhYmxlU2Nyb2xsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGlzYWJsZVNjcm9sbCxcbiAgICAgICAgICBfcmVmJGRpc2FibGVGb2N1cyA9IF9yZWYuZGlzYWJsZUZvY3VzLFxuICAgICAgICAgIGRpc2FibGVGb2N1cyA9IF9yZWYkZGlzYWJsZUZvY3VzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGlzYWJsZUZvY3VzLFxuICAgICAgICAgIF9yZWYkYXdhaXRDbG9zZUFuaW1hdCA9IF9yZWYuYXdhaXRDbG9zZUFuaW1hdGlvbixcbiAgICAgICAgICBhd2FpdENsb3NlQW5pbWF0aW9uID0gX3JlZiRhd2FpdENsb3NlQW5pbWF0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkYXdhaXRDbG9zZUFuaW1hdCxcbiAgICAgICAgICBfcmVmJGF3YWl0T3BlbkFuaW1hdGkgPSBfcmVmLmF3YWl0T3BlbkFuaW1hdGlvbixcbiAgICAgICAgICBhd2FpdE9wZW5BbmltYXRpb24gPSBfcmVmJGF3YWl0T3BlbkFuaW1hdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRhd2FpdE9wZW5BbmltYXRpLFxuICAgICAgICAgIF9yZWYkZGVidWdNb2RlID0gX3JlZi5kZWJ1Z01vZGUsXG4gICAgICAgICAgZGVidWdNb2RlID0gX3JlZiRkZWJ1Z01vZGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkZWJ1Z01vZGU7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICAgIC8vIFNhdmUgYSByZWZlcmVuY2Ugb2YgdGhlIG1vZGFsXG4gICAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0TW9kYWwpOyAvLyBTYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXNzZWQgY29uZmlnXG5cbiAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICBkZWJ1Z01vZGU6IGRlYnVnTW9kZSxcbiAgICAgICAgZGlzYWJsZVNjcm9sbDogZGlzYWJsZVNjcm9sbCxcbiAgICAgICAgb3BlblRyaWdnZXI6IG9wZW5UcmlnZ2VyLFxuICAgICAgICBjbG9zZVRyaWdnZXI6IGNsb3NlVHJpZ2dlcixcbiAgICAgICAgb3BlbkNsYXNzOiBvcGVuQ2xhc3MsXG4gICAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgICBhd2FpdENsb3NlQW5pbWF0aW9uOiBhd2FpdENsb3NlQW5pbWF0aW9uLFxuICAgICAgICBhd2FpdE9wZW5BbmltYXRpb246IGF3YWl0T3BlbkFuaW1hdGlvbixcbiAgICAgICAgZGlzYWJsZUZvY3VzOiBkaXNhYmxlRm9jdXNcbiAgICAgIH07IC8vIFJlZ2lzdGVyIGNsaWNrIGV2ZW50cyBvbmx5IGlmIHByZSBiaW5kaW5nIGV2ZW50TGlzdGVuZXJzXG5cbiAgICAgIGlmICh0cmlnZ2Vycy5sZW5ndGggPiAwKSB0aGlzLnJlZ2lzdGVyVHJpZ2dlcnMuYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KHRyaWdnZXJzKSk7IC8vIHByZSBiaW5kIGZ1bmN0aW9ucyBmb3IgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5vbktleWRvd24gPSB0aGlzLm9uS2V5ZG93bi5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29wcyB0aHJvdWdoIGFsbCBvcGVuVHJpZ2dlcnMgYW5kIGJpbmRzIGNsaWNrIGV2ZW50XG4gICAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzIFtBcnJheSBvZiBub2RlIGVsZW1lbnRzXVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgW3tcbiAgICAgIGtleTogXCJyZWdpc3RlclRyaWdnZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJUcmlnZ2VycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdHJpZ2dlcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgdHJpZ2dlcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB0cmlnZ2Vycy5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zaG93TW9kYWwoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hvd01vZGFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd01vZGFsKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMubW9kYWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQodGhpcy5jb25maWcub3BlbkNsYXNzKTtcbiAgICAgICAgdGhpcy5zY3JvbGxCZWhhdmlvdXIoJ2Rpc2FibGUnKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hd2FpdE9wZW5BbmltYXRpb24pIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICBfdGhpczIubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpO1xuXG4gICAgICAgICAgICBfdGhpczIuc2V0Rm9jdXNUb0ZpcnN0Tm9kZSgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEZvY3VzVG9GaXJzdE5vZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29uZmlnLm9uU2hvdyh0aGlzLm1vZGFsLCB0aGlzLmFjdGl2ZUVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xvc2VNb2RhbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gICAgICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgdmFyIG1vZGFsID0gdGhpcy5tb2RhbDtcbiAgICAgICAgdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnNjcm9sbEJlaGF2aW91cignZW5hYmxlJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudCAmJiB0aGlzLmFjdGl2ZUVsZW1lbnQuZm9jdXMpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29uZmlnLm9uQ2xvc2UodGhpcy5tb2RhbCwgdGhpcy5hY3RpdmVFbGVtZW50LCBldmVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF3YWl0Q2xvc2VBbmltYXRpb24pIHtcbiAgICAgICAgICB2YXIgb3BlbkNsYXNzID0gdGhpcy5jb25maWcub3BlbkNsYXNzOyAvLyA8LSBvbGQgc2Nob29sIGZ0d1xuXG4gICAgICAgICAgdGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShvcGVuQ2xhc3MpO1xuICAgICAgICAgICAgbW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY29uZmlnLm9wZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xvc2VNb2RhbEJ5SWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZU1vZGFsQnlJZCh0YXJnZXRNb2RhbCkge1xuICAgICAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0TW9kYWwpO1xuICAgICAgICBpZiAodGhpcy5tb2RhbCkgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNjcm9sbEJlaGF2aW91clwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbEJlaGF2aW91cih0b2dnbGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5kaXNhYmxlU2Nyb2xsKSByZXR1cm47XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXG4gICAgICAgIHN3aXRjaCAodG9nZ2xlKSB7XG4gICAgICAgICAgY2FzZSAnZW5hYmxlJzpcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm9keS5zdHlsZSwge1xuICAgICAgICAgICAgICBvdmVyZmxvdzogJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdkaXNhYmxlJzpcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm9keS5zdHlsZSwge1xuICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgdGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5ZG93bik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbW92ZUV2ZW50TGlzdGVuZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25DbGljayk7XG4gICAgICAgIHRoaXMubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleWRvd24pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvbkNsaWNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZSh0aGlzLmNvbmZpZy5jbG9zZVRyaWdnZXIpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvbktleWRvd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbktleWRvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB0aGlzLmNsb3NlTW9kYWwoZXZlbnQpOyAvLyBlc2NcblxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gOSkgdGhpcy5yZXRhaW5Gb2N1cyhldmVudCk7IC8vIHRhYlxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRGb2N1c2FibGVOb2Rlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvY3VzYWJsZU5vZGVzKCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX0VMRU1FTlRTKTtcbiAgICAgICAgcmV0dXJuIEFycmF5LmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KG5vZGVzKSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFRyaWVzIHRvIHNldCBmb2N1cyBvbiBhIG5vZGUgd2hpY2ggaXMgbm90IGEgY2xvc2UgdHJpZ2dlclxuICAgICAgICogaWYgbm8gb3RoZXIgbm9kZXMgZXhpc3QgdGhlbiBmb2N1c2VzIG9uIGZpcnN0IGNsb3NlIHRyaWdnZXJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInNldEZvY3VzVG9GaXJzdE5vZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c1RvRmlyc3ROb2RlKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuZGlzYWJsZUZvY3VzKSByZXR1cm47XG4gICAgICAgIHZhciBmb2N1c2FibGVOb2RlcyA9IHRoaXMuZ2V0Rm9jdXNhYmxlTm9kZXMoKTsgLy8gbm8gZm9jdXNhYmxlIG5vZGVzXG5cbiAgICAgICAgaWYgKGZvY3VzYWJsZU5vZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyByZW1vdmUgbm9kZXMgb24gd2hvc2UgY2xpY2ssIHRoZSBtb2RhbCBjbG9zZXNcbiAgICAgICAgLy8gY291bGQgbm90IHRoaW5rIG9mIGEgYmV0dGVyIG5hbWUgOihcblxuICAgICAgICB2YXIgbm9kZXNXaGljaEFyZU5vdENsb3NlVGFyZ2V0cyA9IGZvY3VzYWJsZU5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiAhbm9kZS5oYXNBdHRyaWJ1dGUoX3RoaXMzLmNvbmZpZy5jbG9zZVRyaWdnZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5vZGVzV2hpY2hBcmVOb3RDbG9zZVRhcmdldHMubGVuZ3RoID4gMCkgbm9kZXNXaGljaEFyZU5vdENsb3NlVGFyZ2V0c1swXS5mb2N1cygpO1xuICAgICAgICBpZiAobm9kZXNXaGljaEFyZU5vdENsb3NlVGFyZ2V0cy5sZW5ndGggPT09IDApIGZvY3VzYWJsZU5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJldGFpbkZvY3VzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmV0YWluRm9jdXMoZXZlbnQpIHtcbiAgICAgICAgdmFyIGZvY3VzYWJsZU5vZGVzID0gdGhpcy5nZXRGb2N1c2FibGVOb2RlcygpOyAvLyBubyBmb2N1c2FibGUgbm9kZXNcblxuICAgICAgICBpZiAoZm9jdXNhYmxlTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaWx0ZXJzIG5vZGVzIHdoaWNoIGFyZSBoaWRkZW4gdG8gcHJldmVudFxuICAgICAgICAgKiBmb2N1cyBsZWFrIG91dHNpZGUgbW9kYWxcbiAgICAgICAgICovXG5cbiAgICAgICAgZm9jdXNhYmxlTm9kZXMgPSBmb2N1c2FibGVOb2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5vZmZzZXRQYXJlbnQgIT09IG51bGw7XG4gICAgICAgIH0pOyAvLyBpZiBkaXNhYmxlRm9jdXMgaXMgdHJ1ZVxuXG4gICAgICAgIGlmICghdGhpcy5tb2RhbC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgIGZvY3VzYWJsZU5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGZvY3VzZWRJdGVtSW5kZXggPSBmb2N1c2FibGVOb2Rlcy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5ICYmIGZvY3VzZWRJdGVtSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGZvY3VzYWJsZU5vZGVzW2ZvY3VzYWJsZU5vZGVzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXZlbnQuc2hpZnRLZXkgJiYgZm9jdXNhYmxlTm9kZXMubGVuZ3RoID4gMCAmJiBmb2N1c2VkSXRlbUluZGV4ID09PSBmb2N1c2FibGVOb2Rlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBmb2N1c2FibGVOb2Rlc1swXS5mb2N1cygpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oKTtcbiAgLyoqXG4gICAqIE1vZGFsIHByb3RvdHlwZSBlbmRzLlxuICAgKiBIZXJlIG9uIGNvZGUgaXMgcmVzcG9uc2libGUgZm9yIGRldGVjdGluZyBhbmRcbiAgICogYXV0byBiaW5kaW5nIGV2ZW50IGhhbmRsZXJzIG9uIG1vZGFsIHRyaWdnZXJzXG4gICAqL1xuICAvLyBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBvcGVuZWQgbW9kYWxcblxuXG4gIHZhciBhY3RpdmVNb2RhbCA9IG51bGw7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgbW9kYWxzIGFuZCBpdCdzXG4gICAqIHJlc3BlY3RpdmUgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzICAgICBBbiBhcnJheSBvZiBhbGwgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0cmlnZ2VyQXR0ciBUaGUgZGF0YS1hdHRyaWJ1dGUgd2hpY2ggdHJpZ2dlcnMgdGhlIG1vZHVsZVxuICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICovXG5cbiAgdmFyIGdlbmVyYXRlVHJpZ2dlck1hcCA9IGZ1bmN0aW9uIGdlbmVyYXRlVHJpZ2dlck1hcCh0cmlnZ2VycywgdHJpZ2dlckF0dHIpIHtcbiAgICB2YXIgdHJpZ2dlck1hcCA9IFtdO1xuICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHZhciB0YXJnZXRNb2RhbCA9IHRyaWdnZXIuYXR0cmlidXRlc1t0cmlnZ2VyQXR0cl0udmFsdWU7XG4gICAgICBpZiAodHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0gPT09IHVuZGVmaW5lZCkgdHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0gPSBbXTtcbiAgICAgIHRyaWdnZXJNYXBbdGFyZ2V0TW9kYWxdLnB1c2godHJpZ2dlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyaWdnZXJNYXA7XG4gIH07XG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgd2hldGhlciBhIG1vZGFsIG9mIHRoZSBnaXZlbiBpZCBleGlzdHNcbiAgICogaW4gdGhlIERPTVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IGlkICBUaGUgaWQgb2YgdGhlIG1vZGFsXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgdmFyIHZhbGlkYXRlTW9kYWxQcmVzZW5jZSA9IGZ1bmN0aW9uIHZhbGlkYXRlTW9kYWxQcmVzZW5jZShpZCkge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJNaWNyb01vZGFsOiBcXHUyNzU3U2VlbXMgbGlrZSB5b3UgaGF2ZSBtaXNzZWQgJWMnXCIuY29uY2F0KGlkLCBcIidcIiksICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsICdJRCBzb21ld2hlcmUgaW4geW91ciBjb2RlLiBSZWZlciBleGFtcGxlIGJlbG93IHRvIHJlc29sdmUgaXQuJyk7XG4gICAgICBjb25zb2xlLndhcm4oXCIlY0V4YW1wbGU6XCIsICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsIFwiPGRpdiBjbGFzcz1cXFwibW9kYWxcXFwiIGlkPVxcXCJcIi5jb25jYXQoaWQsIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBpZiB0aGVyZSBhcmUgbW9kYWwgdHJpZ2dlcnMgcHJlc2VudFxuICAgKiBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSAge2FycmF5fSB0cmlnZ2VycyBBbiBhcnJheSBvZiBkYXRhLXRyaWdnZXJzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgdmFyIHZhbGlkYXRlVHJpZ2dlclByZXNlbmNlID0gZnVuY3Rpb24gdmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UodHJpZ2dlcnMpIHtcbiAgICBpZiAodHJpZ2dlcnMubGVuZ3RoIDw9IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk1pY3JvTW9kYWw6IFxcdTI3NTdQbGVhc2Ugc3BlY2lmeSBhdCBsZWFzdCBvbmUgJWMnbWljcm9tb2RhbC10cmlnZ2VyJ1wiLCAnYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtjb2xvcjogIzUwNTk2Yztmb250LXdlaWdodDogYm9sZDsnLCAnZGF0YSBhdHRyaWJ1dGUuJyk7XG4gICAgICBjb25zb2xlLndhcm4oXCIlY0V4YW1wbGU6XCIsICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsIFwiPGEgaHJlZj1cXFwiI1xcXCIgZGF0YS1taWNyb21vZGFsLXRyaWdnZXI9XFxcIm15LW1vZGFsXFxcIj48L2E+XCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0cmlnZ2VycyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBtb2RhbHNcbiAgICogYXJlIHByZXNlbnQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgICBBcnJheSBvZiBET00gbm9kZXMgd2hpY2ggaGF2ZSBkYXRhLXRyaWdnZXJzXG4gICAqIEBwYXJhbSAge2FycmF5fSB0cmlnZ2VyTWFwIEFzc29jaWF0aXZlIGFycmF5IG9mIG1vZGFscyBhbmQgdGhlaXIgdHJpZ2dlcnNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICB2YXIgdmFsaWRhdGVBcmdzID0gZnVuY3Rpb24gdmFsaWRhdGVBcmdzKHRyaWdnZXJzLCB0cmlnZ2VyTWFwKSB7XG4gICAgdmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UodHJpZ2dlcnMpO1xuICAgIGlmICghdHJpZ2dlck1hcCkgcmV0dXJuIHRydWU7XG5cbiAgICBmb3IgKHZhciBpZCBpbiB0cmlnZ2VyTWFwKSB7XG4gICAgICB2YWxpZGF0ZU1vZGFsUHJlc2VuY2UoaWQpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICAvKipcbiAgICogQmluZHMgY2xpY2sgaGFuZGxlcnMgdG8gYWxsIG1vZGFsIHRyaWdnZXJzXG4gICAqIEBwYXJhbSAge29iamVjdH0gY29uZmlnIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuXG5cbiAgdmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KGNvbmZpZykge1xuICAgIC8vIENyZWF0ZSBhbiBjb25maWcgb2JqZWN0IHdpdGggZGVmYXVsdCBvcGVuVHJpZ2dlclxuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgb3BlblRyaWdnZXI6ICdkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcidcbiAgICB9LCBjb25maWcpOyAvLyBDb2xsZWN0cyBhbGwgdGhlIG5vZGVzIHdpdGggdGhlIHRyaWdnZXJcblxuICAgIHZhciB0cmlnZ2VycyA9IF90b0NvbnN1bWFibGVBcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW1wiLmNvbmNhdChvcHRpb25zLm9wZW5UcmlnZ2VyLCBcIl1cIikpKTsgLy8gTWFrZXMgYSBtYXBwaW5ncyBvZiBtb2RhbHMgd2l0aCB0aGVpciB0cmlnZ2VyIG5vZGVzXG5cblxuICAgIHZhciB0cmlnZ2VyTWFwID0gZ2VuZXJhdGVUcmlnZ2VyTWFwKHRyaWdnZXJzLCBvcHRpb25zLm9wZW5UcmlnZ2VyKTsgLy8gQ2hlY2tzIGlmIG1vZGFscyBhbmQgdHJpZ2dlcnMgZXhpc3QgaW4gZG9tXG5cbiAgICBpZiAob3B0aW9ucy5kZWJ1Z01vZGUgPT09IHRydWUgJiYgdmFsaWRhdGVBcmdzKHRyaWdnZXJzLCB0cmlnZ2VyTWFwKSA9PT0gZmFsc2UpIHJldHVybjsgLy8gRm9yIGV2ZXJ5IHRhcmdldCBtb2RhbCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdHJpZ2dlck1hcCkge1xuICAgICAgdmFyIHZhbHVlID0gdHJpZ2dlck1hcFtrZXldO1xuICAgICAgb3B0aW9ucy50YXJnZXRNb2RhbCA9IGtleTtcbiAgICAgIG9wdGlvbnMudHJpZ2dlcnMgPSBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWUpO1xuICAgICAgYWN0aXZlTW9kYWwgPSBuZXcgTW9kYWwob3B0aW9ucyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogU2hvd3MgYSBwYXJ0aWN1bGFyIG1vZGFsXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFyZ2V0TW9kYWwgW1RoZSBpZCBvZiB0aGUgbW9kYWwgdG8gZGlzcGxheV1cbiAgICogQHBhcmFtICB7b2JqZWN0fSBjb25maWcgW1RoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0byBwYXNzXVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cblxuXG4gIHZhciBzaG93ID0gZnVuY3Rpb24gc2hvdyh0YXJnZXRNb2RhbCwgY29uZmlnKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBjb25maWcgfHwge307XG4gICAgb3B0aW9ucy50YXJnZXRNb2RhbCA9IHRhcmdldE1vZGFsOyAvLyBDaGVja3MgaWYgbW9kYWxzIGFuZCB0cmlnZ2VycyBleGlzdCBpbiBkb21cblxuICAgIGlmIChvcHRpb25zLmRlYnVnTW9kZSA9PT0gdHJ1ZSAmJiB2YWxpZGF0ZU1vZGFsUHJlc2VuY2UodGFyZ2V0TW9kYWwpID09PSBmYWxzZSkgcmV0dXJuOyAvLyBjbGVhciBldmVudHMgaW4gY2FzZSBwcmV2aW91cyBtb2RhbCB3YXNuJ3QgY2xvc2VcblxuICAgIGlmIChhY3RpdmVNb2RhbCkgYWN0aXZlTW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsgLy8gc3RvcmVzIHJlZmVyZW5jZSB0byBhY3RpdmUgbW9kYWxcblxuICAgIGFjdGl2ZU1vZGFsID0gbmV3IE1vZGFsKG9wdGlvbnMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuXG4gICAgYWN0aXZlTW9kYWwuc2hvd01vZGFsKCk7XG4gIH07XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIGFjdGl2ZSBtb2RhbFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRhcmdldE1vZGFsIFtUaGUgaWQgb2YgdGhlIG1vZGFsIHRvIGNsb3NlXVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cblxuXG4gIHZhciBjbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKHRhcmdldE1vZGFsKSB7XG4gICAgdGFyZ2V0TW9kYWwgPyBhY3RpdmVNb2RhbC5jbG9zZU1vZGFsQnlJZCh0YXJnZXRNb2RhbCkgOiBhY3RpdmVNb2RhbC5jbG9zZU1vZGFsKCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpbml0OiBpbml0LFxuICAgIHNob3c6IHNob3csXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59KCk7XG53aW5kb3cuTWljcm9Nb2RhbCA9IE1pY3JvTW9kYWw7XG5cbmV4cG9ydCBkZWZhdWx0IE1pY3JvTW9kYWw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/micromodal/dist/micromodal.es.js\n");

/***/ }),

/***/ "./node_modules/overlayscrollbars/js/OverlayScrollbars.js":
/*!****************************************************************!*\
  !*** ./node_modules/overlayscrollbars/js/OverlayScrollbars.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * OverlayScrollbars\r\n * https://github.com/KingSora/OverlayScrollbars\r\n *\r\n * Version: 1.12.0\r\n *\r\n * Copyright KingSora | Rene Haas.\r\n * https://github.com/KingSora\r\n *\r\n * Released under the MIT license.\r\n * Date: 05.04.2020\r\n */\n(function (global, factory) {\n  if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return factory(global, global.document, undefined);\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(typeof window !== 'undefined' ? window : this, function (window, document, undefined) {\n  'use strict';\n\n  var PLUGINNAME = 'OverlayScrollbars';\n  var TYPES = {\n    o: 'object',\n    f: 'function',\n    a: 'array',\n    s: 'string',\n    b: 'boolean',\n    n: 'number',\n    u: 'undefined',\n    z: 'null' //d : 'date',\n    //e : 'error',\n    //r : 'regexp',\n    //y : 'symbol'\n\n  };\n  var LEXICON = {\n    c: 'class',\n    s: 'style',\n    i: 'id',\n    l: 'length',\n    p: 'prototype',\n    ti: 'tabindex',\n    oH: 'offsetHeight',\n    cH: 'clientHeight',\n    sH: 'scrollHeight',\n    oW: 'offsetWidth',\n    cW: 'clientWidth',\n    sW: 'scrollWidth',\n    hOP: 'hasOwnProperty',\n    bCR: 'getBoundingClientRect'\n  };\n\n  var VENDORS = function () {\n    //https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\n    var jsCache = {};\n    var cssCache = {};\n    var cssPrefixes = ['-webkit-', '-moz-', '-o-', '-ms-'];\n    var jsPrefixes = ['WebKit', 'Moz', 'O', 'MS'];\n\n    function firstLetterToUpper(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    return {\n      _cssPrefixes: cssPrefixes,\n      _jsPrefixes: jsPrefixes,\n      _cssProperty: function (name) {\n        var result = cssCache[name];\n        if (cssCache[LEXICON.hOP](name)) return result;\n        var uppercasedName = firstLetterToUpper(name);\n        var elmStyle = document.createElement('div')[LEXICON.s];\n        var resultPossibilities;\n        var i = 0;\n        var v;\n        var currVendorWithoutDashes;\n\n        for (; i < cssPrefixes.length; i++) {\n          currVendorWithoutDashes = cssPrefixes[i].replace(/-/g, '');\n          resultPossibilities = [name, //transition\n          cssPrefixes[i] + name, //-webkit-transition\n          currVendorWithoutDashes + uppercasedName, //webkitTransition\n          firstLetterToUpper(currVendorWithoutDashes) + uppercasedName //WebkitTransition\n          ];\n\n          for (v = 0; v < resultPossibilities[LEXICON.l]; v++) {\n            if (elmStyle[resultPossibilities[v]] !== undefined) {\n              result = resultPossibilities[v];\n              break;\n            }\n          }\n        }\n\n        cssCache[name] = result;\n        return result;\n      },\n      _cssPropertyValue: function (property, values, suffix) {\n        var name = property + ' ' + values;\n        var result = cssCache[name];\n        if (cssCache[LEXICON.hOP](name)) return result;\n        var dummyStyle = document.createElement('div')[LEXICON.s];\n        var possbleValues = values.split(' ');\n        var preparedSuffix = suffix || '';\n        var i = 0;\n        var v = -1;\n        var prop;\n\n        for (; i < possbleValues[LEXICON.l]; i++) {\n          for (; v < VENDORS._cssPrefixes[LEXICON.l]; v++) {\n            prop = v < 0 ? possbleValues[i] : VENDORS._cssPrefixes[v] + possbleValues[i];\n            dummyStyle.cssText = property + ':' + prop + preparedSuffix;\n\n            if (dummyStyle[LEXICON.l]) {\n              result = prop;\n              break;\n            }\n          }\n        }\n\n        cssCache[name] = result;\n        return result;\n      },\n      _jsAPI: function (name, isInterface, fallback) {\n        var i = 0;\n        var result = jsCache[name];\n\n        if (!jsCache[LEXICON.hOP](name)) {\n          result = window[name];\n\n          for (; i < jsPrefixes[LEXICON.l]; i++) result = result || window[(isInterface ? jsPrefixes[i] : jsPrefixes[i].toLowerCase()) + firstLetterToUpper(name)];\n\n          jsCache[name] = result;\n        }\n\n        return result || fallback;\n      }\n    };\n  }();\n\n  var COMPATIBILITY = function () {\n    function windowSize(x) {\n      return x ? window.innerWidth || document.documentElement[LEXICON.cW] || document.body[LEXICON.cW] : window.innerHeight || document.documentElement[LEXICON.cH] || document.body[LEXICON.cH];\n    }\n\n    function bind(func, thisObj) {\n      if (typeof func != TYPES.f) {\n        throw \"Can't bind function!\"; // closest thing possible to the ECMAScript 5\n        // internal IsCallable function\n        //throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n      }\n\n      var proto = LEXICON.p;\n      var aArgs = Array[proto].slice.call(arguments, 2);\n\n      var fNOP = function () {};\n\n      var fBound = function () {\n        return func.apply(this instanceof fNOP ? this : thisObj, aArgs.concat(Array[proto].slice.call(arguments)));\n      };\n\n      if (func[proto]) fNOP[proto] = func[proto]; // Function.prototype doesn't have a prototype property\n\n      fBound[proto] = new fNOP();\n      return fBound;\n    }\n\n    return {\n      /**\r\n       * Gets the current window width.\r\n       * @returns {Number|number} The current window width in pixel.\r\n       */\n      wW: bind(windowSize, 0, true),\n\n      /**\r\n       * Gets the current window height.\r\n       * @returns {Number|number} The current window height in pixel.\r\n       */\n      wH: bind(windowSize, 0),\n\n      /**\r\n       * Gets the MutationObserver Object or undefined if not supported.\r\n       * @returns {MutationObserver|*|undefined} The MutationsObserver Object or undefined.\r\n       */\n      mO: bind(VENDORS._jsAPI, 0, 'MutationObserver', true),\n\n      /**\r\n       * Gets the ResizeObserver Object or undefined if not supported.\r\n       * @returns {MutationObserver|*|undefined} The ResizeObserver Object or undefined.\r\n       */\n      rO: bind(VENDORS._jsAPI, 0, 'ResizeObserver', true),\n\n      /**\r\n       * Gets the RequestAnimationFrame method or it's corresponding polyfill.\r\n       * @returns {*|Function} The RequestAnimationFrame method or it's corresponding polyfill.\r\n       */\n      rAF: bind(VENDORS._jsAPI, 0, 'requestAnimationFrame', false, function (func) {\n        return window.setTimeout(func, 1000 / 60);\n      }),\n\n      /**\r\n       * Gets the CancelAnimationFrame method or it's corresponding polyfill.\r\n       * @returns {*|Function} The CancelAnimationFrame method or it's corresponding polyfill.\r\n       */\n      cAF: bind(VENDORS._jsAPI, 0, 'cancelAnimationFrame', false, function (id) {\n        return window.clearTimeout(id);\n      }),\n\n      /**\r\n       * Gets the current time.\r\n       * @returns {number} The current time.\r\n       */\n      now: function () {\n        return Date.now && Date.now() || new Date().getTime();\n      },\n\n      /**\r\n       * Stops the propagation of the given event.\r\n       * @param event The event of which the propagation shall be stoped.\r\n       */\n      stpP: function (event) {\n        if (event.stopPropagation) event.stopPropagation();else event.cancelBubble = true;\n      },\n\n      /**\r\n       * Prevents the default action of the given event.\r\n       * @param event The event of which the default action shall be prevented.\r\n       */\n      prvD: function (event) {\n        if (event.preventDefault && event.cancelable) event.preventDefault();else event.returnValue = false;\n      },\n\n      /**\r\n       * Gets the pageX and pageY values of the given mouse event.\r\n       * @param event The mouse event of which the pageX and pageX shall be got.\r\n       * @returns {{x: number, y: number}} x = pageX value, y = pageY value.\r\n       */\n      page: function (event) {\n        event = event.originalEvent || event;\n        var strPage = 'page';\n        var strClient = 'client';\n        var strX = 'X';\n        var strY = 'Y';\n        var target = event.target || event.srcElement || document;\n        var eventDoc = target.ownerDocument || document;\n        var doc = eventDoc.documentElement;\n        var body = eventDoc.body; //if touch event return return pageX/Y of it\n\n        if (event.touches !== undefined) {\n          var touch = event.touches[0];\n          return {\n            x: touch[strPage + strX],\n            y: touch[strPage + strY]\n          };\n        } // Calculate pageX/Y if not native supported\n\n\n        if (!event[strPage + strX] && event[strClient + strX] && event[strClient + strX] != null) {\n          return {\n            x: event[strClient + strX] + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0),\n            y: event[strClient + strY] + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)\n          };\n        }\n\n        return {\n          x: event[strPage + strX],\n          y: event[strPage + strY]\n        };\n      },\n\n      /**\r\n       * Gets the clicked mouse button of the given mouse event.\r\n       * @param event The mouse event of which the clicked button shal be got.\r\n       * @returns {number} The number of the clicked mouse button. (0 : none | 1 : leftButton | 2 : middleButton | 3 : rightButton)\r\n       */\n      mBtn: function (event) {\n        var button = event.button;\n        if (!event.which && button !== undefined) return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;else return event.which;\n      },\n\n      /**\r\n       * Checks whether a item is in the given array and returns its index.\r\n       * @param item The item of which the position in the array shall be determined.\r\n       * @param arr The array.\r\n       * @returns {number} The zero based index of the item or -1 if the item isn't in the array.\r\n       */\n      inA: function (item, arr) {\n        for (var i = 0; i < arr[LEXICON.l]; i++) //Sometiems in IE a \"SCRIPT70\" Permission denied error occurs if HTML elements in a iFrame are compared\n        try {\n          if (arr[i] === item) return i;\n        } catch (e) {}\n\n        return -1;\n      },\n\n      /**\r\n       * Returns true if the given value is a array.\r\n       * @param arr The potential array.\r\n       * @returns {boolean} True if the given value is a array, false otherwise.\r\n       */\n      isA: function (arr) {\n        var def = Array.isArray;\n        return def ? def(arr) : this.type(arr) == TYPES.a;\n      },\n\n      /**\r\n       * Determine the internal JavaScript [[Class]] of the given object.\r\n       * @param obj The object of which the type shall be determined.\r\n       * @returns {string} The type of the given object.\r\n       */\n      type: function (obj) {\n        if (obj === undefined) return obj + '';\n        if (obj === null) return obj + '';\n        return Object[LEXICON.p].toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n      },\n      bind: bind\n      /**\r\n       * Gets the vendor-prefixed CSS property by the given name.\r\n       * For example the given name is \"transform\" and you're using a old Firefox browser then the returned value would be \"-moz-transform\".\r\n       * If the browser doesn't need a vendor-prefix, then the returned string is the given name.\r\n       * If the browser doesn't support the given property name at all (not even with a vendor-prefix) the returned value is null.\r\n       * @param propName The unprefixed CSS property name.\r\n       * @returns {string|null} The vendor-prefixed CSS property or null if the browser doesn't support the given CSS property.\r\n        cssProp: function(propName) {\r\n          return VENDORS._cssProperty(propName);\r\n      }\r\n      */\n\n    };\n  }();\n\n  var MATH = Math;\n  var JQUERY = window.jQuery;\n\n  var EASING = function () {\n    var _easingsMath = {\n      p: MATH.PI,\n      c: MATH.cos,\n      s: MATH.sin,\n      w: MATH.pow,\n      t: MATH.sqrt,\n      n: MATH.asin,\n      a: MATH.abs,\n      o: 1.70158\n    };\n    /*\r\n     x : current percent (0 - 1),\r\n     t : current time (duration * percent),\r\n     b : start value (from),\r\n     c : end value (to),\r\n     d : duration\r\n       easingName : function(x, t, b, c, d) { return easedValue; }\r\n     */\n\n    return {\n      swing: function (x, t, b, c, d) {\n        return 0.5 - _easingsMath.c(x * _easingsMath.p) / 2;\n      },\n      linear: function (x, t, b, c, d) {\n        return x;\n      },\n      easeInQuad: function (x, t, b, c, d) {\n        return c * (t /= d) * t + b;\n      },\n      easeOutQuad: function (x, t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n      },\n      easeInOutQuad: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t + b : -c / 2 * (--t * (t - 2) - 1) + b;\n      },\n      easeInCubic: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n      },\n      easeOutCubic: function (x, t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n      },\n      easeInOutCubic: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;\n      },\n      easeInQuart: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n      },\n      easeOutQuart: function (x, t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n      },\n      easeInOutQuart: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n      },\n      easeInQuint: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n      },\n      easeOutQuint: function (x, t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n      },\n      easeInOutQuint: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n      },\n      easeInSine: function (x, t, b, c, d) {\n        return -c * _easingsMath.c(t / d * (_easingsMath.p / 2)) + c + b;\n      },\n      easeOutSine: function (x, t, b, c, d) {\n        return c * _easingsMath.s(t / d * (_easingsMath.p / 2)) + b;\n      },\n      easeInOutSine: function (x, t, b, c, d) {\n        return -c / 2 * (_easingsMath.c(_easingsMath.p * t / d) - 1) + b;\n      },\n      easeInExpo: function (x, t, b, c, d) {\n        return t == 0 ? b : c * _easingsMath.w(2, 10 * (t / d - 1)) + b;\n      },\n      easeOutExpo: function (x, t, b, c, d) {\n        return t == d ? b + c : c * (-_easingsMath.w(2, -10 * t / d) + 1) + b;\n      },\n      easeInOutExpo: function (x, t, b, c, d) {\n        if (t == 0) return b;\n        if (t == d) return b + c;\n        if ((t /= d / 2) < 1) return c / 2 * _easingsMath.w(2, 10 * (t - 1)) + b;\n        return c / 2 * (-_easingsMath.w(2, -10 * --t) + 2) + b;\n      },\n      easeInCirc: function (x, t, b, c, d) {\n        return -c * (_easingsMath.t(1 - (t /= d) * t) - 1) + b;\n      },\n      easeOutCirc: function (x, t, b, c, d) {\n        return c * _easingsMath.t(1 - (t = t / d - 1) * t) + b;\n      },\n      easeInOutCirc: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? -c / 2 * (_easingsMath.t(1 - t * t) - 1) + b : c / 2 * (_easingsMath.t(1 - (t -= 2) * t) + 1) + b;\n      },\n      easeInElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d) == 1) return b + c;\n        if (!p) p = d * .3;\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        return -(a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\n      },\n      easeOutElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d) == 1) return b + c;\n        if (!p) p = d * .3;\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        return a * _easingsMath.w(2, -10 * t) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) + c + b;\n      },\n      easeInOutElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d / 2) == 2) return b + c;\n        if (!p) p = d * (.3 * 1.5);\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        if (t < 1) return -.5 * (a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\n        return a * _easingsMath.w(2, -10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) * .5 + c + b;\n      },\n      easeInBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n      },\n      easeOutBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n      },\n      easeInOutBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return (t /= d / 2) < 1 ? c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b : c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n      },\n      easeInBounce: function (x, t, b, c, d) {\n        return c - this.easeOutBounce(x, d - t, 0, c, d) + b;\n      },\n      easeOutBounce: function (x, t, b, c, d) {\n        var o = 7.5625;\n\n        if ((t /= d) < 1 / 2.75) {\n          return c * (o * t * t) + b;\n        } else if (t < 2 / 2.75) {\n          return c * (o * (t -= 1.5 / 2.75) * t + .75) + b;\n        } else if (t < 2.5 / 2.75) {\n          return c * (o * (t -= 2.25 / 2.75) * t + .9375) + b;\n        } else {\n          return c * (o * (t -= 2.625 / 2.75) * t + .984375) + b;\n        }\n      },\n      easeInOutBounce: function (x, t, b, c, d) {\n        return t < d / 2 ? this.easeInBounce(x, t * 2, 0, c, d) * .5 + b : this.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n      }\n    };\n    /*\r\n     *\r\n     * TERMS OF USE - EASING EQUATIONS\r\n     * \r\n     * Open source under the BSD License. \r\n     * \r\n     * Copyright Â© 2001 Robert Penner\r\n     * All rights reserved.\r\n     * \r\n     * Redistribution and use in source and binary forms, with or without modification, \r\n     * are permitted provided that the following conditions are met:\r\n     * \r\n     * Redistributions of source code must retain the above copyright notice, this list of \r\n     * conditions and the following disclaimer.\r\n     * Redistributions in binary form must reproduce the above copyright notice, this list \r\n     * of conditions and the following disclaimer in the documentation and/or other materials \r\n     * provided with the distribution.\r\n     * \r\n     * Neither the name of the author nor the names of contributors may be used to endorse \r\n     * or promote products derived from this software without specific prior written permission.\r\n     * \r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \r\n     * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n     * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n     *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n     *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n     *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \r\n     * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n     *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \r\n     * OF THE POSSIBILITY OF SUCH DAMAGE. \r\n     *\r\n     */\n  }();\n\n  var FRAMEWORK = function () {\n    var _rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\n    var _strSpace = ' ';\n    var _strEmpty = '';\n    var _strScrollLeft = 'scrollLeft';\n    var _strScrollTop = 'scrollTop';\n    var _animations = [];\n    var _type = COMPATIBILITY.type;\n    var _cssNumber = {\n      animationIterationCount: true,\n      columnCount: true,\n      fillOpacity: true,\n      flexGrow: true,\n      flexShrink: true,\n      fontWeight: true,\n      lineHeight: true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      widows: true,\n      zIndex: true,\n      zoom: true\n    };\n\n    function extend() {\n      var src,\n          copyIsArray,\n          copy,\n          name,\n          options,\n          clone,\n          target = arguments[0] || {},\n          i = 1,\n          length = arguments[LEXICON.l],\n          deep = false; // Handle a deep copy situation\n\n      if (_type(target) == TYPES.b) {\n        deep = target;\n        target = arguments[1] || {}; // skip the boolean and the target\n\n        i = 2;\n      } // Handle case when target is a string or something (possible in deep copy)\n\n\n      if (_type(target) != TYPES.o && !_type(target) == TYPES.f) {\n        target = {};\n      } // extend jQuery itself if only one argument is passed\n\n\n      if (length === i) {\n        target = FakejQuery;\n        --i;\n      }\n\n      for (; i < length; i++) {\n        // Only deal with non-null/undefined values\n        if ((options = arguments[i]) != null) {\n          // Extend the base object\n          for (name in options) {\n            src = target[name];\n            copy = options[name]; // Prevent never-ending loop\n\n            if (target === copy) {\n              continue;\n            } // Recurse if we're merging plain objects or arrays\n\n\n            if (deep && copy && (isPlainObject(copy) || (copyIsArray = COMPATIBILITY.isA(copy)))) {\n              if (copyIsArray) {\n                copyIsArray = false;\n                clone = src && COMPATIBILITY.isA(src) ? src : [];\n              } else {\n                clone = src && isPlainObject(src) ? src : {};\n              } // Never move original objects, clone them\n\n\n              target[name] = extend(deep, clone, copy); // Don't bring in undefined values\n            } else if (copy !== undefined) {\n              target[name] = copy;\n            }\n          }\n        }\n      } // Return the modified object\n\n\n      return target;\n    }\n\n    ;\n\n    function inArray(item, arr, fromIndex) {\n      for (var i = fromIndex || 0; i < arr[LEXICON.l]; i++) if (arr[i] === item) return i;\n\n      return -1;\n    }\n\n    function isFunction(obj) {\n      return _type(obj) == TYPES.f;\n    }\n\n    ;\n\n    function isEmptyObject(obj) {\n      for (var name in obj) return false;\n\n      return true;\n    }\n\n    ;\n\n    function isPlainObject(obj) {\n      if (!obj || _type(obj) != TYPES.o) return false;\n      var key;\n      var proto = LEXICON.p;\n      var hasOwnProperty = Object[proto].hasOwnProperty;\n      var hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\n      var hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\n\n      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n        return false;\n      }\n\n      for (key in obj) {\n        /**/\n      }\n\n      return _type(key) == TYPES.u || hasOwnProperty.call(obj, key);\n    }\n\n    ;\n\n    function each(obj, callback) {\n      var i = 0;\n\n      if (isArrayLike(obj)) {\n        for (; i < obj[LEXICON.l]; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) break;\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) break;\n        }\n      }\n\n      return obj;\n    }\n\n    ;\n\n    function isArrayLike(obj) {\n      var length = !!obj && [LEXICON.l] in obj && obj[LEXICON.l];\n\n      var t = _type(obj);\n\n      return isFunction(t) ? false : t == TYPES.a || length === 0 || _type(length) == TYPES.n && length > 0 && length - 1 in obj;\n    }\n\n    function stripAndCollapse(value) {\n      var tokens = value.match(_rnothtmlwhite) || [];\n      return tokens.join(_strSpace);\n    }\n\n    function matches(elem, selector) {\n      var nodeList = (elem.parentNode || document).querySelectorAll(selector) || [];\n      var i = nodeList[LEXICON.l];\n\n      while (i--) if (nodeList[i] == elem) return true;\n\n      return false;\n    }\n\n    function insertAdjacentElement(el, strategy, child) {\n      if (COMPATIBILITY.isA(child)) {\n        for (var i = 0; i < child[LEXICON.l]; i++) insertAdjacentElement(el, strategy, child[i]);\n      } else if (_type(child) == TYPES.s) el.insertAdjacentHTML(strategy, child);else el.insertAdjacentElement(strategy, child.nodeType ? child : child[0]);\n    }\n\n    function setCSSVal(el, prop, val) {\n      try {\n        if (el[LEXICON.s][prop] !== undefined) el[LEXICON.s][prop] = parseCSSVal(prop, val);\n      } catch (e) {}\n    }\n\n    function parseCSSVal(prop, val) {\n      if (!_cssNumber[prop.toLowerCase()] && _type(val) == TYPES.n) val += 'px';\n      return val;\n    }\n\n    function startNextAnimationInQ(animObj, removeFromQ) {\n      var index;\n      var nextAnim;\n      if (removeFromQ !== false) animObj.q.splice(0, 1);\n\n      if (animObj.q[LEXICON.l] > 0) {\n        nextAnim = animObj.q[0];\n        animate(animObj.el, nextAnim.props, nextAnim.duration, nextAnim.easing, nextAnim.complete, true);\n      } else {\n        index = inArray(animObj, _animations);\n        if (index > -1) _animations.splice(index, 1);\n      }\n    }\n\n    function setAnimationValue(el, prop, value) {\n      if (prop === _strScrollLeft || prop === _strScrollTop) el[prop] = value;else setCSSVal(el, prop, value);\n    }\n\n    function animate(el, props, options, easing, complete, guaranteedNext) {\n      var hasOptions = isPlainObject(options);\n      var from = {};\n      var to = {};\n      var i = 0;\n      var key;\n      var animObj;\n      var start;\n      var progress;\n      var step;\n      var specialEasing;\n      var duration;\n\n      if (hasOptions) {\n        easing = options.easing;\n        start = options.start;\n        progress = options.progress;\n        step = options.step;\n        specialEasing = options.specialEasing;\n        complete = options.complete;\n        duration = options.duration;\n      } else duration = options;\n\n      specialEasing = specialEasing || {};\n      duration = duration || 400;\n      easing = easing || 'swing';\n      guaranteedNext = guaranteedNext || false;\n\n      for (; i < _animations[LEXICON.l]; i++) {\n        if (_animations[i].el === el) {\n          animObj = _animations[i];\n          break;\n        }\n      }\n\n      if (!animObj) {\n        animObj = {\n          el: el,\n          q: []\n        };\n\n        _animations.push(animObj);\n      }\n\n      for (key in props) {\n        if (key === _strScrollLeft || key === _strScrollTop) from[key] = el[key];else from[key] = FakejQuery(el).css(key);\n      }\n\n      for (key in from) {\n        if (from[key] !== props[key] && props[key] !== undefined) to[key] = props[key];\n      }\n\n      if (!isEmptyObject(to)) {\n        var timeNow;\n        var end;\n        var percent;\n        var fromVal;\n        var toVal;\n        var easedVal;\n        var timeStart;\n        var frame;\n        var elapsed;\n        var qPos = guaranteedNext ? 0 : inArray(qObj, animObj.q);\n        var qObj = {\n          props: to,\n          duration: hasOptions ? options : duration,\n          easing: easing,\n          complete: complete\n        };\n\n        if (qPos === -1) {\n          qPos = animObj.q[LEXICON.l];\n          animObj.q.push(qObj);\n        }\n\n        if (qPos === 0) {\n          if (duration > 0) {\n            timeStart = COMPATIBILITY.now();\n\n            frame = function () {\n              timeNow = COMPATIBILITY.now();\n              elapsed = timeNow - timeStart;\n              end = qObj.stop || elapsed >= duration;\n              percent = 1 - (MATH.max(0, timeStart + duration - timeNow) / duration || 0);\n\n              for (key in to) {\n                fromVal = parseFloat(from[key]);\n                toVal = parseFloat(to[key]);\n                easedVal = (toVal - fromVal) * EASING[specialEasing[key] || easing](percent, percent * duration, 0, 1, duration) + fromVal;\n                setAnimationValue(el, key, easedVal);\n\n                if (isFunction(step)) {\n                  step(easedVal, {\n                    elem: el,\n                    prop: key,\n                    start: fromVal,\n                    now: easedVal,\n                    end: toVal,\n                    pos: percent,\n                    options: {\n                      easing: easing,\n                      speacialEasing: specialEasing,\n                      duration: duration,\n                      complete: complete,\n                      step: step\n                    },\n                    startTime: timeStart\n                  });\n                }\n              }\n\n              if (isFunction(progress)) progress({}, percent, MATH.max(0, duration - elapsed));\n\n              if (end) {\n                startNextAnimationInQ(animObj);\n                if (isFunction(complete)) complete();\n              } else qObj.frame = COMPATIBILITY.rAF()(frame);\n            };\n\n            qObj.frame = COMPATIBILITY.rAF()(frame);\n          } else {\n            for (key in to) setAnimationValue(el, key, to[key]);\n\n            startNextAnimationInQ(animObj);\n          }\n        }\n      } else if (guaranteedNext) startNextAnimationInQ(animObj);\n    }\n\n    function stop(el, clearQ, jumpToEnd) {\n      var animObj;\n      var qObj;\n      var key;\n      var i = 0;\n\n      for (; i < _animations[LEXICON.l]; i++) {\n        animObj = _animations[i];\n\n        if (animObj.el === el) {\n          if (animObj.q[LEXICON.l] > 0) {\n            qObj = animObj.q[0];\n            qObj.stop = true;\n            COMPATIBILITY.cAF()(qObj.frame);\n            animObj.q.splice(0, 1);\n            if (jumpToEnd) for (key in qObj.props) setAnimationValue(el, key, qObj.props[key]);\n            if (clearQ) animObj.q = [];else startNextAnimationInQ(animObj, false);\n          }\n\n          break;\n        }\n      }\n    }\n\n    function elementIsVisible(el) {\n      return !!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\n    }\n\n    function FakejQuery(selector) {\n      if (arguments[LEXICON.l] === 0) return this;\n      var base = new FakejQuery();\n      var elements = selector;\n      var i = 0;\n      var elms;\n      var el;\n\n      if (_type(selector) == TYPES.s) {\n        elements = [];\n\n        if (selector.charAt(0) === '<') {\n          el = document.createElement('div');\n          el.innerHTML = selector;\n          elms = el.children;\n        } else {\n          elms = document.querySelectorAll(selector);\n        }\n\n        for (; i < elms[LEXICON.l]; i++) elements.push(elms[i]);\n      }\n\n      if (elements) {\n        if (_type(elements) != TYPES.s && (!isArrayLike(elements) || elements === window || elements === elements.self)) elements = [elements];\n\n        for (i = 0; i < elements[LEXICON.l]; i++) base[i] = elements[i];\n\n        base[LEXICON.l] = elements[LEXICON.l];\n      }\n\n      return base;\n    }\n\n    ;\n    FakejQuery[LEXICON.p] = {\n      //EVENTS:\n      on: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        var eventNameLength = eventName[LEXICON.l];\n        var i = 0;\n        var el;\n        return this.each(function () {\n          el = this;\n\n          try {\n            if (el.addEventListener) {\n              for (; i < eventNameLength; i++) el.addEventListener(eventName[i], handler);\n            } else if (el.detachEvent) {\n              for (; i < eventNameLength; i++) el.attachEvent('on' + eventName[i], handler);\n            }\n          } catch (e) {}\n        });\n      },\n      off: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        var eventNameLength = eventName[LEXICON.l];\n        var i = 0;\n        var el;\n        return this.each(function () {\n          el = this;\n\n          try {\n            if (el.removeEventListener) {\n              for (; i < eventNameLength; i++) el.removeEventListener(eventName[i], handler);\n            } else if (el.detachEvent) {\n              for (; i < eventNameLength; i++) el.detachEvent('on' + eventName[i], handler);\n            }\n          } catch (e) {}\n        });\n      },\n      one: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        return this.each(function () {\n          var el = FakejQuery(this);\n          FakejQuery.each(eventName, function (i, oneEventName) {\n            var oneHandler = function (e) {\n              handler.call(this, e);\n              el.off(oneEventName, oneHandler);\n            };\n\n            el.on(oneEventName, oneHandler);\n          });\n        });\n      },\n      trigger: function (eventName) {\n        var el;\n        var event;\n        return this.each(function () {\n          el = this;\n\n          if (document.createEvent) {\n            event = document.createEvent('HTMLEvents');\n            event.initEvent(eventName, true, false);\n            el.dispatchEvent(event);\n          } else {\n            el.fireEvent('on' + eventName);\n          }\n        });\n      },\n      //DOM NODE INSERTING / REMOVING:\n      append: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'beforeend', child);\n        });\n      },\n      prepend: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'afterbegin', child);\n        });\n      },\n      before: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'beforebegin', child);\n        });\n      },\n      after: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'afterend', child);\n        });\n      },\n      remove: function () {\n        return this.each(function () {\n          var el = this;\n          var parentNode = el.parentNode;\n          if (parentNode != null) parentNode.removeChild(el);\n        });\n      },\n      unwrap: function () {\n        var parents = [];\n        var i;\n        var el;\n        var parent;\n        this.each(function () {\n          parent = this.parentNode;\n          if (inArray(parent, parents) === -1) parents.push(parent);\n        });\n\n        for (i = 0; i < parents[LEXICON.l]; i++) {\n          el = parents[i];\n          parent = el.parentNode;\n\n          while (el.firstChild) parent.insertBefore(el.firstChild, el);\n\n          parent.removeChild(el);\n        }\n\n        return this;\n      },\n      wrapAll: function (wrapperHTML) {\n        var i;\n        var nodes = this;\n        var wrapper = FakejQuery(wrapperHTML)[0];\n        var deepest = wrapper;\n        var parent = nodes[0].parentNode;\n        var previousSibling = nodes[0].previousSibling;\n\n        while (deepest.childNodes[LEXICON.l] > 0) deepest = deepest.childNodes[0];\n\n        for (i = 0; nodes[LEXICON.l] - i; deepest.firstChild === nodes[0] && i++) deepest.appendChild(nodes[i]);\n\n        var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\n        parent.insertBefore(wrapper, nextSibling);\n        return this;\n      },\n      wrapInner: function (wrapperHTML) {\n        return this.each(function () {\n          var el = FakejQuery(this);\n          var contents = el.contents();\n          if (contents[LEXICON.l]) contents.wrapAll(wrapperHTML);else el.append(wrapperHTML);\n        });\n      },\n      wrap: function (wrapperHTML) {\n        return this.each(function () {\n          FakejQuery(this).wrapAll(wrapperHTML);\n        });\n      },\n      //DOM NODE MANIPULATION / INFORMATION:\n      css: function (styles, val) {\n        var el;\n        var key;\n        var cptStyle;\n        var getCptStyle = window.getComputedStyle;\n\n        if (_type(styles) == TYPES.s) {\n          if (val === undefined) {\n            el = this[0];\n            cptStyle = getCptStyle ? getCptStyle(el, null) : el.currentStyle[styles]; //https://bugzilla.mozilla.org/show_bug.cgi?id=548397 can be null sometimes if iframe with display: none (firefox only!)\n\n            return getCptStyle ? cptStyle != null ? cptStyle.getPropertyValue(styles) : el[LEXICON.s][styles] : cptStyle;\n          } else {\n            return this.each(function () {\n              setCSSVal(this, styles, val);\n            });\n          }\n        } else {\n          return this.each(function () {\n            for (key in styles) setCSSVal(this, key, styles[key]);\n          });\n        }\n      },\n      hasClass: function (className) {\n        var elem,\n            i = 0;\n        var classNamePrepared = _strSpace + className + _strSpace;\n        var classList;\n\n        while (elem = this[i++]) {\n          classList = elem.classList;\n          if (classList && classList.contains(className)) return true;else if (elem.nodeType === 1 && (_strSpace + stripAndCollapse(elem.className + _strEmpty) + _strSpace).indexOf(classNamePrepared) > -1) return true;\n        }\n\n        return false;\n      },\n      addClass: function (className) {\n        var classes;\n        var elem;\n        var cur;\n        var curValue;\n        var clazz;\n        var finalValue;\n        var supportClassList;\n        var elmClassList;\n        var i = 0;\n        var v = 0;\n\n        if (className) {\n          classes = className.match(_rnothtmlwhite) || [];\n\n          while (elem = this[i++]) {\n            elmClassList = elem.classList;\n            if (supportClassList === undefined) supportClassList = elmClassList !== undefined;\n\n            if (supportClassList) {\n              while (clazz = classes[v++]) elmClassList.add(clazz);\n            } else {\n              curValue = elem.className + _strEmpty;\n              cur = elem.nodeType === 1 && _strSpace + stripAndCollapse(curValue) + _strSpace;\n\n              if (cur) {\n                while (clazz = classes[v++]) if (cur.indexOf(_strSpace + clazz + _strSpace) < 0) cur += clazz + _strSpace;\n\n                finalValue = stripAndCollapse(cur);\n                if (curValue !== finalValue) elem.className = finalValue;\n              }\n            }\n          }\n        }\n\n        return this;\n      },\n      removeClass: function (className) {\n        var classes;\n        var elem;\n        var cur;\n        var curValue;\n        var clazz;\n        var finalValue;\n        var supportClassList;\n        var elmClassList;\n        var i = 0;\n        var v = 0;\n\n        if (className) {\n          classes = className.match(_rnothtmlwhite) || [];\n\n          while (elem = this[i++]) {\n            elmClassList = elem.classList;\n            if (supportClassList === undefined) supportClassList = elmClassList !== undefined;\n\n            if (supportClassList) {\n              while (clazz = classes[v++]) elmClassList.remove(clazz);\n            } else {\n              curValue = elem.className + _strEmpty;\n              cur = elem.nodeType === 1 && _strSpace + stripAndCollapse(curValue) + _strSpace;\n\n              if (cur) {\n                while (clazz = classes[v++]) while (cur.indexOf(_strSpace + clazz + _strSpace) > -1) cur = cur.replace(_strSpace + clazz + _strSpace, _strSpace);\n\n                finalValue = stripAndCollapse(cur);\n                if (curValue !== finalValue) elem.className = finalValue;\n              }\n            }\n          }\n        }\n\n        return this;\n      },\n      hide: function () {\n        return this.each(function () {\n          this[LEXICON.s].display = 'none';\n        });\n      },\n      show: function () {\n        return this.each(function () {\n          this[LEXICON.s].display = 'block';\n        });\n      },\n      attr: function (attrName, value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el.getAttribute(attrName);\n          el.setAttribute(attrName, value);\n        }\n\n        return this;\n      },\n      removeAttr: function (attrName) {\n        return this.each(function () {\n          this.removeAttribute(attrName);\n        });\n      },\n      offset: function () {\n        var el = this[0];\n        var rect = el[LEXICON.bCR]();\n        var scrollLeft = window.pageXOffset || document.documentElement[_strScrollLeft];\n        var scrollTop = window.pageYOffset || document.documentElement[_strScrollTop];\n        return {\n          top: rect.top + scrollTop,\n          left: rect.left + scrollLeft\n        };\n      },\n      position: function () {\n        var el = this[0];\n        return {\n          top: el.offsetTop,\n          left: el.offsetLeft\n        };\n      },\n      scrollLeft: function (value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el[_strScrollLeft];\n          el[_strScrollLeft] = value;\n        }\n\n        return this;\n      },\n      scrollTop: function (value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el[_strScrollTop];\n          el[_strScrollTop] = value;\n        }\n\n        return this;\n      },\n      val: function (value) {\n        var el = this[0];\n        if (!value) return el.value;\n        el.value = value;\n        return this;\n      },\n      //DOM TRAVERSAL / FILTERING:\n      first: function () {\n        return this.eq(0);\n      },\n      last: function () {\n        return this.eq(-1);\n      },\n      eq: function (index) {\n        return FakejQuery(this[index >= 0 ? index : this[LEXICON.l] + index]);\n      },\n      find: function (selector) {\n        var children = [];\n        var i;\n        this.each(function () {\n          var el = this;\n          var ch = el.querySelectorAll(selector);\n\n          for (i = 0; i < ch[LEXICON.l]; i++) children.push(ch[i]);\n        });\n        return FakejQuery(children);\n      },\n      children: function (selector) {\n        var children = [];\n        var el;\n        var ch;\n        var i;\n        this.each(function () {\n          ch = this.children;\n\n          for (i = 0; i < ch[LEXICON.l]; i++) {\n            el = ch[i];\n\n            if (selector) {\n              if (el.matches && el.matches(selector) || matches(el, selector)) children.push(el);\n            } else children.push(el);\n          }\n        });\n        return FakejQuery(children);\n      },\n      parent: function (selector) {\n        var parents = [];\n        var parent;\n        this.each(function () {\n          parent = this.parentNode;\n          if (selector ? FakejQuery(parent).is(selector) : true) parents.push(parent);\n        });\n        return FakejQuery(parents);\n      },\n      is: function (selector) {\n        var el;\n        var i;\n\n        for (i = 0; i < this[LEXICON.l]; i++) {\n          el = this[i];\n          if (selector === ':visible') return elementIsVisible(el);\n          if (selector === ':hidden') return !elementIsVisible(el);\n          if (el.matches && el.matches(selector) || matches(el, selector)) return true;\n        }\n\n        return false;\n      },\n      contents: function () {\n        var contents = [];\n        var childs;\n        var i;\n        this.each(function () {\n          childs = this.childNodes;\n\n          for (i = 0; i < childs[LEXICON.l]; i++) contents.push(childs[i]);\n        });\n        return FakejQuery(contents);\n      },\n      each: function (callback) {\n        return each(this, callback);\n      },\n      //ANIMATION:\n      animate: function (props, duration, easing, complete) {\n        return this.each(function () {\n          animate(this, props, duration, easing, complete);\n        });\n      },\n      stop: function (clearQ, jump) {\n        return this.each(function () {\n          stop(this, clearQ, jump);\n        });\n      }\n    };\n    extend(FakejQuery, {\n      extend: extend,\n      inArray: inArray,\n      isEmptyObject: isEmptyObject,\n      isPlainObject: isPlainObject,\n      each: each\n    });\n    return FakejQuery;\n  }();\n\n  var INSTANCES = function () {\n    var _targets = [];\n    var _instancePropertyString = '__overlayScrollbars__';\n    /**\r\n     * Register, unregister or get a certain (or all) instances.\r\n     * Register: Pass the target and the instance.\r\n     * Unregister: Pass the target and null.\r\n     * Get Instance: Pass the target from which the instance shall be got.\r\n     * Get Targets: Pass no arguments.\r\n     * @param target The target to which the instance shall be registered / from which the instance shall be unregistered / the instance shall be got\r\n     * @param instance The instance.\r\n     * @returns {*|void} Returns the instance from the given target.\r\n     */\n\n    return function (target, instance) {\n      var argLen = arguments[LEXICON.l];\n\n      if (argLen < 1) {\n        //return all targets\n        return _targets;\n      } else {\n        if (instance) {\n          //register instance\n          target[_instancePropertyString] = instance;\n\n          _targets.push(target);\n        } else {\n          var index = COMPATIBILITY.inA(target, _targets);\n\n          if (index > -1) {\n            if (argLen > 1) {\n              //unregister instance\n              delete target[_instancePropertyString];\n\n              _targets.splice(index, 1);\n            } else {\n              //get instance from target\n              return _targets[index][_instancePropertyString];\n            }\n          }\n        }\n      }\n    };\n  }();\n\n  var PLUGIN = function () {\n    var _plugin;\n\n    var _pluginsGlobals;\n\n    var _pluginsAutoUpdateLoop;\n\n    var _pluginsExtensions = [];\n\n    var _pluginsOptions = function () {\n      var type = COMPATIBILITY.type;\n      var possibleTemplateTypes = [TYPES.b, //boolean\n      TYPES.n, //number\n      TYPES.s, //string\n      TYPES.a, //array\n      TYPES.o, //object\n      TYPES.f, //function\n      TYPES.z //null\n      ];\n      var restrictedStringsSplit = ' ';\n      var restrictedStringsPossibilitiesSplit = ':';\n      var classNameAllowedValues = [TYPES.z, TYPES.s];\n      var numberAllowedValues = TYPES.n;\n      var booleanNullAllowedValues = [TYPES.z, TYPES.b];\n      var booleanTrueTemplate = [true, TYPES.b];\n      var booleanFalseTemplate = [false, TYPES.b];\n      var callbackTemplate = [null, [TYPES.z, TYPES.f]];\n      var updateOnLoadTemplate = [['img'], [TYPES.s, TYPES.a, TYPES.z]];\n      var inheritedAttrsTemplate = [['style', 'class'], [TYPES.s, TYPES.a, TYPES.z]];\n      var resizeAllowedValues = 'n:none b:both h:horizontal v:vertical';\n      var overflowBehaviorAllowedValues = 'v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden';\n      var scrollbarsVisibilityAllowedValues = 'v:visible h:hidden a:auto';\n      var scrollbarsAutoHideAllowedValues = 'n:never s:scroll l:leave m:move';\n      var optionsDefaultsAndTemplate = {\n        className: ['os-theme-dark', classNameAllowedValues],\n        //null || string\n        resize: ['none', resizeAllowedValues],\n        //none || both  || horizontal || vertical || n || b || h || v\n        sizeAutoCapable: booleanTrueTemplate,\n        //true || false\n        clipAlways: booleanTrueTemplate,\n        //true || false\n        normalizeRTL: booleanTrueTemplate,\n        //true || false\n        paddingAbsolute: booleanFalseTemplate,\n        //true || false\n        autoUpdate: [null, booleanNullAllowedValues],\n        //true || false || null\n        autoUpdateInterval: [33, numberAllowedValues],\n        //number\n        updateOnLoad: updateOnLoadTemplate,\n        //string || array || null\n        nativeScrollbarsOverlaid: {\n          showNativeScrollbars: booleanFalseTemplate,\n          //true || false\n          initialize: booleanTrueTemplate //true || false\n\n        },\n        overflowBehavior: {\n          x: ['scroll', overflowBehaviorAllowedValues],\n          //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n          y: ['scroll', overflowBehaviorAllowedValues] //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n\n        },\n        scrollbars: {\n          visibility: ['auto', scrollbarsVisibilityAllowedValues],\n          //visible || hidden || auto || v || h || a\n          autoHide: ['never', scrollbarsAutoHideAllowedValues],\n          //never || scroll || leave || move || n || s || l || m\n          autoHideDelay: [800, numberAllowedValues],\n          //number\n          dragScrolling: booleanTrueTemplate,\n          //true || false\n          clickScrolling: booleanFalseTemplate,\n          //true || false\n          touchSupport: booleanTrueTemplate,\n          //true || false\n          snapHandle: booleanFalseTemplate //true || false\n\n        },\n        textarea: {\n          dynWidth: booleanFalseTemplate,\n          //true || false\n          dynHeight: booleanFalseTemplate,\n          //true || false\n          inheritedAttrs: inheritedAttrsTemplate //string || array || null\n\n        },\n        callbacks: {\n          onInitialized: callbackTemplate,\n          //null || function\n          onInitializationWithdrawn: callbackTemplate,\n          //null || function\n          onDestroyed: callbackTemplate,\n          //null || function\n          onScrollStart: callbackTemplate,\n          //null || function\n          onScroll: callbackTemplate,\n          //null || function\n          onScrollStop: callbackTemplate,\n          //null || function\n          onOverflowChanged: callbackTemplate,\n          //null || function\n          onOverflowAmountChanged: callbackTemplate,\n          //null || function\n          onDirectionChanged: callbackTemplate,\n          //null || function\n          onContentSizeChanged: callbackTemplate,\n          //null || function\n          onHostSizeChanged: callbackTemplate,\n          //null || function\n          onUpdated: callbackTemplate //null || function\n\n        }\n      };\n\n      var convert = function (template) {\n        var recursive = function (obj) {\n          var key;\n          var val;\n          var valType;\n\n          for (key in obj) {\n            if (!obj[LEXICON.hOP](key)) continue;\n            val = obj[key];\n            valType = type(val);\n            if (valType == TYPES.a) obj[key] = val[template ? 1 : 0];else if (valType == TYPES.o) obj[key] = recursive(val);\n          }\n\n          return obj;\n        };\n\n        return recursive(FRAMEWORK.extend(true, {}, optionsDefaultsAndTemplate));\n      };\n\n      return {\n        _defaults: convert(),\n        _template: convert(true),\n\n        /**\r\n         * Validates the passed object by the passed template.\r\n         * @param obj The object which shall be validated.\r\n         * @param template The template which defines the allowed values and types.\r\n         * @param writeErrors True if errors shall be logged to the console.\r\n         * @param diffObj If a object is passed then only valid differences to this object will be returned.\r\n         * @returns {{}} A object which contains two objects called \"default\" and \"prepared\" which contains only the valid properties of the passed original object and discards not different values compared to the passed diffObj.\r\n         */\n        _validate: function (obj, template, writeErrors, diffObj) {\n          var validatedOptions = {};\n          var validatedOptionsPrepared = {};\n          var objectCopy = FRAMEWORK.extend(true, {}, obj);\n          var inArray = FRAMEWORK.inArray;\n          var isEmptyObj = FRAMEWORK.isEmptyObject;\n\n          var checkObjectProps = function (data, template, diffData, validatedOptions, validatedOptionsPrepared, prevPropName) {\n            for (var prop in template) {\n              if (template[LEXICON.hOP](prop) && data[LEXICON.hOP](prop)) {\n                var isValid = false;\n                var isDiff = false;\n                var templateValue = template[prop];\n                var templateValueType = type(templateValue);\n                var templateIsComplex = templateValueType == TYPES.o;\n                var templateTypes = !COMPATIBILITY.isA(templateValue) ? [templateValue] : templateValue;\n                var dataDiffValue = diffData[prop];\n                var dataValue = data[prop];\n                var dataValueType = type(dataValue);\n                var propPrefix = prevPropName ? prevPropName + '.' : '';\n                var error = \"The option \\\"\" + propPrefix + prop + \"\\\" wasn't set, because\";\n                var errorPossibleTypes = [];\n                var errorRestrictedStrings = [];\n                var restrictedStringValuesSplit;\n                var restrictedStringValuesPossibilitiesSplit;\n                var isRestrictedValue;\n                var mainPossibility;\n                var currType;\n                var i;\n                var v;\n                var j;\n                dataDiffValue = dataDiffValue === undefined ? {} : dataDiffValue; //if the template has a object as value, it means that the options are complex (verschachtelt)\n\n                if (templateIsComplex && dataValueType == TYPES.o) {\n                  validatedOptions[prop] = {};\n                  validatedOptionsPrepared[prop] = {};\n                  checkObjectProps(dataValue, templateValue, dataDiffValue, validatedOptions[prop], validatedOptionsPrepared[prop], propPrefix + prop);\n                  FRAMEWORK.each([data, validatedOptions, validatedOptionsPrepared], function (index, value) {\n                    if (isEmptyObj(value[prop])) {\n                      delete value[prop];\n                    }\n                  });\n                } else if (!templateIsComplex) {\n                  for (i = 0; i < templateTypes[LEXICON.l]; i++) {\n                    currType = templateTypes[i];\n                    templateValueType = type(currType); //if currtype is string and starts with restrictedStringPrefix and end with restrictedStringSuffix\n\n                    isRestrictedValue = templateValueType == TYPES.s && inArray(currType, possibleTemplateTypes) === -1;\n\n                    if (isRestrictedValue) {\n                      errorPossibleTypes.push(TYPES.s); //split it into a array which contains all possible values for example: [\"y:yes\", \"n:no\", \"m:maybe\"]\n\n                      restrictedStringValuesSplit = currType.split(restrictedStringsSplit);\n                      errorRestrictedStrings = errorRestrictedStrings.concat(restrictedStringValuesSplit);\n\n                      for (v = 0; v < restrictedStringValuesSplit[LEXICON.l]; v++) {\n                        //split the possible values into their possibiliteis for example: [\"y\", \"yes\"] -> the first is always the mainPossibility\n                        restrictedStringValuesPossibilitiesSplit = restrictedStringValuesSplit[v].split(restrictedStringsPossibilitiesSplit);\n                        mainPossibility = restrictedStringValuesPossibilitiesSplit[0];\n\n                        for (j = 0; j < restrictedStringValuesPossibilitiesSplit[LEXICON.l]; j++) {\n                          //if any possibility matches with the dataValue, its valid\n                          if (dataValue === restrictedStringValuesPossibilitiesSplit[j]) {\n                            isValid = true;\n                            break;\n                          }\n                        }\n\n                        if (isValid) break;\n                      }\n                    } else {\n                      errorPossibleTypes.push(currType);\n\n                      if (dataValueType === currType) {\n                        isValid = true;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (isValid) {\n                    isDiff = dataValue !== dataDiffValue;\n                    if (isDiff) validatedOptions[prop] = dataValue;\n                    if (isRestrictedValue ? inArray(dataDiffValue, restrictedStringValuesPossibilitiesSplit) < 0 : isDiff) validatedOptionsPrepared[prop] = isRestrictedValue ? mainPossibility : dataValue;\n                  } else if (writeErrors) {\n                    console.warn(error + \" it doesn't accept the type [ \" + dataValueType.toUpperCase() + \" ] with the value of \\\"\" + dataValue + \"\\\".\\r\\n\" + \"Accepted types are: [ \" + errorPossibleTypes.join(', ').toUpperCase() + \" ].\" + (errorRestrictedStrings[length] > 0 ? \"\\r\\nValid strings are: [ \" + errorRestrictedStrings.join(', ').split(restrictedStringsPossibilitiesSplit).join(', ') + \" ].\" : ''));\n                  }\n\n                  delete data[prop];\n                }\n              }\n            }\n          };\n\n          checkObjectProps(objectCopy, template, diffObj || {}, validatedOptions, validatedOptionsPrepared); //add values which aren't specified in the template to the finished validated object to prevent them from being discarded\n\n          /*\r\n          if(keepForeignProps) {\r\n              FRAMEWORK.extend(true, validatedOptions, objectCopy);\r\n              FRAMEWORK.extend(true, validatedOptionsPrepared, objectCopy);\r\n          }\r\n          */\n\n          if (!isEmptyObj(objectCopy) && writeErrors) console.warn('The following options are discarded due to invalidity:\\r\\n' + window.JSON.stringify(objectCopy, null, 2));\n          return {\n            _default: validatedOptions,\n            _prepared: validatedOptionsPrepared\n          };\n        }\n      };\n    }();\n    /**\r\n     * Initializes the object which contains global information about the plugin and each instance of it.\r\n     */\n\n\n    function initOverlayScrollbarsStatics() {\n      if (!_pluginsGlobals) _pluginsGlobals = new OverlayScrollbarsGlobals(_pluginsOptions._defaults);\n      if (!_pluginsAutoUpdateLoop) _pluginsAutoUpdateLoop = new OverlayScrollbarsAutoUpdateLoop(_pluginsGlobals);\n    }\n    /**\r\n     * The global object for the OverlayScrollbars objects. It contains resources which every OverlayScrollbars object needs. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n     * @param defaultOptions\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsGlobals(defaultOptions) {\n      var _base = this;\n\n      var strOverflow = 'overflow';\n      var strHidden = 'hidden';\n      var strScroll = 'scroll';\n      var bodyElement = FRAMEWORK('body');\n      var scrollbarDummyElement = FRAMEWORK('<div id=\"os-dummy-scrollbar-size\"><div></div></div>');\n      var scrollbarDummyElement0 = scrollbarDummyElement[0];\n      var dummyContainerChild = FRAMEWORK(scrollbarDummyElement.children('div').eq(0));\n      bodyElement.append(scrollbarDummyElement);\n      scrollbarDummyElement.hide().show(); //fix IE8 bug (incorrect measuring)\n\n      var nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement0);\n      var nativeScrollbarIsOverlaid = {\n        x: nativeScrollbarSize.x === 0,\n        y: nativeScrollbarSize.y === 0\n      };\n\n      var msie = function () {\n        var ua = window.navigator.userAgent;\n        var strIndexOf = 'indexOf';\n        var strSubString = 'substring';\n        var msie = ua[strIndexOf]('MSIE ');\n        var trident = ua[strIndexOf]('Trident/');\n        var edge = ua[strIndexOf]('Edge/');\n        var rv = ua[strIndexOf]('rv:');\n        var result;\n        var parseIntFunc = parseInt; // IE 10 or older => return version number\n\n        if (msie > 0) result = parseIntFunc(ua[strSubString](msie + 5, ua[strIndexOf]('.', msie)), 10); // IE 11 => return version number\n        else if (trident > 0) result = parseIntFunc(ua[strSubString](rv + 3, ua[strIndexOf]('.', rv)), 10); // Edge (IE 12+) => return version number\n          else if (edge > 0) result = parseIntFunc(ua[strSubString](edge + 5, ua[strIndexOf]('.', edge)), 10); // other browser\n\n        return result;\n      }();\n\n      FRAMEWORK.extend(_base, {\n        defaultOptions: defaultOptions,\n        msie: msie,\n        autoUpdateLoop: false,\n        autoUpdateRecommended: !COMPATIBILITY.mO(),\n        nativeScrollbarSize: nativeScrollbarSize,\n        nativeScrollbarIsOverlaid: nativeScrollbarIsOverlaid,\n        nativeScrollbarStyling: function () {\n          var result = false;\n          scrollbarDummyElement.addClass('os-viewport-native-scrollbars-invisible');\n\n          try {\n            result = scrollbarDummyElement.css('scrollbar-width') === 'none' && (msie > 9 || !msie) || window.getComputedStyle(scrollbarDummyElement0, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\n          } catch (ex) {} //fix opera bug: scrollbar styles will only appear if overflow value is scroll or auto during the activation of the style.\n          //and set overflow to scroll\n          //scrollbarDummyElement.css(strOverflow, strHidden).hide().css(strOverflow, strScroll).show();\n          //return (scrollbarDummyElement0[LEXICON.oH] - scrollbarDummyElement0[LEXICON.cH]) === 0 && (scrollbarDummyElement0[LEXICON.oW] - scrollbarDummyElement0[LEXICON.cW]) === 0;\n\n\n          return result;\n        }(),\n        overlayScrollbarDummySize: {\n          x: 30,\n          y: 30\n        },\n        cssCalc: VENDORS._cssPropertyValue('width', 'calc', '(1px)') || null,\n        restrictedMeasuring: function () {\n          //https://bugzilla.mozilla.org/show_bug.cgi?id=1439305\n          //since 1.11.0 always false -> fixed via CSS (hopefully)\n          scrollbarDummyElement.css(strOverflow, strHidden);\n          var scrollSize = {\n            w: scrollbarDummyElement0[LEXICON.sW],\n            h: scrollbarDummyElement0[LEXICON.sH]\n          };\n          scrollbarDummyElement.css(strOverflow, 'visible');\n          var scrollSize2 = {\n            w: scrollbarDummyElement0[LEXICON.sW],\n            h: scrollbarDummyElement0[LEXICON.sH]\n          };\n          return scrollSize.w - scrollSize2.w !== 0 || scrollSize.h - scrollSize2.h !== 0;\n        }(),\n        rtlScrollBehavior: function () {\n          scrollbarDummyElement.css({\n            'overflow-y': strHidden,\n            'overflow-x': strScroll,\n            'direction': 'rtl'\n          }).scrollLeft(0);\n          var dummyContainerOffset = scrollbarDummyElement.offset();\n          var dummyContainerChildOffset = dummyContainerChild.offset(); //https://github.com/KingSora/OverlayScrollbars/issues/187\n\n          scrollbarDummyElement.scrollLeft(-999);\n          var dummyContainerChildOffsetAfterScroll = dummyContainerChild.offset();\n          return {\n            //origin direction = determines if the zero scroll position is on the left or right side\n            //'i' means 'invert' (i === true means that the axis must be inverted to be correct)\n            //true = on the left side\n            //false = on the right side\n            i: dummyContainerOffset.left === dummyContainerChildOffset.left,\n            //negative = determines if the maximum scroll is positive or negative\n            //'n' means 'negate' (n === true means that the axis must be negated to be correct)\n            //true = negative\n            //false = positive\n            n: dummyContainerChildOffset.left !== dummyContainerChildOffsetAfterScroll.left\n          };\n        }(),\n        supportTransform: !!VENDORS._cssProperty('transform'),\n        supportTransition: !!VENDORS._cssProperty('transition'),\n        supportPassiveEvents: function () {\n          var supportsPassive = false;\n\n          try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n              get: function () {\n                supportsPassive = true;\n              }\n            }));\n          } catch (e) {}\n\n          return supportsPassive;\n        }(),\n        supportResizeObserver: !!COMPATIBILITY.rO(),\n        supportMutationObserver: !!COMPATIBILITY.mO()\n      });\n      scrollbarDummyElement.removeAttr(LEXICON.s).remove(); //Catch zoom event:\n\n      (function () {\n        if (nativeScrollbarIsOverlaid.x && nativeScrollbarIsOverlaid.y) return;\n        var abs = MATH.abs;\n        var windowWidth = COMPATIBILITY.wW();\n        var windowHeight = COMPATIBILITY.wH();\n        var windowDpr = getWindowDPR();\n\n        var onResize = function () {\n          if (INSTANCES().length > 0) {\n            var newW = COMPATIBILITY.wW();\n            var newH = COMPATIBILITY.wH();\n            var deltaW = newW - windowWidth;\n            var deltaH = newH - windowHeight;\n            if (deltaW === 0 && deltaH === 0) return;\n            var deltaWRatio = MATH.round(newW / (windowWidth / 100.0));\n            var deltaHRatio = MATH.round(newH / (windowHeight / 100.0));\n            var absDeltaW = abs(deltaW);\n            var absDeltaH = abs(deltaH);\n            var absDeltaWRatio = abs(deltaWRatio);\n            var absDeltaHRatio = abs(deltaHRatio);\n            var newDPR = getWindowDPR();\n            var deltaIsBigger = absDeltaW > 2 && absDeltaH > 2;\n            var difference = !differenceIsBiggerThanOne(absDeltaWRatio, absDeltaHRatio);\n            var dprChanged = newDPR !== windowDpr && windowDpr > 0;\n            var isZoom = deltaIsBigger && difference && dprChanged;\n            var oldScrollbarSize = _base.nativeScrollbarSize;\n            var newScrollbarSize;\n\n            if (isZoom) {\n              bodyElement.append(scrollbarDummyElement);\n              newScrollbarSize = _base.nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement[0]);\n              scrollbarDummyElement.remove();\n\n              if (oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\n                FRAMEWORK.each(INSTANCES(), function () {\n                  if (INSTANCES(this)) INSTANCES(this).update('zoom');\n                });\n              }\n            }\n\n            windowWidth = newW;\n            windowHeight = newH;\n            windowDpr = newDPR;\n          }\n        };\n\n        function differenceIsBiggerThanOne(valOne, valTwo) {\n          var absValOne = abs(valOne);\n          var absValTwo = abs(valTwo);\n          return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\n        }\n\n        function getWindowDPR() {\n          var dDPI = window.screen.deviceXDPI || 0;\n          var sDPI = window.screen.logicalXDPI || 1;\n          return window.devicePixelRatio || dDPI / sDPI;\n        }\n\n        FRAMEWORK(window).on('resize', onResize);\n      })();\n\n      function calcNativeScrollbarSize(measureElement) {\n        return {\n          x: measureElement[LEXICON.oH] - measureElement[LEXICON.cH],\n          y: measureElement[LEXICON.oW] - measureElement[LEXICON.cW]\n        };\n      }\n    }\n    /**\r\n     * The object which manages the auto update loop for all OverlayScrollbars objects. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsAutoUpdateLoop(globals) {\n      var _base = this;\n\n      var _inArray = FRAMEWORK.inArray;\n      var _getNow = COMPATIBILITY.now;\n      var _strAutoUpdate = 'autoUpdate';\n\n      var _strAutoUpdateInterval = _strAutoUpdate + 'Interval';\n\n      var _strLength = LEXICON.l;\n      var _loopingInstances = [];\n      var _loopingInstancesIntervalCache = [];\n      var _loopIsActive = false;\n      var _loopIntervalDefault = 33;\n      var _loopInterval = _loopIntervalDefault;\n\n      var _loopTimeOld = _getNow();\n\n      var _loopID;\n      /**\r\n       * The auto update loop which will run every 50 milliseconds or less if the update interval of a instance is lower than 50 milliseconds.\r\n       */\n\n\n      var loop = function () {\n        if (_loopingInstances[_strLength] > 0 && _loopIsActive) {\n          _loopID = COMPATIBILITY.rAF()(function () {\n            loop();\n          });\n\n          var timeNew = _getNow();\n\n          var timeDelta = timeNew - _loopTimeOld;\n          var lowestInterval;\n          var instance;\n          var instanceOptions;\n          var instanceAutoUpdateAllowed;\n          var instanceAutoUpdateInterval;\n          var now;\n\n          if (timeDelta > _loopInterval) {\n            _loopTimeOld = timeNew - timeDelta % _loopInterval;\n            lowestInterval = _loopIntervalDefault;\n\n            for (var i = 0; i < _loopingInstances[_strLength]; i++) {\n              instance = _loopingInstances[i];\n\n              if (instance !== undefined) {\n                instanceOptions = instance.options();\n                instanceAutoUpdateAllowed = instanceOptions[_strAutoUpdate];\n                instanceAutoUpdateInterval = MATH.max(1, instanceOptions[_strAutoUpdateInterval]);\n                now = _getNow();\n\n                if ((instanceAutoUpdateAllowed === true || instanceAutoUpdateAllowed === null) && now - _loopingInstancesIntervalCache[i] > instanceAutoUpdateInterval) {\n                  instance.update('auto');\n                  _loopingInstancesIntervalCache[i] = new Date(now += instanceAutoUpdateInterval);\n                }\n\n                lowestInterval = MATH.max(1, MATH.min(lowestInterval, instanceAutoUpdateInterval));\n              }\n            }\n\n            _loopInterval = lowestInterval;\n          }\n        } else {\n          _loopInterval = _loopIntervalDefault;\n        }\n      };\n      /**\r\n       * Add OverlayScrollbars instance to the auto update loop. Only successful if the instance isn't already added.\r\n       * @param instance The instance which shall be updated in a loop automatically.\r\n       */\n\n\n      _base.add = function (instance) {\n        if (_inArray(instance, _loopingInstances) === -1) {\n          _loopingInstances.push(instance);\n\n          _loopingInstancesIntervalCache.push(_getNow());\n\n          if (_loopingInstances[_strLength] > 0 && !_loopIsActive) {\n            _loopIsActive = true;\n            globals.autoUpdateLoop = _loopIsActive;\n            loop();\n          }\n        }\n      };\n      /**\r\n       * Remove OverlayScrollbars instance from the auto update loop. Only successful if the instance was added before.\r\n       * @param instance The instance which shall be updated in a loop automatically.\r\n       */\n\n\n      _base.remove = function (instance) {\n        var index = _inArray(instance, _loopingInstances);\n\n        if (index > -1) {\n          //remove from loopingInstances list\n          _loopingInstancesIntervalCache.splice(index, 1);\n\n          _loopingInstances.splice(index, 1); //correct update loop behavior\n\n\n          if (_loopingInstances[_strLength] === 0 && _loopIsActive) {\n            _loopIsActive = false;\n            globals.autoUpdateLoop = _loopIsActive;\n\n            if (_loopID !== undefined) {\n              COMPATIBILITY.cAF()(_loopID);\n              _loopID = -1;\n            }\n          }\n        }\n      };\n    }\n    /**\r\n     * A object which manages the scrollbars visibility of the target element.\r\n     * @param pluginTargetElement The element from which the scrollbars shall be hidden.\r\n     * @param options The custom options.\r\n     * @param extensions The custom extensions.\r\n     * @param globals\r\n     * @param autoUpdateLoop\r\n     * @returns {*}\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsInstance(pluginTargetElement, options, extensions, globals, autoUpdateLoop) {\n      //shortcuts\n      var type = COMPATIBILITY.type;\n      var inArray = FRAMEWORK.inArray;\n      var each = FRAMEWORK.each; //make correct instanceof\n\n      var _base = new _plugin();\n\n      var _frameworkProto = FRAMEWORK[LEXICON.p]; //if passed element is no HTML element: skip and return\n\n      if (!isHTMLElement(pluginTargetElement)) return; //if passed element is already initialized: set passed options if there are any and return its instance\n\n      if (INSTANCES(pluginTargetElement)) {\n        var inst = INSTANCES(pluginTargetElement);\n        inst.options(options);\n        return inst;\n      } //globals:\n\n\n      var _nativeScrollbarIsOverlaid;\n\n      var _overlayScrollbarDummySize;\n\n      var _rtlScrollBehavior;\n\n      var _autoUpdateRecommended;\n\n      var _msieVersion;\n\n      var _nativeScrollbarStyling;\n\n      var _cssCalc;\n\n      var _nativeScrollbarSize;\n\n      var _supportTransition;\n\n      var _supportTransform;\n\n      var _supportPassiveEvents;\n\n      var _supportResizeObserver;\n\n      var _supportMutationObserver;\n\n      var _restrictedMeasuring; //general readonly:\n\n\n      var _initialized;\n\n      var _destroyed;\n\n      var _isTextarea;\n\n      var _isBody;\n\n      var _documentMixed;\n\n      var _domExists; //general:\n\n\n      var _isBorderBox;\n\n      var _sizeAutoObserverAdded;\n\n      var _paddingX;\n\n      var _paddingY;\n\n      var _borderX;\n\n      var _borderY;\n\n      var _marginX;\n\n      var _marginY;\n\n      var _isRTL;\n\n      var _sleeping;\n\n      var _contentBorderSize = {};\n      var _scrollHorizontalInfo = {};\n      var _scrollVerticalInfo = {};\n      var _viewportSize = {};\n      var _nativeScrollbarMinSize = {}; //naming:\t\n\n      var _strMinusHidden = '-hidden';\n      var _strMarginMinus = 'margin-';\n      var _strPaddingMinus = 'padding-';\n      var _strBorderMinus = 'border-';\n      var _strTop = 'top';\n      var _strRight = 'right';\n      var _strBottom = 'bottom';\n      var _strLeft = 'left';\n      var _strMinMinus = 'min-';\n      var _strMaxMinus = 'max-';\n      var _strWidth = 'width';\n      var _strHeight = 'height';\n      var _strFloat = 'float';\n      var _strEmpty = '';\n      var _strAuto = 'auto';\n      var _strSync = 'sync';\n      var _strScroll = 'scroll';\n      var _strHundredPercent = '100%';\n      var _strX = 'x';\n      var _strY = 'y';\n      var _strDot = '.';\n      var _strSpace = ' ';\n      var _strScrollbar = 'scrollbar';\n      var _strMinusHorizontal = '-horizontal';\n      var _strMinusVertical = '-vertical';\n\n      var _strScrollLeft = _strScroll + 'Left';\n\n      var _strScrollTop = _strScroll + 'Top';\n\n      var _strMouseTouchDownEvent = 'mousedown touchstart';\n      var _strMouseTouchUpEvent = 'mouseup touchend touchcancel';\n      var _strMouseTouchMoveEvent = 'mousemove touchmove';\n      var _strMouseEnter = 'mouseenter';\n      var _strMouseLeave = 'mouseleave';\n      var _strKeyDownEvent = 'keydown';\n      var _strKeyUpEvent = 'keyup';\n      var _strSelectStartEvent = 'selectstart';\n      var _strTransitionEndEvent = 'transitionend webkitTransitionEnd oTransitionEnd';\n      var _strResizeObserverProperty = '__overlayScrollbarsRO__'; //class names:\t\n\n      var _cassNamesPrefix = 'os-';\n\n      var _classNameHTMLElement = _cassNamesPrefix + 'html';\n\n      var _classNameHostElement = _cassNamesPrefix + 'host';\n\n      var _classNameHostElementForeign = _classNameHostElement + '-foreign';\n\n      var _classNameHostTextareaElement = _classNameHostElement + '-textarea';\n\n      var _classNameHostScrollbarHorizontalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusHorizontal + _strMinusHidden;\n\n      var _classNameHostScrollbarVerticalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusVertical + _strMinusHidden;\n\n      var _classNameHostTransition = _classNameHostElement + '-transition';\n\n      var _classNameHostRTL = _classNameHostElement + '-rtl';\n\n      var _classNameHostResizeDisabled = _classNameHostElement + '-resize-disabled';\n\n      var _classNameHostScrolling = _classNameHostElement + '-scrolling';\n\n      var _classNameHostOverflow = _classNameHostElement + '-overflow';\n\n      var _classNameHostOverflow = _classNameHostElement + '-overflow';\n\n      var _classNameHostOverflowX = _classNameHostOverflow + '-x';\n\n      var _classNameHostOverflowY = _classNameHostOverflow + '-y';\n\n      var _classNameTextareaElement = _cassNamesPrefix + 'textarea';\n\n      var _classNameTextareaCoverElement = _classNameTextareaElement + '-cover';\n\n      var _classNamePaddingElement = _cassNamesPrefix + 'padding';\n\n      var _classNameViewportElement = _cassNamesPrefix + 'viewport';\n\n      var _classNameViewportNativeScrollbarsInvisible = _classNameViewportElement + '-native-scrollbars-invisible';\n\n      var _classNameViewportNativeScrollbarsOverlaid = _classNameViewportElement + '-native-scrollbars-overlaid';\n\n      var _classNameContentElement = _cassNamesPrefix + 'content';\n\n      var _classNameContentArrangeElement = _cassNamesPrefix + 'content-arrange';\n\n      var _classNameContentGlueElement = _cassNamesPrefix + 'content-glue';\n\n      var _classNameSizeAutoObserverElement = _cassNamesPrefix + 'size-auto-observer';\n\n      var _classNameResizeObserverElement = _cassNamesPrefix + 'resize-observer';\n\n      var _classNameResizeObserverItemElement = _cassNamesPrefix + 'resize-observer-item';\n\n      var _classNameResizeObserverItemFinalElement = _classNameResizeObserverItemElement + '-final';\n\n      var _classNameTextInherit = _cassNamesPrefix + 'text-inherit';\n\n      var _classNameScrollbar = _cassNamesPrefix + _strScrollbar;\n\n      var _classNameScrollbarTrack = _classNameScrollbar + '-track';\n\n      var _classNameScrollbarTrackOff = _classNameScrollbarTrack + '-off';\n\n      var _classNameScrollbarHandle = _classNameScrollbar + '-handle';\n\n      var _classNameScrollbarHandleOff = _classNameScrollbarHandle + '-off';\n\n      var _classNameScrollbarUnusable = _classNameScrollbar + '-unusable';\n\n      var _classNameScrollbarAutoHidden = _classNameScrollbar + '-' + _strAuto + _strMinusHidden;\n\n      var _classNameScrollbarCorner = _classNameScrollbar + '-corner';\n\n      var _classNameScrollbarCornerResize = _classNameScrollbarCorner + '-resize';\n\n      var _classNameScrollbarCornerResizeB = _classNameScrollbarCornerResize + '-both';\n\n      var _classNameScrollbarCornerResizeH = _classNameScrollbarCornerResize + _strMinusHorizontal;\n\n      var _classNameScrollbarCornerResizeV = _classNameScrollbarCornerResize + _strMinusVertical;\n\n      var _classNameScrollbarHorizontal = _classNameScrollbar + _strMinusHorizontal;\n\n      var _classNameScrollbarVertical = _classNameScrollbar + _strMinusVertical;\n\n      var _classNameDragging = _cassNamesPrefix + 'dragging';\n\n      var _classNameThemeNone = _cassNamesPrefix + 'theme-none';\n\n      var _classNamesDynamicDestroy = [_classNameViewportNativeScrollbarsInvisible, _classNameViewportNativeScrollbarsOverlaid, _classNameScrollbarTrackOff, _classNameScrollbarHandleOff, _classNameScrollbarUnusable, _classNameScrollbarAutoHidden, _classNameScrollbarCornerResize, _classNameScrollbarCornerResizeB, _classNameScrollbarCornerResizeH, _classNameScrollbarCornerResizeV, _classNameDragging].join(_strSpace); //callbacks:\t\n\n\n      var _callbacksInitQeueue = []; //attrs viewport shall inherit from target\t\n\n      var _viewportAttrsFromTarget = [LEXICON.ti]; //options:\t\n\n      var _defaultOptions;\n\n      var _currentOptions;\n\n      var _currentPreparedOptions; //extensions:\t\n\n\n      var _extensions = {};\n      var _extensionsPrivateMethods = 'added removed on contract'; //update\t\n\n      var _lastUpdateTime;\n\n      var _swallowedUpdateHints = {};\n\n      var _swallowedUpdateTimeout;\n\n      var _swallowUpdateLag = 42;\n      var _updateOnLoadEventName = 'load';\n      var _updateOnLoadElms = []; //DOM elements:\t\n\n      var _windowElement;\n\n      var _documentElement;\n\n      var _htmlElement;\n\n      var _bodyElement;\n\n      var _targetElement; //the target element of this OverlayScrollbars object\t\n\n\n      var _hostElement; //the host element of this OverlayScrollbars object -> may be the same as targetElement\t\n\n\n      var _sizeAutoObserverElement; //observes size auto changes\t\n\n\n      var _sizeObserverElement; //observes size and padding changes\t\n\n\n      var _paddingElement; //manages the padding\t\n\n\n      var _viewportElement; //is the viewport of our scrollbar model\t\n\n\n      var _contentElement; //the element which holds the content\t\n\n\n      var _contentArrangeElement; //is needed for correct sizing of the content element (only if native scrollbars are overlays)\t\n\n\n      var _contentGlueElement; //has always the size of the content element\t\n\n\n      var _textareaCoverElement; //only applied if target is a textarea element. Used for correct size calculation and for prevention of uncontrolled scrolling\t\n\n\n      var _scrollbarCornerElement;\n\n      var _scrollbarHorizontalElement;\n\n      var _scrollbarHorizontalTrackElement;\n\n      var _scrollbarHorizontalHandleElement;\n\n      var _scrollbarVerticalElement;\n\n      var _scrollbarVerticalTrackElement;\n\n      var _scrollbarVerticalHandleElement;\n\n      var _windowElementNative;\n\n      var _documentElementNative;\n\n      var _targetElementNative;\n\n      var _hostElementNative;\n\n      var _sizeAutoObserverElementNative;\n\n      var _sizeObserverElementNative;\n\n      var _paddingElementNative;\n\n      var _viewportElementNative;\n\n      var _contentElementNative; //Cache:\t\n\n\n      var _hostSizeCache;\n\n      var _contentScrollSizeCache;\n\n      var _arrangeContentSizeCache;\n\n      var _hasOverflowCache;\n\n      var _hideOverflowCache;\n\n      var _widthAutoCache;\n\n      var _heightAutoCache;\n\n      var _cssBoxSizingCache;\n\n      var _cssPaddingCache;\n\n      var _cssBorderCache;\n\n      var _cssMarginCache;\n\n      var _cssDirectionCache;\n\n      var _cssDirectionDetectedCache;\n\n      var _paddingAbsoluteCache;\n\n      var _clipAlwaysCache;\n\n      var _contentGlueSizeCache;\n\n      var _overflowBehaviorCache;\n\n      var _overflowAmountCache;\n\n      var _ignoreOverlayScrollbarHidingCache;\n\n      var _autoUpdateCache;\n\n      var _sizeAutoCapableCache;\n\n      var _contentElementScrollSizeChangeDetectedCache;\n\n      var _hostElementSizeChangeDetectedCache;\n\n      var _scrollbarsVisibilityCache;\n\n      var _scrollbarsAutoHideCache;\n\n      var _scrollbarsClickScrollingCache;\n\n      var _scrollbarsDragScrollingCache;\n\n      var _resizeCache;\n\n      var _normalizeRTLCache;\n\n      var _classNameCache;\n\n      var _oldClassName;\n\n      var _textareaAutoWrappingCache;\n\n      var _textareaInfoCache;\n\n      var _textareaSizeCache;\n\n      var _textareaDynHeightCache;\n\n      var _textareaDynWidthCache;\n\n      var _bodyMinSizeCache;\n\n      var _updateAutoCache = {}; //MutationObserver:\t\n\n      var _mutationObserverHost;\n\n      var _mutationObserverContent;\n\n      var _mutationObserverHostCallback;\n\n      var _mutationObserverContentCallback;\n\n      var _mutationObserversConnected;\n\n      var _mutationObserverAttrsTextarea = ['wrap', 'cols', 'rows'];\n\n      var _mutationObserverAttrsHost = [LEXICON.i, LEXICON.c, LEXICON.s, 'open'].concat(_viewportAttrsFromTarget); //events:\t\n\n\n      var _destroyEvents = []; //textarea:\t\n\n      var _textareaHasFocus; //scrollbars:\t\n\n\n      var _scrollbarsAutoHideTimeoutId;\n\n      var _scrollbarsAutoHideMoveTimeoutId;\n\n      var _scrollbarsAutoHideDelay;\n\n      var _scrollbarsAutoHideNever;\n\n      var _scrollbarsAutoHideScroll;\n\n      var _scrollbarsAutoHideMove;\n\n      var _scrollbarsAutoHideLeave;\n\n      var _scrollbarsHandleHovered;\n\n      var _scrollbarsHandlesDefineScrollPos; //resize\t\n\n\n      var _resizeNone;\n\n      var _resizeBoth;\n\n      var _resizeHorizontal;\n\n      var _resizeVertical; //==== Event Listener ====//\t\n\n      /**\t\r\n       * Adds or removes a event listener from the given element. \t\r\n       * @param element The element to which the event listener shall be applied or removed.\t\r\n       * @param eventNames The name(s) of the events.\t\r\n       * @param listener The method which shall be called.\t\r\n       * @param remove True if the handler shall be removed, false or undefined if the handler shall be added.\t\r\n       */\n\n\n      function setupResponsiveEventListener(element, eventNames, listener, remove, passive) {\n        var collected = COMPATIBILITY.isA(eventNames) && COMPATIBILITY.isA(listener);\n        var method = remove ? 'removeEventListener' : 'addEventListener';\n        var onOff = remove ? 'off' : 'on';\n        var events = collected ? false : eventNames.split(_strSpace);\n        var i = 0;\n\n        if (collected) {\n          for (; i < eventNames[LEXICON.l]; i++) setupResponsiveEventListener(element, eventNames[i], listener[i], remove);\n        } else {\n          for (; i < events[LEXICON.l]; i++) {\n            if (_supportPassiveEvents) element[0][method](events[i], listener, {\n              passive: passive || false\n            });else element[onOff](events[i], listener);\n          }\n        }\n      }\n\n      function addDestroyEventListener(element, eventNames, listener, passive) {\n        setupResponsiveEventListener(element, eventNames, listener, false, passive);\n\n        _destroyEvents.push(COMPATIBILITY.bind(setupResponsiveEventListener, 0, element, eventNames, listener, true, passive));\n      } //==== Resize Observer ====//\n\n      /**\r\n       * Adds or removes a resize observer from the given element.\r\n       * @param targetElement The element to which the resize observer shall be added or removed.\r\n       * @param onElementResizedCallback The callback which is fired every time the resize observer registers a size change or false / undefined if the resizeObserver shall be removed.\r\n       */\n\n\n      function setupResizeObserver(targetElement, onElementResizedCallback) {\n        if (targetElement) {\n          var resizeObserver = COMPATIBILITY.rO();\n          var strAnimationStartEvent = 'animationstart mozAnimationStart webkitAnimationStart MSAnimationStart';\n          var strChildNodes = 'childNodes';\n          var constScroll = 3333333;\n\n          var callback = function () {\n            targetElement[_strScrollTop](constScroll)[_strScrollLeft](_isRTL ? _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll : constScroll);\n\n            onElementResizedCallback();\n          }; //add resize observer:\n\n\n          if (onElementResizedCallback) {\n            if (_supportResizeObserver) {\n              var element = targetElement.addClass('observed').append(generateDiv(_classNameResizeObserverElement)).contents()[0];\n              var observer = element[_strResizeObserverProperty] = new resizeObserver(callback);\n              observer.observe(element);\n            } else {\n              if (_msieVersion > 9 || !_autoUpdateRecommended) {\n                targetElement.prepend(generateDiv(_classNameResizeObserverElement, generateDiv({\n                  c: _classNameResizeObserverItemElement,\n                  dir: 'ltr'\n                }, generateDiv(_classNameResizeObserverItemElement, generateDiv(_classNameResizeObserverItemFinalElement)) + generateDiv(_classNameResizeObserverItemElement, generateDiv({\n                  c: _classNameResizeObserverItemFinalElement,\n                  style: 'width: 200%; height: 200%'\n                })))));\n                var observerElement = targetElement[0][strChildNodes][0][strChildNodes][0];\n                var shrinkElement = FRAMEWORK(observerElement[strChildNodes][1]);\n                var expandElement = FRAMEWORK(observerElement[strChildNodes][0]);\n                var expandElementChild = FRAMEWORK(expandElement[0][strChildNodes][0]);\n                var widthCache = observerElement[LEXICON.oW];\n                var heightCache = observerElement[LEXICON.oH];\n                var isDirty;\n                var rAFId;\n                var currWidth;\n                var currHeight;\n                var factor = 2;\n                var nativeScrollbarSize = globals.nativeScrollbarSize; //care don't make changes to this object!!!\n\n                var reset = function () {\n                  /*\r\n                   var sizeResetWidth = observerElement[LEXICON.oW] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                   var sizeResetHeight = observerElement[LEXICON.oH] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                   var expandChildCSS = {};\r\n                   expandChildCSS[_strWidth] = sizeResetWidth;\r\n                   expandChildCSS[_strHeight] = sizeResetHeight;\r\n                   expandElementChild.css(expandChildCSS);\r\n                       expandElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                   shrinkElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                   */\n                  expandElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\n\n                  shrinkElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\n                };\n\n                var onResized = function () {\n                  rAFId = 0;\n                  if (!isDirty) return;\n                  widthCache = currWidth;\n                  heightCache = currHeight;\n                  callback();\n                };\n\n                var onScroll = function (event) {\n                  currWidth = observerElement[LEXICON.oW];\n                  currHeight = observerElement[LEXICON.oH];\n                  isDirty = currWidth != widthCache || currHeight != heightCache;\n\n                  if (event && isDirty && !rAFId) {\n                    COMPATIBILITY.cAF()(rAFId);\n                    rAFId = COMPATIBILITY.rAF()(onResized);\n                  } else if (!event) onResized();\n\n                  reset();\n\n                  if (event) {\n                    COMPATIBILITY.prvD(event);\n                    COMPATIBILITY.stpP(event);\n                  }\n\n                  return false;\n                };\n\n                var expandChildCSS = {};\n                var observerElementCSS = {};\n                setTopRightBottomLeft(observerElementCSS, _strEmpty, [-((nativeScrollbarSize.y + 1) * factor), nativeScrollbarSize.x * -factor, nativeScrollbarSize.y * -factor, -((nativeScrollbarSize.x + 1) * factor)]);\n                FRAMEWORK(observerElement).css(observerElementCSS);\n                expandElement.on(_strScroll, onScroll);\n                shrinkElement.on(_strScroll, onScroll);\n                targetElement.on(strAnimationStartEvent, function () {\n                  onScroll(false);\n                }); //lets assume that the divs will never be that large and a constant value is enough\n\n                expandChildCSS[_strWidth] = constScroll;\n                expandChildCSS[_strHeight] = constScroll;\n                expandElementChild.css(expandChildCSS);\n                reset();\n              } else {\n                var attachEvent = _documentElementNative.attachEvent;\n                var isIE = _msieVersion !== undefined;\n\n                if (attachEvent) {\n                  targetElement.prepend(generateDiv(_classNameResizeObserverElement));\n                  findFirst(targetElement, _strDot + _classNameResizeObserverElement)[0].attachEvent('onresize', callback);\n                } else {\n                  var obj = _documentElementNative.createElement(TYPES.o);\n\n                  obj.setAttribute(LEXICON.ti, '-1');\n                  obj.setAttribute(LEXICON.c, _classNameResizeObserverElement);\n\n                  obj.onload = function () {\n                    var wnd = this.contentDocument.defaultView;\n                    wnd.addEventListener('resize', callback);\n                    wnd.document.documentElement.style.display = 'none';\n                  };\n\n                  obj.type = 'text/html';\n                  if (isIE) targetElement.prepend(obj);\n                  obj.data = 'about:blank';\n                  if (!isIE) targetElement.prepend(obj);\n                  targetElement.on(strAnimationStartEvent, callback);\n                }\n              }\n            }\n\n            if (targetElement[0] === _sizeObserverElementNative) {\n              var directionChanged = function () {\n                var dir = _hostElement.css('direction');\n\n                var css = {};\n                var scrollLeftValue = 0;\n                var result = false;\n\n                if (dir !== _cssDirectionDetectedCache) {\n                  if (dir === 'ltr') {\n                    css[_strLeft] = 0;\n                    css[_strRight] = _strAuto;\n                    scrollLeftValue = constScroll;\n                  } else {\n                    css[_strLeft] = _strAuto;\n                    css[_strRight] = 0;\n                    scrollLeftValue = _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll;\n                  } //execution order is important for IE!!!\n\n\n                  _sizeObserverElement.children().eq(0).css(css);\n\n                  _sizeObserverElement[_strScrollLeft](scrollLeftValue)[_strScrollTop](constScroll);\n\n                  _cssDirectionDetectedCache = dir;\n                  result = true;\n                }\n\n                return result;\n              };\n\n              directionChanged();\n              addDestroyEventListener(targetElement, _strScroll, function (event) {\n                if (directionChanged()) update();\n                COMPATIBILITY.prvD(event);\n                COMPATIBILITY.stpP(event);\n                return false;\n              });\n            }\n          } //remove resize observer:\n          else {\n              if (_supportResizeObserver) {\n                var element = targetElement.contents()[0];\n                var resizeObserverObj = element[_strResizeObserverProperty];\n\n                if (resizeObserverObj) {\n                  resizeObserverObj.disconnect();\n                  delete element[_strResizeObserverProperty];\n                }\n              } else {\n                remove(targetElement.children(_strDot + _classNameResizeObserverElement).eq(0));\n              }\n            }\n        }\n      }\n      /**\r\n       * Freezes or unfreezes the given resize observer.\r\n       * @param targetElement The element to which the target resize observer is applied.\r\n       * @param freeze True if the resize observer shall be frozen, false otherwise.\r\n       \r\n      function freezeResizeObserver(targetElement, freeze) {\r\n          if (targetElement !== undefined) {\r\n              if(freeze) {\r\n                  if (_supportResizeObserver) {\r\n                      var element = targetElement.contents()[0];\r\n                      element[_strResizeObserverProperty].unobserve(element);\r\n                  }\r\n                  else {\r\n                      targetElement = targetElement.children(_strDot + _classNameResizeObserverElement).eq(0);\r\n                      var w = targetElement.css(_strWidth);\r\n                      var h = targetElement.css(_strHeight);\r\n                      var css = {};\r\n                      css[_strWidth] = w;\r\n                      css[_strHeight] = h;\r\n                      targetElement.css(css);\r\n                  }\r\n              }\r\n              else {\r\n                  if (_supportResizeObserver) {\r\n                      var element = targetElement.contents()[0];\r\n                      element[_strResizeObserverProperty].observe(element);\r\n                  }\r\n                  else {\r\n                      var css = { };\r\n                      css[_strHeight] = _strEmpty;\r\n                      css[_strWidth] = _strEmpty;\r\n                      targetElement.children(_strDot + _classNameResizeObserverElement).eq(0).css(css);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      */\n      //==== Mutation Observers ====//\n\n      /**\r\n       * Creates MutationObservers for the host and content Element if they are supported.\r\n       */\n\n\n      function createMutationObservers() {\n        if (_supportMutationObserver) {\n          var mutationObserverContentLag = 11;\n          var mutationObserver = COMPATIBILITY.mO();\n          var contentLastUpdate = COMPATIBILITY.now();\n          var mutationTarget;\n          var mutationAttrName;\n          var mutationIsClass;\n          var oldMutationVal;\n          var newClassVal;\n          var hostClassNameRegex;\n          var contentTimeout;\n          var now;\n          var sizeAuto;\n          var action;\n\n          _mutationObserverHostCallback = function (mutations) {\n            var doUpdate = false;\n            var doUpdateForce = false;\n            var mutation;\n            var mutatedAttrs = [];\n\n            if (_initialized && !_sleeping) {\n              each(mutations, function () {\n                mutation = this;\n                mutationTarget = mutation.target;\n                mutationAttrName = mutation.attributeName;\n                mutationIsClass = mutationAttrName === LEXICON.c;\n                oldMutationVal = mutation.oldValue;\n                newClassVal = mutationTarget.className;\n\n                if (_domExists && mutationIsClass && !doUpdateForce) {\n                  // if old class value contains _classNameHostElementForeign and new class value doesn't\n                  if (oldMutationVal.indexOf(_classNameHostElementForeign) > -1 && newClassVal.indexOf(_classNameHostElementForeign) < 0) {\n                    hostClassNameRegex = createHostClassNameRegExp(true);\n                    _hostElementNative.className = newClassVal.split(_strSpace).concat(oldMutationVal.split(_strSpace).filter(function (name) {\n                      return name.match(hostClassNameRegex);\n                    })).join(_strSpace);\n                    doUpdate = doUpdateForce = true;\n                  }\n                }\n\n                if (!doUpdate) {\n                  doUpdate = mutationIsClass ? hostClassNamesChanged(oldMutationVal, newClassVal) : mutationAttrName === LEXICON.s ? oldMutationVal !== mutationTarget[LEXICON.s].cssText : true;\n                }\n\n                mutatedAttrs.push(mutationAttrName);\n              });\n              updateViewportAttrsFromTarget(mutatedAttrs);\n              if (doUpdate) _base.update(doUpdateForce || _strAuto);\n            }\n\n            return doUpdate;\n          };\n\n          _mutationObserverContentCallback = function (mutations) {\n            var doUpdate = false;\n            var mutation;\n\n            if (_initialized && !_sleeping) {\n              each(mutations, function () {\n                mutation = this;\n                doUpdate = isUnknownMutation(mutation);\n                return !doUpdate;\n              });\n\n              if (doUpdate) {\n                now = COMPATIBILITY.now();\n                sizeAuto = _heightAutoCache || _widthAutoCache;\n\n                action = function () {\n                  if (!_destroyed) {\n                    contentLastUpdate = now; //if cols, rows or wrap attr was changed\n\n                    if (_isTextarea) textareaUpdate();\n                    if (sizeAuto) update();else _base.update(_strAuto);\n                  }\n                };\n\n                clearTimeout(contentTimeout);\n                if (mutationObserverContentLag <= 0 || now - contentLastUpdate > mutationObserverContentLag || !sizeAuto) action();else contentTimeout = setTimeout(action, mutationObserverContentLag);\n              }\n            }\n\n            return doUpdate;\n          };\n\n          _mutationObserverHost = new mutationObserver(_mutationObserverHostCallback);\n          _mutationObserverContent = new mutationObserver(_mutationObserverContentCallback);\n        }\n      }\n      /**\r\n       * Connects the MutationObservers if they are supported.\r\n       */\n\n\n      function connectMutationObservers() {\n        if (_supportMutationObserver && !_mutationObserversConnected) {\n          _mutationObserverHost.observe(_hostElementNative, {\n            attributes: true,\n            attributeOldValue: true,\n            attributeFilter: _mutationObserverAttrsHost\n          });\n\n          _mutationObserverContent.observe(_isTextarea ? _targetElementNative : _contentElementNative, {\n            attributes: true,\n            attributeOldValue: true,\n            subtree: !_isTextarea,\n            childList: !_isTextarea,\n            characterData: !_isTextarea,\n            attributeFilter: _isTextarea ? _mutationObserverAttrsTextarea : _mutationObserverAttrsHost\n          });\n\n          _mutationObserversConnected = true;\n        }\n      }\n      /**\r\n       * Disconnects the MutationObservers if they are supported.\r\n       */\n\n\n      function disconnectMutationObservers() {\n        if (_supportMutationObserver && _mutationObserversConnected) {\n          _mutationObserverHost.disconnect();\n\n          _mutationObserverContent.disconnect();\n\n          _mutationObserversConnected = false;\n        }\n      } //==== Events of elements ====//\n\n      /**\r\n       * This method gets called every time the host element gets resized. IMPORTANT: Padding changes are detected too!!\r\n       * It refreshes the hostResizedEventArgs and the hostSizeResizeCache.\r\n       * If there are any size changes, the update method gets called.\r\n       */\n\n\n      function hostOnResized() {\n        if (!_sleeping) {\n          var changed;\n          var hostSize = {\n            w: _sizeObserverElementNative[LEXICON.sW],\n            h: _sizeObserverElementNative[LEXICON.sH]\n          };\n          changed = checkCache(hostSize, _hostElementSizeChangeDetectedCache);\n          _hostElementSizeChangeDetectedCache = hostSize;\n          if (changed) update({\n            _hostSizeChanged: true\n          });\n        }\n      }\n      /**\r\n       * The mouse enter event of the host element. This event is only needed for the autoHide feature.\r\n       */\n\n\n      function hostOnMouseEnter() {\n        if (_scrollbarsAutoHideLeave) refreshScrollbarsAutoHide(true);\n      }\n      /**\r\n       * The mouse leave event of the host element. This event is only needed for the autoHide feature.\r\n       */\n\n\n      function hostOnMouseLeave() {\n        if (_scrollbarsAutoHideLeave && !_bodyElement.hasClass(_classNameDragging)) refreshScrollbarsAutoHide(false);\n      }\n      /**\r\n       * The mouse move event of the host element. This event is only needed for the autoHide \"move\" feature.\r\n       */\n\n\n      function hostOnMouseMove() {\n        if (_scrollbarsAutoHideMove) {\n          refreshScrollbarsAutoHide(true);\n          clearTimeout(_scrollbarsAutoHideMoveTimeoutId);\n          _scrollbarsAutoHideMoveTimeoutId = setTimeout(function () {\n            if (_scrollbarsAutoHideMove && !_destroyed) refreshScrollbarsAutoHide(false);\n          }, 100);\n        }\n      }\n      /**\r\n       * Prevents text from deselection if attached to the document element on the mousedown event of a DOM element.\r\n       * @param event The select start event.\r\n       */\n\n\n      function documentOnSelectStart(event) {\n        COMPATIBILITY.prvD(event);\n        return false;\n      }\n      /**\t\r\n       * A callback which will be called after a element has loaded.\t\r\n       */\n\n\n      function updateOnLoadCallback(event) {\n        var elm = FRAMEWORK(event.target);\n        eachUpdateOnLoad(function (i, updateOnLoadSelector) {\n          if (elm.is(updateOnLoadSelector)) {\n            update({\n              _contentSizeChanged: true\n            });\n          }\n        });\n      }\n      /**\r\n      * Adds or removes mouse & touch events of the host element. (for handling auto-hiding of the scrollbars)\r\n      * @param destroy Indicates whether the events shall be added or removed.\r\n      */\n\n\n      function setupHostMouseTouchEvents(destroy) {\n        if (!destroy) setupHostMouseTouchEvents(true);\n        setupResponsiveEventListener(_hostElement, _strMouseTouchMoveEvent.split(_strSpace)[0], hostOnMouseMove, !_scrollbarsAutoHideMove || destroy, true);\n        setupResponsiveEventListener(_hostElement, [_strMouseEnter, _strMouseLeave], [hostOnMouseEnter, hostOnMouseLeave], !_scrollbarsAutoHideLeave || destroy, true); //if the plugin is initialized and the mouse is over the host element, make the scrollbars visible\n\n        if (!_initialized && !destroy) _hostElement.one('mouseover', hostOnMouseEnter);\n      } //==== Update Detection ====//\n\n      /**\r\n       * Measures the min width and min height of the body element and refreshes the related cache.\r\n       * @returns {boolean} True if the min width or min height has changed, false otherwise.\r\n       */\n\n\n      function bodyMinSizeChanged() {\n        var bodyMinSize = {};\n\n        if (_isBody && _contentArrangeElement) {\n          bodyMinSize.w = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strWidth));\n          bodyMinSize.h = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strHeight));\n          bodyMinSize.c = checkCache(bodyMinSize, _bodyMinSizeCache);\n          bodyMinSize.f = true; //flag for \"measured at least once\"\n        }\n\n        _bodyMinSizeCache = bodyMinSize;\n        return !!bodyMinSize.c;\n      }\n      /**\r\n       * Returns true if the class names really changed (new class without plugin host prefix)\r\n       * @param oldClassNames The old ClassName string or array.\r\n       * @param newClassNames The new ClassName string or array.\r\n       * @returns {boolean} True if the class names has really changed, false otherwise.\r\n       */\n\n\n      function hostClassNamesChanged(oldClassNames, newClassNames) {\n        var currClasses = typeof newClassNames == TYPES.s ? newClassNames.split(_strSpace) : [];\n        var oldClasses = typeof oldClassNames == TYPES.s ? oldClassNames.split(_strSpace) : [];\n        var diff = getArrayDifferences(oldClasses, currClasses); // remove none theme from diff list to prevent update\n\n        var idx = inArray(_classNameThemeNone, diff);\n        var i;\n        var regex;\n        if (idx > -1) diff.splice(idx, 1);\n\n        if (diff[LEXICON.l] > 0) {\n          regex = createHostClassNameRegExp(true, true);\n\n          for (i = 0; i < diff.length; i++) {\n            if (!diff[i].match(regex)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n      /**\r\n       * Returns true if the given mutation is not from a from the plugin generated element. If the target element is a textarea the mutation is always unknown.\r\n       * @param mutation The mutation which shall be checked.\r\n       * @returns {boolean} True if the mutation is from a unknown element, false otherwise.\r\n       */\n\n\n      function isUnknownMutation(mutation) {\n        var attributeName = mutation.attributeName;\n        var mutationTarget = mutation.target;\n        var mutationType = mutation.type;\n        var strClosest = 'closest';\n        if (mutationTarget === _contentElementNative) return attributeName === null;\n\n        if (mutationType === 'attributes' && (attributeName === LEXICON.c || attributeName === LEXICON.s) && !_isTextarea) {\n          //ignore className changes by the plugin\t\n          if (attributeName === LEXICON.c && FRAMEWORK(mutationTarget).hasClass(_classNameHostElement)) return hostClassNamesChanged(mutation.oldValue, mutationTarget.className); //only do it of browser support it natively\t\n\n          if (typeof mutationTarget[strClosest] != TYPES.f) return true;\n          if (mutationTarget[strClosest](_strDot + _classNameResizeObserverElement) !== null || mutationTarget[strClosest](_strDot + _classNameScrollbar) !== null || mutationTarget[strClosest](_strDot + _classNameScrollbarCorner) !== null) return false;\n        }\n\n        return true;\n      }\n      /**\r\n       * Returns true if the content size was changed since the last time this method was called.\r\n       * @returns {boolean} True if the content size was changed, false otherwise.\r\n       */\n\n\n      function updateAutoContentSizeChanged() {\n        if (_sleeping) return false;\n        var contentMeasureElement = getContentMeasureElement();\n        var textareaValueLength = _isTextarea && _widthAutoCache && !_textareaAutoWrappingCache ? _targetElement.val().length : 0;\n        var setCSS = !_mutationObserversConnected && _widthAutoCache && !_isTextarea;\n        var css = {};\n        var float;\n        var bodyMinSizeC;\n        var changed;\n        var contentElementScrollSize;\n\n        if (setCSS) {\n          float = _contentElement.css(_strFloat);\n          css[_strFloat] = _isRTL ? _strRight : _strLeft;\n          css[_strWidth] = _strAuto;\n\n          _contentElement.css(css);\n        }\n\n        contentElementScrollSize = {\n          w: contentMeasureElement[LEXICON.sW] + textareaValueLength,\n          h: contentMeasureElement[LEXICON.sH] + textareaValueLength\n        };\n\n        if (setCSS) {\n          css[_strFloat] = float;\n          css[_strWidth] = _strHundredPercent;\n\n          _contentElement.css(css);\n        }\n\n        bodyMinSizeC = bodyMinSizeChanged();\n        changed = checkCache(contentElementScrollSize, _contentElementScrollSizeChangeDetectedCache);\n        _contentElementScrollSizeChangeDetectedCache = contentElementScrollSize;\n        return changed || bodyMinSizeC;\n      }\n      /**\r\n       * Returns true when a attribute which the MutationObserver would observe has changed.  \r\n       * @returns {boolean} True if one of the attributes which a MutationObserver would observe has changed, false or undefined otherwise.\r\n       */\n\n\n      function meaningfulAttrsChanged() {\n        if (_sleeping || _mutationObserversConnected) return;\n        var elem;\n        var curr;\n        var cache;\n        var changedAttrs = [];\n        var checks = [{\n          _elem: _hostElement,\n          _attrs: _mutationObserverAttrsHost.concat(':visible')\n        }, {\n          _elem: _isTextarea ? _targetElement : undefined,\n          _attrs: _mutationObserverAttrsTextarea\n        }];\n        each(checks, function (index, check) {\n          elem = check._elem;\n\n          if (elem) {\n            each(check._attrs, function (index, attr) {\n              curr = attr.charAt(0) === ':' ? elem.is(attr) : elem.attr(attr);\n              cache = _updateAutoCache[attr];\n\n              if (checkCache(curr, cache)) {\n                changedAttrs.push(attr);\n              }\n\n              _updateAutoCache[attr] = curr;\n            });\n          }\n        });\n        updateViewportAttrsFromTarget(changedAttrs);\n        return changedAttrs[LEXICON.l] > 0;\n      }\n      /**\r\n       * Checks is a CSS Property of a child element is affecting the scroll size of the content.\r\n       * @param propertyName The CSS property name.\r\n       * @returns {boolean} True if the property is affecting the content scroll size, false otherwise.\r\n       */\n\n\n      function isSizeAffectingCSSProperty(propertyName) {\n        if (!_initialized) return true;\n        var flexGrow = 'flex-grow';\n        var flexShrink = 'flex-shrink';\n        var flexBasis = 'flex-basis';\n        var affectingPropsX = [_strWidth, _strMinMinus + _strWidth, _strMaxMinus + _strWidth, _strMarginMinus + _strLeft, _strMarginMinus + _strRight, _strLeft, _strRight, 'font-weight', 'word-spacing', flexGrow, flexShrink, flexBasis];\n        var affectingPropsXContentBox = [_strPaddingMinus + _strLeft, _strPaddingMinus + _strRight, _strBorderMinus + _strLeft + _strWidth, _strBorderMinus + _strRight + _strWidth];\n        var affectingPropsY = [_strHeight, _strMinMinus + _strHeight, _strMaxMinus + _strHeight, _strMarginMinus + _strTop, _strMarginMinus + _strBottom, _strTop, _strBottom, 'line-height', flexGrow, flexShrink, flexBasis];\n        var affectingPropsYContentBox = [_strPaddingMinus + _strTop, _strPaddingMinus + _strBottom, _strBorderMinus + _strTop + _strWidth, _strBorderMinus + _strBottom + _strWidth];\n        var _strS = 's';\n        var _strVS = 'v-s';\n        var checkX = _overflowBehaviorCache.x === _strS || _overflowBehaviorCache.x === _strVS;\n        var checkY = _overflowBehaviorCache.y === _strS || _overflowBehaviorCache.y === _strVS;\n        var sizeIsAffected = false;\n\n        var checkPropertyName = function (arr, name) {\n          for (var i = 0; i < arr[LEXICON.l]; i++) {\n            if (arr[i] === name) return true;\n          }\n\n          return false;\n        };\n\n        if (checkY) {\n          sizeIsAffected = checkPropertyName(affectingPropsY, propertyName);\n          if (!sizeIsAffected && !_isBorderBox) sizeIsAffected = checkPropertyName(affectingPropsYContentBox, propertyName);\n        }\n\n        if (checkX && !sizeIsAffected) {\n          sizeIsAffected = checkPropertyName(affectingPropsX, propertyName);\n          if (!sizeIsAffected && !_isBorderBox) sizeIsAffected = checkPropertyName(affectingPropsXContentBox, propertyName);\n        }\n\n        return sizeIsAffected;\n      } //==== Update ====//\n\n      /**\r\n       * Sets the attribute values of the viewport element to the values from the target element.\r\n       * The value of a attribute is only set if the attribute is whitelisted.\r\n       * @attrs attrs The array of attributes which shall be set or undefined if all whitelisted shall be set.\r\n       */\n\n\n      function updateViewportAttrsFromTarget(attrs) {\n        attrs = attrs || _viewportAttrsFromTarget;\n        each(attrs, function (index, attr) {\n          if (COMPATIBILITY.inA(attr, _viewportAttrsFromTarget) > -1) {\n            var targetAttr = _targetElement.attr(attr);\n\n            if (type(targetAttr) == TYPES.s) {\n              _viewportElement.attr(attr, targetAttr);\n            } else {\n              _viewportElement.removeAttr(attr);\n            }\n          }\n        });\n      }\n      /**\r\n       * Updates the variables and size of the textarea element, and manages the scroll on new line or new character.\r\n       */\n\n\n      function textareaUpdate() {\n        if (!_sleeping) {\n          var wrapAttrOff = !_textareaAutoWrappingCache;\n          var minWidth = _viewportSize.w;\n          var minHeight = _viewportSize.h;\n          var css = {};\n          var doMeasure = _widthAutoCache || wrapAttrOff;\n          var origWidth;\n          var width;\n          var origHeight;\n          var height; //reset min size\n\n          css[_strMinMinus + _strWidth] = _strEmpty;\n          css[_strMinMinus + _strHeight] = _strEmpty; //set width auto\n\n          css[_strWidth] = _strAuto;\n\n          _targetElement.css(css); //measure width\n\n\n          origWidth = _targetElementNative[LEXICON.oW];\n          width = doMeasure ? MATH.max(origWidth, _targetElementNative[LEXICON.sW] - 1) : 1;\n          /*width += (_widthAutoCache ? _marginX + (!_isBorderBox ? wrapAttrOff ? 0 : _paddingX + _borderX : 0) : 0);*/\n          //set measured width\n\n          css[_strWidth] = _widthAutoCache ? _strAuto\n          /*width*/\n          : _strHundredPercent;\n          css[_strMinMinus + _strWidth] = _strHundredPercent; //set height auto\n\n          css[_strHeight] = _strAuto;\n\n          _targetElement.css(css); //measure height\n\n\n          origHeight = _targetElementNative[LEXICON.oH];\n          height = MATH.max(origHeight, _targetElementNative[LEXICON.sH] - 1); //append correct size values\n\n          css[_strWidth] = width;\n          css[_strHeight] = height;\n\n          _textareaCoverElement.css(css); //apply min width / min height to prevent textarea collapsing\n\n\n          css[_strMinMinus + _strWidth] = minWidth\n          /*+ (!_isBorderBox && _widthAutoCache ? _paddingX + _borderX : 0)*/\n          ;\n          css[_strMinMinus + _strHeight] = minHeight\n          /*+ (!_isBorderBox && _heightAutoCache ? _paddingY + _borderY : 0)*/\n          ;\n\n          _targetElement.css(css);\n\n          return {\n            _originalWidth: origWidth,\n            _originalHeight: origHeight,\n            _dynamicWidth: width,\n            _dynamicHeight: height\n          };\n        }\n      }\n      /**\r\n       * Updates the plugin and DOM to the current options.\r\n       * This method should only be called if a update is 100% required.\r\n       * @param updateHints A objects which contains hints for this update:\r\n       * {\r\n       *   _hostSizeChanged : boolean,\r\n       *   _contentSizeChanged : boolean,\r\n       *   _force : boolean,                             == preventSwallowing\r\n       *   _changedOptions : { },                        == preventSwallowing && preventSleep\r\n      *  }\r\n       */\n\n\n      function update(updateHints) {\n        clearTimeout(_swallowedUpdateTimeout);\n        updateHints = updateHints || {};\n        _swallowedUpdateHints._hostSizeChanged |= updateHints._hostSizeChanged;\n        _swallowedUpdateHints._contentSizeChanged |= updateHints._contentSizeChanged;\n        _swallowedUpdateHints._force |= updateHints._force;\n        var now = COMPATIBILITY.now();\n        var hostSizeChanged = !!_swallowedUpdateHints._hostSizeChanged;\n        var contentSizeChanged = !!_swallowedUpdateHints._contentSizeChanged;\n        var force = !!_swallowedUpdateHints._force;\n        var changedOptions = updateHints._changedOptions;\n        var swallow = _swallowUpdateLag > 0 && _initialized && !_destroyed && !force && !changedOptions && now - _lastUpdateTime < _swallowUpdateLag && !_heightAutoCache && !_widthAutoCache;\n        var displayIsHidden;\n        if (swallow) _swallowedUpdateTimeout = setTimeout(update, _swallowUpdateLag); //abort update due to:\n        //destroyed\n        //swallowing\n        //sleeping\n        //host is hidden or has false display\n\n        if (_destroyed || swallow || _sleeping && !changedOptions || _initialized && !force && (displayIsHidden = _hostElement.is(':hidden')) || _hostElement.css('display') === 'inline') return;\n        _lastUpdateTime = now;\n        _swallowedUpdateHints = {}; //if scrollbar styling is possible and native scrollbars aren't overlaid the scrollbar styling will be applied which hides the native scrollbars completely.\n\n        if (_nativeScrollbarStyling && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n          //native scrollbars are hidden, so change the values to zero\n          _nativeScrollbarSize.x = 0;\n          _nativeScrollbarSize.y = 0;\n        } else {\n          //refresh native scrollbar size (in case of zoom)\n          _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\n        } // Scrollbar padding is needed for firefox, because firefox hides scrollbar automatically if the size of the div is too small.\n        // The calculation: [scrollbar size +3 *3]\n        // (+3 because of possible decoration e.g. borders, margins etc., but only if native scrollbar is NOT a overlaid scrollbar)\n        // (*3 because (1)increase / (2)decrease -button and (3)resize handle)\n\n\n        _nativeScrollbarMinSize = {\n          x: (_nativeScrollbarSize.x + (_nativeScrollbarIsOverlaid.x ? 0 : 3)) * 3,\n          y: (_nativeScrollbarSize.y + (_nativeScrollbarIsOverlaid.y ? 0 : 3)) * 3\n        };\n        changedOptions = changedOptions || {}; //freezeResizeObserver(_sizeObserverElement, true);\n        //freezeResizeObserver(_sizeAutoObserverElement, true);\n\n        var checkCacheAutoForce = function () {\n          return checkCache.apply(this, [].slice.call(arguments).concat([force]));\n        }; //save current scroll offset\n\n\n        var currScroll = {\n          x: _viewportElement[_strScrollLeft](),\n          y: _viewportElement[_strScrollTop]()\n        };\n        var currentPreparedOptionsScrollbars = _currentPreparedOptions.scrollbars;\n        var currentPreparedOptionsTextarea = _currentPreparedOptions.textarea; //scrollbars visibility:\n\n        var scrollbarsVisibility = currentPreparedOptionsScrollbars.visibility;\n        var scrollbarsVisibilityChanged = checkCacheAutoForce(scrollbarsVisibility, _scrollbarsVisibilityCache); //scrollbars autoHide:\n\n        var scrollbarsAutoHide = currentPreparedOptionsScrollbars.autoHide;\n        var scrollbarsAutoHideChanged = checkCacheAutoForce(scrollbarsAutoHide, _scrollbarsAutoHideCache); //scrollbars click scrolling\n\n        var scrollbarsClickScrolling = currentPreparedOptionsScrollbars.clickScrolling;\n        var scrollbarsClickScrollingChanged = checkCacheAutoForce(scrollbarsClickScrolling, _scrollbarsClickScrollingCache); //scrollbars drag scrolling\n\n        var scrollbarsDragScrolling = currentPreparedOptionsScrollbars.dragScrolling;\n        var scrollbarsDragScrollingChanged = checkCacheAutoForce(scrollbarsDragScrolling, _scrollbarsDragScrollingCache); //className\n\n        var className = _currentPreparedOptions.className;\n        var classNameChanged = checkCacheAutoForce(className, _classNameCache); //resize\n\n        var resize = _currentPreparedOptions.resize;\n        var resizeChanged = checkCacheAutoForce(resize, _resizeCache) && !_isBody; //body can't be resized since the window itself acts as resize possibility.\n        //paddingAbsolute\n\n        var paddingAbsolute = _currentPreparedOptions.paddingAbsolute;\n        var paddingAbsoluteChanged = checkCacheAutoForce(paddingAbsolute, _paddingAbsoluteCache); //clipAlways\n\n        var clipAlways = _currentPreparedOptions.clipAlways;\n        var clipAlwaysChanged = checkCacheAutoForce(clipAlways, _clipAlwaysCache); //sizeAutoCapable\n\n        var sizeAutoCapable = _currentPreparedOptions.sizeAutoCapable && !_isBody; //body can never be size auto, because it shall be always as big as the viewport.\n\n        var sizeAutoCapableChanged = checkCacheAutoForce(sizeAutoCapable, _sizeAutoCapableCache); //showNativeScrollbars\n\n        var ignoreOverlayScrollbarHiding = _currentPreparedOptions.nativeScrollbarsOverlaid.showNativeScrollbars;\n        var ignoreOverlayScrollbarHidingChanged = checkCacheAutoForce(ignoreOverlayScrollbarHiding, _ignoreOverlayScrollbarHidingCache); //autoUpdate\n\n        var autoUpdate = _currentPreparedOptions.autoUpdate;\n        var autoUpdateChanged = checkCacheAutoForce(autoUpdate, _autoUpdateCache); //overflowBehavior\n\n        var overflowBehavior = _currentPreparedOptions.overflowBehavior;\n        var overflowBehaviorChanged = checkCacheAutoForce(overflowBehavior, _overflowBehaviorCache, force); //dynWidth:\n\n        var textareaDynWidth = currentPreparedOptionsTextarea.dynWidth;\n        var textareaDynWidthChanged = checkCacheAutoForce(_textareaDynWidthCache, textareaDynWidth); //dynHeight:\n\n        var textareaDynHeight = currentPreparedOptionsTextarea.dynHeight;\n        var textareaDynHeightChanged = checkCacheAutoForce(_textareaDynHeightCache, textareaDynHeight); //scrollbars visibility\n\n        _scrollbarsAutoHideNever = scrollbarsAutoHide === 'n';\n        _scrollbarsAutoHideScroll = scrollbarsAutoHide === 's';\n        _scrollbarsAutoHideMove = scrollbarsAutoHide === 'm';\n        _scrollbarsAutoHideLeave = scrollbarsAutoHide === 'l'; //scrollbars autoHideDelay\n\n        _scrollbarsAutoHideDelay = currentPreparedOptionsScrollbars.autoHideDelay; //old className\n\n        _oldClassName = _classNameCache; //resize\n\n        _resizeNone = resize === 'n';\n        _resizeBoth = resize === 'b';\n        _resizeHorizontal = resize === 'h';\n        _resizeVertical = resize === 'v'; //normalizeRTL\n\n        _normalizeRTLCache = _currentPreparedOptions.normalizeRTL; //ignore overlay scrollbar hiding\n\n        ignoreOverlayScrollbarHiding = ignoreOverlayScrollbarHiding && _nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y; //refresh options cache\n\n        _scrollbarsVisibilityCache = scrollbarsVisibility;\n        _scrollbarsAutoHideCache = scrollbarsAutoHide;\n        _scrollbarsClickScrollingCache = scrollbarsClickScrolling;\n        _scrollbarsDragScrollingCache = scrollbarsDragScrolling;\n        _classNameCache = className;\n        _resizeCache = resize;\n        _paddingAbsoluteCache = paddingAbsolute;\n        _clipAlwaysCache = clipAlways;\n        _sizeAutoCapableCache = sizeAutoCapable;\n        _ignoreOverlayScrollbarHidingCache = ignoreOverlayScrollbarHiding;\n        _autoUpdateCache = autoUpdate;\n        _overflowBehaviorCache = extendDeep({}, overflowBehavior);\n        _textareaDynWidthCache = textareaDynWidth;\n        _textareaDynHeightCache = textareaDynHeight;\n        _hasOverflowCache = _hasOverflowCache || {\n          x: false,\n          y: false\n        }; //set correct class name to the host element\n\n        if (classNameChanged) {\n          removeClass(_hostElement, _oldClassName + _strSpace + _classNameThemeNone);\n          addClass(_hostElement, className !== undefined && className !== null && className.length > 0 ? className : _classNameThemeNone);\n        } //set correct auto Update\n\n\n        if (autoUpdateChanged) {\n          if (autoUpdate === true || autoUpdate === null && _autoUpdateRecommended) {\n            disconnectMutationObservers();\n            autoUpdateLoop.add(_base);\n          } else {\n            autoUpdateLoop.remove(_base);\n            connectMutationObservers();\n          }\n        } //activate or deactivate size auto capability\n\n\n        if (sizeAutoCapableChanged) {\n          if (sizeAutoCapable) {\n            if (_contentGlueElement) {\n              _contentGlueElement.show();\n            } else {\n              _contentGlueElement = FRAMEWORK(generateDiv(_classNameContentGlueElement));\n\n              _paddingElement.before(_contentGlueElement);\n            }\n\n            if (_sizeAutoObserverAdded) {\n              _sizeAutoObserverElement.show();\n            } else {\n              _sizeAutoObserverElement = FRAMEWORK(generateDiv(_classNameSizeAutoObserverElement));\n              _sizeAutoObserverElementNative = _sizeAutoObserverElement[0];\n\n              _contentGlueElement.before(_sizeAutoObserverElement);\n\n              var oldSize = {\n                w: -1,\n                h: -1\n              };\n              setupResizeObserver(_sizeAutoObserverElement, function () {\n                var newSize = {\n                  w: _sizeAutoObserverElementNative[LEXICON.oW],\n                  h: _sizeAutoObserverElementNative[LEXICON.oH]\n                };\n\n                if (checkCache(newSize, oldSize)) {\n                  if (_initialized && _heightAutoCache && newSize.h > 0 || _widthAutoCache && newSize.w > 0) {\n                    update();\n                  } else if (_initialized && !_heightAutoCache && newSize.h === 0 || !_widthAutoCache && newSize.w === 0) {\n                    update();\n                  }\n                }\n\n                oldSize = newSize;\n              });\n              _sizeAutoObserverAdded = true; //fix heightAuto detector bug if height is fixed but contentHeight is 0.\n              //the probability this bug will ever happen is very very low, thats why its ok if we use calc which isn't supported in IE8.\n\n              if (_cssCalc !== null) _sizeAutoObserverElement.css(_strHeight, _cssCalc + '(100% + 1px)');\n            }\n          } else {\n            if (_sizeAutoObserverAdded) _sizeAutoObserverElement.hide();\n            if (_contentGlueElement) _contentGlueElement.hide();\n          }\n        } //if force, update all resizeObservers too\n\n\n        if (force) {\n          _sizeObserverElement.find('*').trigger(_strScroll);\n\n          if (_sizeAutoObserverAdded) _sizeAutoObserverElement.find('*').trigger(_strScroll);\n        } //display hidden:\n\n\n        displayIsHidden = displayIsHidden === undefined ? _hostElement.is(':hidden') : displayIsHidden; //textarea AutoWrapping:\n\n        var textareaAutoWrapping = _isTextarea ? _targetElement.attr('wrap') !== 'off' : false;\n        var textareaAutoWrappingChanged = checkCacheAutoForce(textareaAutoWrapping, _textareaAutoWrappingCache); //detect direction:\n\n        var cssDirection = _hostElement.css('direction');\n\n        var cssDirectionChanged = checkCacheAutoForce(cssDirection, _cssDirectionCache); //detect box-sizing:\n\n        var boxSizing = _hostElement.css('box-sizing');\n\n        var boxSizingChanged = checkCacheAutoForce(boxSizing, _cssBoxSizingCache); //detect padding:\n\n        var padding = getTopRightBottomLeftHost(_strPaddingMinus); //width + height auto detecting var:\n\n        var sizeAutoObserverElementBCRect; //exception occurs in IE8 sometimes (unknown exception)\n\n        try {\n          sizeAutoObserverElementBCRect = _sizeAutoObserverAdded ? _sizeAutoObserverElementNative[LEXICON.bCR]() : null;\n        } catch (ex) {\n          return;\n        }\n\n        _isRTL = cssDirection === 'rtl';\n        _isBorderBox = boxSizing === 'border-box';\n        var isRTLLeft = _isRTL ? _strLeft : _strRight;\n        var isRTLRight = _isRTL ? _strRight : _strLeft; //detect width auto:\n\n        var widthAutoResizeDetection = false;\n        var widthAutoObserverDetection = _sizeAutoObserverAdded && _hostElement.css(_strFloat) !== 'none'\n        /*|| _isTextarea */\n        ? MATH.round(sizeAutoObserverElementBCRect.right - sizeAutoObserverElementBCRect.left) === 0 && (!paddingAbsolute ? _hostElementNative[LEXICON.cW] - _paddingX > 0 : true) : false;\n\n        if (sizeAutoCapable && !widthAutoObserverDetection) {\n          var tmpCurrHostWidth = _hostElementNative[LEXICON.oW];\n\n          var tmpCurrContentGlueWidth = _contentGlueElement.css(_strWidth);\n\n          _contentGlueElement.css(_strWidth, _strAuto);\n\n          var tmpNewHostWidth = _hostElementNative[LEXICON.oW];\n\n          _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n\n          widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n\n          if (!widthAutoResizeDetection) {\n            _contentGlueElement.css(_strWidth, tmpCurrHostWidth + 1);\n\n            tmpNewHostWidth = _hostElementNative[LEXICON.oW];\n\n            _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n\n            widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n          }\n        }\n\n        var widthAuto = (widthAutoObserverDetection || widthAutoResizeDetection) && sizeAutoCapable && !displayIsHidden;\n        var widthAutoChanged = checkCacheAutoForce(widthAuto, _widthAutoCache);\n        var wasWidthAuto = !widthAuto && _widthAutoCache; //detect height auto:\n\n        var heightAuto = _sizeAutoObserverAdded && sizeAutoCapable && !displayIsHidden ? MATH.round(sizeAutoObserverElementBCRect.bottom - sizeAutoObserverElementBCRect.top) === 0 :\n        /* && (!paddingAbsolute && (_msieVersion > 9 || !_msieVersion) ? true : true) */\n        false;\n        var heightAutoChanged = checkCacheAutoForce(heightAuto, _heightAutoCache);\n        var wasHeightAuto = !heightAuto && _heightAutoCache; //detect border:\n        //we need the border only if border box and auto size\n\n        var updateBorderX = widthAuto && _isBorderBox || !_isBorderBox;\n        var updateBorderY = heightAuto && _isBorderBox || !_isBorderBox;\n        var border = getTopRightBottomLeftHost(_strBorderMinus, '-' + _strWidth, !updateBorderX, !updateBorderY); //detect margin:\n\n        var margin = getTopRightBottomLeftHost(_strMarginMinus); //vars to apply correct css\n\n        var contentElementCSS = {};\n        var contentGlueElementCSS = {}; //funcs\n\n        var getHostSize = function () {\n          //has to be clientSize because offsetSize respect borders\n          return {\n            w: _hostElementNative[LEXICON.cW],\n            h: _hostElementNative[LEXICON.cH]\n          };\n        };\n\n        var getViewportSize = function () {\n          //viewport size is padding container because it never has padding, margin and a border\n          //determine zoom rounding error -> sometimes scrollWidth/Height is smaller than clientWidth/Height\n          //if this happens add the difference to the viewportSize to compensate the rounding error\n          return {\n            w: _paddingElementNative[LEXICON.oW] + MATH.max(0, _contentElementNative[LEXICON.cW] - _contentElementNative[LEXICON.sW]),\n            h: _paddingElementNative[LEXICON.oH] + MATH.max(0, _contentElementNative[LEXICON.cH] - _contentElementNative[LEXICON.sH])\n          };\n        }; //set info for padding\n\n\n        var paddingAbsoluteX = _paddingX = padding.l + padding.r;\n        var paddingAbsoluteY = _paddingY = padding.t + padding.b;\n        paddingAbsoluteX *= paddingAbsolute ? 1 : 0;\n        paddingAbsoluteY *= paddingAbsolute ? 1 : 0;\n        padding.c = checkCacheAutoForce(padding, _cssPaddingCache); //set info for border\n\n        _borderX = border.l + border.r;\n        _borderY = border.t + border.b;\n        border.c = checkCacheAutoForce(border, _cssBorderCache); //set info for margin\n\n        _marginX = margin.l + margin.r;\n        _marginY = margin.t + margin.b;\n        margin.c = checkCacheAutoForce(margin, _cssMarginCache); //refresh cache\n\n        _textareaAutoWrappingCache = textareaAutoWrapping;\n        _cssDirectionCache = cssDirection;\n        _cssBoxSizingCache = boxSizing;\n        _widthAutoCache = widthAuto;\n        _heightAutoCache = heightAuto;\n        _cssPaddingCache = padding;\n        _cssBorderCache = border;\n        _cssMarginCache = margin; //IEFix direction changed\n\n        if (cssDirectionChanged && _sizeAutoObserverAdded) _sizeAutoObserverElement.css(_strFloat, isRTLRight); //apply padding:\n\n        if (padding.c || cssDirectionChanged || paddingAbsoluteChanged || widthAutoChanged || heightAutoChanged || boxSizingChanged || sizeAutoCapableChanged) {\n          var paddingElementCSS = {};\n          var textareaCSS = {};\n          var paddingValues = [padding.t, padding.r, padding.b, padding.l];\n          setTopRightBottomLeft(contentGlueElementCSS, _strMarginMinus, [-padding.t, -padding.r, -padding.b, -padding.l]);\n\n          if (paddingAbsolute) {\n            setTopRightBottomLeft(paddingElementCSS, _strEmpty, paddingValues);\n            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus);\n          } else {\n            setTopRightBottomLeft(paddingElementCSS, _strEmpty);\n            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus, paddingValues);\n          }\n\n          _paddingElement.css(paddingElementCSS);\n\n          _targetElement.css(textareaCSS);\n        } //viewport size is padding container because it never has padding, margin and a border.\n\n\n        _viewportSize = getViewportSize(); //update Textarea\n\n        var textareaSize = _isTextarea ? textareaUpdate() : false;\n\n        var textareaSizeChanged = _isTextarea && checkCacheAutoForce(textareaSize, _textareaSizeCache);\n\n        var textareaDynOrigSize = _isTextarea && textareaSize ? {\n          w: textareaDynWidth ? textareaSize._dynamicWidth : textareaSize._originalWidth,\n          h: textareaDynHeight ? textareaSize._dynamicHeight : textareaSize._originalHeight\n        } : {};\n        _textareaSizeCache = textareaSize; //fix height auto / width auto in cooperation with current padding & boxSizing behavior:\n\n        if (heightAuto && (heightAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c)) {\n          contentElementCSS[_strHeight] = _strAuto;\n        } else if (heightAutoChanged || paddingAbsoluteChanged) {\n          contentElementCSS[_strHeight] = _strHundredPercent;\n        }\n\n        if (widthAuto && (widthAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c || cssDirectionChanged)) {\n          contentElementCSS[_strWidth] = _strAuto;\n          contentGlueElementCSS[_strMaxMinus + _strWidth] = _strHundredPercent; //IE Fix\n        } else if (widthAutoChanged || paddingAbsoluteChanged) {\n          contentElementCSS[_strWidth] = _strHundredPercent;\n          contentElementCSS[_strFloat] = _strEmpty;\n          contentGlueElementCSS[_strMaxMinus + _strWidth] = _strEmpty; //IE Fix\n        }\n\n        if (widthAuto) {\n          //textareaDynOrigSize.w || _strAuto :: doesnt works because applied margin will shift width\n          contentGlueElementCSS[_strWidth] = _strAuto;\n          contentElementCSS[_strWidth] = VENDORS._cssPropertyValue(_strWidth, 'max-content intrinsic') || _strAuto;\n          contentElementCSS[_strFloat] = isRTLRight;\n        } else {\n          contentGlueElementCSS[_strWidth] = _strEmpty;\n        }\n\n        if (heightAuto) {\n          //textareaDynOrigSize.h || _contentElementNative[LEXICON.cH] :: use for anti scroll jumping\n          contentGlueElementCSS[_strHeight] = textareaDynOrigSize.h || _contentElementNative[LEXICON.cH];\n        } else {\n          contentGlueElementCSS[_strHeight] = _strEmpty;\n        }\n\n        if (sizeAutoCapable) _contentGlueElement.css(contentGlueElementCSS);\n\n        _contentElement.css(contentElementCSS); //CHECKPOINT HERE ~\n\n\n        contentElementCSS = {};\n        contentGlueElementCSS = {}; //if [content(host) client / scroll size, or target element direction, or content(host) max-sizes] changed, or force is true\n\n        if (hostSizeChanged || contentSizeChanged || textareaSizeChanged || cssDirectionChanged || boxSizingChanged || paddingAbsoluteChanged || widthAutoChanged || widthAuto || heightAutoChanged || heightAuto || ignoreOverlayScrollbarHidingChanged || overflowBehaviorChanged || clipAlwaysChanged || resizeChanged || scrollbarsVisibilityChanged || scrollbarsAutoHideChanged || scrollbarsDragScrollingChanged || scrollbarsClickScrollingChanged || textareaDynWidthChanged || textareaDynHeightChanged || textareaAutoWrappingChanged) {\n          var strOverflow = 'overflow';\n          var strOverflowX = strOverflow + '-x';\n          var strOverflowY = strOverflow + '-y';\n          var strHidden = 'hidden';\n          var strVisible = 'visible'; //Reset the viewport (very important for natively overlaid scrollbars and zoom change\n          //don't change the overflow prop as it is very expensive and affects performance !A LOT!\n\n          if (!_nativeScrollbarStyling) {\n            var viewportElementResetCSS = {};\n            var resetXTmp = _hasOverflowCache.y && _hideOverflowCache.ys && !ignoreOverlayScrollbarHiding ? _nativeScrollbarIsOverlaid.y ? _viewportElement.css(isRTLLeft) : -_nativeScrollbarSize.y : 0;\n            var resetBottomTmp = _hasOverflowCache.x && _hideOverflowCache.xs && !ignoreOverlayScrollbarHiding ? _nativeScrollbarIsOverlaid.x ? _viewportElement.css(_strBottom) : -_nativeScrollbarSize.x : 0;\n            setTopRightBottomLeft(viewportElementResetCSS, _strEmpty);\n\n            _viewportElement.css(viewportElementResetCSS);\n          } //measure several sizes:\n\n\n          var contentMeasureElement = getContentMeasureElement(); //in Firefox content element has to have overflow hidden, else element margins aren't calculated properly, this element prevents this bug, but only if scrollbars aren't overlaid\n\n          var contentSize = {\n            //use clientSize because natively overlaidScrollbars add borders\n            w: textareaDynOrigSize.w || contentMeasureElement[LEXICON.cW],\n            h: textareaDynOrigSize.h || contentMeasureElement[LEXICON.cH]\n          };\n          var scrollSize = {\n            w: contentMeasureElement[LEXICON.sW],\n            h: contentMeasureElement[LEXICON.sH]\n          }; //apply the correct viewport style and measure viewport size\n\n          if (!_nativeScrollbarStyling) {\n            viewportElementResetCSS[_strBottom] = wasHeightAuto ? _strEmpty : resetBottomTmp;\n            viewportElementResetCSS[isRTLLeft] = wasWidthAuto ? _strEmpty : resetXTmp;\n\n            _viewportElement.css(viewportElementResetCSS);\n          }\n\n          _viewportSize = getViewportSize(); //measure and correct several sizes\n\n          var hostSize = getHostSize();\n          var hostAbsoluteRectSize = {\n            w: hostSize.w - _marginX - _borderX - (_isBorderBox ? 0 : _paddingX),\n            h: hostSize.h - _marginY - _borderY - (_isBorderBox ? 0 : _paddingY)\n          };\n          var contentGlueSize = {\n            //client/scrollSize + AbsolutePadding -> because padding is only applied to the paddingElement if its absolute, so you have to add it manually\n            //hostSize is clientSize -> so padding should be added manually, right? FALSE! Because content glue is inside hostElement, so we don't have to worry about padding\n            w: MATH.max((widthAuto ? contentSize.w : scrollSize.w) + paddingAbsoluteX, hostAbsoluteRectSize.w),\n            h: MATH.max((heightAuto ? contentSize.h : scrollSize.h) + paddingAbsoluteY, hostAbsoluteRectSize.h)\n          };\n          contentGlueSize.c = checkCacheAutoForce(contentGlueSize, _contentGlueSizeCache);\n          _contentGlueSizeCache = contentGlueSize; //apply correct contentGlue size\n\n          if (sizeAutoCapable) {\n            //size contentGlue correctly to make sure the element has correct size if the sizing switches to auto\n            if (contentGlueSize.c || heightAuto || widthAuto) {\n              contentGlueElementCSS[_strWidth] = contentGlueSize.w;\n              contentGlueElementCSS[_strHeight] = contentGlueSize.h; //textarea-sizes are already calculated correctly at this point\n\n              if (!_isTextarea) {\n                contentSize = {\n                  //use clientSize because natively overlaidScrollbars add borders\n                  w: contentMeasureElement[LEXICON.cW],\n                  h: contentMeasureElement[LEXICON.cH]\n                };\n              }\n            }\n\n            var textareaCoverCSS = {};\n\n            var setContentGlueElementCSSfunction = function (horizontal) {\n              var scrollbarVars = getScrollbarVars(horizontal);\n              var wh = scrollbarVars._w_h;\n              var strWH = scrollbarVars._width_height;\n              var autoSize = horizontal ? widthAuto : heightAuto;\n              var borderSize = horizontal ? _borderX : _borderY;\n              var paddingSize = horizontal ? _paddingX : _paddingY;\n              var marginSize = horizontal ? _marginX : _marginY;\n              var viewportSize = _viewportSize[wh] - borderSize - marginSize - (_isBorderBox ? 0 : paddingSize); //make contentGlue size -1 if element is not auto sized, to make sure that a resize event happens when the element shrinks\n\n              if (!autoSize || !autoSize && border.c) contentGlueElementCSS[strWH] = hostAbsoluteRectSize[wh] - 1; //if size is auto and host is smaller than size as min size, make content glue size -1 to make sure size changes will be detected (this is only needed if padding is 0)\n\n              if (autoSize && contentSize[wh] < viewportSize && (horizontal && _isTextarea ? !textareaAutoWrapping : true)) {\n                if (_isTextarea) textareaCoverCSS[strWH] = parseToZeroOrNumber(_textareaCoverElement.css(strWH)) - 1;\n                contentGlueElementCSS[strWH] -= 1;\n              } //make sure content glue size is at least 1\n\n\n              if (contentSize[wh] > 0) contentGlueElementCSS[strWH] = MATH.max(1, contentGlueElementCSS[strWH]);\n            };\n\n            setContentGlueElementCSSfunction(true);\n            setContentGlueElementCSSfunction(false);\n            if (_isTextarea) _textareaCoverElement.css(textareaCoverCSS);\n\n            _contentGlueElement.css(contentGlueElementCSS);\n          }\n\n          if (widthAuto) contentElementCSS[_strWidth] = _strHundredPercent;\n          if (widthAuto && !_isBorderBox && !_mutationObserversConnected) contentElementCSS[_strFloat] = 'none'; //apply and reset content style\n\n          _contentElement.css(contentElementCSS);\n\n          contentElementCSS = {}; //measure again, but this time all correct sizes:\n\n          var contentScrollSize = {\n            w: contentMeasureElement[LEXICON.sW],\n            h: contentMeasureElement[LEXICON.sH]\n          };\n          contentScrollSize.c = contentSizeChanged = checkCacheAutoForce(contentScrollSize, _contentScrollSizeCache);\n          _contentScrollSizeCache = contentScrollSize; //refresh viewport size after correct measuring\n\n          _viewportSize = getViewportSize();\n          hostSize = getHostSize();\n          hostSizeChanged = checkCacheAutoForce(hostSize, _hostSizeCache);\n          _hostSizeCache = hostSize;\n          var hideOverflowForceTextarea = _isTextarea && (_viewportSize.w === 0 || _viewportSize.h === 0);\n          var previousOverflowAmount = _overflowAmountCache;\n          var overflowBehaviorIsVS = {};\n          var overflowBehaviorIsVH = {};\n          var overflowBehaviorIsS = {};\n          var overflowAmount = {};\n          var hasOverflow = {};\n          var hideOverflow = {};\n          var canScroll = {};\n\n          var viewportRect = _paddingElementNative[LEXICON.bCR]();\n\n          var setOverflowVariables = function (horizontal) {\n            var scrollbarVars = getScrollbarVars(horizontal);\n            var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n            var xyI = scrollbarVarsInverted._x_y;\n            var xy = scrollbarVars._x_y;\n            var wh = scrollbarVars._w_h;\n            var widthHeight = scrollbarVars._width_height;\n            var scrollMax = _strScroll + scrollbarVars._Left_Top + 'Max';\n            var fractionalOverflowAmount = viewportRect[widthHeight] ? MATH.abs(viewportRect[widthHeight] - _viewportSize[wh]) : 0;\n            var checkFractionalOverflowAmount = previousOverflowAmount && previousOverflowAmount[xy] > 0 && _viewportElementNative[scrollMax] === 0;\n            overflowBehaviorIsVS[xy] = overflowBehavior[xy] === 'v-s';\n            overflowBehaviorIsVH[xy] = overflowBehavior[xy] === 'v-h';\n            overflowBehaviorIsS[xy] = overflowBehavior[xy] === 's';\n            overflowAmount[xy] = MATH.max(0, MATH.round((contentScrollSize[wh] - _viewportSize[wh]) * 100) / 100);\n            overflowAmount[xy] *= hideOverflowForceTextarea || checkFractionalOverflowAmount && fractionalOverflowAmount > 0 && fractionalOverflowAmount < 1 ? 0 : 1;\n            hasOverflow[xy] = overflowAmount[xy] > 0; //hideOverflow:\n            //x || y : true === overflow is hidden by \"overflow: scroll\" OR \"overflow: hidden\"\n            //xs || ys : true === overflow is hidden by \"overflow: scroll\"\n\n            hideOverflow[xy] = overflowBehaviorIsVS[xy] || overflowBehaviorIsVH[xy] ? hasOverflow[xyI] && !overflowBehaviorIsVS[xyI] && !overflowBehaviorIsVH[xyI] : hasOverflow[xy];\n            hideOverflow[xy + 's'] = hideOverflow[xy] ? overflowBehaviorIsS[xy] || overflowBehaviorIsVS[xy] : false;\n            canScroll[xy] = hasOverflow[xy] && hideOverflow[xy + 's'];\n          };\n\n          setOverflowVariables(true);\n          setOverflowVariables(false);\n          overflowAmount.c = checkCacheAutoForce(overflowAmount, _overflowAmountCache);\n          _overflowAmountCache = overflowAmount;\n          hasOverflow.c = checkCacheAutoForce(hasOverflow, _hasOverflowCache);\n          _hasOverflowCache = hasOverflow;\n          hideOverflow.c = checkCacheAutoForce(hideOverflow, _hideOverflowCache);\n          _hideOverflowCache = hideOverflow; //if native scrollbar is overlay at x OR y axis, prepare DOM\n\n          if (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) {\n            var borderDesign = 'px solid transparent';\n            var contentArrangeElementCSS = {};\n            var arrangeContent = {};\n            var arrangeChanged = force;\n            var setContentElementCSS;\n\n            if (hasOverflow.x || hasOverflow.y) {\n              arrangeContent.w = _nativeScrollbarIsOverlaid.y && hasOverflow.y ? contentScrollSize.w + _overlayScrollbarDummySize.y : _strEmpty;\n              arrangeContent.h = _nativeScrollbarIsOverlaid.x && hasOverflow.x ? contentScrollSize.h + _overlayScrollbarDummySize.x : _strEmpty;\n              arrangeChanged = checkCacheAutoForce(arrangeContent, _arrangeContentSizeCache);\n              _arrangeContentSizeCache = arrangeContent;\n            }\n\n            if (hasOverflow.c || hideOverflow.c || contentScrollSize.c || cssDirectionChanged || widthAutoChanged || heightAutoChanged || widthAuto || heightAuto || ignoreOverlayScrollbarHidingChanged) {\n              contentElementCSS[_strMarginMinus + isRTLRight] = contentElementCSS[_strBorderMinus + isRTLRight] = _strEmpty;\n\n              setContentElementCSS = function (horizontal) {\n                var scrollbarVars = getScrollbarVars(horizontal);\n                var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n                var xy = scrollbarVars._x_y;\n                var strDirection = horizontal ? _strBottom : isRTLLeft;\n                var invertedAutoSize = horizontal ? heightAuto : widthAuto;\n\n                if (_nativeScrollbarIsOverlaid[xy] && hasOverflow[xy] && hideOverflow[xy + 's']) {\n                  contentElementCSS[_strMarginMinus + strDirection] = invertedAutoSize ? ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize[xy] : _strEmpty;\n                  contentElementCSS[_strBorderMinus + strDirection] = (horizontal ? !invertedAutoSize : true) && !ignoreOverlayScrollbarHiding ? _overlayScrollbarDummySize[xy] + borderDesign : _strEmpty;\n                } else {\n                  arrangeContent[scrollbarVarsInverted._w_h] = contentElementCSS[_strMarginMinus + strDirection] = contentElementCSS[_strBorderMinus + strDirection] = _strEmpty;\n                  arrangeChanged = true;\n                }\n              };\n\n              if (_nativeScrollbarStyling) {\n                addRemoveClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible, !ignoreOverlayScrollbarHiding);\n              } else {\n                setContentElementCSS(true);\n                setContentElementCSS(false);\n              }\n            }\n\n            if (ignoreOverlayScrollbarHiding) {\n              arrangeContent.w = arrangeContent.h = _strEmpty;\n              arrangeChanged = true;\n            }\n\n            if (arrangeChanged && !_nativeScrollbarStyling) {\n              contentArrangeElementCSS[_strWidth] = hideOverflow.y ? arrangeContent.w : _strEmpty;\n              contentArrangeElementCSS[_strHeight] = hideOverflow.x ? arrangeContent.h : _strEmpty;\n\n              if (!_contentArrangeElement) {\n                _contentArrangeElement = FRAMEWORK(generateDiv(_classNameContentArrangeElement));\n\n                _viewportElement.prepend(_contentArrangeElement);\n              }\n\n              _contentArrangeElement.css(contentArrangeElementCSS);\n            }\n\n            _contentElement.css(contentElementCSS);\n          }\n\n          var viewportElementCSS = {};\n          var paddingElementCSS = {};\n          var setViewportCSS;\n\n          if (hostSizeChanged || hasOverflow.c || hideOverflow.c || contentScrollSize.c || overflowBehaviorChanged || boxSizingChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged || clipAlwaysChanged || heightAutoChanged) {\n            viewportElementCSS[isRTLRight] = _strEmpty;\n\n            setViewportCSS = function (horizontal) {\n              var scrollbarVars = getScrollbarVars(horizontal);\n              var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n              var xy = scrollbarVars._x_y;\n              var XY = scrollbarVars._X_Y;\n              var strDirection = horizontal ? _strBottom : isRTLLeft;\n\n              var reset = function () {\n                viewportElementCSS[strDirection] = _strEmpty;\n                _contentBorderSize[scrollbarVarsInverted._w_h] = 0;\n              };\n\n              if (hasOverflow[xy] && hideOverflow[xy + 's']) {\n                viewportElementCSS[strOverflow + XY] = _strScroll;\n\n                if (ignoreOverlayScrollbarHiding || _nativeScrollbarStyling) {\n                  reset();\n                } else {\n                  viewportElementCSS[strDirection] = -(_nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[xy] : _nativeScrollbarSize[xy]);\n                  _contentBorderSize[scrollbarVarsInverted._w_h] = _nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[scrollbarVarsInverted._x_y] : 0;\n                }\n              } else {\n                viewportElementCSS[strOverflow + XY] = _strEmpty;\n                reset();\n              }\n            };\n\n            setViewportCSS(true);\n            setViewportCSS(false); // if the scroll container is too small and if there is any overflow with no overlay scrollbar (and scrollbar styling isn't possible), \n            // make viewport element greater in size (Firefox hide Scrollbars fix)\n            // because firefox starts hiding scrollbars on too small elements\n            // with this behavior the overflow calculation may be incorrect or the scrollbars would appear suddenly\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=292284\n\n            if (!_nativeScrollbarStyling && (_viewportSize.h < _nativeScrollbarMinSize.x || _viewportSize.w < _nativeScrollbarMinSize.y) && (hasOverflow.x && hideOverflow.x && !_nativeScrollbarIsOverlaid.x || hasOverflow.y && hideOverflow.y && !_nativeScrollbarIsOverlaid.y)) {\n              viewportElementCSS[_strPaddingMinus + _strTop] = _nativeScrollbarMinSize.x;\n              viewportElementCSS[_strMarginMinus + _strTop] = -_nativeScrollbarMinSize.x;\n              viewportElementCSS[_strPaddingMinus + isRTLRight] = _nativeScrollbarMinSize.y;\n              viewportElementCSS[_strMarginMinus + isRTLRight] = -_nativeScrollbarMinSize.y;\n            } else {\n              viewportElementCSS[_strPaddingMinus + _strTop] = viewportElementCSS[_strMarginMinus + _strTop] = viewportElementCSS[_strPaddingMinus + isRTLRight] = viewportElementCSS[_strMarginMinus + isRTLRight] = _strEmpty;\n            }\n\n            viewportElementCSS[_strPaddingMinus + isRTLLeft] = viewportElementCSS[_strMarginMinus + isRTLLeft] = _strEmpty; //if there is any overflow (x OR y axis) and this overflow shall be hidden, make overflow hidden, else overflow visible\n\n            if (hasOverflow.x && hideOverflow.x || hasOverflow.y && hideOverflow.y || hideOverflowForceTextarea) {\n              //only hide if is Textarea\n              if (_isTextarea && hideOverflowForceTextarea) {\n                paddingElementCSS[strOverflowX] = paddingElementCSS[strOverflowY] = strHidden;\n              }\n            } else {\n              if (!clipAlways || overflowBehaviorIsVH.x || overflowBehaviorIsVS.x || overflowBehaviorIsVH.y || overflowBehaviorIsVS.y) {\n                //only un-hide if Textarea\n                if (_isTextarea) {\n                  paddingElementCSS[strOverflowX] = paddingElementCSS[strOverflowY] = _strEmpty;\n                }\n\n                viewportElementCSS[strOverflowX] = viewportElementCSS[strOverflowY] = strVisible;\n              }\n            }\n\n            _paddingElement.css(paddingElementCSS);\n\n            _viewportElement.css(viewportElementCSS);\n\n            viewportElementCSS = {}; //force soft redraw in webkit because without the scrollbars will may appear because DOM wont be redrawn under special conditions\n\n            if ((hasOverflow.c || boxSizingChanged || widthAutoChanged || heightAutoChanged) && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n              var elementStyle = _contentElementNative[LEXICON.s];\n              var dump;\n              elementStyle.webkitTransform = 'scale(1)';\n              elementStyle.display = 'run-in';\n              dump = _contentElementNative[LEXICON.oH];\n              elementStyle.display = _strEmpty; //|| dump; //use dump to prevent it from deletion if minify\n\n              elementStyle.webkitTransform = _strEmpty;\n            }\n            /*\r\n            //force hard redraw in webkit if native overlaid scrollbars shall appear\r\n            if (ignoreOverlayScrollbarHidingChanged && ignoreOverlayScrollbarHiding) {\r\n                _hostElement.hide();\r\n                var dump = _hostElementNative[LEXICON.oH];\r\n                _hostElement.show();\r\n            }\r\n            */\n\n          } //change to direction RTL and width auto Bugfix in Webkit\n          //without this fix, the DOM still thinks the scrollbar is LTR and thus the content is shifted to the left\n\n\n          contentElementCSS = {};\n\n          if (cssDirectionChanged || widthAutoChanged || heightAutoChanged) {\n            if (_isRTL && widthAuto) {\n              var floatTmp = _contentElement.css(_strFloat);\n\n              var posLeftWithoutFloat = MATH.round(_contentElement.css(_strFloat, _strEmpty).css(_strLeft, _strEmpty).position().left);\n\n              _contentElement.css(_strFloat, floatTmp);\n\n              var posLeftWithFloat = MATH.round(_contentElement.position().left);\n              if (posLeftWithoutFloat !== posLeftWithFloat) contentElementCSS[_strLeft] = posLeftWithoutFloat;\n            } else {\n              contentElementCSS[_strLeft] = _strEmpty;\n            }\n          }\n\n          _contentElement.css(contentElementCSS); //handle scroll position\n\n\n          if (_isTextarea && contentSizeChanged) {\n            var textareaInfo = getTextareaInfo();\n\n            if (textareaInfo) {\n              var textareaRowsChanged = _textareaInfoCache === undefined ? true : textareaInfo._rows !== _textareaInfoCache._rows;\n              var cursorRow = textareaInfo._cursorRow;\n              var cursorCol = textareaInfo._cursorColumn;\n              var widestRow = textareaInfo._widestRow;\n              var lastRow = textareaInfo._rows;\n              var lastCol = textareaInfo._columns;\n              var cursorPos = textareaInfo._cursorPosition;\n              var cursorMax = textareaInfo._cursorMax;\n              var cursorIsLastPosition = cursorPos >= cursorMax && _textareaHasFocus;\n              var textareaScrollAmount = {\n                x: !textareaAutoWrapping && cursorCol === lastCol && cursorRow === widestRow ? _overflowAmountCache.x : -1,\n                y: (textareaAutoWrapping ? cursorIsLastPosition || textareaRowsChanged && (previousOverflowAmount ? currScroll.y === previousOverflowAmount.y : false) : (cursorIsLastPosition || textareaRowsChanged) && cursorRow === lastRow) ? _overflowAmountCache.y : -1\n              };\n              currScroll.x = textareaScrollAmount.x > -1 ? _isRTL && _normalizeRTLCache && _rtlScrollBehavior.i ? 0 : textareaScrollAmount.x : currScroll.x; //if inverted, scroll to 0 -> normalized this means to max scroll offset.\n\n              currScroll.y = textareaScrollAmount.y > -1 ? textareaScrollAmount.y : currScroll.y;\n            }\n\n            _textareaInfoCache = textareaInfo;\n          }\n\n          if (_isRTL && _rtlScrollBehavior.i && _nativeScrollbarIsOverlaid.y && hasOverflow.x && _normalizeRTLCache) currScroll.x += _contentBorderSize.w || 0;\n          if (widthAuto) _hostElement[_strScrollLeft](0);\n          if (heightAuto) _hostElement[_strScrollTop](0);\n\n          _viewportElement[_strScrollLeft](currScroll.x)[_strScrollTop](currScroll.y); //scrollbars management:\n\n\n          var scrollbarsVisibilityVisible = scrollbarsVisibility === 'v';\n          var scrollbarsVisibilityHidden = scrollbarsVisibility === 'h';\n          var scrollbarsVisibilityAuto = scrollbarsVisibility === 'a';\n\n          var refreshScrollbarsVisibility = function (showX, showY) {\n            showY = showY === undefined ? showX : showY;\n            refreshScrollbarAppearance(true, showX, canScroll.x);\n            refreshScrollbarAppearance(false, showY, canScroll.y);\n          }; //manage class name which indicates scrollable overflow\n\n\n          addRemoveClass(_hostElement, _classNameHostOverflow, hideOverflow.x || hideOverflow.y);\n          addRemoveClass(_hostElement, _classNameHostOverflowX, hideOverflow.x);\n          addRemoveClass(_hostElement, _classNameHostOverflowY, hideOverflow.y); //add or remove rtl class name for styling purposes\n\n          if (cssDirectionChanged) {\n            addRemoveClass(_hostElement, _classNameHostRTL, _isRTL);\n          } //manage the resize feature (CSS3 resize \"polyfill\" for this plugin)\n\n\n          if (_isBody) addClass(_hostElement, _classNameHostResizeDisabled);\n\n          if (resizeChanged) {\n            addRemoveClass(_hostElement, _classNameHostResizeDisabled, _resizeNone);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResize, !_resizeNone);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeB, _resizeBoth);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeH, _resizeHorizontal);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeV, _resizeVertical);\n          } //manage the scrollbars general visibility + the scrollbar interactivity (unusable class name)\n\n\n          if (scrollbarsVisibilityChanged || overflowBehaviorChanged || hideOverflow.c || hasOverflow.c || ignoreOverlayScrollbarHidingChanged) {\n            if (ignoreOverlayScrollbarHiding) {\n              if (ignoreOverlayScrollbarHidingChanged) {\n                removeClass(_hostElement, _classNameHostScrolling);\n\n                if (ignoreOverlayScrollbarHiding) {\n                  refreshScrollbarsVisibility(false);\n                }\n              }\n            } else if (scrollbarsVisibilityAuto) {\n              refreshScrollbarsVisibility(canScroll.x, canScroll.y);\n            } else if (scrollbarsVisibilityVisible) {\n              refreshScrollbarsVisibility(true);\n            } else if (scrollbarsVisibilityHidden) {\n              refreshScrollbarsVisibility(false);\n            }\n          } //manage the scrollbars auto hide feature (auto hide them after specific actions)\n\n\n          if (scrollbarsAutoHideChanged || ignoreOverlayScrollbarHidingChanged) {\n            setupHostMouseTouchEvents(!_scrollbarsAutoHideLeave && !_scrollbarsAutoHideMove);\n            refreshScrollbarsAutoHide(_scrollbarsAutoHideNever, !_scrollbarsAutoHideNever);\n          } //manage scrollbars handle length & offset - don't remove!\n\n\n          if (hostSizeChanged || overflowAmount.c || heightAutoChanged || widthAutoChanged || resizeChanged || boxSizingChanged || paddingAbsoluteChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged) {\n            refreshScrollbarHandleLength(true);\n            refreshScrollbarHandleOffset(true);\n            refreshScrollbarHandleLength(false);\n            refreshScrollbarHandleOffset(false);\n          } //manage interactivity\n\n\n          if (scrollbarsClickScrollingChanged) refreshScrollbarsInteractive(true, scrollbarsClickScrolling);\n          if (scrollbarsDragScrollingChanged) refreshScrollbarsInteractive(false, scrollbarsDragScrolling); //callbacks:\n\n          dispatchCallback('onDirectionChanged', {\n            isRTL: _isRTL,\n            dir: cssDirection\n          }, cssDirectionChanged);\n          dispatchCallback('onHostSizeChanged', {\n            width: _hostSizeCache.w,\n            height: _hostSizeCache.h\n          }, hostSizeChanged);\n          dispatchCallback('onContentSizeChanged', {\n            width: _contentScrollSizeCache.w,\n            height: _contentScrollSizeCache.h\n          }, contentSizeChanged);\n          dispatchCallback('onOverflowChanged', {\n            x: hasOverflow.x,\n            y: hasOverflow.y,\n            xScrollable: hideOverflow.xs,\n            yScrollable: hideOverflow.ys,\n            clipped: hideOverflow.x || hideOverflow.y\n          }, hasOverflow.c || hideOverflow.c);\n          dispatchCallback('onOverflowAmountChanged', {\n            x: overflowAmount.x,\n            y: overflowAmount.y\n          }, overflowAmount.c);\n        } //fix body min size\n\n\n        if (_isBody && _bodyMinSizeCache && (_hasOverflowCache.c || _bodyMinSizeCache.c)) {\n          //its possible that no min size was measured until now, because the content arrange element was just added now, in this case, measure now the min size.\n          if (!_bodyMinSizeCache.f) bodyMinSizeChanged();\n          if (_nativeScrollbarIsOverlaid.y && _hasOverflowCache.x) _contentElement.css(_strMinMinus + _strWidth, _bodyMinSizeCache.w + _overlayScrollbarDummySize.y);\n          if (_nativeScrollbarIsOverlaid.x && _hasOverflowCache.y) _contentElement.css(_strMinMinus + _strHeight, _bodyMinSizeCache.h + _overlayScrollbarDummySize.x);\n          _bodyMinSizeCache.c = false;\n        }\n\n        if (_initialized && changedOptions.updateOnLoad) {\n          updateElementsOnLoad();\n        } //freezeResizeObserver(_sizeObserverElement, false);\n        //freezeResizeObserver(_sizeAutoObserverElement, false);\n\n\n        dispatchCallback('onUpdated', {\n          forced: force\n        });\n      }\n      /**\r\n       * Updates the found elements of which the load event shall be handled.\r\n       */\n\n\n      function updateElementsOnLoad() {\n        if (!_isTextarea) {\n          eachUpdateOnLoad(function (i, updateOnLoadSelector) {\n            _contentElement.find(updateOnLoadSelector).each(function (i, el) {\n              // if element doesn't have a updateOnLoadCallback applied\n              if (COMPATIBILITY.inA(el, _updateOnLoadElms) < 0) {\n                _updateOnLoadElms.push(el);\n\n                FRAMEWORK(el).off(_updateOnLoadEventName, updateOnLoadCallback).on(_updateOnLoadEventName, updateOnLoadCallback);\n              }\n            });\n          });\n        }\n      } //==== Options ====//\n\n      /**\r\n       * Sets new options but doesn't call the update method.\r\n       * @param newOptions The object which contains the new options.\r\n       * @returns {*} A object which contains the changed options.\r\n       */\n\n\n      function setOptions(newOptions) {\n        var validatedOpts = _pluginsOptions._validate(newOptions, _pluginsOptions._template, true, _currentOptions);\n\n        _currentOptions = extendDeep({}, _currentOptions, validatedOpts._default);\n        _currentPreparedOptions = extendDeep({}, _currentPreparedOptions, validatedOpts._prepared);\n        return validatedOpts._prepared;\n      } //==== Structure ====//\n\n      /**\r\n       * Builds or destroys the wrapper and helper DOM elements.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n      /**\r\n       * Builds or destroys the wrapper and helper DOM elements.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupStructureDOM(destroy) {\n        var strParent = 'parent';\n        var classNameResizeObserverHost = 'os-resize-observer-host';\n        var classNameTextareaElementFull = _classNameTextareaElement + _strSpace + _classNameTextInherit;\n        var textareaClass = _isTextarea ? _strSpace + _classNameTextInherit : _strEmpty;\n        var adoptAttrs = _currentPreparedOptions.textarea.inheritedAttrs;\n        var adoptAttrsMap = {};\n\n        var applyAdoptedAttrs = function () {\n          var applyAdoptedAttrsElm = destroy ? _targetElement : _hostElement;\n          each(adoptAttrsMap, function (key, value) {\n            if (type(value) == TYPES.s) {\n              if (key == LEXICON.c) applyAdoptedAttrsElm.addClass(value);else applyAdoptedAttrsElm.attr(key, value);\n            }\n          });\n        };\n\n        var hostElementClassNames = [_classNameHostElement, _classNameHostElementForeign, _classNameHostTextareaElement, _classNameHostResizeDisabled, _classNameHostRTL, _classNameHostScrollbarHorizontalHidden, _classNameHostScrollbarVerticalHidden, _classNameHostTransition, _classNameHostScrolling, _classNameHostOverflow, _classNameHostOverflowX, _classNameHostOverflowY, _classNameThemeNone, _classNameTextareaElement, _classNameTextInherit, _classNameCache].join(_strSpace);\n        var hostElementCSS = {}; //get host element as first element, because that's the most upper element and required for the other elements\n\n        _hostElement = _hostElement || (_isTextarea ? _domExists ? _targetElement[strParent]()[strParent]()[strParent]()[strParent]() : FRAMEWORK(generateDiv(_classNameHostTextareaElement)) : _targetElement);\n        _contentElement = _contentElement || selectOrGenerateDivByClass(_classNameContentElement + textareaClass);\n        _viewportElement = _viewportElement || selectOrGenerateDivByClass(_classNameViewportElement + textareaClass);\n        _paddingElement = _paddingElement || selectOrGenerateDivByClass(_classNamePaddingElement + textareaClass);\n        _sizeObserverElement = _sizeObserverElement || selectOrGenerateDivByClass(classNameResizeObserverHost);\n        _textareaCoverElement = _textareaCoverElement || (_isTextarea ? selectOrGenerateDivByClass(_classNameTextareaCoverElement) : undefined); //add this class to workaround class changing issues with UI frameworks especially Vue\n\n        if (_domExists) addClass(_hostElement, _classNameHostElementForeign); //on destroy, remove all generated class names from the host element before collecting the adopted attributes \n        //to prevent adopting generated class names\n\n        if (destroy) removeClass(_hostElement, hostElementClassNames); //collect all adopted attributes\n\n        adoptAttrs = type(adoptAttrs) == TYPES.s ? adoptAttrs.split(_strSpace) : adoptAttrs;\n\n        if (COMPATIBILITY.isA(adoptAttrs) && _isTextarea) {\n          each(adoptAttrs, function (i, v) {\n            if (type(v) == TYPES.s) {\n              adoptAttrsMap[v] = destroy ? _hostElement.attr(v) : _targetElement.attr(v);\n            }\n          });\n        }\n\n        if (!destroy) {\n          if (_isTextarea) {\n            if (!_currentPreparedOptions.sizeAutoCapable) {\n              hostElementCSS[_strWidth] = _targetElement.css(_strWidth);\n              hostElementCSS[_strHeight] = _targetElement.css(_strHeight);\n            }\n\n            if (!_domExists) _targetElement.addClass(_classNameTextInherit).wrap(_hostElement); //jQuery clones elements in wrap functions, so we have to select them again\n\n            _hostElement = _targetElement[strParent]().css(hostElementCSS);\n          }\n\n          if (!_domExists) {\n            //add the correct class to the target element\n            addClass(_targetElement, _isTextarea ? classNameTextareaElementFull : _classNameHostElement); //wrap the content into the generated elements to create the required DOM\n\n            _hostElement.wrapInner(_contentElement).wrapInner(_viewportElement).wrapInner(_paddingElement).prepend(_sizeObserverElement); //jQuery clones elements in wrap functions, so we have to select them again\n\n\n            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\n            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\n            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\n\n            if (_isTextarea) {\n              _contentElement.prepend(_textareaCoverElement);\n\n              applyAdoptedAttrs();\n            }\n          }\n\n          if (_nativeScrollbarStyling) addClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible);\n          if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y) addClass(_viewportElement, _classNameViewportNativeScrollbarsOverlaid);\n          if (_isBody) addClass(_htmlElement, _classNameHTMLElement);\n          _sizeObserverElementNative = _sizeObserverElement[0];\n          _hostElementNative = _hostElement[0];\n          _paddingElementNative = _paddingElement[0];\n          _viewportElementNative = _viewportElement[0];\n          _contentElementNative = _contentElement[0];\n          updateViewportAttrsFromTarget();\n        } else {\n          if (_domExists && _initialized) {\n            //clear size observer\n            _sizeObserverElement.children().remove(); //remove the style property and classes from already generated elements\n\n\n            each([_paddingElement, _viewportElement, _contentElement, _textareaCoverElement], function (i, elm) {\n              if (elm) {\n                removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n              }\n            }); //add classes to the host element which was removed previously to match the expected DOM\n\n            addClass(_hostElement, _isTextarea ? _classNameHostTextareaElement : _classNameHostElement);\n          } else {\n            //remove size observer\n            remove(_sizeObserverElement); //unwrap the content to restore DOM\n\n            _contentElement.contents().unwrap().unwrap().unwrap();\n\n            if (_isTextarea) {\n              _targetElement.unwrap();\n\n              remove(_hostElement);\n              remove(_textareaCoverElement);\n              applyAdoptedAttrs();\n            }\n          }\n\n          if (_isTextarea) _targetElement.removeAttr(LEXICON.s);\n          if (_isBody) removeClass(_htmlElement, _classNameHTMLElement);\n        }\n      }\n      /**\r\n       * Adds or removes all wrapper elements interactivity events.\r\n       * @param destroy Indicates whether the Events shall be added or removed.\r\n       */\n\n\n      function setupStructureEvents() {\n        var textareaKeyDownRestrictedKeyCodes = [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, //F1 to F12\n        33, 34, //page up, page down\n        37, 38, 39, 40, //left, up, right, down arrows\n        16, 17, 18, 19, 20, 144 //Shift, Ctrl, Alt, Pause, CapsLock, NumLock\n        ];\n        var textareaKeyDownKeyCodesList = [];\n        var textareaUpdateIntervalID;\n        var scrollStopTimeoutId;\n        var scrollStopDelay = 175;\n        var strFocus = 'focus';\n\n        function updateTextarea(doClearInterval) {\n          textareaUpdate();\n\n          _base.update(_strAuto);\n\n          if (doClearInterval && _autoUpdateRecommended) clearInterval(textareaUpdateIntervalID);\n        }\n\n        function textareaOnScroll(event) {\n          _targetElement[_strScrollLeft](_rtlScrollBehavior.i && _normalizeRTLCache ? 9999999 : 0);\n\n          _targetElement[_strScrollTop](0);\n\n          COMPATIBILITY.prvD(event);\n          COMPATIBILITY.stpP(event);\n          return false;\n        }\n\n        function textareaOnDrop(event) {\n          setTimeout(function () {\n            if (!_destroyed) updateTextarea();\n          }, 50);\n        }\n\n        function textareaOnFocus() {\n          _textareaHasFocus = true;\n          addClass(_hostElement, strFocus);\n        }\n\n        function textareaOnFocusout() {\n          _textareaHasFocus = false;\n          textareaKeyDownKeyCodesList = [];\n          removeClass(_hostElement, strFocus);\n          updateTextarea(true);\n        }\n\n        function textareaOnKeyDown(event) {\n          var keyCode = event.keyCode;\n\n          if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\n            if (!textareaKeyDownKeyCodesList[LEXICON.l]) {\n              updateTextarea();\n              textareaUpdateIntervalID = setInterval(updateTextarea, 1000 / 60);\n            }\n\n            if (inArray(keyCode, textareaKeyDownKeyCodesList) < 0) textareaKeyDownKeyCodesList.push(keyCode);\n          }\n        }\n\n        function textareaOnKeyUp(event) {\n          var keyCode = event.keyCode;\n          var index = inArray(keyCode, textareaKeyDownKeyCodesList);\n\n          if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\n            if (index > -1) textareaKeyDownKeyCodesList.splice(index, 1);\n            if (!textareaKeyDownKeyCodesList[LEXICON.l]) updateTextarea(true);\n          }\n        }\n\n        function contentOnTransitionEnd(event) {\n          if (_autoUpdateCache === true) return;\n          event = event.originalEvent || event;\n          if (isSizeAffectingCSSProperty(event.propertyName)) _base.update(_strAuto);\n        }\n\n        function viewportOnScroll(event) {\n          if (!_sleeping) {\n            if (scrollStopTimeoutId !== undefined) clearTimeout(scrollStopTimeoutId);else {\n              if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(true);\n              if (!nativeOverlayScrollbarsAreActive()) addClass(_hostElement, _classNameHostScrolling);\n              dispatchCallback('onScrollStart', event);\n            } //if a scrollbars handle gets dragged, the mousemove event is responsible for refreshing the handle offset\n            //because if CSS scroll-snap is used, the handle offset gets only refreshed on every snap point\n            //this looks laggy & clunky, it looks much better if the offset refreshes with the mousemove\n\n            if (!_scrollbarsHandlesDefineScrollPos) {\n              refreshScrollbarHandleOffset(true);\n              refreshScrollbarHandleOffset(false);\n            }\n\n            dispatchCallback('onScroll', event);\n            scrollStopTimeoutId = setTimeout(function () {\n              if (!_destroyed) {\n                //OnScrollStop:\n                clearTimeout(scrollStopTimeoutId);\n                scrollStopTimeoutId = undefined;\n                if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n                if (!nativeOverlayScrollbarsAreActive()) removeClass(_hostElement, _classNameHostScrolling);\n                dispatchCallback('onScrollStop', event);\n              }\n            }, scrollStopDelay);\n          }\n        }\n\n        if (_isTextarea) {\n          if (_msieVersion > 9 || !_autoUpdateRecommended) {\n            addDestroyEventListener(_targetElement, 'input', updateTextarea);\n          } else {\n            addDestroyEventListener(_targetElement, [_strKeyDownEvent, _strKeyUpEvent], [textareaOnKeyDown, textareaOnKeyUp]);\n          }\n\n          addDestroyEventListener(_targetElement, [_strScroll, 'drop', strFocus, strFocus + 'out'], [textareaOnScroll, textareaOnDrop, textareaOnFocus, textareaOnFocusout]);\n        } else {\n          addDestroyEventListener(_contentElement, _strTransitionEndEvent, contentOnTransitionEnd);\n        }\n\n        addDestroyEventListener(_viewportElement, _strScroll, viewportOnScroll, true);\n      } //==== Scrollbars ====//\n\n      /**\r\n       * Builds or destroys all scrollbar DOM elements (scrollbar, track, handle)\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupScrollbarsDOM(destroy) {\n        var selectOrGenerateScrollbarDOM = function (isHorizontal) {\n          var scrollbarClassName = isHorizontal ? _classNameScrollbarHorizontal : _classNameScrollbarVertical;\n          var scrollbar = selectOrGenerateDivByClass(_classNameScrollbar + _strSpace + scrollbarClassName, true);\n          var track = selectOrGenerateDivByClass(_classNameScrollbarTrack, scrollbar);\n          var handle = selectOrGenerateDivByClass(_classNameScrollbarHandle, scrollbar);\n\n          if (!_domExists && !destroy) {\n            scrollbar.append(track);\n            track.append(handle);\n          }\n\n          return {\n            _scrollbar: scrollbar,\n            _track: track,\n            _handle: handle\n          };\n        };\n\n        function resetScrollbarDOM(isHorizontal) {\n          var scrollbarVars = getScrollbarVars(isHorizontal);\n          var scrollbar = scrollbarVars._scrollbar;\n          var track = scrollbarVars._track;\n          var handle = scrollbarVars._handle;\n\n          if (_domExists && _initialized) {\n            each([scrollbar, track, handle], function (i, elm) {\n              removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n            });\n          } else {\n            remove(scrollbar || selectOrGenerateScrollbarDOM(isHorizontal)._scrollbar);\n          }\n        }\n\n        var horizontalElements;\n        var verticalElements;\n\n        if (!destroy) {\n          horizontalElements = selectOrGenerateScrollbarDOM(true);\n          verticalElements = selectOrGenerateScrollbarDOM();\n          _scrollbarHorizontalElement = horizontalElements._scrollbar;\n          _scrollbarHorizontalTrackElement = horizontalElements._track;\n          _scrollbarHorizontalHandleElement = horizontalElements._handle;\n          _scrollbarVerticalElement = verticalElements._scrollbar;\n          _scrollbarVerticalTrackElement = verticalElements._track;\n          _scrollbarVerticalHandleElement = verticalElements._handle;\n\n          if (!_domExists) {\n            _paddingElement.after(_scrollbarVerticalElement);\n\n            _paddingElement.after(_scrollbarHorizontalElement);\n          }\n        } else {\n          resetScrollbarDOM(true);\n          resetScrollbarDOM();\n        }\n      }\n      /**\r\n       * Initializes all scrollbar interactivity events. (track and handle dragging, clicking, scrolling)\r\n       * @param isHorizontal True if the target scrollbar is the horizontal scrollbar, false if the target scrollbar is the vertical scrollbar.\r\n       */\n\n\n      function setupScrollbarEvents(isHorizontal) {\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var insideIFrame = _windowElementNative.top !== _windowElementNative;\n        var xy = scrollbarVars._x_y;\n        var XY = scrollbarVars._X_Y;\n        var scroll = _strScroll + scrollbarVars._Left_Top;\n        var strActive = 'active';\n        var strSnapHandle = 'snapHandle';\n        var scrollDurationFactor = 1;\n        var increaseDecreaseScrollAmountKeyCodes = [16, 17]; //shift, ctrl\n\n        var trackTimeout;\n        var mouseDownScroll;\n        var mouseDownOffset;\n        var mouseDownInvertedScale;\n\n        function getPointerPosition(event) {\n          return _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\n        }\n\n        function getPreparedScrollbarsOption(name) {\n          return _currentPreparedOptions.scrollbars[name];\n        }\n\n        function increaseTrackScrollAmount() {\n          scrollDurationFactor = 0.5;\n        }\n\n        function decreaseTrackScrollAmount() {\n          scrollDurationFactor = 1;\n        }\n\n        function documentKeyDown(event) {\n          if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1) increaseTrackScrollAmount();\n        }\n\n        function documentKeyUp(event) {\n          if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1) decreaseTrackScrollAmount();\n        }\n\n        function onMouseTouchDownContinue(event) {\n          var originalEvent = event.originalEvent || event;\n          var isTouchEvent = originalEvent.touches !== undefined;\n          return _sleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || isTouchEvent && !getPreparedScrollbarsOption('touchSupport') ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n        }\n\n        function documentDragMove(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var trackLength = scrollbarVarsInfo._trackLength;\n            var handleLength = scrollbarVarsInfo._handleLength;\n            var scrollRange = scrollbarVarsInfo._maxScroll;\n            var scrollRaw = (getPointerPosition(event) - mouseDownOffset) * mouseDownInvertedScale;\n            var scrollDeltaPercent = scrollRaw / (trackLength - handleLength);\n            var scrollDelta = scrollRange * scrollDeltaPercent;\n            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\n            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i) scrollDelta *= -1;\n\n            _viewportElement[scroll](MATH.round(mouseDownScroll + scrollDelta));\n\n            if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, mouseDownScroll + scrollDelta);\n            if (!_supportPassiveEvents) COMPATIBILITY.prvD(event);\n          } else documentMouseTouchUp(event);\n        }\n\n        function documentMouseTouchUp(event) {\n          event = event || event.originalEvent;\n          setupResponsiveEventListener(_documentElement, [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent], [documentDragMove, documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart], true);\n          if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, true);\n          _scrollbarsHandlesDefineScrollPos = false;\n          removeClass(_bodyElement, _classNameDragging);\n          removeClass(scrollbarVars._handle, strActive);\n          removeClass(scrollbarVars._track, strActive);\n          removeClass(scrollbarVars._scrollbar, strActive);\n          mouseDownScroll = undefined;\n          mouseDownOffset = undefined;\n          mouseDownInvertedScale = 1;\n          decreaseTrackScrollAmount();\n\n          if (trackTimeout !== undefined) {\n            _base.scrollStop();\n\n            clearTimeout(trackTimeout);\n            trackTimeout = undefined;\n          }\n\n          if (event) {\n            var rect = _hostElementNative[LEXICON.bCR]();\n\n            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom; //if mouse is outside host element\n\n            if (!mouseInsideHost) hostOnMouseLeave();\n            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n          }\n        }\n\n        function onHandleMouseTouchDown(event) {\n          if (onMouseTouchDownContinue(event)) onHandleMouseTouchDownAction(event);\n        }\n\n        function onHandleMouseTouchDownAction(event) {\n          mouseDownScroll = _viewportElement[scroll]();\n          mouseDownScroll = isNaN(mouseDownScroll) ? 0 : mouseDownScroll;\n          if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL) mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\n          mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n          mouseDownOffset = getPointerPosition(event);\n          _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\n          addClass(_bodyElement, _classNameDragging);\n          addClass(scrollbarVars._handle, strActive);\n          addClass(scrollbarVars._scrollbar, strActive);\n          setupResponsiveEventListener(_documentElement, [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strSelectStartEvent], [documentDragMove, documentMouseTouchUp, documentOnSelectStart]);\n          if (_msieVersion || !_documentMixed) COMPATIBILITY.prvD(event);\n          COMPATIBILITY.stpP(event);\n        }\n\n        function onTrackMouseTouchDown(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var scrollDistance = MATH.round(_viewportSize[scrollbarVars._w_h]);\n\n            var trackOffset = scrollbarVars._track.offset()[scrollbarVars._left_top];\n\n            var ctrlKey = event.ctrlKey;\n            var instantScroll = event.shiftKey;\n            var instantScrollTransition = instantScroll && ctrlKey;\n            var isFirstIteration = true;\n            var easing = 'linear';\n            var decreaseScroll;\n            var finishedCondition;\n\n            var scrollActionFinsished = function (transition) {\n              if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, transition);\n            };\n\n            var scrollActionInstantFinished = function () {\n              scrollActionFinsished();\n              onHandleMouseTouchDownAction(event);\n            };\n\n            var scrollAction = function () {\n              if (!_destroyed) {\n                var mouseOffset = (mouseDownOffset - trackOffset) * mouseDownInvertedScale;\n                var handleOffset = scrollbarVarsInfo._handleOffset;\n                var trackLength = scrollbarVarsInfo._trackLength;\n                var handleLength = scrollbarVarsInfo._handleLength;\n                var scrollRange = scrollbarVarsInfo._maxScroll;\n                var currScroll = scrollbarVarsInfo._currentScroll;\n                var scrollDuration = 270 * scrollDurationFactor;\n                var timeoutDelay = isFirstIteration ? MATH.max(400, scrollDuration) : scrollDuration;\n                var instantScrollPosition = scrollRange * ((mouseOffset - handleLength / 2) / (trackLength - handleLength)); // 100% * positionPercent\n\n                var rtlIsNormal = _isRTL && isHorizontal && (!_rtlScrollBehavior.i && !_rtlScrollBehavior.n || _normalizeRTLCache);\n                var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\n                var scrollObj = {};\n                var animationObj = {\n                  easing: easing,\n                  step: function (now) {\n                    if (_scrollbarsHandlesDefineScrollPos) {\n                      _viewportElement[scroll](now); //https://github.com/jquery/jquery/issues/4340\n\n\n                      refreshScrollbarHandleOffset(isHorizontal, now);\n                    }\n                  }\n                };\n                instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\n                instantScrollPosition = _isRTL && isHorizontal && !_rtlScrollBehavior.i ? scrollRange - instantScrollPosition : instantScrollPosition; //_base.scrollStop();\n\n                if (instantScroll) {\n                  _viewportElement[scroll](instantScrollPosition); //scroll instantly to new position\n\n\n                  if (instantScrollTransition) {\n                    //get the scroll position after instant scroll (in case CSS Snap Points are used) to get the correct snapped scroll position\n                    //and the animation stops at the correct point\n                    instantScrollPosition = _viewportElement[scroll](); //scroll back to the position before instant scrolling so animation can be performed\n\n                    _viewportElement[scroll](currScroll);\n\n                    instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.i ? scrollRange - instantScrollPosition : instantScrollPosition;\n                    instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.n ? -instantScrollPosition : instantScrollPosition;\n                    scrollObj[xy] = instantScrollPosition;\n\n                    _base.scroll(scrollObj, extendDeep(animationObj, {\n                      duration: 130,\n                      complete: scrollActionInstantFinished\n                    }));\n                  } else scrollActionInstantFinished();\n                } else {\n                  decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\n                  finishedCondition = rtlIsNormal ? decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset : decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset;\n\n                  if (finishedCondition) {\n                    clearTimeout(trackTimeout);\n\n                    _base.scrollStop();\n\n                    trackTimeout = undefined;\n                    scrollActionFinsished(true);\n                  } else {\n                    trackTimeout = setTimeout(scrollAction, timeoutDelay);\n                    scrollObj[xy] = (decreaseScroll ? '-=' : '+=') + scrollDistance;\n\n                    _base.scroll(scrollObj, extendDeep(animationObj, {\n                      duration: scrollDuration\n                    }));\n                  }\n\n                  isFirstIteration = false;\n                }\n              }\n            };\n\n            if (ctrlKey) increaseTrackScrollAmount();\n            mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n            mouseDownOffset = COMPATIBILITY.page(event)[xy];\n            _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\n            addClass(_bodyElement, _classNameDragging);\n            addClass(scrollbarVars._track, strActive);\n            addClass(scrollbarVars._scrollbar, strActive);\n            setupResponsiveEventListener(_documentElement, [_strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent], [documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart]);\n            scrollAction();\n            COMPATIBILITY.prvD(event);\n            COMPATIBILITY.stpP(event);\n          }\n        }\n\n        function onTrackMouseTouchEnter(event) {\n          //make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\" or \"move\".\n          _scrollbarsHandleHovered = true;\n          if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(true);\n        }\n\n        function onTrackMouseTouchLeave(event) {\n          _scrollbarsHandleHovered = false;\n          if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n        }\n\n        function onScrollbarMouseTouchDown(event) {\n          COMPATIBILITY.stpP(event);\n        }\n\n        addDestroyEventListener(scrollbarVars._handle, _strMouseTouchDownEvent, onHandleMouseTouchDown);\n        addDestroyEventListener(scrollbarVars._track, [_strMouseTouchDownEvent, _strMouseEnter, _strMouseLeave], [onTrackMouseTouchDown, onTrackMouseTouchEnter, onTrackMouseTouchLeave]);\n        addDestroyEventListener(scrollbarVars._scrollbar, _strMouseTouchDownEvent, onScrollbarMouseTouchDown);\n\n        if (_supportTransition) {\n          addDestroyEventListener(scrollbarVars._scrollbar, _strTransitionEndEvent, function (event) {\n            if (event.target !== scrollbarVars._scrollbar[0]) return;\n            refreshScrollbarHandleLength(isHorizontal);\n            refreshScrollbarHandleOffset(isHorizontal);\n          });\n        }\n      }\n      /**\r\n       * Shows or hides the given scrollbar and applied a class name which indicates if the scrollbar is scrollable or not.\r\n       * @param isHorizontal True if the horizontal scrollbar is the target, false if the vertical scrollbar is the target.\r\n       * @param shallBeVisible True if the scrollbar shall be shown, false if hidden.\r\n       * @param canScroll True if the scrollbar is scrollable, false otherwise.\r\n       */\n\n\n      function refreshScrollbarAppearance(isHorizontal, shallBeVisible, canScroll) {\n        var scrollbarHiddenClassName = isHorizontal ? _classNameHostScrollbarHorizontalHidden : _classNameHostScrollbarVerticalHidden;\n        var scrollbarElement = isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement;\n        addRemoveClass(_hostElement, scrollbarHiddenClassName, !shallBeVisible);\n        addRemoveClass(scrollbarElement, _classNameScrollbarUnusable, !canScroll);\n      }\n      /**\r\n       * Autoshows / autohides both scrollbars with.\r\n       * @param shallBeVisible True if the scrollbars shall be autoshown (only the case if they are hidden by a autohide), false if the shall be auto hidden.\r\n       * @param delayfree True if the scrollbars shall be hidden without a delay, false or undefined otherwise.\r\n       */\n\n\n      function refreshScrollbarsAutoHide(shallBeVisible, delayfree) {\n        clearTimeout(_scrollbarsAutoHideTimeoutId);\n\n        if (shallBeVisible) {\n          //if(_hasOverflowCache.x && _hideOverflowCache.xs)\n          removeClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden); //if(_hasOverflowCache.y && _hideOverflowCache.ys)\n\n          removeClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n        } else {\n          var anyActive;\n          var strActive = 'active';\n\n          var hide = function () {\n            if (!_scrollbarsHandleHovered && !_destroyed) {\n              anyActive = _scrollbarHorizontalHandleElement.hasClass(strActive) || _scrollbarVerticalHandleElement.hasClass(strActive);\n              if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave)) addClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\n              if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave)) addClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n            }\n          };\n\n          if (_scrollbarsAutoHideDelay > 0 && delayfree !== true) _scrollbarsAutoHideTimeoutId = setTimeout(hide, _scrollbarsAutoHideDelay);else hide();\n        }\n      }\n      /**\r\n       * Refreshes the handle length of the given scrollbar.\r\n       * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n       */\n\n\n      function refreshScrollbarHandleLength(isHorizontal) {\n        var handleCSS = {};\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var digit = 1000000; //get and apply intended handle length\n\n        var handleRatio = MATH.min(1, (_hostSizeCache[scrollbarVars._w_h] - (_paddingAbsoluteCache ? isHorizontal ? _paddingX : _paddingY : 0)) / _contentScrollSizeCache[scrollbarVars._w_h]);\n        handleCSS[scrollbarVars._width_height] = MATH.floor(handleRatio * 100 * digit) / digit + '%'; //the last * digit / digit is for flooring to the 4th digit\n\n        if (!nativeOverlayScrollbarsAreActive()) scrollbarVars._handle.css(handleCSS); //measure the handle length to respect min & max length\n\n        scrollbarVarsInfo._handleLength = scrollbarVars._handle[0]['offset' + scrollbarVars._Width_Height];\n        scrollbarVarsInfo._handleLengthRatio = handleRatio;\n      }\n      /**\r\n       * Refreshes the handle offset of the given scrollbar.\r\n       * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n       * @param scrollOrTransition The scroll position of the given scrollbar axis to which the handle shall be moved or a boolean which indicates whether a transition shall be applied. If undefined or boolean if the current scroll-offset is taken. (if isHorizontal ? scrollLeft : scrollTop)\r\n       */\n\n\n      function refreshScrollbarHandleOffset(isHorizontal, scrollOrTransition) {\n        var transition = type(scrollOrTransition) == TYPES.b;\n        var transitionDuration = 250;\n        var isRTLisHorizontal = _isRTL && isHorizontal;\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var strTranslateBrace = 'translate(';\n\n        var strTransform = VENDORS._cssProperty('transform');\n\n        var strTransition = VENDORS._cssProperty('transition');\n\n        var nativeScroll = isHorizontal ? _viewportElement[_strScrollLeft]() : _viewportElement[_strScrollTop]();\n        var currentScroll = scrollOrTransition === undefined || transition ? nativeScroll : scrollOrTransition; //measure the handle length to respect min & max length\n\n        var handleLength = scrollbarVarsInfo._handleLength;\n        var trackLength = scrollbarVars._track[0]['offset' + scrollbarVars._Width_Height];\n        var handleTrackDiff = trackLength - handleLength;\n        var handleCSS = {};\n        var transformOffset;\n        var translateValue; //DONT use the variable '_contentScrollSizeCache[scrollbarVars._w_h]' instead of '_viewportElement[0]['scroll' + scrollbarVars._Width_Height]'\n        // because its a bit behind during the small delay when content size updates\n        //(delay = mutationObserverContentLag, if its 0 then this var could be used)\n\n        var maxScroll = (_viewportElementNative[_strScroll + scrollbarVars._Width_Height] - _viewportElementNative['client' + scrollbarVars._Width_Height]) * (_rtlScrollBehavior.n && isRTLisHorizontal ? -1 : 1); //* -1 if rtl scroll max is negative\n\n        var getScrollRatio = function (base) {\n          return isNaN(base / maxScroll) ? 0 : MATH.max(0, MATH.min(1, base / maxScroll));\n        };\n\n        var getHandleOffset = function (scrollRatio) {\n          var offset = handleTrackDiff * scrollRatio;\n          offset = isNaN(offset) ? 0 : offset;\n          offset = isRTLisHorizontal && !_rtlScrollBehavior.i ? trackLength - handleLength - offset : offset;\n          offset = MATH.max(0, offset);\n          return offset;\n        };\n\n        var scrollRatio = getScrollRatio(nativeScroll);\n        var unsnappedScrollRatio = getScrollRatio(currentScroll);\n        var handleOffset = getHandleOffset(unsnappedScrollRatio);\n        var snappedHandleOffset = getHandleOffset(scrollRatio);\n        scrollbarVarsInfo._maxScroll = maxScroll;\n        scrollbarVarsInfo._currentScroll = nativeScroll;\n        scrollbarVarsInfo._currentScrollRatio = scrollRatio;\n\n        if (_supportTransform) {\n          transformOffset = isRTLisHorizontal ? -(trackLength - handleLength - handleOffset) : handleOffset; //in px\n          //transformOffset = (transformOffset / trackLength * 100) * (trackLength / handleLength); //in %\n\n          translateValue = isHorizontal ? strTranslateBrace + transformOffset + 'px, 0)' : strTranslateBrace + '0, ' + transformOffset + 'px)';\n          handleCSS[strTransform] = translateValue; //apply or clear up transition\n\n          if (_supportTransition) handleCSS[strTransition] = transition && MATH.abs(handleOffset - scrollbarVarsInfo._handleOffset) > 1 ? getCSSTransitionString(scrollbarVars._handle) + ', ' + (strTransform + _strSpace + transitionDuration + 'ms') : _strEmpty;\n        } else handleCSS[scrollbarVars._left_top] = handleOffset; //only apply css if offset has changed and overflow exists.\n\n\n        if (!nativeOverlayScrollbarsAreActive()) {\n          scrollbarVars._handle.css(handleCSS); //clear up transition\n\n\n          if (_supportTransform && _supportTransition && transition) {\n            scrollbarVars._handle.one(_strTransitionEndEvent, function () {\n              if (!_destroyed) scrollbarVars._handle.css(strTransition, _strEmpty);\n            });\n          }\n        }\n\n        scrollbarVarsInfo._handleOffset = handleOffset;\n        scrollbarVarsInfo._snappedHandleOffset = snappedHandleOffset;\n        scrollbarVarsInfo._trackLength = trackLength;\n      }\n      /**\r\n       * Refreshes the interactivity of the given scrollbar element.\r\n       * @param isTrack True if the track element is the target, false if the handle element is the target.\r\n       * @param value True for interactivity false for no interactivity.\r\n       */\n\n\n      function refreshScrollbarsInteractive(isTrack, value) {\n        var action = value ? 'removeClass' : 'addClass';\n        var element1 = isTrack ? _scrollbarHorizontalTrackElement : _scrollbarHorizontalHandleElement;\n        var element2 = isTrack ? _scrollbarVerticalTrackElement : _scrollbarVerticalHandleElement;\n        var className = isTrack ? _classNameScrollbarTrackOff : _classNameScrollbarHandleOff;\n        element1[action](className);\n        element2[action](className);\n      }\n      /**\r\n       * Returns a object which is used for fast access for specific variables.\r\n       * @param isHorizontal True if the horizontal scrollbar vars shall be accessed, false if the vertical scrollbar vars shall be accessed.\r\n       * @returns {{wh: string, WH: string, lt: string, _wh: string, _lt: string, t: *, h: *, c: {}, s: *}}\r\n       */\n\n\n      function getScrollbarVars(isHorizontal) {\n        return {\n          _width_height: isHorizontal ? _strWidth : _strHeight,\n          _Width_Height: isHorizontal ? 'Width' : 'Height',\n          _left_top: isHorizontal ? _strLeft : _strTop,\n          _Left_Top: isHorizontal ? 'Left' : 'Top',\n          _x_y: isHorizontal ? _strX : _strY,\n          _X_Y: isHorizontal ? 'X' : 'Y',\n          _w_h: isHorizontal ? 'w' : 'h',\n          _l_t: isHorizontal ? 'l' : 't',\n          _track: isHorizontal ? _scrollbarHorizontalTrackElement : _scrollbarVerticalTrackElement,\n          _handle: isHorizontal ? _scrollbarHorizontalHandleElement : _scrollbarVerticalHandleElement,\n          _scrollbar: isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement,\n          _info: isHorizontal ? _scrollHorizontalInfo : _scrollVerticalInfo\n        };\n      } //==== Scrollbar Corner ====//\n\n      /**\r\n       * Builds or destroys the scrollbar corner DOM element.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupScrollbarCornerDOM(destroy) {\n        _scrollbarCornerElement = _scrollbarCornerElement || selectOrGenerateDivByClass(_classNameScrollbarCorner, true);\n\n        if (!destroy) {\n          if (!_domExists) {\n            _hostElement.append(_scrollbarCornerElement);\n          }\n        } else {\n          if (_domExists && _initialized) {\n            removeClass(_scrollbarCornerElement.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n          } else {\n            remove(_scrollbarCornerElement);\n          }\n        }\n      }\n      /**\r\n       * Initializes all scrollbar corner interactivity events.\r\n       */\n\n\n      function setupScrollbarCornerEvents() {\n        var insideIFrame = _windowElementNative.top !== _windowElementNative;\n        var mouseDownPosition = {};\n        var mouseDownSize = {};\n        var mouseDownInvertedScale = {};\n        var reconnectMutationObserver;\n\n        function documentDragMove(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var pageOffset = getCoordinates(event);\n            var hostElementCSS = {};\n            if (_resizeHorizontal || _resizeBoth) hostElementCSS[_strWidth] = mouseDownSize.w + (pageOffset.x - mouseDownPosition.x) * mouseDownInvertedScale.x;\n            if (_resizeVertical || _resizeBoth) hostElementCSS[_strHeight] = mouseDownSize.h + (pageOffset.y - mouseDownPosition.y) * mouseDownInvertedScale.y;\n\n            _hostElement.css(hostElementCSS);\n\n            COMPATIBILITY.stpP(event);\n          } else {\n            documentMouseTouchUp(event);\n          }\n        }\n\n        function documentMouseTouchUp(event) {\n          var eventIsTrusted = event !== undefined;\n          setupResponsiveEventListener(_documentElement, [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent], [documentOnSelectStart, documentDragMove, documentMouseTouchUp], true);\n          removeClass(_bodyElement, _classNameDragging);\n          if (_scrollbarCornerElement.releaseCapture) _scrollbarCornerElement.releaseCapture();\n\n          if (eventIsTrusted) {\n            if (reconnectMutationObserver) connectMutationObservers();\n\n            _base.update(_strAuto);\n          }\n\n          reconnectMutationObserver = false;\n        }\n\n        function onMouseTouchDownContinue(event) {\n          var originalEvent = event.originalEvent || event;\n          var isTouchEvent = originalEvent.touches !== undefined;\n          return _sleeping || _destroyed ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n        }\n\n        function getCoordinates(event) {\n          return _msieVersion && insideIFrame ? {\n            x: event.screenX,\n            y: event.screenY\n          } : COMPATIBILITY.page(event);\n        }\n\n        addDestroyEventListener(_scrollbarCornerElement, _strMouseTouchDownEvent, function (event) {\n          if (onMouseTouchDownContinue(event) && !_resizeNone) {\n            if (_mutationObserversConnected) {\n              reconnectMutationObserver = true;\n              disconnectMutationObservers();\n            }\n\n            mouseDownPosition = getCoordinates(event);\n            mouseDownSize.w = _hostElementNative[LEXICON.oW] - (!_isBorderBox ? _paddingX : 0);\n            mouseDownSize.h = _hostElementNative[LEXICON.oH] - (!_isBorderBox ? _paddingY : 0);\n            mouseDownInvertedScale = getHostElementInvertedScale();\n            setupResponsiveEventListener(_documentElement, [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent], [documentOnSelectStart, documentDragMove, documentMouseTouchUp]);\n            addClass(_bodyElement, _classNameDragging);\n            if (_scrollbarCornerElement.setCapture) _scrollbarCornerElement.setCapture();\n            COMPATIBILITY.prvD(event);\n            COMPATIBILITY.stpP(event);\n          }\n        });\n      } //==== Utils ====//\n\n      /**\r\n       * Calls the callback with the given name. The Context of this callback is always _base (this).\r\n       * @param name The name of the target which shall be called.\r\n       * @param args The args with which the callback shall be called.\r\n       * @param dependent Boolean which decides whether the callback shall be fired, undefined is like a \"true\" value.\r\n       */\n\n\n      function dispatchCallback(name, args, dependent) {\n        if (dependent === false) return;\n\n        if (_initialized) {\n          var callback = _currentPreparedOptions.callbacks[name];\n          var extensionOnName = name;\n          var ext;\n          if (extensionOnName.substr(0, 2) === 'on') extensionOnName = extensionOnName.substr(2, 1).toLowerCase() + extensionOnName.substr(3);\n          if (type(callback) == TYPES.f) callback.call(_base, args);\n          each(_extensions, function () {\n            ext = this;\n            if (type(ext.on) == TYPES.f) ext.on(extensionOnName, args);\n          });\n        } else if (!_destroyed) _callbacksInitQeueue.push({\n          n: name,\n          a: args\n        });\n      }\n      /**\r\n       * Sets the \"top, right, bottom, left\" properties, with a given prefix, of the given css object.\r\n       * @param targetCSSObject The css object to which the values shall be applied.\r\n       * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n       * @param values A array of values which shall be applied to the \"top, right, bottom, left\" -properties. The array order is [top, right, bottom, left].\r\n       * If this argument is undefined the value '' (empty string) will be applied to all properties.\r\n       */\n\n\n      function setTopRightBottomLeft(targetCSSObject, prefix, values) {\n        prefix = prefix || _strEmpty;\n        values = values || [_strEmpty, _strEmpty, _strEmpty, _strEmpty];\n        targetCSSObject[prefix + _strTop] = values[0];\n        targetCSSObject[prefix + _strRight] = values[1];\n        targetCSSObject[prefix + _strBottom] = values[2];\n        targetCSSObject[prefix + _strLeft] = values[3];\n      }\n      /**\r\n       * Gets the \"top, right, bottom, left\" CSS properties of the CSS property with the given prefix from the host element.\r\n       * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n       * @param suffix The suffix of the \"top, right, bottom, left\" css properties. (example: 'border-' is a valid prefix with '-width' is a valid suffix)\r\n       * @param zeroX True if the x axis shall be 0.\r\n       * @param zeroY True if the y axis shall be 0.\r\n       * @returns {{}} The object which contains the numbers of the read CSS properties.\r\n       */\n\n\n      function getTopRightBottomLeftHost(prefix, suffix, zeroX, zeroY) {\n        suffix = suffix || _strEmpty;\n        prefix = prefix || _strEmpty;\n        return {\n          t: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strTop + suffix)),\n          r: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strRight + suffix)),\n          b: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strBottom + suffix)),\n          l: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strLeft + suffix))\n        };\n      }\n      /**\r\n       * Returns the computed CSS transition string from the given element.\r\n       * @param element The element from which the transition string shall be returned.\r\n       * @returns {string} The CSS transition string from the given element.\r\n       */\n\n\n      function getCSSTransitionString(element) {\n        var transitionStr = VENDORS._cssProperty('transition');\n\n        var assembledValue = element.css(transitionStr);\n        if (assembledValue) return assembledValue;\n        var regExpString = '\\\\s*(' + '([^,(]+(\\\\(.+?\\\\))?)+' + ')[\\\\s,]*';\n        var regExpMain = new RegExp(regExpString);\n        var regExpValidate = new RegExp('^(' + regExpString + ')+$');\n        var properties = 'property duration timing-function delay'.split(' ');\n        var result = [];\n        var strResult;\n        var valueArray;\n        var i = 0;\n        var j;\n\n        var splitCssStyleByComma = function (str) {\n          strResult = [];\n          if (!str.match(regExpValidate)) return str;\n\n          while (str.match(regExpMain)) {\n            strResult.push(RegExp.$1);\n            str = str.replace(regExpMain, _strEmpty);\n          }\n\n          return strResult;\n        };\n\n        for (; i < properties[LEXICON.l]; i++) {\n          valueArray = splitCssStyleByComma(element.css(transitionStr + '-' + properties[i]));\n\n          for (j = 0; j < valueArray[LEXICON.l]; j++) result[j] = (result[j] ? result[j] + _strSpace : _strEmpty) + valueArray[j];\n        }\n\n        return result.join(', ');\n      }\n      /**\r\n       * Generates a Regular Expression which matches with a string which starts with 'os-host'.\r\n       * @param {boolean} withCurrClassNameOption The Regular Expression also matches if the string is the current ClassName option (multiple values splitted by space possible).\r\n       * @param {boolean} withOldClassNameOption The Regular Expression also matches if the string is the old ClassName option (multiple values splitted by space possible).\r\n       */\n\n\n      function createHostClassNameRegExp(withCurrClassNameOption, withOldClassNameOption) {\n        var i;\n        var split;\n        var appendix;\n\n        var appendClasses = function (classes, condition) {\n          appendix = '';\n\n          if (condition && typeof classes == TYPES.s) {\n            split = classes.split(_strSpace);\n\n            for (i = 0; i < split[LEXICON.l]; i++) appendix += '|' + split[i] + '$'; // split[i].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') for escaping regex characters\n\n          }\n\n          return appendix;\n        };\n\n        return new RegExp('(^' + _classNameHostElement + '([-_].+|)$)' + appendClasses(_classNameCache, withCurrClassNameOption) + appendClasses(_oldClassName, withOldClassNameOption), 'g');\n      }\n      /**\r\n       * Calculates the host-elements inverted scale. (invertedScale = 1 / scale)\r\n       * @returns {{x: number, y: number}} The scale of the host-element.\r\n       */\n\n\n      function getHostElementInvertedScale() {\n        var rect = _paddingElementNative[LEXICON.bCR]();\n\n        return {\n          x: _supportTransform ? 1 / (MATH.round(rect.width) / _paddingElementNative[LEXICON.oW]) || 1 : 1,\n          y: _supportTransform ? 1 / (MATH.round(rect.height) / _paddingElementNative[LEXICON.oH]) || 1 : 1\n        };\n      }\n      /**\r\n       * Checks whether the given object is a HTMLElement.\r\n       * @param o The object which shall be checked.\r\n       * @returns {boolean} True the given object is a HTMLElement, false otherwise.\r\n       */\n\n\n      function isHTMLElement(o) {\n        var strOwnerDocument = 'ownerDocument';\n        var strHTMLElement = 'HTMLElement';\n        var wnd = o && o[strOwnerDocument] ? o[strOwnerDocument].parentWindow || window : window;\n        return typeof wnd[strHTMLElement] == TYPES.o ? o instanceof wnd[strHTMLElement] : //DOM2\n        o && typeof o == TYPES.o && o !== null && o.nodeType === 1 && typeof o.nodeName == TYPES.s;\n      }\n      /**\r\n       * Compares 2 arrays and returns the differences between them as a array.\r\n       * @param a1 The first array which shall be compared.\r\n       * @param a2 The second array which shall be compared.\r\n       * @returns {Array} The differences between the two arrays.\r\n       */\n\n\n      function getArrayDifferences(a1, a2) {\n        var a = [];\n        var diff = [];\n        var i;\n        var k;\n\n        for (i = 0; i < a1.length; i++) a[a1[i]] = true;\n\n        for (i = 0; i < a2.length; i++) {\n          if (a[a2[i]]) delete a[a2[i]];else a[a2[i]] = true;\n        }\n\n        for (k in a) diff.push(k);\n\n        return diff;\n      }\n      /**\r\n       * Returns Zero or the number to which the value can be parsed.\r\n       * @param value The value which shall be parsed.\r\n       * @param toFloat Indicates whether the number shall be parsed to a float.\r\n       */\n\n\n      function parseToZeroOrNumber(value, toFloat) {\n        var num = toFloat ? parseFloat(value) : parseInt(value, 10);\n        return isNaN(num) ? 0 : num;\n      }\n      /**\r\n       * Gets several information of the textarea and returns them as a object or undefined if the browser doesn't support it.\r\n       * @returns {{cursorRow: Number, cursorCol, rows: Number, cols: number, wRow: number, pos: number, max : number}} or undefined if not supported.\r\n       */\n\n\n      function getTextareaInfo() {\n        //read needed values\n        var textareaCursorPosition = _targetElementNative.selectionStart;\n        if (textareaCursorPosition === undefined) return;\n\n        var textareaValue = _targetElement.val();\n\n        var textareaLength = textareaValue[LEXICON.l];\n        var textareaRowSplit = textareaValue.split('\\n');\n        var textareaLastRow = textareaRowSplit[LEXICON.l];\n        var textareaCurrentCursorRowSplit = textareaValue.substr(0, textareaCursorPosition).split('\\n');\n        var widestRow = 0;\n        var textareaLastCol = 0;\n        var cursorRow = textareaCurrentCursorRowSplit[LEXICON.l];\n        var cursorCol = textareaCurrentCursorRowSplit[textareaCurrentCursorRowSplit[LEXICON.l] - 1][LEXICON.l];\n        var rowCols;\n        var i; //get widest Row and the last column of the textarea\n\n        for (i = 0; i < textareaRowSplit[LEXICON.l]; i++) {\n          rowCols = textareaRowSplit[i][LEXICON.l];\n\n          if (rowCols > textareaLastCol) {\n            widestRow = i + 1;\n            textareaLastCol = rowCols;\n          }\n        }\n\n        return {\n          _cursorRow: cursorRow,\n          //cursorRow\n          _cursorColumn: cursorCol,\n          //cursorCol\n          _rows: textareaLastRow,\n          //rows\n          _columns: textareaLastCol,\n          //cols\n          _widestRow: widestRow,\n          //wRow\n          _cursorPosition: textareaCursorPosition,\n          //pos\n          _cursorMax: textareaLength //max\n\n        };\n      }\n      /**\r\n       * Determines whether native overlay scrollbars are active.\r\n       * @returns {boolean} True if native overlay scrollbars are active, false otherwise.\r\n       */\n\n\n      function nativeOverlayScrollbarsAreActive() {\n        return _ignoreOverlayScrollbarHidingCache && _nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y;\n      }\n      /**\r\n       * Gets the element which is used to measure the content size.\r\n       * @returns {*} TextareaCover if target element is textarea else the ContentElement.\r\n       */\n\n\n      function getContentMeasureElement() {\n        return _isTextarea ? _textareaCoverElement[0] : _contentElementNative;\n      }\n      /**\r\n       * Generates a string which represents a HTML div with the given classes or attributes.\r\n       * @param classesOrAttrs The class of the div as string or a object which represents the attributes of the div. (The class attribute can also be written as \"className\".)\r\n       * @param content The content of the div as string.\r\n       * @returns {string} The concated string which represents a HTML div and its content.\r\n       */\n\n\n      function generateDiv(classesOrAttrs, content) {\n        return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ? 'class=\"' + classesOrAttrs + '\"' : function () {\n          var key;\n          var attrs = _strEmpty;\n\n          if (FRAMEWORK.isPlainObject(classesOrAttrs)) {\n            for (key in classesOrAttrs) attrs += (key === 'c' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\n          }\n\n          return attrs;\n        }() : _strEmpty) + '>' + (content || _strEmpty) + '</div>';\n      }\n      /**\r\n       * Selects or generates a div with the given class attribute.\r\n       * @param className The class names (divided by spaces) of the div which shall be selected or generated.\r\n       * @param selectParentOrOnlyChildren The parent element from which of the element shall be selected. (if undefined or boolean its hostElement)\r\n       * If its a boolean it decides whether only the children of the host element shall be selected.\r\n       * @returns {*} The generated or selected element.\r\n       */\n\n\n      function selectOrGenerateDivByClass(className, selectParentOrOnlyChildren) {\n        var onlyChildren = type(selectParentOrOnlyChildren) == TYPES.b;\n        var selectParent = onlyChildren ? _hostElement : selectParentOrOnlyChildren || _hostElement;\n        return _domExists && !selectParent[LEXICON.l] ? null : _domExists ? selectParent[onlyChildren ? 'children' : 'find'](_strDot + className.replace(/\\s/g, _strDot)).eq(0) : FRAMEWORK(generateDiv(className));\n      }\n      /**\r\n       * Gets the value of the given property from the given object.\r\n       * @param obj The object from which the property value shall be got.\r\n       * @param path The property of which the value shall be got.\r\n       * @returns {*} Returns the value of the searched property or undefined of the property wasn't found.\r\n       */\n\n\n      function getObjectPropVal(obj, path) {\n        var splits = path.split(_strDot);\n        var i = 0;\n        var val;\n\n        for (; i < splits.length; i++) {\n          if (!obj[LEXICON.hOP](splits[i])) return;\n          val = obj[splits[i]];\n          if (i < splits.length && type(val) == TYPES.o) obj = val;\n        }\n\n        return val;\n      }\n      /**\r\n       * Sets the value of the given property from the given object.\r\n       * @param obj The object from which the property value shall be set.\r\n       * @param path The property of which the value shall be set.\r\n       * @param val The value of the property which shall be set.\r\n       */\n\n\n      function setObjectPropVal(obj, path, val) {\n        var splits = path.split(_strDot);\n        var splitsLength = splits.length;\n        var i = 0;\n        var extendObj = {};\n        var extendObjRoot = extendObj;\n\n        for (; i < splitsLength; i++) extendObj = extendObj[splits[i]] = i + 1 < splitsLength ? {} : val;\n\n        FRAMEWORK.extend(obj, extendObjRoot, true);\n      }\n      /**\t\r\n       * Runs a action for each selector inside the updateOnLoad option.\t\r\n       * @param {Function} action The action for each updateOnLoad selector, the arguments the function takes is the index and the value (the selector).\t\r\n       */\n\n\n      function eachUpdateOnLoad(action) {\n        var updateOnLoad = _currentPreparedOptions.updateOnLoad;\n        updateOnLoad = type(updateOnLoad) == TYPES.s ? updateOnLoad.split(_strSpace) : updateOnLoad;\n\n        if (COMPATIBILITY.isA(updateOnLoad) && !_destroyed) {\n          each(updateOnLoad, action);\n        }\n      } //==== Utils Cache ====//\n\n      /**\r\n       * Compares two values or objects and returns true if they aren't equal.\r\n       * @param current The first value or object which shall be compared.\r\n       * @param cache The second value or object which shall be compared.\r\n       * @param force If true the returned value is always true.\r\n       * @returns {boolean} True if both values or objects aren't equal or force is true, false otherwise.\r\n       */\n\n\n      function checkCache(current, cache, force) {\n        if (force) return force;\n\n        if (type(current) == TYPES.o && type(cache) == TYPES.o) {\n          for (var prop in current) {\n            if (prop !== 'c') {\n              if (current[LEXICON.hOP](prop) && cache[LEXICON.hOP](prop)) {\n                if (checkCache(current[prop], cache[prop])) return true;\n              } else {\n                return true;\n              }\n            }\n          }\n        } else {\n          return current !== cache;\n        }\n\n        return false;\n      } //==== Shortcuts ====//\n\n      /**\r\n       * jQuery extend method shortcut with a appended \"true\" as first argument.\r\n       */\n\n\n      function extendDeep() {\n        return FRAMEWORK.extend.apply(this, [true].concat([].slice.call(arguments)));\n      }\n      /**\r\n       * jQuery addClass method shortcut.\r\n       */\n\n\n      function addClass(el, classes) {\n        return _frameworkProto.addClass.call(el, classes);\n      }\n      /**\r\n       * jQuery removeClass method shortcut.\r\n       */\n\n\n      function removeClass(el, classes) {\n        return _frameworkProto.removeClass.call(el, classes);\n      }\n      /**\r\n       * Adds or removes the given classes dependent on the boolean value. True for add, false for remove.\r\n       */\n\n\n      function addRemoveClass(el, classes, doAdd) {\n        return doAdd ? addClass(el, classes) : removeClass(el, classes);\n      }\n      /**\r\n       * jQuery remove method shortcut.\r\n       */\n\n\n      function remove(el) {\n        return _frameworkProto.remove.call(el);\n      }\n      /**\r\n       * Finds the first child element with the given selector of the given element.\r\n       * @param el The root element from which the selector shall be valid.\r\n       * @param selector The selector of the searched element.\r\n       * @returns {*} The first element which is a child of the given element and matches the givens selector.\r\n       */\n\n\n      function findFirst(el, selector) {\n        return _frameworkProto.find.call(el, selector).eq(0);\n      } //==== API ====//\n\n      /**\r\n       * Puts the instance to sleep. It wont respond to any changes in the DOM and won't update. Scrollbar Interactivity is also disabled as well as the resize handle.\r\n       * This behavior can be reset by calling the update method.\r\n       */\n\n\n      _base.sleep = function () {\n        _sleeping = true;\n      };\n      /**\r\n       * Updates the plugin and DOM to the current options.\r\n       * This method should only be called if a update is 100% required.\r\n       * @param force True if every property shall be updated and the cache shall be ignored.\r\n       * !INTERNAL USAGE! : force can be a string \"auto\", \"sync\" or \"zoom\" too\r\n       * if \"auto\" then before a real update the content size and host element attributes gets checked, and if they changed only then the update method will be called.\r\n       * if \"sync\" then the async update process (MutationObserver or UpdateLoop) gets synchronized and a corresponding update takes place if one was needed due to pending changes.\r\n       * if \"zoom\" then a update takes place where it's assumed that content and host size changed\r\n       * @returns {boolean|undefined} \r\n       * If force is \"sync\" then a boolean is returned which indicates whether a update was needed due to pending changes.\r\n       * If force is \"auto\" then a boolean is returned whether a update was needed due to attribute or size changes.\r\n       * undefined otherwise.\r\n       */\n\n\n      _base.update = function (force) {\n        if (_destroyed) return;\n        var attrsChanged;\n        var contentSizeC;\n        var isString = type(force) == TYPES.s;\n        var doUpdateAuto;\n        var mutHost;\n        var mutContent;\n\n        if (isString) {\n          if (force === _strAuto) {\n            attrsChanged = meaningfulAttrsChanged();\n            contentSizeC = updateAutoContentSizeChanged();\n            doUpdateAuto = attrsChanged || contentSizeC;\n\n            if (doUpdateAuto) {\n              update({\n                _contentSizeChanged: contentSizeC,\n                _changedOptions: _initialized ? undefined : _currentPreparedOptions\n              });\n            }\n          } else if (force === _strSync) {\n            if (_mutationObserversConnected) {\n              mutHost = _mutationObserverHostCallback(_mutationObserverHost.takeRecords());\n              mutContent = _mutationObserverContentCallback(_mutationObserverContent.takeRecords());\n            } else {\n              mutHost = _base.update(_strAuto);\n            }\n          } else if (force === 'zoom') {\n            update({\n              _hostSizeChanged: true,\n              _contentSizeChanged: true\n            });\n          }\n        } else {\n          force = _sleeping || force;\n          _sleeping = false;\n          if (!_base.update(_strSync) || force) update({\n            _force: force\n          });\n        }\n\n        updateElementsOnLoad();\n        return doUpdateAuto || mutHost || mutContent;\n      };\n      /**\r\n       Gets or sets the current options. The update method will be called automatically if new options were set.\r\n       * @param newOptions If new options are given, then the new options will be set, if new options aren't given (undefined or a not a plain object) then the current options will be returned.\r\n       * @param value If new options is a property path string, then this value will be used to set the option to which the property path string leads.\r\n       * @returns {*}\r\n       */\n\n\n      _base.options = function (newOptions, value) {\n        var option = {};\n        var changedOps; //return current options if newOptions are undefined or empty\n\n        if (FRAMEWORK.isEmptyObject(newOptions) || !FRAMEWORK.isPlainObject(newOptions)) {\n          if (type(newOptions) == TYPES.s) {\n            if (arguments.length > 1) {\n              setObjectPropVal(option, newOptions, value);\n              changedOps = setOptions(option);\n            } else return getObjectPropVal(_currentOptions, newOptions);\n          } else return _currentOptions;\n        } else {\n          changedOps = setOptions(newOptions);\n        }\n\n        if (!FRAMEWORK.isEmptyObject(changedOps)) {\n          update({\n            _changedOptions: changedOps\n          });\n        }\n      };\n      /**\r\n       * Restore the DOM, disconnects all observers, remove all resize observers and put the instance to sleep.\r\n       */\n\n\n      _base.destroy = function () {\n        if (_destroyed) return; //remove this instance from auto update loop\n\n        autoUpdateLoop.remove(_base); //disconnect all mutation observers\n\n        disconnectMutationObservers(); //remove all resize observers\n\n        setupResizeObserver(_sizeObserverElement);\n        setupResizeObserver(_sizeAutoObserverElement); //remove all extensions\n\n        for (var extName in _extensions) _base.removeExt(extName); //remove all 'destroy' events\n\n\n        while (_destroyEvents[LEXICON.l] > 0) _destroyEvents.pop()(); //remove all events from host element\n\n\n        setupHostMouseTouchEvents(true); //remove all helper / detection elements\n\n        if (_contentGlueElement) remove(_contentGlueElement);\n        if (_contentArrangeElement) remove(_contentArrangeElement);\n        if (_sizeAutoObserverAdded) remove(_sizeAutoObserverElement); //remove all generated DOM\n\n        setupScrollbarsDOM(true);\n        setupScrollbarCornerDOM(true);\n        setupStructureDOM(true); //remove all generated image load events\n\n        for (var i = 0; i < _updateOnLoadElms[LEXICON.l]; i++) FRAMEWORK(_updateOnLoadElms[i]).off(_updateOnLoadEventName, updateOnLoadCallback);\n\n        _updateOnLoadElms = undefined;\n        _destroyed = true;\n        _sleeping = true; //remove this instance from the instances list\n\n        INSTANCES(pluginTargetElement, 0);\n        dispatchCallback('onDestroyed'); //remove all properties and methods\n        //for (var property in _base)\n        //    delete _base[property];\n        //_base = undefined;\n      };\n      /**\r\n       * Scrolls to a given position or element.\r\n       * @param coordinates\r\n       * 1. Can be \"coordinates\" which looks like:\r\n       *    { x : ?, y : ? } OR          Object with x and y properties\r\n       *    { left : ?, top : ? } OR     Object with left and top properties\r\n       *    { l : ?, t : ? } OR          Object with l and t properties\r\n       *    [ ?, ? ] OR                  Array where the first two element are the coordinates (first is x, second is y)\r\n       *    ?                            A single value which stays for both axis\r\n       *    A value can be a number, a string or a calculation.\r\n       *\r\n       *    Operators:\r\n       *    [NONE]  The current scroll will be overwritten by the value.\r\n       *    '+='    The value will be added to the current scroll offset\r\n       *    '-='    The value will be subtracted from the current scroll offset\r\n       *    '*='    The current scroll wil be multiplicated by the value.\r\n       *    '/='    The current scroll wil be divided by the value.\r\n       *\r\n       *    Units:\r\n       *    [NONE]  The value is the final scroll amount.                   final = (value * 1)\r\n       *    'px'    Same as none\r\n       *    '%'     The value is dependent on the current scroll value.     final = ((currentScrollValue / 100) * value)\r\n       *    'vw'    The value is multiplicated by the viewport width.       final = (value * viewportWidth)\r\n       *    'vh'    The value is multiplicated by the viewport height.      final = (value * viewportHeight)\r\n       *\r\n       *    example final values:\r\n       *    200, '200px', '50%', '1vw', '1vh', '+=200', '/=1vw', '*=2px', '-=5vh', '+=33%', '+= 50% - 2px', '-= 1vw - 50%'\r\n       *\r\n       * 2. Can be a HTML or jQuery element:\r\n       *    The final scroll offset is the offset (without margin) of the given HTML / jQuery element.\r\n       *\r\n       * 3. Can be a object with a HTML or jQuery element with additional settings:\r\n       *    {\r\n       *      el : [HTMLElement, jQuery element],             MUST be specified, else this object isn't valid.\r\n       *      scroll : [string, array, object],               Default value is 'always'.\r\n       *      block : [string, array, object],                Default value is 'begin'.\r\n       *      margin : [number, boolean, array, object]       Default value is false.\r\n       *    }\r\n       *\r\n       *    Possible scroll settings are:\r\n       *    'always'      Scrolls always.\r\n       *    'ifneeded'    Scrolls only if the element isnt fully in view.\r\n       *    'never'       Scrolls never.\r\n       *\r\n       *    Possible block settings are:\r\n       *    'begin'   Both axis shall be docked to the \"begin\" edge. - The element will be docked to the top and left edge of the viewport.\r\n       *    'end'     Both axis shall be docked to the \"end\" edge. - The element will be docked to the bottom and right edge of the viewport. (If direction is RTL to the bottom and left edge.)\r\n       *    'center'  Both axis shall be docked to \"center\". - The element will be centered in the viewport.\r\n       *    'nearest' The element will be docked to the nearest edge(s).\r\n       *\r\n       *    Possible margin settings are: -- The actual margin of the element wont be affect, this option affects only the final scroll offset.\r\n       *    [BOOLEAN]                                         If true the css margin of the element will be used, if false no margin will be used.\r\n       *    [NUMBER]                                          The margin will be used for all edges.\r\n       *\r\n       * @param duration The duration of the scroll animation, OR a jQuery animation configuration object.\r\n       * @param easing The animation easing.\r\n       * @param complete The animation complete callback.\r\n       * @returns {{\r\n       *   position: {x: number, y: number},\r\n       *   ratio: {x: number, y: number},\r\n       *   max: {x: number, y: number},\r\n       *   handleOffset: {x: number, y: number},\r\n       *   handleLength: {x: number, y: number},\r\n       *   handleLengthRatio: {x: number, y: number}, t\r\n       *   rackLength: {x: number, y: number},\r\n       *   isRTL: boolean,\r\n       *   isRTLNormalized: boolean\r\n       *  }}\r\n       */\n\n\n      _base.scroll = function (coordinates, duration, easing, complete) {\n        if (arguments.length === 0 || coordinates === undefined) {\n          var infoX = _scrollHorizontalInfo;\n          var infoY = _scrollVerticalInfo;\n          var normalizeInvert = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.i;\n          var normalizeNegate = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.n;\n          var scrollX = infoX._currentScroll;\n          var scrollXRatio = infoX._currentScrollRatio;\n          var maxScrollX = infoX._maxScroll;\n          scrollXRatio = normalizeInvert ? 1 - scrollXRatio : scrollXRatio;\n          scrollX = normalizeInvert ? maxScrollX - scrollX : scrollX;\n          scrollX *= normalizeNegate ? -1 : 1;\n          maxScrollX *= normalizeNegate ? -1 : 1;\n          return {\n            position: {\n              x: scrollX,\n              y: infoY._currentScroll\n            },\n            ratio: {\n              x: scrollXRatio,\n              y: infoY._currentScrollRatio\n            },\n            max: {\n              x: maxScrollX,\n              y: infoY._maxScroll\n            },\n            handleOffset: {\n              x: infoX._handleOffset,\n              y: infoY._handleOffset\n            },\n            handleLength: {\n              x: infoX._handleLength,\n              y: infoY._handleLength\n            },\n            handleLengthRatio: {\n              x: infoX._handleLengthRatio,\n              y: infoY._handleLengthRatio\n            },\n            trackLength: {\n              x: infoX._trackLength,\n              y: infoY._trackLength\n            },\n            snappedHandleOffset: {\n              x: infoX._snappedHandleOffset,\n              y: infoY._snappedHandleOffset\n            },\n            isRTL: _isRTL,\n            isRTLNormalized: _normalizeRTLCache\n          };\n        }\n\n        _base.update(_strSync);\n\n        var normalizeRTL = _normalizeRTLCache;\n        var coordinatesXAxisProps = [_strX, _strLeft, 'l'];\n        var coordinatesYAxisProps = [_strY, _strTop, 't'];\n        var coordinatesOperators = ['+=', '-=', '*=', '/='];\n        var durationIsObject = type(duration) == TYPES.o;\n        var completeCallback = durationIsObject ? duration.complete : complete;\n        var i;\n        var finalScroll = {};\n        var specialEasing = {};\n        var doScrollLeft;\n        var doScrollTop;\n        var animationOptions;\n        var strEnd = 'end';\n        var strBegin = 'begin';\n        var strCenter = 'center';\n        var strNearest = 'nearest';\n        var strAlways = 'always';\n        var strNever = 'never';\n        var strIfNeeded = 'ifneeded';\n        var strLength = LEXICON.l;\n        var settingsAxis;\n        var settingsScroll;\n        var settingsBlock;\n        var settingsMargin;\n        var finalElement;\n        var elementObjSettingsAxisValues = [_strX, _strY, 'xy', 'yx'];\n        var elementObjSettingsBlockValues = [strBegin, strEnd, strCenter, strNearest];\n        var elementObjSettingsScrollValues = [strAlways, strNever, strIfNeeded];\n        var coordinatesIsElementObj = coordinates[LEXICON.hOP]('el');\n        var possibleElement = coordinatesIsElementObj ? coordinates.el : coordinates;\n        var possibleElementIsJQuery = possibleElement instanceof FRAMEWORK || JQUERY ? possibleElement instanceof JQUERY : false;\n        var possibleElementIsHTMLElement = possibleElementIsJQuery ? false : isHTMLElement(possibleElement);\n\n        var updateScrollbarInfos = function () {\n          if (doScrollLeft) refreshScrollbarHandleOffset(true);\n          if (doScrollTop) refreshScrollbarHandleOffset(false);\n        };\n\n        var proxyCompleteCallback = type(completeCallback) != TYPES.f ? undefined : function () {\n          updateScrollbarInfos();\n          completeCallback();\n        };\n\n        function checkSettingsStringValue(currValue, allowedValues) {\n          for (i = 0; i < allowedValues[strLength]; i++) {\n            if (currValue === allowedValues[i]) return true;\n          }\n\n          return false;\n        }\n\n        function getRawScroll(isX, coordinates) {\n          var coordinateProps = isX ? coordinatesXAxisProps : coordinatesYAxisProps;\n          coordinates = type(coordinates) == TYPES.s || type(coordinates) == TYPES.n ? [coordinates, coordinates] : coordinates;\n          if (COMPATIBILITY.isA(coordinates)) return isX ? coordinates[0] : coordinates[1];else if (type(coordinates) == TYPES.o) {\n            //decides RTL normalization \"hack\" with .n\n            //normalizeRTL = type(coordinates.n) == TYPES.b ? coordinates.n : normalizeRTL; \n            for (i = 0; i < coordinateProps[strLength]; i++) if (coordinateProps[i] in coordinates) return coordinates[coordinateProps[i]];\n          }\n        }\n\n        function getFinalScroll(isX, rawScroll) {\n          var isString = type(rawScroll) == TYPES.s;\n          var operator;\n          var amount;\n          var scrollInfo = isX ? _scrollHorizontalInfo : _scrollVerticalInfo;\n          var currScroll = scrollInfo._currentScroll;\n          var maxScroll = scrollInfo._maxScroll;\n          var mult = ' * ';\n          var finalValue;\n          var isRTLisX = _isRTL && isX;\n          var normalizeShortcuts = isRTLisX && _rtlScrollBehavior.n && !normalizeRTL;\n          var strReplace = 'replace';\n          var evalFunc = eval;\n          var possibleOperator;\n\n          if (isString) {\n            //check operator\n            if (rawScroll[strLength] > 2) {\n              possibleOperator = rawScroll.substr(0, 2);\n              if (inArray(possibleOperator, coordinatesOperators) > -1) operator = possibleOperator;\n            } //calculate units and shortcuts\n\n\n            rawScroll = operator ? rawScroll.substr(2) : rawScroll;\n            rawScroll = rawScroll[strReplace](/min/g, 0) //'min' = 0%\n            [strReplace](/</g, 0) //'<'   = 0%\n            [strReplace](/max/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent) //'max' = 100%\n            [strReplace](/>/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent) //'>'   = 100%\n            [strReplace](/px/g, _strEmpty)[strReplace](/%/g, mult + maxScroll * (isRTLisX && _rtlScrollBehavior.n ? -1 : 1) / 100.0)[strReplace](/vw/g, mult + _viewportSize.w)[strReplace](/vh/g, mult + _viewportSize.h);\n            amount = parseToZeroOrNumber(isNaN(rawScroll) ? parseToZeroOrNumber(evalFunc(rawScroll), true).toFixed() : rawScroll);\n          } else {\n            amount = rawScroll;\n          }\n\n          if (amount !== undefined && !isNaN(amount) && type(amount) == TYPES.n) {\n            var normalizeIsRTLisX = normalizeRTL && isRTLisX;\n            var operatorCurrScroll = currScroll * (normalizeIsRTLisX && _rtlScrollBehavior.n ? -1 : 1);\n            var invert = normalizeIsRTLisX && _rtlScrollBehavior.i;\n            var negate = normalizeIsRTLisX && _rtlScrollBehavior.n;\n            operatorCurrScroll = invert ? maxScroll - operatorCurrScroll : operatorCurrScroll;\n\n            switch (operator) {\n              case '+=':\n                finalValue = operatorCurrScroll + amount;\n                break;\n\n              case '-=':\n                finalValue = operatorCurrScroll - amount;\n                break;\n\n              case '*=':\n                finalValue = operatorCurrScroll * amount;\n                break;\n\n              case '/=':\n                finalValue = operatorCurrScroll / amount;\n                break;\n\n              default:\n                finalValue = amount;\n                break;\n            }\n\n            finalValue = invert ? maxScroll - finalValue : finalValue;\n            finalValue *= negate ? -1 : 1;\n            finalValue = isRTLisX && _rtlScrollBehavior.n ? MATH.min(0, MATH.max(maxScroll, finalValue)) : MATH.max(0, MATH.min(maxScroll, finalValue));\n          }\n\n          return finalValue === currScroll ? undefined : finalValue;\n        }\n\n        function getPerAxisValue(value, valueInternalType, defaultValue, allowedValues) {\n          var resultDefault = [defaultValue, defaultValue];\n          var valueType = type(value);\n          var valueArrLength;\n          var valueArrItem; //value can be [ string, or array of two strings ]\n\n          if (valueType == valueInternalType) {\n            value = [value, value];\n          } else if (valueType == TYPES.a) {\n            valueArrLength = value[strLength];\n            if (valueArrLength > 2 || valueArrLength < 1) value = resultDefault;else {\n              if (valueArrLength === 1) value[1] = defaultValue;\n\n              for (i = 0; i < valueArrLength; i++) {\n                valueArrItem = value[i];\n\n                if (type(valueArrItem) != valueInternalType || !checkSettingsStringValue(valueArrItem, allowedValues)) {\n                  value = resultDefault;\n                  break;\n                }\n              }\n            }\n          } else if (valueType == TYPES.o) value = [value[_strX] || defaultValue, value[_strY] || defaultValue];else value = resultDefault;\n\n          return {\n            x: value[0],\n            y: value[1]\n          };\n        }\n\n        function generateMargin(marginTopRightBottomLeftArray) {\n          var result = [];\n          var currValue;\n          var currValueType;\n          var valueDirections = [_strTop, _strRight, _strBottom, _strLeft];\n\n          for (i = 0; i < marginTopRightBottomLeftArray[strLength]; i++) {\n            if (i === valueDirections[strLength]) break;\n            currValue = marginTopRightBottomLeftArray[i];\n            currValueType = type(currValue);\n            if (currValueType == TYPES.b) result.push(currValue ? parseToZeroOrNumber(finalElement.css(_strMarginMinus + valueDirections[i])) : 0);else result.push(currValueType == TYPES.n ? currValue : 0);\n          }\n\n          return result;\n        }\n\n        if (possibleElementIsJQuery || possibleElementIsHTMLElement) {\n          //get settings\n          var margin = coordinatesIsElementObj ? coordinates.margin : 0;\n          var axis = coordinatesIsElementObj ? coordinates.axis : 0;\n          var scroll = coordinatesIsElementObj ? coordinates.scroll : 0;\n          var block = coordinatesIsElementObj ? coordinates.block : 0;\n          var marginDefault = [0, 0, 0, 0];\n          var marginType = type(margin);\n          var marginLength;\n          finalElement = possibleElementIsJQuery ? possibleElement : FRAMEWORK(possibleElement);\n\n          if (finalElement[strLength] > 0) {\n            //margin can be [ boolean, number, array of 2, array of 4, object ]\n            if (marginType == TYPES.n || marginType == TYPES.b) margin = generateMargin([margin, margin, margin, margin]);else if (marginType == TYPES.a) {\n              marginLength = margin[strLength];\n              if (marginLength === 2) margin = generateMargin([margin[0], margin[1], margin[0], margin[1]]);else if (marginLength >= 4) margin = generateMargin(margin);else margin = marginDefault;\n            } else if (marginType == TYPES.o) margin = generateMargin([margin[_strTop], margin[_strRight], margin[_strBottom], margin[_strLeft]]);else margin = marginDefault; //block = type(block) === TYPES.b ? block ? [ strNearest, strBegin ] : [ strNearest, strEnd ] : block;\n\n            settingsAxis = checkSettingsStringValue(axis, elementObjSettingsAxisValues) ? axis : 'xy';\n            settingsScroll = getPerAxisValue(scroll, TYPES.s, strAlways, elementObjSettingsScrollValues);\n            settingsBlock = getPerAxisValue(block, TYPES.s, strBegin, elementObjSettingsBlockValues);\n            settingsMargin = margin;\n            var viewportScroll = {\n              l: _scrollHorizontalInfo._currentScroll,\n              t: _scrollVerticalInfo._currentScroll\n            }; // use padding element instead of viewport element because padding element has never padding, margin or position applied.\n\n            var viewportOffset = _paddingElement.offset(); //get coordinates\n\n\n            var elementOffset = finalElement.offset();\n            var doNotScroll = {\n              x: settingsScroll.x == strNever || settingsAxis == _strY,\n              y: settingsScroll.y == strNever || settingsAxis == _strX\n            };\n            elementOffset[_strTop] -= settingsMargin[0];\n            elementOffset[_strLeft] -= settingsMargin[3];\n            var elementScrollCoordinates = {\n              x: MATH.round(elementOffset[_strLeft] - viewportOffset[_strLeft] + viewportScroll.l),\n              y: MATH.round(elementOffset[_strTop] - viewportOffset[_strTop] + viewportScroll.t)\n            };\n\n            if (_isRTL) {\n              if (!_rtlScrollBehavior.n && !_rtlScrollBehavior.i) elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + viewportScroll.l);\n              if (_rtlScrollBehavior.n && normalizeRTL) elementScrollCoordinates.x *= -1;\n              if (_rtlScrollBehavior.i && normalizeRTL) elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + (_scrollHorizontalInfo._maxScroll - viewportScroll.l));\n            } //measuring is required\n\n\n            if (settingsBlock.x != strBegin || settingsBlock.y != strBegin || settingsScroll.x == strIfNeeded || settingsScroll.y == strIfNeeded || _isRTL) {\n              var measuringElm = finalElement[0];\n              var rawElementSize = _supportTransform ? measuringElm[LEXICON.bCR]() : {\n                width: measuringElm[LEXICON.oW],\n                height: measuringElm[LEXICON.oH]\n              };\n              var elementSize = {\n                w: rawElementSize[_strWidth] + settingsMargin[3] + settingsMargin[1],\n                h: rawElementSize[_strHeight] + settingsMargin[0] + settingsMargin[2]\n              };\n\n              var finalizeBlock = function (isX) {\n                var vars = getScrollbarVars(isX);\n                var wh = vars._w_h;\n                var lt = vars._left_top;\n                var xy = vars._x_y;\n                var blockIsEnd = settingsBlock[xy] == (isX ? _isRTL ? strBegin : strEnd : strEnd);\n                var blockIsCenter = settingsBlock[xy] == strCenter;\n                var blockIsNearest = settingsBlock[xy] == strNearest;\n                var scrollNever = settingsScroll[xy] == strNever;\n                var scrollIfNeeded = settingsScroll[xy] == strIfNeeded;\n                var vpSize = _viewportSize[wh];\n                var vpOffset = viewportOffset[lt];\n                var elSize = elementSize[wh];\n                var elOffset = elementOffset[lt];\n                var divide = blockIsCenter ? 2 : 1;\n                var elementCenterOffset = elOffset + elSize / 2;\n                var viewportCenterOffset = vpOffset + vpSize / 2;\n                var isInView = elSize <= vpSize && elOffset >= vpOffset && elOffset + elSize <= vpOffset + vpSize;\n                if (scrollNever) doNotScroll[xy] = true;else if (!doNotScroll[xy]) {\n                  if (blockIsNearest || scrollIfNeeded) {\n                    doNotScroll[xy] = scrollIfNeeded ? isInView : false;\n                    blockIsEnd = elSize < vpSize ? elementCenterOffset > viewportCenterOffset : elementCenterOffset < viewportCenterOffset;\n                  }\n\n                  elementScrollCoordinates[xy] -= blockIsEnd || blockIsCenter ? (vpSize / divide - elSize / divide) * (isX && _isRTL && normalizeRTL ? -1 : 1) : 0;\n                }\n              };\n\n              finalizeBlock(true);\n              finalizeBlock(false);\n            }\n\n            if (doNotScroll.y) delete elementScrollCoordinates.y;\n            if (doNotScroll.x) delete elementScrollCoordinates.x;\n            coordinates = elementScrollCoordinates;\n          }\n        }\n\n        finalScroll[_strScrollLeft] = getFinalScroll(true, getRawScroll(true, coordinates));\n        finalScroll[_strScrollTop] = getFinalScroll(false, getRawScroll(false, coordinates));\n        doScrollLeft = finalScroll[_strScrollLeft] !== undefined;\n        doScrollTop = finalScroll[_strScrollTop] !== undefined;\n\n        if ((doScrollLeft || doScrollTop) && (duration > 0 || durationIsObject)) {\n          if (durationIsObject) {\n            duration.complete = proxyCompleteCallback;\n\n            _viewportElement.animate(finalScroll, duration);\n          } else {\n            animationOptions = {\n              duration: duration,\n              complete: proxyCompleteCallback\n            };\n\n            if (COMPATIBILITY.isA(easing) || FRAMEWORK.isPlainObject(easing)) {\n              specialEasing[_strScrollLeft] = easing[0] || easing.x;\n              specialEasing[_strScrollTop] = easing[1] || easing.y;\n              animationOptions.specialEasing = specialEasing;\n            } else {\n              animationOptions.easing = easing;\n            }\n\n            _viewportElement.animate(finalScroll, animationOptions);\n          }\n        } else {\n          if (doScrollLeft) _viewportElement[_strScrollLeft](finalScroll[_strScrollLeft]);\n          if (doScrollTop) _viewportElement[_strScrollTop](finalScroll[_strScrollTop]);\n          updateScrollbarInfos();\n        }\n      };\n      /**\r\n       * Stops all scroll animations.\r\n       * @returns {*} The current OverlayScrollbars instance (for chaining).\r\n       */\n\n\n      _base.scrollStop = function (param1, param2, param3) {\n        _viewportElement.stop(param1, param2, param3);\n\n        return _base;\n      };\n      /**\r\n       * Returns all relevant elements.\r\n       * @param elementName The name of the element which shall be returned.\r\n       * @returns {{target: *, host: *, padding: *, viewport: *, content: *, scrollbarHorizontal: {scrollbar: *, track: *, handle: *}, scrollbarVertical: {scrollbar: *, track: *, handle: *}, scrollbarCorner: *} | *}\r\n       */\n\n\n      _base.getElements = function (elementName) {\n        var obj = {\n          target: _targetElementNative,\n          host: _hostElementNative,\n          padding: _paddingElementNative,\n          viewport: _viewportElementNative,\n          content: _contentElementNative,\n          scrollbarHorizontal: {\n            scrollbar: _scrollbarHorizontalElement[0],\n            track: _scrollbarHorizontalTrackElement[0],\n            handle: _scrollbarHorizontalHandleElement[0]\n          },\n          scrollbarVertical: {\n            scrollbar: _scrollbarVerticalElement[0],\n            track: _scrollbarVerticalTrackElement[0],\n            handle: _scrollbarVerticalHandleElement[0]\n          },\n          scrollbarCorner: _scrollbarCornerElement[0]\n        };\n        return type(elementName) == TYPES.s ? getObjectPropVal(obj, elementName) : obj;\n      };\n      /**\r\n       * Returns a object which describes the current state of this instance.\r\n       * @param stateProperty A specific property from the state object which shall be returned.\r\n       * @returns {{widthAuto, heightAuto, overflowAmount, hideOverflow, hasOverflow, contentScrollSize, viewportSize, hostSize, autoUpdate} | *}\r\n       */\n\n\n      _base.getState = function (stateProperty) {\n        function prepare(obj) {\n          if (!FRAMEWORK.isPlainObject(obj)) return obj;\n          var extended = extendDeep({}, obj);\n\n          var changePropertyName = function (from, to) {\n            if (extended[LEXICON.hOP](from)) {\n              extended[to] = extended[from];\n              delete extended[from];\n            }\n          };\n\n          changePropertyName('w', _strWidth); //change w to width\n\n          changePropertyName('h', _strHeight); //change h to height\n\n          delete extended.c; //delete c (the 'changed' prop)\n\n          return extended;\n        }\n\n        ;\n        var obj = {\n          destroyed: !!prepare(_destroyed),\n          sleeping: !!prepare(_sleeping),\n          autoUpdate: prepare(!_mutationObserversConnected),\n          widthAuto: prepare(_widthAutoCache),\n          heightAuto: prepare(_heightAutoCache),\n          padding: prepare(_cssPaddingCache),\n          overflowAmount: prepare(_overflowAmountCache),\n          hideOverflow: prepare(_hideOverflowCache),\n          hasOverflow: prepare(_hasOverflowCache),\n          contentScrollSize: prepare(_contentScrollSizeCache),\n          viewportSize: prepare(_viewportSize),\n          hostSize: prepare(_hostSizeCache),\n          documentMixed: prepare(_documentMixed)\n        };\n        return type(stateProperty) == TYPES.s ? getObjectPropVal(obj, stateProperty) : obj;\n      };\n      /**\r\n       * Gets all or specific extension instance.\r\n       * @param extName The name of the extension from which the instance shall be got.\r\n       * @returns {{}} The instance of the extension with the given name or undefined if the instance couldn't be found.\r\n       */\n\n\n      _base.ext = function (extName) {\n        var result;\n\n        var privateMethods = _extensionsPrivateMethods.split(' ');\n\n        var i = 0;\n\n        if (type(extName) == TYPES.s) {\n          if (_extensions[LEXICON.hOP](extName)) {\n            result = extendDeep({}, _extensions[extName]);\n\n            for (; i < privateMethods.length; i++) delete result[privateMethods[i]];\n          }\n        } else {\n          result = {};\n\n          for (i in _extensions) result[i] = extendDeep({}, _base.ext(i));\n        }\n\n        return result;\n      };\n      /**\r\n       * Adds a extension to this instance.\r\n       * @param extName The name of the extension which shall be added.\r\n       * @param extensionOptions The extension options which shall be used.\r\n       * @returns {{}} The instance of the added extension or undefined if the extension couldn't be added properly.\r\n       */\n\n\n      _base.addExt = function (extName, extensionOptions) {\n        var registeredExtensionObj = _plugin.extension(extName);\n\n        var instance;\n        var instanceAdded;\n        var instanceContract;\n        var contractResult;\n        var contractFulfilled = true;\n\n        if (registeredExtensionObj) {\n          if (!_extensions[LEXICON.hOP](extName)) {\n            instance = registeredExtensionObj.extensionFactory.call(_base, extendDeep({}, registeredExtensionObj.defaultOptions), FRAMEWORK, COMPATIBILITY);\n\n            if (instance) {\n              instanceContract = instance.contract;\n\n              if (type(instanceContract) == TYPES.f) {\n                contractResult = instanceContract(window);\n                contractFulfilled = type(contractResult) == TYPES.b ? contractResult : contractFulfilled;\n              }\n\n              if (contractFulfilled) {\n                _extensions[extName] = instance;\n                instanceAdded = instance.added;\n                if (type(instanceAdded) == TYPES.f) instanceAdded(extensionOptions);\n                return _base.ext(extName);\n              }\n            }\n          } else return _base.ext(extName);\n        } else console.warn(\"A extension with the name \\\"\" + extName + \"\\\" isn't registered.\");\n      };\n      /**\r\n       * Removes a extension from this instance.\r\n       * @param extName The name of the extension which shall be removed.\r\n       * @returns {boolean} True if the extension was removed, false otherwise e.g. if the extension wasn't added before.\r\n       */\n\n\n      _base.removeExt = function (extName) {\n        var instance = _extensions[extName];\n        var instanceRemoved;\n\n        if (instance) {\n          delete _extensions[extName];\n          instanceRemoved = instance.removed;\n          if (type(instanceRemoved) == TYPES.f) instanceRemoved();\n          return true;\n        }\n\n        return false;\n      };\n      /**\r\n       * Constructs the plugin.\r\n       * @param targetElement The element to which the plugin shall be applied.\r\n       * @param options The initial options of the plugin.\r\n       * @param extensions The extension(s) which shall be added right after the initialization.\r\n       * @returns {boolean} True if the plugin was successfully initialized, false otherwise.\r\n       */\n\n\n      function construct(targetElement, options, extensions) {\n        _defaultOptions = globals.defaultOptions;\n        _nativeScrollbarStyling = globals.nativeScrollbarStyling;\n        _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\n        _nativeScrollbarIsOverlaid = extendDeep({}, globals.nativeScrollbarIsOverlaid);\n        _overlayScrollbarDummySize = extendDeep({}, globals.overlayScrollbarDummySize);\n        _rtlScrollBehavior = extendDeep({}, globals.rtlScrollBehavior); //parse & set options but don't update\n\n        setOptions(extendDeep({}, _defaultOptions, options));\n        _cssCalc = globals.cssCalc;\n        _msieVersion = globals.msie;\n        _autoUpdateRecommended = globals.autoUpdateRecommended;\n        _supportTransition = globals.supportTransition;\n        _supportTransform = globals.supportTransform;\n        _supportPassiveEvents = globals.supportPassiveEvents;\n        _supportResizeObserver = globals.supportResizeObserver;\n        _supportMutationObserver = globals.supportMutationObserver;\n        _restrictedMeasuring = globals.restrictedMeasuring;\n        _documentElement = FRAMEWORK(targetElement.ownerDocument);\n        _documentElementNative = _documentElement[0];\n        _windowElement = FRAMEWORK(_documentElementNative.defaultView || _documentElementNative.parentWindow);\n        _windowElementNative = _windowElement[0];\n        _htmlElement = findFirst(_documentElement, 'html');\n        _bodyElement = findFirst(_htmlElement, 'body');\n        _targetElement = FRAMEWORK(targetElement);\n        _targetElementNative = _targetElement[0];\n        _isTextarea = _targetElement.is('textarea');\n        _isBody = _targetElement.is('body');\n        _documentMixed = _documentElementNative !== document;\n        /* On a div Element The if checks only whether:\r\n         * - the targetElement has the class \"os-host\"\r\n         * - the targetElement has a a child with the class \"os-padding\"\r\n         * \r\n         * If that's the case, its assumed the DOM has already the following structure:\r\n         * (The \".os-host\" element is the targetElement)\r\n         *\r\n         *  <div class=\"os-host\">\r\n         *      <div class=\"os-resize-observer-host\"></div>\r\n         *      <div class=\"os-padding\">\r\n         *          <div class=\"os-viewport\">\r\n         *              <div class=\"os-content\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar-corner\"></div>\r\n         *  </div>\r\n         *\r\n         * =====================================================================================\r\n         * \r\n         * On a Textarea Element The if checks only whether:\r\n         * - the targetElement has the class \"os-textarea\" \r\n         * - the targetElement is inside a element with the class \"os-content\" \r\n         * \r\n         * If that's the case, its assumed the DOM has already the following structure:\r\n         * (The \".os-textarea\" (textarea) element is the targetElement)\r\n         *\r\n         *  <div class=\"os-host-textarea\">\r\n         *      <div class=\"os-resize-observer-host\"></div>\r\n         *      <div class=\"os-padding os-text-inherit\">\r\n         *          <div class=\"os-viewport os-text-inherit\">\r\n         *              <div class=\"os-content os-text-inherit\">\r\n         *                  <div class=\"os-textarea-cover\"></div>\r\n         *                  <textarea class=\"os-textarea os-text-inherit\"></textarea>\r\n         *              </div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar-corner\"></div>\r\n         *  </div>\r\n         */\n\n        _domExists = _isTextarea ? _targetElement.hasClass(_classNameTextareaElement) && _targetElement.parent().hasClass(_classNameContentElement) : _targetElement.hasClass(_classNameHostElement) && _targetElement.children(_strDot + _classNamePaddingElement)[LEXICON.l];\n        var initBodyScroll;\n        var bodyMouseTouchDownListener; //check if the plugin hasn't to be initialized\n\n        if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y && !_currentPreparedOptions.nativeScrollbarsOverlaid.initialize) {\n          dispatchCallback('onInitializationWithdrawn');\n\n          if (_domExists) {\n            setupStructureDOM(true);\n            setupScrollbarsDOM(true);\n            setupScrollbarCornerDOM(true);\n          }\n\n          _destroyed = true;\n          _sleeping = true;\n          return _base;\n        }\n\n        if (_isBody) {\n          initBodyScroll = {};\n          initBodyScroll.l = MATH.max(_targetElement[_strScrollLeft](), _htmlElement[_strScrollLeft](), _windowElement[_strScrollLeft]());\n          initBodyScroll.t = MATH.max(_targetElement[_strScrollTop](), _htmlElement[_strScrollTop](), _windowElement[_strScrollTop]());\n\n          bodyMouseTouchDownListener = function () {\n            _viewportElement.removeAttr(LEXICON.ti);\n\n            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, true, true);\n          };\n        } //build OverlayScrollbars DOM\n\n\n        setupStructureDOM();\n        setupScrollbarsDOM();\n        setupScrollbarCornerDOM(); //create OverlayScrollbars events\n\n        setupStructureEvents();\n        setupScrollbarEvents(true);\n        setupScrollbarEvents(false);\n        setupScrollbarCornerEvents(); //create mutation observers\n\n        createMutationObservers(); //build resize observer for the host element\n\n        setupResizeObserver(_sizeObserverElement, hostOnResized);\n\n        if (_isBody) {\n          //apply the body scroll to handle it right in the update method\n          _viewportElement[_strScrollLeft](initBodyScroll.l)[_strScrollTop](initBodyScroll.t); //set the focus on the viewport element so you dont have to click on the page to use keyboard keys (up / down / space) for scrolling\n\n\n          if (document.activeElement == targetElement && _viewportElementNative.focus) {\n            //set a tabindex to make the viewportElement focusable\n            _viewportElement.attr(LEXICON.ti, '-1');\n\n            _viewportElementNative.focus();\n            /* the tabindex has to be removed due to;\r\n             * If you set the tabindex attribute on an <div>, then its child content cannot be scrolled with the arrow keys unless you set tabindex on the content, too\r\n             * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\r\n             */\n\n\n            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, false, true);\n          }\n        } //update for the first time & initialize cache\n\n\n        _base.update(_strAuto); //the plugin is initialized now!\n\n\n        _initialized = true;\n        dispatchCallback('onInitialized'); //call all callbacks which would fire before the initialized was complete\n\n        each(_callbacksInitQeueue, function (index, value) {\n          dispatchCallback(value.n, value.a);\n        });\n        _callbacksInitQeueue = []; //add extensions\n\n        if (type(extensions) == TYPES.s) extensions = [extensions];\n        if (COMPATIBILITY.isA(extensions)) each(extensions, function (index, value) {\n          _base.addExt(value);\n        });else if (FRAMEWORK.isPlainObject(extensions)) each(extensions, function (key, value) {\n          _base.addExt(key, value);\n        }); //add the transition class for transitions AFTER the first update & AFTER the applied extensions (for preventing unwanted transitions)\n\n        setTimeout(function () {\n          if (_supportTransition && !_destroyed) addClass(_hostElement, _classNameHostTransition);\n        }, 333);\n        return _base;\n      }\n\n      if (_plugin.valid(construct(pluginTargetElement, options, extensions))) {\n        INSTANCES(pluginTargetElement, _base);\n      }\n\n      return _base;\n    }\n    /**\r\n     * Initializes a new OverlayScrollbarsInstance object or changes options if already initialized or returns the current instance.\r\n     * @param pluginTargetElements The elements to which the Plugin shall be initialized.\r\n     * @param options The custom options with which the plugin shall be initialized.\r\n     * @param extensions The extension(s) which shall be added right after initialization.\r\n     * @returns {*}\r\n     */\n\n\n    _plugin = window[PLUGINNAME] = function (pluginTargetElements, options, extensions) {\n      if (arguments[LEXICON.l] === 0) return this;\n      var arr = [];\n      var optsIsPlainObj = FRAMEWORK.isPlainObject(options);\n      var inst;\n      var result; //pluginTargetElements is null or undefined\n\n      if (!pluginTargetElements) return optsIsPlainObj || !options ? result : arr;\n      /*\r\n         pluginTargetElements will be converted to:\r\n         1. A jQueryElement Array\r\n         2. A HTMLElement Array\r\n         3. A Array with a single HTML Element\r\n         so pluginTargetElements is always a array.\r\n      */\n\n      pluginTargetElements = pluginTargetElements[LEXICON.l] != undefined ? pluginTargetElements : [pluginTargetElements[0] || pluginTargetElements];\n      initOverlayScrollbarsStatics();\n\n      if (pluginTargetElements[LEXICON.l] > 0) {\n        if (optsIsPlainObj) {\n          FRAMEWORK.each(pluginTargetElements, function (i, v) {\n            inst = v;\n            if (inst !== undefined) arr.push(OverlayScrollbarsInstance(inst, options, extensions, _pluginsGlobals, _pluginsAutoUpdateLoop));\n          });\n        } else {\n          FRAMEWORK.each(pluginTargetElements, function (i, v) {\n            inst = INSTANCES(v);\n            if (options === '!' && _plugin.valid(inst) || COMPATIBILITY.type(options) == TYPES.f && options(v, inst)) arr.push(inst);else if (options === undefined) arr.push(inst);\n          });\n        }\n\n        result = arr[LEXICON.l] === 1 ? arr[0] : arr;\n      }\n\n      return result;\n    };\n    /**\r\n     * Returns a object which contains global information about the plugin and each instance of it.\r\n     * The returned object is just a copy, that means that changes to the returned object won't have any effect to the original object.\r\n     */\n\n\n    _plugin.globals = function () {\n      initOverlayScrollbarsStatics();\n      var globals = FRAMEWORK.extend(true, {}, _pluginsGlobals);\n      delete globals['msie'];\n      return globals;\n    };\n    /**\r\n     * Gets or Sets the default options for each new plugin initialization.\r\n     * @param newDefaultOptions The object with which the default options shall be extended.\r\n     */\n\n\n    _plugin.defaultOptions = function (newDefaultOptions) {\n      initOverlayScrollbarsStatics();\n      var currDefaultOptions = _pluginsGlobals.defaultOptions;\n      if (newDefaultOptions === undefined) return FRAMEWORK.extend(true, {}, currDefaultOptions); //set the new default options\n\n      _pluginsGlobals.defaultOptions = FRAMEWORK.extend(true, {}, currDefaultOptions, _pluginsOptions._validate(newDefaultOptions, _pluginsOptions._template, true, currDefaultOptions)._default);\n    };\n    /**\r\n     * Checks whether the passed instance is a non-destroyed OverlayScrollbars instance.\r\n     * @param osInstance The potential OverlayScrollbars instance which shall be checked.\r\n     * @returns {boolean} True if the passed value is a non-destroyed OverlayScrollbars instance, false otherwise.\r\n     */\n\n\n    _plugin.valid = function (osInstance) {\n      return osInstance instanceof _plugin && !osInstance.getState().destroyed;\n    };\n    /**\r\n     * Registers, Unregisters or returns a extension.\r\n     * Register: Pass the name and the extension. (defaultOptions is optional)\r\n     * Unregister: Pass the name and anything except a function as extension parameter.\r\n     * Get extension: Pass the name of the extension which shall be got.\r\n     * Get all extensions: Pass no arguments.\r\n     * @param extensionName The name of the extension which shall be registered, unregistered or returned.\r\n     * @param extension A function which generates the instance of the extension or anything other to remove a already registered extension.\r\n     * @param defaultOptions The default options which shall be used for the registered extension.\r\n     */\n\n\n    _plugin.extension = function (extensionName, extension, defaultOptions) {\n      var extNameTypeString = COMPATIBILITY.type(extensionName) == TYPES.s;\n      var argLen = arguments[LEXICON.l];\n      var i = 0;\n\n      if (argLen < 1 || !extNameTypeString) {\n        //return a copy of all extension objects\n        return FRAMEWORK.extend(true, {\n          length: _pluginsExtensions[LEXICON.l]\n        }, _pluginsExtensions);\n      } else if (extNameTypeString) {\n        if (COMPATIBILITY.type(extension) == TYPES.f) {\n          //register extension\n          _pluginsExtensions.push({\n            name: extensionName,\n            extensionFactory: extension,\n            defaultOptions: defaultOptions\n          });\n        } else {\n          for (; i < _pluginsExtensions[LEXICON.l]; i++) {\n            if (_pluginsExtensions[i].name === extensionName) {\n              if (argLen > 1) _pluginsExtensions.splice(i, 1); //remove extension\n              else return FRAMEWORK.extend(true, {}, _pluginsExtensions[i]); //return extension with the given name\n            }\n          }\n        }\n      }\n    };\n\n    return _plugin;\n  }();\n\n  if (JQUERY && JQUERY.fn) {\n    /**\r\n     * The jQuery initialization interface.\r\n     * @param options The initial options for the construction of the plugin. To initialize the plugin, this option has to be a object! If it isn't a object, the instance(s) are returned and the plugin wont be initialized.\r\n     * @param extensions The extension(s) which shall be added right after initialization.\r\n     * @returns {*} After initialization it returns the jQuery element array, else it returns the instance(s) of the elements which are selected.\r\n     */\n    JQUERY.fn.overlayScrollbars = function (options, extensions) {\n      var _elements = this;\n\n      if (JQUERY.isPlainObject(options)) {\n        JQUERY.each(_elements, function () {\n          PLUGIN(this, options, extensions);\n        });\n        return _elements;\n      } else return PLUGIN(_elements, options);\n    };\n  }\n\n  return PLUGIN;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/overlayscrollbars/js/OverlayScrollbars.js\n");

/***/ })

/******/ });