/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/js/controller/index.js":
/*!************************************!*\
  !*** ./app/js/controller/index.js ***!
  \************************************/
/*! exports provided: app */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"app\", function() { return app; });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./app/js/model/index.js\");\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\nvar app = {\n  init: function init() {\n    this.initOSB();\n    this.pah();\n    this.ip();\n    this.it();\n    this.iwp();\n    this.t();\n    this.iwms();\n    this.ssi();\n    this.ciwie();\n    this.s5r();\n    this.s1r();\n    this.amt();\n    this.ach();\n    this.cmw();\n    this.ant();\n    this.dt();\n    this.sfd();\n    this.aff();\n    this.srboc(); // this.test()\n    // this.slt()\n  },\n  initOSB: function initOSB() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"sidebarLayout\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalRows\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalSidebar\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalContactsHistory\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalVacanciesHistory\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initOverlayScrollbars\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalMediaLayer\"]); // console.log(OverlayScrollbars)\n    // OverlayScrollbars([document.querySelector('.sidebar__layout')], {\n    //           paddingAbsolute: true,\n    //           scrollbars: {\n    //               autoHide: 'move',\n    //               clickScrolling: true,\n    //           },\n    //           callbacks: {\n    //           }\n    //       });\n  },\n  // slt(){\n  // \tsidebarListsToggle(sidebarListItems)\n  // }\n  pah: function pah() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"playAudioHover\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"rows\"]);\n  },\n  ip: function ip() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initPopups\"])();\n  },\n  it: function it() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initTooltips\"])();\n  },\n  iwp: function iwp() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initWorkPopup\"])();\n  },\n  t: function t() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"test\"])();\n  },\n  iwms: function iwms() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initWorkModalSelect\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalManagerSelect\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initWorkModalSelect\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalCountrySelect\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initWorkModalSelect\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"modal2ManagerSelect\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"initWorkModalSelect\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"modal2ContactSelect\"]);\n  },\n  ssi: function ssi() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"sidebarSearchInput\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"sidebarSearchInput\"]);\n  },\n  ciwie: function ciwie() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"checkIfWrapperIsEmpty\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"modalRowLayer\"]);\n  },\n  s5r: function s5r() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"show5Rows\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"contactsHistoryShowMore\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"contactsHistory\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"show5Rows\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"vacanciesHistoryShowMore\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"vacanciesHistory\"]);\n  },\n  s1r: function s1r() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"show1Row\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"mediaShowMore\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"modalRowMedia\"]);\n  },\n  amt: function amt() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"addManufacturyType\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"manufacturyTypeAddItem\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"manufacturyType\"]);\n  },\n  ach: function ach() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"addContactHistory\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"contactsHistoryAddItem\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"contactsHistory\"]);\n  },\n  cmw: function cmw() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"checkMediaWidth\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"modalRowMediaWrapper\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"modalRowMedia\"]);\n  },\n  ant: function ant() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"addNewTask\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalAddTask\"]);\n  },\n  dt: function dt() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"deleteTask\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"body\"]);\n  },\n  sfd: function sfd() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"setFeedbackDate\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"workModalFeedbackDate\"]);\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"setFeedbackDate\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"modal2ContactDate\"]);\n  },\n  aff: function aff() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"addFeedbackForm\"])(_view__WEBPACK_IMPORTED_MODULE_2__[\"feedbackAddItem\"], _view__WEBPACK_IMPORTED_MODULE_2__[\"addfeedbackForm\"]);\n  },\n  srboc: function srboc() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_0__[\"showRemoveBtnOnChecking\"])();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/controller/index.js\n");

/***/ }),

/***/ "./app/js/main.js":
/*!************************!*\
  !*** ./app/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller */ \"./app/js/controller/index.js\");\n;\n\n\nif (document.readyState !== 'loading') {\n  _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n} else {\n  document.addEventListener('DOMContentLoaded', function () {\n    _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbWFpbi5qcz80M2M0Il0sIm5hbWVzIjpbImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFwcCIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQzs7QUFFRCxJQUFJQSxRQUFRLENBQUNDLFVBQVQsS0FBd0IsU0FBNUIsRUFBd0M7QUFDcENDLGlEQUFHLENBQUNDLElBQUo7QUFDSCxDQUZELE1BRU87QUFDSEgsVUFBUSxDQUFDSSxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtBQUN0REYsbURBQUcsQ0FBQ0MsSUFBSjtBQUNILEdBRkQ7QUFHSCIsImZpbGUiOiIuL2FwcC9qcy9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiO2ltcG9ydCB7YXBwfSBmcm9tICcuL2NvbnRyb2xsZXInXHJcblxyXG5pZiggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnICkge1xyXG4gICAgYXBwLmluaXQoKTtcclxufSBlbHNlIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXBwLmluaXQoKTtcclxuICAgIH0pO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/main.js\n");

/***/ }),

/***/ "./app/js/model/OverlayScrollbarsInit.js":
/*!***********************************************!*\
  !*** ./app/js/model/OverlayScrollbarsInit.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n\n\nvar initOverlayScrollbars = function initOverlayScrollbars(node) {\n  var instance = Object(_libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"OverlayScrollbars\"])(node, {\n    className: \"os-theme-dark\",\n    sizeAutoCapable: true,\n    paddingAbsolute: true,\n    scrollbars: {\n      clickScrolling: true,\n      autoHide: 'leave',\n      autoHideDelay: 50\n    },\n    callbacks: {\n      onContentSizeChanged: function onContentSizeChanged(eventArgs) {\n        if (this.getElements().target.classList.contains('modal-row__layer')) {\n          this.scroll({\n            y: \"100%\"\n          });\n        }\n      } // onHostSizeChanged: function(eventArgs){\n      // \tconsole.log(eventArgs)\n      // }\n\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initOverlayScrollbars);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvT3ZlcmxheVNjcm9sbGJhcnNJbml0LmpzP2YzYzYiXSwibmFtZXMiOlsiaW5pdE92ZXJsYXlTY3JvbGxiYXJzIiwibm9kZSIsImluc3RhbmNlIiwiT3ZlcmxheVNjcm9sbGJhcnMiLCJjbGFzc05hbWUiLCJzaXplQXV0b0NhcGFibGUiLCJwYWRkaW5nQWJzb2x1dGUiLCJzY3JvbGxiYXJzIiwiY2xpY2tTY3JvbGxpbmciLCJhdXRvSGlkZSIsImF1dG9IaWRlRGVsYXkiLCJjYWxsYmFja3MiLCJvbkNvbnRlbnRTaXplQ2hhbmdlZCIsImV2ZW50QXJncyIsImdldEVsZW1lbnRzIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzY3JvbGwiLCJ5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7O0FBSUEsSUFBTUEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixDQUFDQyxJQUFELEVBQVM7QUFDdEMsTUFBSUMsUUFBUSxHQUFHQyxvRUFBaUIsQ0FBQ0YsSUFBRCxFQUFPO0FBQ3ZDRyxhQUFTLEVBQVMsZUFEcUI7QUFFdkNDLG1CQUFlLEVBQUcsSUFGcUI7QUFHdkNDLG1CQUFlLEVBQUcsSUFIcUI7QUFJdkNDLGNBQVUsRUFBRztBQUNaQyxvQkFBYyxFQUFHLElBREw7QUFFWkMsY0FBUSxFQUFHLE9BRkM7QUFHWkMsbUJBQWEsRUFBRTtBQUhILEtBSjBCO0FBVXZDQyxhQUFTLEVBQUc7QUFDVkMsMEJBQW9CLEVBQUUsOEJBQVNDLFNBQVQsRUFBb0I7QUFDekMsWUFBRyxLQUFLQyxXQUFMLEdBQW1CQyxNQUFuQixDQUEwQkMsU0FBMUIsQ0FBb0NDLFFBQXBDLENBQTZDLGtCQUE3QyxDQUFILEVBQXFFO0FBQ3BFLGVBQUtDLE1BQUwsQ0FBWTtBQUFFQyxhQUFDLEVBQUc7QUFBTixXQUFaO0FBQ0E7QUFDRixPQUxVLENBT1g7QUFDQTtBQUNBOztBQVRXO0FBVjJCLEdBQVAsQ0FBaEM7QUF3QkEsQ0F6QkQ7O0FBOEJlbkIsb0ZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvT3ZlcmxheVNjcm9sbGJhcnNJbml0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPdmVybGF5U2Nyb2xsYmFyc30gZnJvbSAnLi4vLi4vbGlicy9saWJzJ1xyXG5cclxuXHJcblxyXG5jb25zdCBpbml0T3ZlcmxheVNjcm9sbGJhcnMgPSAobm9kZSk9PiB7XHJcblx0bGV0IGluc3RhbmNlID0gT3ZlcmxheVNjcm9sbGJhcnMobm9kZSwge1xyXG5cdGNsYXNzTmFtZSAgICAgICA6IFwib3MtdGhlbWUtZGFya1wiLFxyXG5cdHNpemVBdXRvQ2FwYWJsZSA6IHRydWUsXHJcblx0cGFkZGluZ0Fic29sdXRlIDogdHJ1ZSxcclxuXHRzY3JvbGxiYXJzIDoge1xyXG5cdFx0Y2xpY2tTY3JvbGxpbmcgOiB0cnVlLFxyXG5cdFx0YXV0b0hpZGUgOiAnbGVhdmUnLFxyXG5cdFx0YXV0b0hpZGVEZWxheTogNTBcclxuXHR9LFxyXG5cclxuXHRjYWxsYmFja3MgOiB7XHJcblx0XHRcdG9uQ29udGVudFNpemVDaGFuZ2VkOiBmdW5jdGlvbihldmVudEFyZ3MpIHtcclxuXHRcdFx0XHRpZih0aGlzLmdldEVsZW1lbnRzKCkudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWwtcm93X19sYXllcicpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnNjcm9sbCh7IHkgOiBcIjEwMCVcIiAgfSlcclxuXHRcdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIG9uSG9zdFNpemVDaGFuZ2VkOiBmdW5jdGlvbihldmVudEFyZ3Mpe1xyXG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhldmVudEFyZ3MpXHJcblx0XHQvLyB9XHJcblx0fVxyXG5cdFxyXG59KTsgXHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0T3ZlcmxheVNjcm9sbGJhcnNcclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/OverlayScrollbarsInit.js\n");

/***/ }),

/***/ "./app/js/model/addContactHistory.js":
/*!*******************************************!*\
  !*** ./app/js/model/addContactHistory.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar addContactHistory = function addContactHistory(btn, wrapper) {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (addContactHistory);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvYWRkQ29udGFjdEhpc3RvcnkuanM/MzJmMiJdLCJuYW1lcyI6WyJhZGRDb250YWN0SGlzdG9yeSIsImJ0biIsIndyYXBwZXIiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUEsSUFBTUEsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDQyxHQUFELEVBQU1DLE9BQU4sRUFBa0IsQ0FFM0MsQ0FGRDs7QUFLZUYsZ0ZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvYWRkQ29udGFjdEhpc3RvcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IGFkZENvbnRhY3RIaXN0b3J5ID0gKGJ0biwgd3JhcHBlcikgPT4ge1xyXG5cdFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRkQ29udGFjdEhpc3RvcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/addContactHistory.js\n");

/***/ }),

/***/ "./app/js/model/addManufacturyType.js":
/*!********************************************!*\
  !*** ./app/js/model/addManufacturyType.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar addManufacturyType = function addManufacturyType(btn, block) {\n  var wrapper = block.querySelector('.modal-row__layer');\n  var html = \"<div class=\\\"modal-row__manufactury-type-row\\\">\\n                        <div class=\\\"input-group modal-row__manufactury-type-select native-select\\\"> \\n                          <select class=\\\"info-area\\\" name=\\\"\\\">\\n                            <option value=\\\"\\\" disabled=\\\"\\\" selected=\\\"\\\">\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C</option>\\n                            <option value=\\\"\\\">\\u041A\\u043E\\u0440\\u043E\\u0432\\u044B</option>\\n                            <option value=\\\"\\\">\\u0426\\u0432\\u0435\\u0442\\u044B</option>\\n                          </select>\\n                        </div>\\n                        <div class=\\\"input-group\\\">\\n                          <input class=\\\"info-area\\\" type=\\\"text\\\" name=\\\"\\\">\\n                        </div>\\n                      </div>\";\n  btn.addEventListener('click', function () {\n    wrapper.insertAdjacentHTML('beforeend', html);\n  }); // document.querySelector('body').addEventListener('click', function(e){\n  // \tconsole.log(e.target)\n  // \tif(e.target.classList.contains('modal-row__manufactury-type-row')) {\n  // \t\tconsole.log(e.target);\n  // \t}\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (addManufacturyType);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvYWRkTWFudWZhY3R1cnlUeXBlLmpzPzE4NjIiXSwibmFtZXMiOlsiYWRkTWFudWZhY3R1cnlUeXBlIiwiYnRuIiwiYmxvY2siLCJ3cmFwcGVyIiwicXVlcnlTZWxlY3RvciIsImh0bWwiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBLElBQU1BLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOLEVBQWdCO0FBQzFDLE1BQUlDLE9BQU8sR0FBR0QsS0FBSyxDQUFDRSxhQUFOLENBQW9CLG1CQUFwQixDQUFkO0FBQ0EsTUFBSUMsSUFBSSwweEJBQVI7QUFhQUosS0FBRyxDQUFDSyxnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFVO0FBQ3ZDSCxXQUFPLENBQUNJLGtCQUFSLENBQTJCLFdBQTNCLEVBQXdDRixJQUF4QztBQUNBLEdBRkQsRUFmMEMsQ0FvQjFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLENBNUJEOztBQThCZUwsaUZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvYWRkTWFudWZhY3R1cnlUeXBlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IGFkZE1hbnVmYWN0dXJ5VHlwZSA9IChidG4sIGJsb2NrKSA9PiB7XHJcblx0bGV0IHdyYXBwZXIgPSBibG9jay5xdWVyeVNlbGVjdG9yKCcubW9kYWwtcm93X19sYXllcicpXHJcblx0bGV0IGh0bWwgPSBgPGRpdiBjbGFzcz1cIm1vZGFsLXJvd19fbWFudWZhY3R1cnktdHlwZS1yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIG1vZGFsLXJvd19fbWFudWZhY3R1cnktdHlwZS1zZWxlY3QgbmF0aXZlLXNlbGVjdFwiPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiaW5mby1hcmVhXCIgbmFtZT1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiIGRpc2FibGVkPVwiXCIgc2VsZWN0ZWQ9XCJcIj7QktGL0LHRgNCw0YLRjDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPtCa0L7RgNC+0LLRizwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPtCm0LLQtdGC0Ys8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImluZm8tYXJlYVwiIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmBcclxuXHJcblx0YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuXHRcdHdyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sKVxyXG5cdH0pXHJcblxyXG5cclxuXHQvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcclxuXHQvLyBcdGNvbnNvbGUubG9nKGUudGFyZ2V0KVxyXG5cdC8vIFx0aWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbC1yb3dfX21hbnVmYWN0dXJ5LXR5cGUtcm93JykpIHtcclxuXHQvLyBcdFx0Y29uc29sZS5sb2coZS50YXJnZXQpO1xyXG5cdC8vIFx0fVxyXG5cdC8vIH0pXHJcblxyXG5cdFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZGRNYW51ZmFjdHVyeVR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/addManufacturyType.js\n");

/***/ }),

/***/ "./app/js/model/addNewTask.js":
/*!************************************!*\
  !*** ./app/js/model/addNewTask.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar addNewTask = function addNewTask(btn) {\n  var html = \"<div class=\\\"add-task-item\\\"><i class=\\\"ico\\\">\\n              <svg>\\n                <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#attention\\\"></use>\\n              </svg></i>\\n            <textarea class=\\\"sidebar__task-input\\\" type=\\\"text\\\" rows=\\\"1\\\" data-elastic=\\\"true\\\"></textarea><span class=\\\"delete-task-item\\\"></span>\\n          </div>\";\n  btn.addEventListener('click', function () {\n    this.parentNode.parentNode.insertAdjacentHTML('beforeend', html);\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (addNewTask);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvYWRkTmV3VGFzay5qcz9iNDUxIl0sIm5hbWVzIjpbImFkZE5ld1Rhc2siLCJidG4iLCJodG1sIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhcmVudE5vZGUiLCJpbnNlcnRBZGphY2VudEhUTUwiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUEsSUFBTUEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsR0FBRCxFQUFTO0FBQzVCLE1BQUlDLElBQUksb1dBQVI7QUFNQ0QsS0FBRyxDQUFDRSxnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFVO0FBQ3ZDLFNBQUtDLFVBQUwsQ0FBZ0JBLFVBQWhCLENBQTJCQyxrQkFBM0IsQ0FBOEMsV0FBOUMsRUFBMkRILElBQTNEO0FBQ0EsR0FGRDtBQUdBLENBVkQ7O0FBWWVGLHlFQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2FkZE5ld1Rhc2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IGFkZE5ld1Rhc2sgPSAoYnRuKSA9PiB7XHJcbmxldCBodG1sID0gYDxkaXYgY2xhc3M9XCJhZGQtdGFzay1pdGVtXCI+PGkgY2xhc3M9XCJpY29cIj5cclxuICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgPHVzZSB4bGluazpocmVmPVwiaW1nL3Nwcml0ZXMvc3ZnL3N5bWJvbC9zcHJpdGUuc3ZnI2F0dGVudGlvblwiPjwvdXNlPlxyXG4gICAgICAgICAgICAgIDwvc3ZnPjwvaT5cclxuICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwic2lkZWJhcl9fdGFzay1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz1cIjFcIiBkYXRhLWVsYXN0aWM9XCJ0cnVlXCI+PC90ZXh0YXJlYT48c3BhbiBjbGFzcz1cImRlbGV0ZS10YXNrLWl0ZW1cIj48L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5gXHJcblx0YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuXHRcdHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbClcclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZGROZXdUYXNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/addNewTask.js\n");

/***/ }),

/***/ "./app/js/model/addfeedbackForm.js":
/*!*****************************************!*\
  !*** ./app/js/model/addfeedbackForm.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar addFeedbackForm = function addFeedbackForm(btn, block) {\n  btn.addEventListener('click', function () {\n    block.style.display = 'block';\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (addFeedbackForm);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvYWRkZmVlZGJhY2tGb3JtLmpzPzMwMTIiXSwibmFtZXMiOlsiYWRkRmVlZGJhY2tGb3JtIiwiYnRuIiwiYmxvY2siLCJhZGRFdmVudExpc3RlbmVyIiwic3R5bGUiLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiQUFFQTtBQUFBLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOLEVBQWdCO0FBQ3ZDRCxLQUFHLENBQUNFLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFlBQVU7QUFDdkNELFNBQUssQ0FBQ0UsS0FBTixDQUFZQyxPQUFaLEdBQXNCLE9BQXRCO0FBQ0EsR0FGRDtBQUdBLENBSkQ7O0FBT2VMLDhFQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2FkZGZlZWRiYWNrRm9ybS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuY29uc3QgYWRkRmVlZGJhY2tGb3JtID0gKGJ0biwgYmxvY2spID0+IHtcclxuXHRidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xyXG5cdFx0YmxvY2suc3R5bGUuZGlzcGxheSA9ICdibG9jaydcclxuXHR9KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRkRmVlZGJhY2tGb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/addfeedbackForm.js\n");

/***/ }),

/***/ "./app/js/model/checkIfWrapperIsEmpty.js":
/*!***********************************************!*\
  !*** ./app/js/model/checkIfWrapperIsEmpty.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar checkIfWrapperIsEmpty = function checkIfWrapperIsEmpty(wrappers) {\n  wrappers.forEach(function (el) {\n    // console.log(el.innerHTML)\n    if (el.innerHTML === '') {\n      el.classList.add('empty-layer');\n    } else {\n      el.classList.remove('empty-layer');\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (checkIfWrapperIsEmpty);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvY2hlY2tJZldyYXBwZXJJc0VtcHR5LmpzP2Q1ZDYiXSwibmFtZXMiOlsiY2hlY2tJZldyYXBwZXJJc0VtcHR5Iiwid3JhcHBlcnMiLCJmb3JFYWNoIiwiZWwiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiJBQUFFO0FBQUEsSUFBTUEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixDQUFDQyxRQUFELEVBQWE7QUFDMUNBLFVBQVEsQ0FBQ0MsT0FBVCxDQUFpQixVQUFBQyxFQUFFLEVBQUc7QUFDckI7QUFDQSxRQUFHQSxFQUFFLENBQUNDLFNBQUgsS0FBaUIsRUFBcEIsRUFBd0I7QUFDdkJELFFBQUUsQ0FBQ0UsU0FBSCxDQUFhQyxHQUFiLENBQWlCLGFBQWpCO0FBQ0EsS0FGRCxNQUVPO0FBQ05ILFFBQUUsQ0FBQ0UsU0FBSCxDQUFhRSxNQUFiLENBQW9CLGFBQXBCO0FBQ0E7QUFDRCxHQVBEO0FBUUEsQ0FURDs7QUFZZVAsb0ZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvY2hlY2tJZldyYXBwZXJJc0VtcHR5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiICBjb25zdCBjaGVja0lmV3JhcHBlcklzRW1wdHkgPSAod3JhcHBlcnMpPT4ge1xyXG4gIFx0d3JhcHBlcnMuZm9yRWFjaChlbD0+IHtcclxuICBcdFx0Ly8gY29uc29sZS5sb2coZWwuaW5uZXJIVE1MKVxyXG4gIFx0XHRpZihlbC5pbm5lckhUTUwgPT09ICcnKSB7XHJcbiAgXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZCgnZW1wdHktbGF5ZXInKVxyXG4gIFx0XHR9IGVsc2Uge1xyXG4gIFx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2VtcHR5LWxheWVyJylcclxuICBcdFx0fVxyXG4gIFx0fSlcclxuICB9XHJcblxyXG5cclxuICBleHBvcnQgZGVmYXVsdCBjaGVja0lmV3JhcHBlcklzRW1wdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/checkIfWrapperIsEmpty.js\n");

/***/ }),

/***/ "./app/js/model/chooseAndAddMedia.js":
/*!*******************************************!*\
  !*** ./app/js/model/chooseAndAddMedia.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar chooseAndAddMedia = function chooseAndAddMedia() {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (chooseAndAddMedia);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvY2hvb3NlQW5kQWRkTWVkaWEuanM/YTYwZCJdLCJuYW1lcyI6WyJjaG9vc2VBbmRBZGRNZWRpYSJdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQSxJQUFNQSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLEdBQU0sQ0FFL0IsQ0FGRDs7QUFLZUEsZ0ZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvY2hvb3NlQW5kQWRkTWVkaWEuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IGNob29zZUFuZEFkZE1lZGlhID0gKCkgPT4ge1xyXG5cdFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hvb3NlQW5kQWRkTWVkaWEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/chooseAndAddMedia.js\n");

/***/ }),

/***/ "./app/js/model/deleteTask.js":
/*!************************************!*\
  !*** ./app/js/model/deleteTask.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar deleteTask = function deleteTask(body) {\n  body.addEventListener('click', function (e) {\n    var btn = e.target;\n    var mainParent = btn.parentNode.parentNode;\n    var parent = btn.parentNode;\n\n    if (btn.classList.contains('delete-task-item')) {\n      mainParent.removeChild(parent);\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (deleteTask);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvZGVsZXRlVGFzay5qcz9lOWZlIl0sIm5hbWVzIjpbImRlbGV0ZVRhc2siLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJidG4iLCJ0YXJnZXQiLCJtYWluUGFyZW50IiwicGFyZW50Tm9kZSIsInBhcmVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUEsSUFBTUEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsSUFBRCxFQUFVO0FBQzVCQSxNQUFJLENBQUNDLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFVBQVNDLENBQVQsRUFBVztBQUN6QyxRQUFJQyxHQUFHLEdBQUdELENBQUMsQ0FBQ0UsTUFBWjtBQUNBLFFBQUlDLFVBQVUsR0FBR0YsR0FBRyxDQUFDRyxVQUFKLENBQWVBLFVBQWhDO0FBQ0EsUUFBSUMsTUFBTSxHQUFHSixHQUFHLENBQUNHLFVBQWpCOztBQUNBLFFBQUdILEdBQUcsQ0FBQ0ssU0FBSixDQUFjQyxRQUFkLENBQXVCLGtCQUF2QixDQUFILEVBQStDO0FBQzlDSixnQkFBVSxDQUFDSyxXQUFYLENBQXVCSCxNQUF2QjtBQUNBO0FBQ0QsR0FQRDtBQVFBLENBVEQ7O0FBV2VSLHlFQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2RlbGV0ZVRhc2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IGRlbGV0ZVRhc2sgPSAoYm9keSkgPT4ge1xyXG5cdGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcclxuXHRcdGxldCBidG4gPSBlLnRhcmdldFxyXG5cdFx0bGV0IG1haW5QYXJlbnQgPSBidG4ucGFyZW50Tm9kZS5wYXJlbnROb2RlXHJcblx0XHRsZXQgcGFyZW50ID0gYnRuLnBhcmVudE5vZGVcclxuXHRcdGlmKGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGV0ZS10YXNrLWl0ZW0nKSkge1xyXG5cdFx0XHRtYWluUGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudClcclxuXHRcdH1cclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWxldGVUYXNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/deleteTask.js\n");

/***/ }),

/***/ "./app/js/model/helper.js":
/*!********************************!*\
  !*** ./app/js/model/helper.js ***!
  \********************************/
/*! exports provided: throttle, debounce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"throttle\", function() { return throttle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"debounce\", function() { return debounce; });\nfunction throttle(f, ms) {\n  var isThrottled = false,\n      t,\n      a;\n\n  function d() {\n    if (isThrottled) {\n      t = this;\n      a = arguments;\n      return;\n    }\n\n    f.apply(this, arguments);\n    isThrottled = true;\n    setTimeout(function () {\n      isThrottled = false;\n\n      if (a) {\n        d.apply(t, a);\n        t = a = null;\n      }\n    }, ms);\n  }\n\n  return d;\n}\n\nfunction debounce(f, ms) {\n  var isCooldown = false;\n  return function () {\n    if (isCooldown) return;\n    f.apply(this, arguments);\n    isCooldown = true;\n    setTimeout(function () {\n      return isCooldown = false;\n    }, ms);\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaGVscGVyLmpzP2FmNTAiXSwibmFtZXMiOlsidGhyb3R0bGUiLCJmIiwibXMiLCJpc1Rocm90dGxlZCIsInQiLCJhIiwiZCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwiaXNDb29sZG93biJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUJDLEVBQXJCLEVBQXdCO0FBRXZCLE1BQUlDLFdBQVcsR0FBRyxLQUFsQjtBQUFBLE1BQ0FDLENBREE7QUFBQSxNQUNHQyxDQURIOztBQUdBLFdBQVNDLENBQVQsR0FBWTtBQUVYLFFBQUlILFdBQUosRUFBaUI7QUFDaEJDLE9BQUMsR0FBRyxJQUFKO0FBQ0FDLE9BQUMsR0FBR0UsU0FBSjtBQUNBO0FBQ0E7O0FBRUROLEtBQUMsQ0FBQ08sS0FBRixDQUFRLElBQVIsRUFBY0QsU0FBZDtBQUVBSixlQUFXLEdBQUcsSUFBZDtBQUVBTSxjQUFVLENBQUMsWUFBVTtBQUNwQk4saUJBQVcsR0FBRyxLQUFkOztBQUNBLFVBQUdFLENBQUgsRUFBTTtBQUNMQyxTQUFDLENBQUNFLEtBQUYsQ0FBUUosQ0FBUixFQUFXQyxDQUFYO0FBQ0FELFNBQUMsR0FBR0MsQ0FBQyxHQUFHLElBQVI7QUFDQTtBQUNELEtBTlMsRUFNUEgsRUFOTyxDQUFWO0FBT0E7O0FBRUQsU0FBT0ksQ0FBUDtBQUNBOztBQUlELFNBQVNJLFFBQVQsQ0FBa0JULENBQWxCLEVBQXFCQyxFQUFyQixFQUF5QjtBQUV2QixNQUFJUyxVQUFVLEdBQUcsS0FBakI7QUFFQSxTQUFPLFlBQVc7QUFDaEIsUUFBSUEsVUFBSixFQUFnQjtBQUVoQlYsS0FBQyxDQUFDTyxLQUFGLENBQVEsSUFBUixFQUFjRCxTQUFkO0FBRUFJLGNBQVUsR0FBRyxJQUFiO0FBRUFGLGNBQVUsQ0FBQztBQUFBLGFBQU1FLFVBQVUsR0FBRyxLQUFuQjtBQUFBLEtBQUQsRUFBMkJULEVBQTNCLENBQVY7QUFDRCxHQVJEO0FBVUQiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvaGVscGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdGhyb3R0bGUoZiwgbXMpe1xyXG5cdFxyXG5cdGxldCBpc1Rocm90dGxlZCA9IGZhbHNlLFxyXG5cdHQsIGFcclxuXHJcblx0ZnVuY3Rpb24gZCgpe1xyXG5cdFx0XHJcblx0XHRpZiAoaXNUaHJvdHRsZWQpIHtcclxuXHRcdFx0dCA9IHRoaXM7XHJcblx0XHRcdGEgPSBhcmd1bWVudHM7XHJcblx0XHRcdHJldHVyblxyXG5cdFx0fVxyXG5cclxuXHRcdGYuYXBwbHkodGhpcywgYXJndW1lbnRzKVxyXG5cclxuXHRcdGlzVGhyb3R0bGVkID0gdHJ1ZTtcclxuXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0XHRcdGlzVGhyb3R0bGVkID0gZmFsc2U7XHJcblx0XHRcdGlmKGEpIHtcclxuXHRcdFx0XHRkLmFwcGx5KHQsIGEpO1xyXG5cdFx0XHRcdHQgPSBhID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbXMpXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZFxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGRlYm91bmNlKGYsIG1zKSB7XHJcblxyXG4gIGxldCBpc0Nvb2xkb3duID0gZmFsc2U7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIGlmIChpc0Nvb2xkb3duKSByZXR1cm47XHJcblxyXG4gICAgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgIGlzQ29vbGRvd24gPSB0cnVlO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4gaXNDb29sZG93biA9IGZhbHNlLCBtcyk7XHJcbiAgfTtcclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQge1xyXG5cdHRocm90dGxlLFxyXG5cdGRlYm91bmNlXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/helper.js\n");

/***/ }),

/***/ "./app/js/model/index.js":
/*!*******************************!*\
  !*** ./app/js/model/index.js ***!
  \*******************************/
/*! exports provided: initOverlayScrollbars, sidebarListsToggle, playAudioHover, initPopups, initTooltips, initWorkPopup, test, initWorkModalSelect, sidebarSearchInput, checkMediaWidth, checkIfWrapperIsEmpty, show5Rows, addManufacturyType, addContactHistory, show1Row, chooseAndAddMedia, addNewTask, deleteTask, setFeedbackDate, addFeedbackForm, showRemoveBtnOnChecking */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _OverlayScrollbarsInit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OverlayScrollbarsInit */ \"./app/js/model/OverlayScrollbarsInit.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initOverlayScrollbars\", function() { return _OverlayScrollbarsInit__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _sidebarListsToggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sidebarListsToggle */ \"./app/js/model/sidebarListsToggle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sidebarListsToggle\", function() { return _sidebarListsToggle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _playAudioHover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playAudioHover */ \"./app/js/model/playAudioHover.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"playAudioHover\", function() { return _playAudioHover__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _initPopups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./initPopups */ \"./app/js/model/initPopups.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initPopups\", function() { return _initPopups__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _initToottips__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./initToottips */ \"./app/js/model/initToottips.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initTooltips\", function() { return _initToottips__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _initWorkPopup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./initWorkPopup */ \"./app/js/model/initWorkPopup.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initWorkPopup\", function() { return _initWorkPopup__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _testing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./testing */ \"./app/js/model/testing.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"test\", function() { return _testing__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _initWorkModalSelect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./initWorkModalSelect */ \"./app/js/model/initWorkModalSelect.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initWorkModalSelect\", function() { return _initWorkModalSelect__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _sidebarSearchInput__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sidebarSearchInput */ \"./app/js/model/sidebarSearchInput.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sidebarSearchInput\", function() { return _sidebarSearchInput__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _media__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./media */ \"./app/js/model/media.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"checkMediaWidth\", function() { return _media__WEBPACK_IMPORTED_MODULE_9__[\"checkMediaWidth\"]; });\n\n/* harmony import */ var _checkIfWrapperIsEmpty__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./checkIfWrapperIsEmpty */ \"./app/js/model/checkIfWrapperIsEmpty.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"checkIfWrapperIsEmpty\", function() { return _checkIfWrapperIsEmpty__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _show5Rows__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./show5Rows */ \"./app/js/model/show5Rows.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"show5Rows\", function() { return _show5Rows__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _addManufacturyType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./addManufacturyType */ \"./app/js/model/addManufacturyType.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addManufacturyType\", function() { return _addManufacturyType__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; });\n\n/* harmony import */ var _addContactHistory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./addContactHistory */ \"./app/js/model/addContactHistory.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addContactHistory\", function() { return _addContactHistory__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n/* harmony import */ var _show1rowFeedback__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./show1rowFeedback */ \"./app/js/model/show1rowFeedback.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"show1Row\", function() { return _show1rowFeedback__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; });\n\n/* harmony import */ var _chooseAndAddMedia__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./chooseAndAddMedia */ \"./app/js/model/chooseAndAddMedia.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"chooseAndAddMedia\", function() { return _chooseAndAddMedia__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; });\n\n/* harmony import */ var _addNewTask__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./addNewTask */ \"./app/js/model/addNewTask.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addNewTask\", function() { return _addNewTask__WEBPACK_IMPORTED_MODULE_16__[\"default\"]; });\n\n/* harmony import */ var _deleteTask__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./deleteTask */ \"./app/js/model/deleteTask.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"deleteTask\", function() { return _deleteTask__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; });\n\n/* harmony import */ var _setFeedbacklDate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./setFeedbacklDate */ \"./app/js/model/setFeedbacklDate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"setFeedbackDate\", function() { return _setFeedbacklDate__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; });\n\n/* harmony import */ var _addfeedbackForm__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./addfeedbackForm */ \"./app/js/model/addfeedbackForm.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addFeedbackForm\", function() { return _addfeedbackForm__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; });\n\n/* harmony import */ var _showRemoveBtnOnChecking__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./showRemoveBtnOnChecking */ \"./app/js/model/showRemoveBtnOnChecking.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"showRemoveBtnOnChecking\", function() { return _showRemoveBtnOnChecking__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5kZXguanM/YzgzZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbml0T3ZlcmxheVNjcm9sbGJhcnMgZnJvbSAnLi9PdmVybGF5U2Nyb2xsYmFyc0luaXQnXHJcbmltcG9ydCBzaWRlYmFyTGlzdHNUb2dnbGUgZnJvbSAnLi9zaWRlYmFyTGlzdHNUb2dnbGUnXHJcbmltcG9ydCBwbGF5QXVkaW9Ib3ZlciBmcm9tICcuL3BsYXlBdWRpb0hvdmVyJ1xyXG5pbXBvcnQgaW5pdFBvcHVwcyBmcm9tICcuL2luaXRQb3B1cHMnXHJcbmltcG9ydCBpbml0VG9vbHRpcHMgZnJvbSAnLi9pbml0VG9vdHRpcHMnXHJcbmltcG9ydCBpbml0V29ya1BvcHVwIGZyb20gJy4vaW5pdFdvcmtQb3B1cCdcclxuaW1wb3J0IHRlc3QgZnJvbSAnLi90ZXN0aW5nJ1xyXG5pbXBvcnQgaW5pdFdvcmtNb2RhbFNlbGVjdCBmcm9tICcuL2luaXRXb3JrTW9kYWxTZWxlY3QnXHJcbmltcG9ydCBzaWRlYmFyU2VhcmNoSW5wdXQgZnJvbSAnLi9zaWRlYmFyU2VhcmNoSW5wdXQnXHJcbmltcG9ydCB7Y2hlY2tNZWRpYVdpZHRofSBmcm9tICcuL21lZGlhJ1xyXG5pbXBvcnQgY2hlY2tJZldyYXBwZXJJc0VtcHR5IGZyb20gJy4vY2hlY2tJZldyYXBwZXJJc0VtcHR5J1xyXG5pbXBvcnQgc2hvdzVSb3dzIGZyb20gJy4vc2hvdzVSb3dzJ1xyXG5pbXBvcnQgYWRkTWFudWZhY3R1cnlUeXBlIGZyb20gJy4vYWRkTWFudWZhY3R1cnlUeXBlJ1xyXG5pbXBvcnQgYWRkQ29udGFjdEhpc3RvcnkgZnJvbSAnLi9hZGRDb250YWN0SGlzdG9yeSdcclxuaW1wb3J0IHNob3cxUm93IGZyb20gJy4vc2hvdzFyb3dGZWVkYmFjaydcclxuaW1wb3J0IGNob29zZUFuZEFkZE1lZGlhIGZyb20gJy4vY2hvb3NlQW5kQWRkTWVkaWEnXHJcbmltcG9ydCBhZGROZXdUYXNrIGZyb20gJy4vYWRkTmV3VGFzaydcclxuaW1wb3J0IGRlbGV0ZVRhc2sgZnJvbSAnLi9kZWxldGVUYXNrJ1xyXG5pbXBvcnQgc2V0RmVlZGJhY2tEYXRlIGZyb20gJy4vc2V0RmVlZGJhY2tsRGF0ZSdcclxuaW1wb3J0IGFkZEZlZWRiYWNrRm9ybSBmcm9tICcuL2FkZGZlZWRiYWNrRm9ybSdcclxuaW1wb3J0IHNob3dSZW1vdmVCdG5PbkNoZWNraW5nIGZyb20gJy4vc2hvd1JlbW92ZUJ0bk9uQ2hlY2tpbmcnXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHtcclxuXHRpbml0T3ZlcmxheVNjcm9sbGJhcnMsXHJcblx0c2lkZWJhckxpc3RzVG9nZ2xlLFxyXG5cdHBsYXlBdWRpb0hvdmVyLFxyXG5cdGluaXRQb3B1cHMsXHJcblx0aW5pdFRvb2x0aXBzLFxyXG5cdGluaXRXb3JrUG9wdXAsXHJcblx0dGVzdCxcclxuXHRpbml0V29ya01vZGFsU2VsZWN0LFxyXG5cdHNpZGViYXJTZWFyY2hJbnB1dCxcclxuXHRjaGVja01lZGlhV2lkdGgsXHJcblx0Y2hlY2tJZldyYXBwZXJJc0VtcHR5LFxyXG5cdHNob3c1Um93cyxcclxuXHRhZGRNYW51ZmFjdHVyeVR5cGUsXHJcblx0YWRkQ29udGFjdEhpc3RvcnksXHJcblx0c2hvdzFSb3csXHJcblx0Y2hvb3NlQW5kQWRkTWVkaWEsXHJcblx0YWRkTmV3VGFzayxcclxuXHRkZWxldGVUYXNrLFxyXG5cdHNldEZlZWRiYWNrRGF0ZSxcclxuXHRhZGRGZWVkYmFja0Zvcm0sXHJcblx0c2hvd1JlbW92ZUJ0bk9uQ2hlY2tpbmdcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/index.js\n");

/***/ }),

/***/ "./app/js/model/initPopups.js":
/*!************************************!*\
  !*** ./app/js/model/initPopups.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n// import PopupMD from './popup'\n\n\nvar initPopups = function initPopups() {// let countryPopup = new PopupMD('.country-filter-wrapper',{\n  // \tview: true,\n  // \tcontents: `#country-popup`,\n  // \t// pointerPosition: 'right',\n  // \t// size_pointer_position: 20,\n  // })\n  // let typeManufacturyPopup = new PopupMD('.type-manufactury-filter-wrapper',{\n  // \tview: true,\n  // \tcontents: `#type-manufactury-popup`,\n  // \t// pointerPosition: 'right',\n  // \t// size_pointer_position: 20,\n  // })\n  // let contaxtPopup = new PopupMD('.contact-filter-wrapper',{\n  // \tview: true,\n  // \tcontents: `#contact-popup`,\n  // \t// pointerPosition: 'right',\n  // \t// size_pointer_position: 20,\n  // })\n  // console.log(countryPopup)\n  // document.querySelectorAll('.sidebar__filter-item').forEach(el => {\n  // \tel.addEventListener('click', function(){\n  // \t\tMicroModal.show('modal-1')\n  // \t})\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initPopups);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5pdFBvcHVwcy5qcz8wZjU4Il0sIm5hbWVzIjpbImluaXRQb3B1cHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUVBOztBQUlBLElBQU1BLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQUssQ0FDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsQ0FuQ0Q7O0FBc0NlQSx5RUFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9pbml0UG9wdXBzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IFBvcHVwTUQgZnJvbSAnLi9wb3B1cCdcclxuXHJcbmltcG9ydCB7TWljcm9Nb2RhbH0gZnJvbSAnLi4vLi4vbGlicy9saWJzJ1xyXG5cclxuXHJcblxyXG5jb25zdCBpbml0UG9wdXBzID0gKCk9PiB7XHJcblx0Ly8gbGV0IGNvdW50cnlQb3B1cCA9IG5ldyBQb3B1cE1EKCcuY291bnRyeS1maWx0ZXItd3JhcHBlcicse1xyXG5cdC8vIFx0dmlldzogdHJ1ZSxcclxuXHQvLyBcdGNvbnRlbnRzOiBgI2NvdW50cnktcG9wdXBgLFxyXG5cdC8vIFx0Ly8gcG9pbnRlclBvc2l0aW9uOiAncmlnaHQnLFxyXG5cdC8vIFx0Ly8gc2l6ZV9wb2ludGVyX3Bvc2l0aW9uOiAyMCxcclxuXHJcblx0Ly8gfSlcclxuXHJcblxyXG5cdC8vIGxldCB0eXBlTWFudWZhY3R1cnlQb3B1cCA9IG5ldyBQb3B1cE1EKCcudHlwZS1tYW51ZmFjdHVyeS1maWx0ZXItd3JhcHBlcicse1xyXG5cdC8vIFx0dmlldzogdHJ1ZSxcclxuXHQvLyBcdGNvbnRlbnRzOiBgI3R5cGUtbWFudWZhY3R1cnktcG9wdXBgLFxyXG5cdC8vIFx0Ly8gcG9pbnRlclBvc2l0aW9uOiAncmlnaHQnLFxyXG5cdC8vIFx0Ly8gc2l6ZV9wb2ludGVyX3Bvc2l0aW9uOiAyMCxcclxuXHJcblx0Ly8gfSlcclxuXHJcblxyXG5cdC8vIGxldCBjb250YXh0UG9wdXAgPSBuZXcgUG9wdXBNRCgnLmNvbnRhY3QtZmlsdGVyLXdyYXBwZXInLHtcclxuXHQvLyBcdHZpZXc6IHRydWUsXHJcblx0Ly8gXHRjb250ZW50czogYCNjb250YWN0LXBvcHVwYCxcclxuXHQvLyBcdC8vIHBvaW50ZXJQb3NpdGlvbjogJ3JpZ2h0JyxcclxuXHQvLyBcdC8vIHNpemVfcG9pbnRlcl9wb3NpdGlvbjogMjAsXHJcblxyXG5cdC8vIH0pXHJcblxyXG5cdC8vIGNvbnNvbGUubG9nKGNvdW50cnlQb3B1cClcclxuXHJcblx0Ly8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXJfX2ZpbHRlci1pdGVtJykuZm9yRWFjaChlbCA9PiB7XHJcblx0Ly8gXHRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcblx0Ly8gXHRcdE1pY3JvTW9kYWwuc2hvdygnbW9kYWwtMScpXHJcblx0Ly8gXHR9KVxyXG5cdC8vIH0pXHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdFBvcHVwcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/initPopups.js\n");

/***/ }),

/***/ "./app/js/model/initToottips.js":
/*!**************************************!*\
  !*** ./app/js/model/initToottips.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper */ \"./app/js/model/helper.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\n\n\nvar initTooltips = function initTooltips() {\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"countryTemplate\"].style.display = 'block';\n\n  if (_view__WEBPACK_IMPORTED_MODULE_3__[\"typeManufacturyTemplate\"]) {\n    _view__WEBPACK_IMPORTED_MODULE_3__[\"typeManufacturyTemplate\"].style.display = 'block';\n  }\n\n  if (_view__WEBPACK_IMPORTED_MODULE_3__[\"contactTemplate\"]) {\n    _view__WEBPACK_IMPORTED_MODULE_3__[\"contactTemplate\"].style.display = 'block';\n  }\n\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"managersTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"lastContactTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"intermediariesTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"vacanciesTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"sortingTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"typeFeedbackTemplate\"].style.display = 'block';\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"choiceClientTemplate\"].style.display = 'block'; /////////////////////////////////////////////////////\n\n  function initSidebarTooltip(el, content) {\n    var instance = Object(_libs_libs__WEBPACK_IMPORTED_MODULE_1__[\"tippy\"])(el, {\n      content: content,\n      allowHTML: true,\n      interactive: true,\n      interactiveBorder: 5,\n      interactiveDebounce: 0,\n      placement: 'right',\n      offset: [0, 20],\n      hideOnClick: true,\n      trigger: 'click',\n      appendTo: function appendTo() {\n        return document.body;\n      },\n      onShown: function onShown(instance) {\n        document.addEventListener('keyup', function (e) {\n          if (e.keyCode === 27) {\n            instance.hide();\n          }\n        });\n        var children = instance.props.content.querySelectorAll('input');\n        children.forEach(function (child) {\n          child.addEventListener('change', function () {\n            if (child.checked) {\n              instance.reference.children[1].style.display = 'block';\n            }\n          });\n        });\n        instance.reference.children[1].addEventListener('click', function () {\n          children.forEach(function (child) {\n            child.checked = false;\n          });\n          this.style.display = 'none';\n        });\n      }\n    }); // console.log(instance);\n  } /////////////////////////////////////////\n\n\n  initSidebarTooltip('.country-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"countryTemplate\"]); ////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.contact-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"contactTemplate\"]); ////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.type-manufactury-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"typeManufacturyTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.managers-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"managersTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.intermediaries-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"intermediariesTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.vacancies-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"vacanciesTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.last-contact-filter-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"lastContactTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  initSidebarTooltip('.sorting-stats-wrapper', _view__WEBPACK_IMPORTED_MODULE_3__[\"sortingTemplate\"]); /////////////////////////////////////////////////////////////////////////////////\n\n  function initWorkModalTooltip(el, content) {\n    var instance = Object(_libs_libs__WEBPACK_IMPORTED_MODULE_1__[\"tippy\"])(el, {\n      content: content,\n      allowHTML: true,\n      interactive: true,\n      interactiveBorder: 5,\n      interactiveDebounce: 0,\n      placement: 'bottom',\n      offset: [0, 20],\n      hideOnClick: true,\n      trigger: 'click',\n      appendTo: function appendTo() {\n        return document.body;\n      },\n      onShown: function onShown(instance) {\n        document.addEventListener('keyup', function (e) {\n          if (e.keyCode === 27) {\n            instance.hide();\n          }\n        });\n      }\n    });\n  }\n\n  initWorkModalTooltip('.add-feedback-form .modal-row__feedback-ico', _view__WEBPACK_IMPORTED_MODULE_3__[\"typeFeedbackTemplate\"]);\n  initWorkModalTooltip('.add-feedback-form .modal-row__feedback-choise', _view__WEBPACK_IMPORTED_MODULE_3__[\"choiceClientTemplate\"]);\n\n  function initRowTooltips(el, content) {\n    var instance = Object(_libs_libs__WEBPACK_IMPORTED_MODULE_1__[\"tippy\"])(el, {\n      content: content,\n      appendTo: 'parent',\n      onCreate: function onCreate(instance) {\n        function chechOverflow(child) {\n          // console.log(child.offsetWidth === child.scrollWidth)\n          if (child.tagName.toLowerCase() === 'p') {\n            console.log(child.offsetWidth < child.scrollWidth);\n\n            if (child.offsetWidth < child.scrollWidth) {\n              instance.enable(); // console.log(true)\n            } else {\n              instance.disable(); // console.log(false)\n            }\n          }\n        }\n\n        chechOverflow = Object(_helper__WEBPACK_IMPORTED_MODULE_2__[\"debounce\"])(chechOverflow, 250);\n        window.addEventListener('load', function () {\n          _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(instance.reference.children).forEach(chechOverflow);\n        });\n        window.addEventListener('resize', function () {\n          _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(instance.reference.children).forEach(chechOverflow);\n        }); // document.addEventListener('fullscreenchange', function(){\n        // \t[...instance.reference.children].forEach(chechOverflow)\n        // })\n      }\n    });\n    return instance;\n  }\n\n  var countryInstance = initRowTooltips('.row__name');\n  countryInstance.forEach(function (el) {\n    el.setContent('Норвегия');\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initTooltips);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/model/initToottips.js\n");

/***/ }),

/***/ "./app/js/model/initWorkModalSelect.js":
/*!*********************************************!*\
  !*** ./app/js/model/initWorkModalSelect.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n\n\nvar initWorkModalSelect = function initWorkModalSelect(elem) {\n  if (elem.classList.contains('manager-select')) {\n    var choices = new _libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"Choices\"](elem, {\n      choices: [{\n        value: 'Отсутствует',\n        label: '<span>Отсутствует</span>',\n        selected: true,\n        disabled: true\n      }, {\n        value: 'Алексей',\n        label: \"<i class=\\\"tag manager-tag dark-blue-tag\\\">AK</i><span>\\u0410\\u043B\\u0435\\u043A\\u0441\\u0435\\u0439</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'Светлана',\n        label: '<i class=\"tag manager-tag light-green-tag\">СК</i><span>Светлана</span>',\n        selected: false,\n        disabled: false\n      }],\n      classNames: {\n        containerOuter: 'choices sidebar-select-modal',\n        containerInner: 'choices__inner sidebar-select-modal_inner',\n        itemSelectable: 'sidebar-select-item_selectable',\n        list: 'sidebar-select-modal__list'\n      }\n    });\n  } else if (elem.classList.contains('country-select')) {\n    var _choices = new _libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"Choices\"](elem, {\n      choices: [{\n        value: 'Отсутствует',\n        label: '<span>Отсутствует</span>',\n        selected: true,\n        disabled: true\n      }, {\n        value: 'Норвегия',\n        label: \"<i class=\\\"row__flag\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#flag-norway\\\"></use>\\n                </svg></i><span>\\u041D\\u043E\\u0440\\u0432\\u0435\\u0433\\u0438\\u044F</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'Норвегия2',\n        label: \"<i class=\\\"row__flag\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#flag-norway\\\"></use>\\n                </svg></i><span>\\u041D\\u043E\\u0440\\u0432\\u0435\\u0433\\u0438\\u044F</span>\",\n        selected: false,\n        disabled: false\n      }],\n      classNames: {\n        containerOuter: 'choices common-info-select-modal',\n        containerInner: 'choices__inner common-info-select-modal_inner',\n        itemSelectable: 'common-info-select-item_selectable',\n        list: 'common-info-select-modal__list'\n      }\n    });\n  } else if (elem.classList.contains('contact-select')) {\n    var _choices2 = new _libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"Choices\"](elem, {\n      choices: [{\n        value: 'Отсутствует',\n        label: '<span>Отсутствует</span>',\n        selected: true,\n        disabled: true\n      }, {\n        value: 'Почтовое письмо',\n        label: \"<i class=\\\"contact-ico\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#letter\\\"></use>\\n                </svg></i><span>\\u041F\\u043E\\u0447\\u0442\\u043E\\u0432\\u043E\\u0435 \\u043F\\u0438\\u0441\\u044C\\u043C\\u043E</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'Телефонный звонок',\n        label: \"<i class=\\\"contact-ico\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#phone\\\"></use>\\n                </svg></i><span>\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u043D\\u044B\\u0439 \\u0437\\u0432\\u043E\\u043D\\u043E\\u043A</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'SMS или мессенджер',\n        label: \"<i class=\\\"contact-ico\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#message\\\"></use>\\n                </svg></i><span>SMS \\u0438\\u043B\\u0438 \\u043C\\u0435\\u0441\\u0441\\u0435\\u043D\\u0434\\u0436\\u0435\\u0440</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'Электронная почта',\n        label: \"<i class=\\\"contact-ico\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#mail\\\"></use>\\n                </svg></i><span>\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430</span>\",\n        selected: false,\n        disabled: false\n      }, {\n        value: 'Факс',\n        label: \"<i class=\\\"contact-ico\\\">\\n                <svg>\\n                  <use xlink:href=\\\"img/sprites/svg/symbol/sprite.svg#fax\\\"></use>\\n                </svg></i><span>\\u0424\\u0430\\u043A\\u0441</span>\",\n        selected: false,\n        disabled: false\n      }],\n      classNames: {\n        containerOuter: 'choices contact-select-modal',\n        containerInner: 'choices__inner contact-select-modal_inner',\n        itemSelectable: 'contact-select-item_selectable',\n        list: 'contact-select-modal__list'\n      }\n    });\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initWorkModalSelect);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5pdFdvcmtNb2RhbFNlbGVjdC5qcz8wMTljIl0sIm5hbWVzIjpbImluaXRXb3JrTW9kYWxTZWxlY3QiLCJlbGVtIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjaG9pY2VzIiwiQ2hvaWNlcyIsInZhbHVlIiwibGFiZWwiLCJzZWxlY3RlZCIsImRpc2FibGVkIiwiY2xhc3NOYW1lcyIsImNvbnRhaW5lck91dGVyIiwiY29udGFpbmVySW5uZXIiLCJpdGVtU2VsZWN0YWJsZSIsImxpc3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQSxJQUFNQSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNDLElBQUQsRUFBVTtBQUNyQyxNQUFHQSxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsUUFBZixDQUF3QixnQkFBeEIsQ0FBSCxFQUE4QztBQUM1QyxRQUFNQyxPQUFPLEdBQUcsSUFBSUMsa0RBQUosQ0FBWUosSUFBWixFQUFrQjtBQUNuQ0csYUFBTyxFQUFFLENBQ1Q7QUFDQ0UsYUFBSyxFQUFFLGFBRFI7QUFFQ0MsYUFBSyxFQUFFLDBCQUZSO0FBR0NDLGdCQUFRLEVBQUMsSUFIVjtBQUlFQyxnQkFBUSxFQUFFO0FBSlosT0FEUyxFQU9UO0FBQ0NILGFBQUssRUFBRSxTQURSO0FBRUVDLGFBQUssNEdBRlA7QUFHRUMsZ0JBQVEsRUFBRSxLQUhaO0FBSUVDLGdCQUFRLEVBQUU7QUFKWixPQVBTLEVBYVQ7QUFDRUgsYUFBSyxFQUFFLFVBRFQ7QUFFRUMsYUFBSyxFQUFFLHdFQUZUO0FBR0VDLGdCQUFRLEVBQUUsS0FIWjtBQUlFQyxnQkFBUSxFQUFFO0FBSlosT0FiUyxDQUQwQjtBQW9CbkNDLGdCQUFVLEVBQUU7QUFDWEMsc0JBQWMsRUFBRSw4QkFETDtBQUVYQyxzQkFBYyxFQUFFLDJDQUZMO0FBR1hDLHNCQUFjLEVBQUUsZ0NBSEw7QUFJWEMsWUFBSSxFQUFFO0FBSks7QUFwQnVCLEtBQWxCLENBQWhCO0FBNEJELEdBN0JELE1BNkJPLElBQUliLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxRQUFmLENBQXdCLGdCQUF4QixDQUFKLEVBQStDO0FBQ3BELFFBQU1DLFFBQU8sR0FBRyxJQUFJQyxrREFBSixDQUFZSixJQUFaLEVBQWtCO0FBQ25DRyxhQUFPLEVBQUUsQ0FDVDtBQUNDRSxhQUFLLEVBQUUsYUFEUjtBQUVDQyxhQUFLLEVBQUUsMEJBRlI7QUFHQ0MsZ0JBQVEsRUFBQyxJQUhWO0FBSUVDLGdCQUFRLEVBQUU7QUFKWixPQURTLEVBT1Q7QUFDQ0gsYUFBSyxFQUFFLFVBRFI7QUFFRUMsYUFBSyx1T0FGUDtBQU1FQyxnQkFBUSxFQUFFLEtBTlo7QUFPRUMsZ0JBQVEsRUFBRTtBQVBaLE9BUFMsRUFnQlQ7QUFDRUgsYUFBSyxFQUFFLFdBRFQ7QUFFRUMsYUFBSyx1T0FGUDtBQU1FQyxnQkFBUSxFQUFFLEtBTlo7QUFPRUMsZ0JBQVEsRUFBRTtBQVBaLE9BaEJTLENBRDBCO0FBMEJuQ0MsZ0JBQVUsRUFBRTtBQUNYQyxzQkFBYyxFQUFFLGtDQURMO0FBRVhDLHNCQUFjLEVBQUUsK0NBRkw7QUFHWEMsc0JBQWMsRUFBRSxvQ0FITDtBQUlYQyxZQUFJLEVBQUU7QUFKSztBQTFCdUIsS0FBbEIsQ0FBaEI7QUFrQ0QsR0FuQ00sTUFtQ0EsSUFBSWIsSUFBSSxDQUFDQyxTQUFMLENBQWVDLFFBQWYsQ0FBd0IsZ0JBQXhCLENBQUosRUFBK0M7QUFDcEQsUUFBTUMsU0FBTyxHQUFHLElBQUlDLGtEQUFKLENBQVlKLElBQVosRUFBa0I7QUFDbkNHLGFBQU8sRUFBRSxDQUNUO0FBQ0NFLGFBQUssRUFBRSxhQURSO0FBRUNDLGFBQUssRUFBRSwwQkFGUjtBQUdDQyxnQkFBUSxFQUFDLElBSFY7QUFJRUMsZ0JBQVEsRUFBRTtBQUpaLE9BRFMsRUFPVDtBQUNDSCxhQUFLLEVBQUUsaUJBRFI7QUFFRUMsYUFBSyx5UUFGUDtBQU1FQyxnQkFBUSxFQUFFLEtBTlo7QUFPRUMsZ0JBQVEsRUFBRTtBQVBaLE9BUFMsRUFnQlQ7QUFDRUgsYUFBSyxFQUFFLG1CQURUO0FBRUVDLGFBQUssb1JBRlA7QUFNRUMsZ0JBQVEsRUFBRSxLQU5aO0FBT0VDLGdCQUFRLEVBQUU7QUFQWixPQWhCUyxFQTBCVDtBQUNFSCxhQUFLLEVBQUUsb0JBRFQ7QUFFRUMsYUFBSyx3UUFGUDtBQU1FQyxnQkFBUSxFQUFFLEtBTlo7QUFPRUMsZ0JBQVEsRUFBRTtBQVBaLE9BMUJTLEVBb0NUO0FBQ0VILGFBQUssRUFBRSxtQkFEVDtBQUVFQyxhQUFLLG1SQUZQO0FBTUVDLGdCQUFRLEVBQUUsS0FOWjtBQU9FQyxnQkFBUSxFQUFFO0FBUFosT0FwQ1MsRUE4Q1Q7QUFDRUgsYUFBSyxFQUFFLE1BRFQ7QUFFRUMsYUFBSyx5TUFGUDtBQU1FQyxnQkFBUSxFQUFFLEtBTlo7QUFPRUMsZ0JBQVEsRUFBRTtBQVBaLE9BOUNTLENBRDBCO0FBMERuQ0MsZ0JBQVUsRUFBRTtBQUNYQyxzQkFBYyxFQUFFLDhCQURMO0FBRVhDLHNCQUFjLEVBQUUsMkNBRkw7QUFHWEMsc0JBQWMsRUFBRSxnQ0FITDtBQUlYQyxZQUFJLEVBQUU7QUFKSztBQTFEdUIsS0FBbEIsQ0FBaEI7QUFrRUQ7QUFFRCxDQXRJRDs7QUF5SWVkLGtGQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2luaXRXb3JrTW9kYWxTZWxlY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nob2ljZXN9IGZyb20gJy4uLy4uL2xpYnMvbGlicydcclxuXHJcbmNvbnN0IGluaXRXb3JrTW9kYWxTZWxlY3QgPSAoZWxlbSkgPT4ge1xyXG4gaWYoZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoJ21hbmFnZXItc2VsZWN0JykpIHtcclxuIFx0IGNvbnN0IGNob2ljZXMgPSBuZXcgQ2hvaWNlcyhlbGVtLCB7XHJcblx0XHRjaG9pY2VzOiBbXHJcblx0XHR7XHJcblx0XHRcdHZhbHVlOiAn0J7RgtGB0YPRgtGB0YLQstGD0LXRgicsXHJcblx0XHRcdGxhYmVsOiAnPHNwYW4+0J7RgtGB0YPRgtGB0YLQstGD0LXRgjwvc3Bhbj4nLFxyXG5cdFx0XHRzZWxlY3RlZDp0cnVlLFxyXG5cdFx0ICBkaXNhYmxlZDogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHZhbHVlOiAn0JDQu9C10LrRgdC10LknLFxyXG5cdFx0ICBsYWJlbDogYDxpIGNsYXNzPVwidGFnIG1hbmFnZXItdGFnIGRhcmstYmx1ZS10YWdcIj5BSzwvaT48c3Bhbj7QkNC70LXQutGB0LXQuTwvc3Bhbj5gLFxyXG5cdFx0ICBzZWxlY3RlZDogZmFsc2UsXHJcblx0XHQgIGRpc2FibGVkOiBmYWxzZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHQgIHZhbHVlOiAn0KHQstC10YLQu9Cw0L3QsCcsXHJcblx0XHQgIGxhYmVsOiAnPGkgY2xhc3M9XCJ0YWcgbWFuYWdlci10YWcgbGlnaHQtZ3JlZW4tdGFnXCI+0KHQmjwvaT48c3Bhbj7QodCy0LXRgtC70LDQvdCwPC9zcGFuPicsXHJcblx0XHQgIHNlbGVjdGVkOiBmYWxzZSxcclxuXHRcdCAgZGlzYWJsZWQ6IGZhbHNlLFxyXG5cdFx0fV0sXHJcblx0XHRjbGFzc05hbWVzOiB7XHJcblx0XHRcdGNvbnRhaW5lck91dGVyOiAnY2hvaWNlcyBzaWRlYmFyLXNlbGVjdC1tb2RhbCcsXHJcblx0XHRcdGNvbnRhaW5lcklubmVyOiAnY2hvaWNlc19faW5uZXIgc2lkZWJhci1zZWxlY3QtbW9kYWxfaW5uZXInLFxyXG5cdFx0XHRpdGVtU2VsZWN0YWJsZTogJ3NpZGViYXItc2VsZWN0LWl0ZW1fc2VsZWN0YWJsZScsXHJcblx0XHRcdGxpc3Q6ICdzaWRlYmFyLXNlbGVjdC1tb2RhbF9fbGlzdCcsXHJcblx0XHR9XHJcblxyXG4gfSk7IFxyXG4gfSBlbHNlIGlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucygnY291bnRyeS1zZWxlY3QnKSkge1xyXG4gXHQgY29uc3QgY2hvaWNlcyA9IG5ldyBDaG9pY2VzKGVsZW0sIHtcclxuXHRcdGNob2ljZXM6IFtcclxuXHRcdHtcclxuXHRcdFx0dmFsdWU6ICfQntGC0YHRg9GC0YHRgtCy0YPQtdGCJyxcclxuXHRcdFx0bGFiZWw6ICc8c3Bhbj7QntGC0YHRg9GC0YHRgtCy0YPQtdGCPC9zcGFuPicsXHJcblx0XHRcdHNlbGVjdGVkOnRydWUsXHJcblx0XHQgIGRpc2FibGVkOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0dmFsdWU6ICfQndC+0YDQstC10LPQuNGPJyxcclxuXHRcdCAgbGFiZWw6IGA8aSBjbGFzcz1cInJvd19fZmxhZ1wiPlxyXG4gICAgICAgICAgICAgICAgPHN2Zz5cclxuICAgICAgICAgICAgICAgICAgPHVzZSB4bGluazpocmVmPVwiaW1nL3Nwcml0ZXMvc3ZnL3N5bWJvbC9zcHJpdGUuc3ZnI2ZsYWctbm9yd2F5XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICA8L3N2Zz48L2k+PHNwYW4+0J3QvtGA0LLQtdCz0LjRjzwvc3Bhbj5gLFxyXG5cdFx0ICBzZWxlY3RlZDogZmFsc2UsXHJcblx0XHQgIGRpc2FibGVkOiBmYWxzZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHQgIHZhbHVlOiAn0J3QvtGA0LLQtdCz0LjRjzInLFxyXG5cdFx0ICBsYWJlbDogYDxpIGNsYXNzPVwicm93X19mbGFnXCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCJpbWcvc3ByaXRlcy9zdmcvc3ltYm9sL3Nwcml0ZS5zdmcjZmxhZy1ub3J3YXlcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPjwvaT48c3Bhbj7QndC+0YDQstC10LPQuNGPPC9zcGFuPmAsXHJcblx0XHQgIHNlbGVjdGVkOiBmYWxzZSxcclxuXHRcdCAgZGlzYWJsZWQ6IGZhbHNlLFxyXG5cdFx0fV0sXHJcblx0XHRjbGFzc05hbWVzOiB7XHJcblx0XHRcdGNvbnRhaW5lck91dGVyOiAnY2hvaWNlcyBjb21tb24taW5mby1zZWxlY3QtbW9kYWwnLFxyXG5cdFx0XHRjb250YWluZXJJbm5lcjogJ2Nob2ljZXNfX2lubmVyIGNvbW1vbi1pbmZvLXNlbGVjdC1tb2RhbF9pbm5lcicsXHJcblx0XHRcdGl0ZW1TZWxlY3RhYmxlOiAnY29tbW9uLWluZm8tc2VsZWN0LWl0ZW1fc2VsZWN0YWJsZScsXHJcblx0XHRcdGxpc3Q6ICdjb21tb24taW5mby1zZWxlY3QtbW9kYWxfX2xpc3QnLFxyXG5cdFx0fVxyXG5cclxuIH0pOyBcclxuIH0gZWxzZSBpZiAoZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbnRhY3Qtc2VsZWN0JykpIHtcclxuIFx0IGNvbnN0IGNob2ljZXMgPSBuZXcgQ2hvaWNlcyhlbGVtLCB7XHJcblx0XHRjaG9pY2VzOiBbXHJcblx0XHR7XHJcblx0XHRcdHZhbHVlOiAn0J7RgtGB0YPRgtGB0YLQstGD0LXRgicsXHJcblx0XHRcdGxhYmVsOiAnPHNwYW4+0J7RgtGB0YPRgtGB0YLQstGD0LXRgjwvc3Bhbj4nLFxyXG5cdFx0XHRzZWxlY3RlZDp0cnVlLFxyXG5cdFx0ICBkaXNhYmxlZDogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHZhbHVlOiAn0J/QvtGH0YLQvtCy0L7QtSDQv9C40YHRjNC80L4nLFxyXG5cdFx0ICBsYWJlbDogYDxpIGNsYXNzPVwiY29udGFjdC1pY29cIj5cclxuICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cImltZy9zcHJpdGVzL3N2Zy9zeW1ib2wvc3ByaXRlLnN2ZyNsZXR0ZXJcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPjwvaT48c3Bhbj7Qn9C+0YfRgtC+0LLQvtC1INC/0LjRgdGM0LzQvjwvc3Bhbj5gLFxyXG5cdFx0ICBzZWxlY3RlZDogZmFsc2UsXHJcblx0XHQgIGRpc2FibGVkOiBmYWxzZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHQgIHZhbHVlOiAn0KLQtdC70LXRhNC+0L3QvdGL0Lkg0LfQstC+0L3QvtC6JyxcclxuXHRcdCAgbGFiZWw6IGA8aSBjbGFzcz1cImNvbnRhY3QtaWNvXCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCJpbWcvc3ByaXRlcy9zdmcvc3ltYm9sL3Nwcml0ZS5zdmcjcGhvbmVcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPjwvaT48c3Bhbj7QotC10LvQtdGE0L7QvdC90YvQuSDQt9Cy0L7QvdC+0Lo8L3NwYW4+YCxcclxuXHRcdCAgc2VsZWN0ZWQ6IGZhbHNlLFxyXG5cdFx0ICBkaXNhYmxlZDogZmFsc2UsXHJcblx0XHR9LFxyXG5cclxuXHRcdHtcclxuXHRcdCAgdmFsdWU6ICdTTVMg0LjQu9C4INC80LXRgdGB0LXQvdC00LbQtdGAJyxcclxuXHRcdCAgbGFiZWw6IGA8aSBjbGFzcz1cImNvbnRhY3QtaWNvXCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCJpbWcvc3ByaXRlcy9zdmcvc3ltYm9sL3Nwcml0ZS5zdmcjbWVzc2FnZVwiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgPC9zdmc+PC9pPjxzcGFuPlNNUyDQuNC70Lgg0LzQtdGB0YHQtdC90LTQttC10YA8L3NwYW4+YCxcclxuXHRcdCAgc2VsZWN0ZWQ6IGZhbHNlLFxyXG5cdFx0ICBkaXNhYmxlZDogZmFsc2UsXHJcblx0XHR9LFxyXG5cclxuXHRcdHtcclxuXHRcdCAgdmFsdWU6ICfQrdC70LXQutGC0YDQvtC90L3QsNGPINC/0L7Rh9GC0LAnLFxyXG5cdFx0ICBsYWJlbDogYDxpIGNsYXNzPVwiY29udGFjdC1pY29cIj5cclxuICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cImltZy9zcHJpdGVzL3N2Zy9zeW1ib2wvc3ByaXRlLnN2ZyNtYWlsXCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICA8L3N2Zz48L2k+PHNwYW4+0K3Qu9C10LrRgtGA0L7QvdC90LDRjyDQv9C+0YfRgtCwPC9zcGFuPmAsXHJcblx0XHQgIHNlbGVjdGVkOiBmYWxzZSxcclxuXHRcdCAgZGlzYWJsZWQ6IGZhbHNlLFxyXG5cdFx0fSxcclxuXHJcblx0XHR7XHJcblx0XHQgIHZhbHVlOiAn0KTQsNC60YEnLFxyXG5cdFx0ICBsYWJlbDogYDxpIGNsYXNzPVwiY29udGFjdC1pY29cIj5cclxuICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cImltZy9zcHJpdGVzL3N2Zy9zeW1ib2wvc3ByaXRlLnN2ZyNmYXhcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPjwvaT48c3Bhbj7QpNCw0LrRgTwvc3Bhbj5gLFxyXG5cdFx0ICBzZWxlY3RlZDogZmFsc2UsXHJcblx0XHQgIGRpc2FibGVkOiBmYWxzZSxcclxuXHRcdH1cclxuXHJcblx0XHRdLFxyXG5cdFx0Y2xhc3NOYW1lczoge1xyXG5cdFx0XHRjb250YWluZXJPdXRlcjogJ2Nob2ljZXMgY29udGFjdC1zZWxlY3QtbW9kYWwnLFxyXG5cdFx0XHRjb250YWluZXJJbm5lcjogJ2Nob2ljZXNfX2lubmVyIGNvbnRhY3Qtc2VsZWN0LW1vZGFsX2lubmVyJyxcclxuXHRcdFx0aXRlbVNlbGVjdGFibGU6ICdjb250YWN0LXNlbGVjdC1pdGVtX3NlbGVjdGFibGUnLFxyXG5cdFx0XHRsaXN0OiAnY29udGFjdC1zZWxlY3QtbW9kYWxfX2xpc3QnLFxyXG5cdFx0fVxyXG5cclxuIH0pOyBcclxuIH1cclxuIFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdFdvcmtNb2RhbFNlbGVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/initWorkModalSelect.js\n");

/***/ }),

/***/ "./app/js/model/initWorkPopup.js":
/*!***************************************!*\
  !*** ./app/js/model/initWorkPopup.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\nvar initWorkPopup = function initWorkPopup() {\n  var show = false;\n  _libs_libs__WEBPACK_IMPORTED_MODULE_0__[\"MicroModal\"].init({\n    onShow: function onShow(modal) {\n      if (modal.id === 'modal-1') {\n        var wrapWidth = _view__WEBPACK_IMPORTED_MODULE_1__[\"modalRowMediaWrapper\"].offsetWidth;\n        var width = 0;\n        _view__WEBPACK_IMPORTED_MODULE_1__[\"modalRowMedia\"].forEach(function (el) {\n          var style = el.currentStyle || window.getComputedStyle(el);\n          width += el.offsetWidth + parseInt(style.marginRight);\n\n          if (width > wrapWidth) {\n            // mediaShowMore.style.display = 'block'\n            if (!show) {\n              el.classList.add('hidden-row-opacity');\n            }\n\n            _view__WEBPACK_IMPORTED_MODULE_1__[\"mediaShowMore\"].style.display = 'block';\n          }\n        }); // console.log(j)\n\n        var rowsAbs = _view__WEBPACK_IMPORTED_MODULE_1__[\"modalRowMediaWrapper\"].querySelectorAll('.hidden-row-opacity');\n        var count = 0;\n        _view__WEBPACK_IMPORTED_MODULE_1__[\"mediaShowMore\"].addEventListener('click', function () {\n          var rows = _view__WEBPACK_IMPORTED_MODULE_1__[\"modalRowMediaWrapper\"].querySelectorAll('.hidden-row-opacity');\n          var j = 0;\n          rows.forEach(function (el, i, arr) {\n            var clone = el.querySelector('img').cloneNode();\n            var mr = el.currentStyle || window.getComputedStyle(el);\n            clone.style.display = 'block';\n            clone.style.width = 'auto';\n            clone.style.height = '100px';\n            clone.style.marginRight = mr.marginRight;\n            _view__WEBPACK_IMPORTED_MODULE_1__[\"body\"].appendChild(clone);\n            var style = clone.currentStyle || window.getComputedStyle(clone);\n            j += clone.offsetWidth + parseInt(style.marginRight);\n            _view__WEBPACK_IMPORTED_MODULE_1__[\"body\"].removeChild(clone);\n\n            if (j < wrapWidth) {\n              el.classList.remove('hidden-row-opacity');\n            }\n\n            if (!el.classList.contains('hidden-row-opacity')) {\n              count++;\n            }\n          });\n\n          if (count === rowsAbs.length) {\n            _view__WEBPACK_IMPORTED_MODULE_1__[\"mediaShowMore\"].style.display = 'none';\n          }\n        });\n      }\n\n      show = true;\n    },\n    onClose: function onClose(modal) {\n      return console.info(\"\".concat(modal.id, \" is hidden\"));\n    },\n    // [2]\n    openTrigger: 'data-custom-open',\n    // [3]\n    closeTrigger: 'data-custom-close',\n    // [4]\n    openClass: 'is-open'\n  }); // document.querySelectorAll('.row').forEach(el => {\n  // \tel.addEventListener('click', function(){\n  // \t\tMicroModal.show('modal-1')\n  // \t})\n  //  })\n  // document.querySelector('.modal__btn-1').addEventListener('click', function(){\n  // \tMicroModal.show('modal-2')\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initWorkPopup);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5pdFdvcmtQb3B1cC5qcz9hYjQ4Il0sIm5hbWVzIjpbImluaXRXb3JrUG9wdXAiLCJzaG93IiwiTWljcm9Nb2RhbCIsImluaXQiLCJvblNob3ciLCJtb2RhbCIsImlkIiwid3JhcFdpZHRoIiwibW9kYWxSb3dNZWRpYVdyYXBwZXIiLCJvZmZzZXRXaWR0aCIsIndpZHRoIiwibW9kYWxSb3dNZWRpYSIsImZvckVhY2giLCJlbCIsInN0eWxlIiwiY3VycmVudFN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcnNlSW50IiwibWFyZ2luUmlnaHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJtZWRpYVNob3dNb3JlIiwiZGlzcGxheSIsInJvd3NBYnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY291bnQiLCJhZGRFdmVudExpc3RlbmVyIiwicm93cyIsImoiLCJpIiwiYXJyIiwiY2xvbmUiLCJxdWVyeVNlbGVjdG9yIiwiY2xvbmVOb2RlIiwibXIiLCJoZWlnaHQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsInJlbW92ZSIsImNvbnRhaW5zIiwibGVuZ3RoIiwib25DbG9zZSIsImNvbnNvbGUiLCJpbmZvIiwib3BlblRyaWdnZXIiLCJjbG9zZVRyaWdnZXIiLCJvcGVuQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBR0EsSUFBTUEsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFLO0FBQzFCLE1BQUlDLElBQUksR0FBRyxLQUFYO0FBQ0FDLHVEQUFVLENBQUNDLElBQVgsQ0FBZ0I7QUFDZkMsVUFBTSxFQUFFLGdCQUFBQyxLQUFLLEVBQUk7QUFDaEIsVUFBR0EsS0FBSyxDQUFDQyxFQUFOLEtBQWEsU0FBaEIsRUFBMkI7QUFDMUIsWUFBSUMsU0FBUyxHQUFHQywwREFBb0IsQ0FBQ0MsV0FBckM7QUFDQSxZQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUdBQywyREFBYSxDQUFDQyxPQUFkLENBQXNCLFVBQUFDLEVBQUUsRUFBRztBQUMxQixjQUFJQyxLQUFLLEdBQUdELEVBQUUsQ0FBQ0UsWUFBSCxJQUFtQkMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkosRUFBeEIsQ0FBL0I7QUFDQUgsZUFBSyxJQUFJRyxFQUFFLENBQUNKLFdBQUgsR0FBaUJTLFFBQVEsQ0FBQ0osS0FBSyxDQUFDSyxXQUFQLENBQWxDOztBQUVBLGNBQUdULEtBQUssR0FBR0gsU0FBWCxFQUFzQjtBQUNyQjtBQUNBLGdCQUFHLENBQUNOLElBQUosRUFBVTtBQUNUWSxnQkFBRSxDQUFDTyxTQUFILENBQWFDLEdBQWIsQ0FBaUIsb0JBQWpCO0FBQ0E7O0FBRURDLCtEQUFhLENBQUNSLEtBQWQsQ0FBb0JTLE9BQXBCLEdBQThCLE9BQTlCO0FBQ0E7QUFDRCxTQVpELEVBTDBCLENBbUIxQjs7QUFFQSxZQUFJQyxPQUFPLEdBQUdoQiwwREFBb0IsQ0FBQ2lCLGdCQUFyQixDQUFzQyxxQkFBdEMsQ0FBZDtBQUNBLFlBQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0FKLDJEQUFhLENBQUNLLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLFlBQVU7QUFFakQsY0FBSUMsSUFBSSxHQUFHcEIsMERBQW9CLENBQUNpQixnQkFBckIsQ0FBc0MscUJBQXRDLENBQVg7QUFDQSxjQUFJSSxDQUFDLEdBQUcsQ0FBUjtBQUVBRCxjQUFJLENBQUNoQixPQUFMLENBQWEsVUFBQ0MsRUFBRCxFQUFLaUIsQ0FBTCxFQUFRQyxHQUFSLEVBQWdCO0FBQzVCLGdCQUFJQyxLQUFLLEdBQUduQixFQUFFLENBQUNvQixhQUFILENBQWlCLEtBQWpCLEVBQXdCQyxTQUF4QixFQUFaO0FBQ0EsZ0JBQUlDLEVBQUUsR0FBR3RCLEVBQUUsQ0FBQ0UsWUFBSCxJQUFtQkMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkosRUFBeEIsQ0FBNUI7QUFFQW1CLGlCQUFLLENBQUNsQixLQUFOLENBQVlTLE9BQVosR0FBc0IsT0FBdEI7QUFDQVMsaUJBQUssQ0FBQ2xCLEtBQU4sQ0FBWUosS0FBWixHQUFvQixNQUFwQjtBQUNBc0IsaUJBQUssQ0FBQ2xCLEtBQU4sQ0FBWXNCLE1BQVosR0FBcUIsT0FBckI7QUFDQUosaUJBQUssQ0FBQ2xCLEtBQU4sQ0FBWUssV0FBWixHQUEwQmdCLEVBQUUsQ0FBQ2hCLFdBQTdCO0FBRUFrQixzREFBSSxDQUFDQyxXQUFMLENBQWlCTixLQUFqQjtBQUVBLGdCQUFJbEIsS0FBSyxHQUFHa0IsS0FBSyxDQUFDakIsWUFBTixJQUFzQkMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QmUsS0FBeEIsQ0FBbEM7QUFDQUgsYUFBQyxJQUFJRyxLQUFLLENBQUN2QixXQUFOLEdBQW9CUyxRQUFRLENBQUNKLEtBQUssQ0FBQ0ssV0FBUCxDQUFqQztBQUVBa0Isc0RBQUksQ0FBQ0UsV0FBTCxDQUFpQlAsS0FBakI7O0FBR0EsZ0JBQUdILENBQUMsR0FBR3RCLFNBQVAsRUFBa0I7QUFDakJNLGdCQUFFLENBQUNPLFNBQUgsQ0FBYW9CLE1BQWIsQ0FBb0Isb0JBQXBCO0FBQ0E7O0FBRUQsZ0JBQUcsQ0FBQzNCLEVBQUUsQ0FBQ08sU0FBSCxDQUFhcUIsUUFBYixDQUFzQixvQkFBdEIsQ0FBSixFQUFpRDtBQUNoRGYsbUJBQUs7QUFDTDtBQUVELFdBekJEOztBQTJCQSxjQUFHQSxLQUFLLEtBQUtGLE9BQU8sQ0FBQ2tCLE1BQXJCLEVBQTZCO0FBQzVCcEIsK0RBQWEsQ0FBQ1IsS0FBZCxDQUFvQlMsT0FBcEIsR0FBOEIsTUFBOUI7QUFDQTtBQUVELFNBcENEO0FBc0NBOztBQUNEdEIsVUFBSSxHQUFHLElBQVA7QUFDQSxLQWpFYztBQWtFZjBDLFdBQU8sRUFBRSxpQkFBQXRDLEtBQUs7QUFBQSxhQUFJdUMsT0FBTyxDQUFDQyxJQUFSLFdBQWdCeEMsS0FBSyxDQUFDQyxFQUF0QixnQkFBSjtBQUFBLEtBbEVDO0FBa0UwQztBQUN6RHdDLGVBQVcsRUFBRSxrQkFuRUU7QUFtRWtCO0FBQ2pDQyxnQkFBWSxFQUFFLG1CQXBFQztBQW9Fb0I7QUFDbkNDLGFBQVMsRUFBRTtBQXJFSSxHQUFoQixFQUYwQixDQTBFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVEO0FBQ0E7QUFDQTtBQUNDLENBbkZEOztBQXNGZWhELDRFQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL2luaXRXb3JrUG9wdXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7TWljcm9Nb2RhbH0gZnJvbSAnLi4vLi4vbGlicy9saWJzJ1xyXG5cclxuaW1wb3J0IHttb2RhbFJvd01lZGlhV3JhcHBlcixtb2RhbFJvd01lZGlhLG1lZGlhU2hvd01vcmUsIGJvZHl9IGZyb20gJy4uL3ZpZXcnXHJcblxyXG5cclxuY29uc3QgaW5pdFdvcmtQb3B1cCA9ICgpPT4ge1xyXG5cdGxldCBzaG93ID0gZmFsc2VcclxuXHRNaWNyb01vZGFsLmluaXQoe1xyXG4gIG9uU2hvdzogbW9kYWwgPT4ge1xyXG4gIFx0aWYobW9kYWwuaWQgPT09ICdtb2RhbC0xJykge1xyXG4gIFx0XHRsZXQgd3JhcFdpZHRoID0gbW9kYWxSb3dNZWRpYVdyYXBwZXIub2Zmc2V0V2lkdGhcclxuICBcdFx0bGV0IHdpZHRoID0gMFxyXG4gIFx0XHRcclxuXHJcbiAgXHRcdG1vZGFsUm93TWVkaWEuZm9yRWFjaChlbD0+IHtcclxuICBcdFx0XHRsZXQgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpXHJcbiAgXHRcdFx0d2lkdGggKz0gZWwub2Zmc2V0V2lkdGggKyBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodClcclxuXHJcbiAgXHRcdFx0aWYod2lkdGggPiB3cmFwV2lkdGgpIHtcclxuICBcdFx0XHRcdC8vIG1lZGlhU2hvd01vcmUuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcclxuICBcdFx0XHRcdGlmKCFzaG93KSB7XHJcbiAgXHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbi1yb3ctb3BhY2l0eScpXHJcbiAgXHRcdFx0XHR9XHRcclxuXHJcbiAgXHRcdFx0XHRtZWRpYVNob3dNb3JlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXHJcbiAgXHRcdFx0fVxyXG4gIFx0XHR9KVxyXG5cclxuICBcdFx0Ly8gY29uc29sZS5sb2coailcclxuICBcdFx0XHJcbiAgXHRcdGxldCByb3dzQWJzID0gbW9kYWxSb3dNZWRpYVdyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmhpZGRlbi1yb3ctb3BhY2l0eScpXHJcbiAgXHRcdGxldCBjb3VudCA9IDBcclxuICBcdFx0bWVkaWFTaG93TW9yZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgXHRcdFx0XHJcbiAgXHRcdFx0bGV0IHJvd3MgPSBtb2RhbFJvd01lZGlhV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCcuaGlkZGVuLXJvdy1vcGFjaXR5JylcclxuICBcdFx0XHRsZXQgaiA9IDBcclxuXHJcbiAgXHRcdFx0cm93cy5mb3JFYWNoKChlbCwgaSwgYXJyKSA9PiB7XHJcbiAgXHRcdFx0XHRsZXQgY2xvbmUgPSBlbC5xdWVyeVNlbGVjdG9yKCdpbWcnKS5jbG9uZU5vZGUoKVxyXG4gIFx0XHRcdFx0bGV0IG1yID0gZWwuY3VycmVudFN0eWxlIHx8IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVxyXG5cclxuICBcdFx0XHRcdGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXHJcbiAgXHRcdFx0XHRjbG9uZS5zdHlsZS53aWR0aCA9ICdhdXRvJ1xyXG4gIFx0XHRcdFx0Y2xvbmUuc3R5bGUuaGVpZ2h0ID0gJzEwMHB4J1xyXG4gIFx0XHRcdFx0Y2xvbmUuc3R5bGUubWFyZ2luUmlnaHQgPSBtci5tYXJnaW5SaWdodFxyXG5cclxuICBcdFx0XHRcdGJvZHkuYXBwZW5kQ2hpbGQoY2xvbmUpXHJcbiAgXHRcdFx0XHRcclxuICBcdFx0XHRcdGxldCBzdHlsZSA9IGNsb25lLmN1cnJlbnRTdHlsZSB8fCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjbG9uZSlcclxuICBcdFx0XHRcdGogKz0gY2xvbmUub2Zmc2V0V2lkdGggKyBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodClcclxuXHJcbiAgXHRcdFx0XHRib2R5LnJlbW92ZUNoaWxkKGNsb25lKVxyXG5cclxuXHJcbiAgXHRcdFx0XHRpZihqIDwgd3JhcFdpZHRoKSB7XHJcbiAgXHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbi1yb3ctb3BhY2l0eScpXHJcbiAgXHRcdFx0XHR9XHJcblxyXG4gIFx0XHRcdFx0aWYoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuLXJvdy1vcGFjaXR5JykpIHtcclxuICBcdFx0XHRcdFx0Y291bnQrK1xyXG4gIFx0XHRcdFx0fVxyXG5cclxuICBcdFx0XHR9KVxyXG5cclxuICBcdFx0XHRpZihjb3VudCA9PT0gcm93c0Ficy5sZW5ndGgpIHtcclxuICBcdFx0XHRcdG1lZGlhU2hvd01vcmUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gIFx0XHRcdH1cclxuIFxyXG4gIFx0XHR9KVxyXG5cclxuICBcdH1cclxuICBcdHNob3cgPSB0cnVlXHJcbiAgfSxcclxuICBvbkNsb3NlOiBtb2RhbCA9PiBjb25zb2xlLmluZm8oYCR7bW9kYWwuaWR9IGlzIGhpZGRlbmApLCAvLyBbMl1cclxuICBvcGVuVHJpZ2dlcjogJ2RhdGEtY3VzdG9tLW9wZW4nLCAvLyBbM11cclxuICBjbG9zZVRyaWdnZXI6ICdkYXRhLWN1c3RvbS1jbG9zZScsIC8vIFs0XVxyXG4gIG9wZW5DbGFzczogJ2lzLW9wZW4nXHJcbn0pO1xyXG5cclxuXHQvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucm93JykuZm9yRWFjaChlbCA9PiB7XHJcblx0Ly8gXHRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcblx0Ly8gXHRcdE1pY3JvTW9kYWwuc2hvdygnbW9kYWwtMScpXHJcblx0Ly8gXHR9KVxyXG5cdC8vICB9KVxyXG5cclxuLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19idG4tMScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuLy8gXHRNaWNyb01vZGFsLnNob3coJ21vZGFsLTInKVxyXG4vLyB9KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdFdvcmtQb3B1cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/initWorkPopup.js\n");

/***/ }),

/***/ "./app/js/model/media.js":
/*!*******************************!*\
  !*** ./app/js/model/media.js ***!
  \*******************************/
/*! exports provided: checkMediaWidth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkMediaWidth\", function() { return checkMediaWidth; });\nvar checkMediaWidth = function checkMediaWidth(wrapper, medias) {// setTimeout(function(){\n  // \tconsole.log(wrapper.offsetWidth)\n  // }, 0)\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvbWVkaWEuanM/NmE3ZCJdLCJuYW1lcyI6WyJjaGVja01lZGlhV2lkdGgiLCJ3cmFwcGVyIiwibWVkaWFzIl0sIm1hcHBpbmdzIjoiQUFFQTtBQUFBO0FBQUEsSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUIsQ0FDNUM7QUFDQTtBQUNBO0FBRUEsQ0FMRCIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9tZWRpYS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuY29uc3QgY2hlY2tNZWRpYVdpZHRoID0gKHdyYXBwZXIsIG1lZGlhcykgPT4ge1xyXG5cdC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQvLyBcdGNvbnNvbGUubG9nKHdyYXBwZXIub2Zmc2V0V2lkdGgpXHJcblx0Ly8gfSwgMClcclxuXHRcclxufVxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0Y2hlY2tNZWRpYVdpZHRoXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/media.js\n");

/***/ }),

/***/ "./app/js/model/playAudioHover.js":
/*!****************************************!*\
  !*** ./app/js/model/playAudioHover.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// import {sidebarWrapper} from '../view'\nvar playAudioHover = function playAudioHover(items) {\n  var audio = document.createElement('audio'); // let source = document.createElement('source')\n  // let source2 = document.createElement('source')\n  // source.setAttribute('src', 'audio/click.mp3')\n  // source2.setAttribute('src', 'audio/click.ogg')\n\n  audio.innerHTML = \"\\n\\t<source src=\\\"audio/1.mp3\\\"><source>\\n\\n\\t\";\n  audio.muted = true;\n  audio.volume = 0.04; // items.forEach(item=> {\n  // \titem.addEventListener('mouseenter', async function(){\n  // \t\ttry{\n  // \t\t\tlet promise = await audio.play();\n  // \t\t}catch(e){\n  // \t\t\tconsole.error(e)\n  // \t\t}\n  // \t})\n  // \t// item.addEventListener('mouseleave', function(){\n  // \t// \taudio.pause();\n  // \t// })\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (playAudioHover);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvcGxheUF1ZGlvSG92ZXIuanM/ZmEzYSJdLCJuYW1lcyI6WyJwbGF5QXVkaW9Ib3ZlciIsIml0ZW1zIiwiYXVkaW8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJtdXRlZCIsInZvbHVtZSJdLCJtYXBwaW5ncyI6IkFBQ0E7QUFBQTtBQUVBLElBQU1BLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsS0FBRCxFQUFXO0FBQ2pDLE1BQUlDLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE9BQXZCLENBQVosQ0FEaUMsQ0FFakM7QUFDQTtBQUVBO0FBQ0E7O0FBR0FGLE9BQUssQ0FBQ0csU0FBTjtBQUlBSCxPQUFLLENBQUNJLEtBQU4sR0FBYyxJQUFkO0FBQ0FKLE9BQUssQ0FBQ0ssTUFBTixHQUFlLElBQWYsQ0FkaUMsQ0FnQmpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBN0JEOztBQWdDZVAsNkVBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvcGxheUF1ZGlvSG92ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy8gaW1wb3J0IHtzaWRlYmFyV3JhcHBlcn0gZnJvbSAnLi4vdmlldydcclxuXHJcbmNvbnN0IHBsYXlBdWRpb0hvdmVyID0gKGl0ZW1zKSA9PiB7XHJcblx0bGV0IGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKVxyXG5cdC8vIGxldCBzb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKVxyXG5cdC8vIGxldCBzb3VyY2UyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJylcclxuXHJcblx0Ly8gc291cmNlLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2F1ZGlvL2NsaWNrLm1wMycpXHJcblx0Ly8gc291cmNlMi5zZXRBdHRyaWJ1dGUoJ3NyYycsICdhdWRpby9jbGljay5vZ2cnKVxyXG5cclxuXHJcblx0YXVkaW8uaW5uZXJIVE1MID0gYFxyXG5cdDxzb3VyY2Ugc3JjPVwiYXVkaW8vMS5tcDNcIj48c291cmNlPlxyXG5cclxuXHRgXHJcblx0YXVkaW8ubXV0ZWQgPSB0cnVlXHJcblx0YXVkaW8udm9sdW1lID0gMC4wNFxyXG5cclxuXHQvLyBpdGVtcy5mb3JFYWNoKGl0ZW09PiB7XHJcblx0Ly8gXHRpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBhc3luYyBmdW5jdGlvbigpe1xyXG5cdC8vIFx0XHR0cnl7XHJcblx0Ly8gXHRcdFx0bGV0IHByb21pc2UgPSBhd2FpdCBhdWRpby5wbGF5KCk7XHJcblx0Ly8gXHRcdH1jYXRjaChlKXtcclxuXHQvLyBcdFx0XHRjb25zb2xlLmVycm9yKGUpXHJcblx0Ly8gXHRcdH1cclxuXHRcdFx0XHJcblx0Ly8gXHR9KVxyXG5cdC8vIFx0Ly8gaXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcclxuXHQvLyBcdC8vIFx0YXVkaW8ucGF1c2UoKTtcclxuXHQvLyBcdC8vIH0pXHJcblx0Ly8gfSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBsYXlBdWRpb0hvdmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/playAudioHover.js\n");

/***/ }),

/***/ "./app/js/model/setFeedbacklDate.js":
/*!******************************************!*\
  !*** ./app/js/model/setFeedbacklDate.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar setFeedbackDate = function setFeedbackDate(input) {\n  input.value = new Date().toLocaleDateString();\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (setFeedbackDate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2V0RmVlZGJhY2tsRGF0ZS5qcz9mZDVhIl0sIm5hbWVzIjpbInNldEZlZWRiYWNrRGF0ZSIsImlucHV0IiwidmFsdWUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFFQTtBQUFBLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsS0FBRCxFQUFXO0FBQ2xDQSxPQUFLLENBQUNDLEtBQU4sR0FBYyxJQUFJQyxJQUFKLEdBQVdDLGtCQUFYLEVBQWQ7QUFDQSxDQUZEOztBQUtlSiw4RUFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9zZXRGZWVkYmFja2xEYXRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5jb25zdCBzZXRGZWVkYmFja0RhdGUgPSAoaW5wdXQpID0+IHtcclxuXHRpbnB1dC52YWx1ZSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNldEZlZWRiYWNrRGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/setFeedbacklDate.js\n");

/***/ }),

/***/ "./app/js/model/show1rowFeedback.js":
/*!******************************************!*\
  !*** ./app/js/model/show1rowFeedback.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar show1Row = function show1Row(btn, blocks) {// console.log(btn, blocks)\n  // let rows = block.querySelectorAll('.hidden-row')\n  // if(rows.length) {\n  // \tbtn.style.display = 'block'\n  // }\n  // btn.addEventListener('click', function(){\n  // \tlet rows = block.querySelectorAll('.hidden-row')\n  // \trows.forEach((row, i, arr)=> {\n  // \t\tif(i < 5) {\n  // \t\t\trow.classList.remove('hidden-row')\n  // \t\t}\n  // \t})\n  // \tconsole.log(rows)\n  // \tif(rows.length < 5) {\n  // \t\tbtn.style.display = 'none'\n  // \t}\n  // })\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (show1Row);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2hvdzFyb3dGZWVkYmFjay5qcz8wZDg4Il0sIm5hbWVzIjpbInNob3cxUm93IiwiYnRuIiwiYmxvY2tzIl0sIm1hcHBpbmdzIjoiQUFHQTtBQUFBLElBQU1BLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNDLEdBQUQsRUFBTUMsTUFBTixFQUFpQixDQUVqQztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0EsQ0F2QkQ7O0FBMEJlRix1RUFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9zaG93MXJvd0ZlZWRiYWNrLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5cclxuY29uc3Qgc2hvdzFSb3cgPSAoYnRuLCBibG9ja3MpID0+IHtcclxuXHJcblx0Ly8gY29uc29sZS5sb2coYnRuLCBibG9ja3MpXHJcblx0Ly8gbGV0IHJvd3MgPSBibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuaGlkZGVuLXJvdycpXHJcblxyXG5cdC8vIGlmKHJvd3MubGVuZ3RoKSB7XHJcblx0Ly8gXHRidG4uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcclxuXHQvLyB9XHJcblxyXG5cdC8vIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcblx0Ly8gXHRsZXQgcm93cyA9IGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5oaWRkZW4tcm93JylcclxuXHQvLyBcdHJvd3MuZm9yRWFjaCgocm93LCBpLCBhcnIpPT4ge1xyXG5cdC8vIFx0XHRpZihpIDwgNSkge1xyXG5cdC8vIFx0XHRcdHJvdy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4tcm93JylcclxuXHQvLyBcdFx0fVxyXG5cdFxyXG5cdC8vIFx0fSlcclxuXHQvLyBcdGNvbnNvbGUubG9nKHJvd3MpXHJcblx0Ly8gXHRpZihyb3dzLmxlbmd0aCA8IDUpIHtcclxuXHQvLyBcdFx0YnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuXHQvLyBcdH1cclxuXHJcblx0Ly8gfSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNob3cxUm93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/show1rowFeedback.js\n");

/***/ }),

/***/ "./app/js/model/show5Rows.js":
/*!***********************************!*\
  !*** ./app/js/model/show5Rows.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar show5Rows = function show5Rows(btn, block) {\n  var rows = block.querySelectorAll('.hidden-row');\n\n  if (rows.length) {\n    btn.style.display = 'block';\n  }\n\n  btn.addEventListener('click', function () {\n    var rows = block.querySelectorAll('.hidden-row');\n    rows.forEach(function (row, i, arr) {\n      if (i < 5) {\n        row.classList.remove('hidden-row');\n      }\n    }); // console.log(rows)\n\n    if (rows.length < 5) {\n      btn.style.display = 'none';\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (show5Rows);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2hvdzVSb3dzLmpzPzM1MmYiXSwibmFtZXMiOlsic2hvdzVSb3dzIiwiYnRuIiwiYmxvY2siLCJyb3dzIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsInN0eWxlIiwiZGlzcGxheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb3JFYWNoIiwicm93IiwiaSIsImFyciIsImNsYXNzTGlzdCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBR0E7QUFBQSxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDQyxHQUFELEVBQU1DLEtBQU4sRUFBZ0I7QUFDakMsTUFBSUMsSUFBSSxHQUFHRCxLQUFLLENBQUNFLGdCQUFOLENBQXVCLGFBQXZCLENBQVg7O0FBRUEsTUFBR0QsSUFBSSxDQUFDRSxNQUFSLEVBQWdCO0FBQ2ZKLE9BQUcsQ0FBQ0ssS0FBSixDQUFVQyxPQUFWLEdBQW9CLE9BQXBCO0FBQ0E7O0FBRUROLEtBQUcsQ0FBQ08sZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEIsWUFBVTtBQUN2QyxRQUFJTCxJQUFJLEdBQUdELEtBQUssQ0FBQ0UsZ0JBQU4sQ0FBdUIsYUFBdkIsQ0FBWDtBQUNBRCxRQUFJLENBQUNNLE9BQUwsQ0FBYSxVQUFDQyxHQUFELEVBQU1DLENBQU4sRUFBU0MsR0FBVCxFQUFnQjtBQUM1QixVQUFHRCxDQUFDLEdBQUcsQ0FBUCxFQUFVO0FBQ1RELFdBQUcsQ0FBQ0csU0FBSixDQUFjQyxNQUFkLENBQXFCLFlBQXJCO0FBQ0E7QUFFRCxLQUxELEVBRnVDLENBUXZDOztBQUNBLFFBQUdYLElBQUksQ0FBQ0UsTUFBTCxHQUFjLENBQWpCLEVBQW9CO0FBQ25CSixTQUFHLENBQUNLLEtBQUosQ0FBVUMsT0FBVixHQUFvQixNQUFwQjtBQUNBO0FBRUQsR0FiRDtBQWNBLENBckJEOztBQXdCZVAsd0VBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvc2hvdzVSb3dzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5cclxuY29uc3Qgc2hvdzVSb3dzID0gKGJ0biwgYmxvY2spID0+IHtcclxuXHRsZXQgcm93cyA9IGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5oaWRkZW4tcm93JylcclxuXHJcblx0aWYocm93cy5sZW5ndGgpIHtcclxuXHRcdGJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG5cdH1cclxuXHJcblx0YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuXHRcdGxldCByb3dzID0gYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmhpZGRlbi1yb3cnKVxyXG5cdFx0cm93cy5mb3JFYWNoKChyb3csIGksIGFycik9PiB7XHJcblx0XHRcdGlmKGkgPCA1KSB7XHJcblx0XHRcdFx0cm93LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbi1yb3cnKVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHR9KVxyXG5cdFx0Ly8gY29uc29sZS5sb2cocm93cylcclxuXHRcdGlmKHJvd3MubGVuZ3RoIDwgNSkge1xyXG5cdFx0XHRidG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG5cdFx0fVxyXG5cclxuXHR9KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2hvdzVSb3dzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/show5Rows.js\n");

/***/ }),

/***/ "./app/js/model/showRemoveBtnOnChecking.js":
/*!*************************************************!*\
  !*** ./app/js/model/showRemoveBtnOnChecking.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar showRemoveBtnOnChecking = function showRemoveBtnOnChecking() {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (showRemoveBtnOnChecking);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2hvd1JlbW92ZUJ0bk9uQ2hlY2tpbmcuanM/YmRhMCJdLCJuYW1lcyI6WyJzaG93UmVtb3ZlQnRuT25DaGVja2luZyJdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQSxJQUFNQSx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLEdBQU0sQ0FFckMsQ0FGRDs7QUFJZUEsc0ZBQWYiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvc2hvd1JlbW92ZUJ0bk9uQ2hlY2tpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IHNob3dSZW1vdmVCdG5PbkNoZWNraW5nID0gKCkgPT4ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2hvd1JlbW92ZUJ0bk9uQ2hlY2tpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/showRemoveBtnOnChecking.js\n");

/***/ }),

/***/ "./app/js/model/sidebarListsToggle.js":
/*!********************************************!*\
  !*** ./app/js/model/sidebarListsToggle.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// import {OverlayScrollbars} from '../../libs/libs'\n// import {sidebarWrapper} from '../view'\nvar sidebarListsToggle = function sidebarListsToggle(items) {\n  items.forEach(function (item, i, arr) {\n    item.addEventListener('click', function () {\n      arr.forEach(function (a) {\n        a.classList.remove('active');\n      });\n      this.classList.add('active');\n    });\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (sidebarListsToggle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2lkZWJhckxpc3RzVG9nZ2xlLmpzP2ZhODIiXSwibmFtZXMiOlsic2lkZWJhckxpc3RzVG9nZ2xlIiwiaXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsImkiLCJhcnIiLCJhZGRFdmVudExpc3RlbmVyIiwiYSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBR0EsSUFBTUEsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFDQyxLQUFELEVBQVU7QUFDcENBLE9BQUssQ0FBQ0MsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBT0MsQ0FBUCxFQUFVQyxHQUFWLEVBQWlCO0FBRTlCRixRQUFJLENBQUNHLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFlBQVk7QUFDMUNELFNBQUcsQ0FBQ0gsT0FBSixDQUFZLFVBQUFLLENBQUMsRUFBRztBQUNmQSxTQUFDLENBQUNDLFNBQUYsQ0FBWUMsTUFBWixDQUFtQixRQUFuQjtBQUNBLE9BRkQ7QUFHQSxXQUFLRCxTQUFMLENBQWVFLEdBQWYsQ0FBbUIsUUFBbkI7QUFDQSxLQUxEO0FBTUEsR0FSRDtBQVNBLENBVkQ7O0FBZWVWLGlGQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL3NpZGViYXJMaXN0c1RvZ2dsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7T3ZlcmxheVNjcm9sbGJhcnN9IGZyb20gJy4uLy4uL2xpYnMvbGlicydcclxuLy8gaW1wb3J0IHtzaWRlYmFyV3JhcHBlcn0gZnJvbSAnLi4vdmlldydcclxuXHJcblxyXG5jb25zdCBzaWRlYmFyTGlzdHNUb2dnbGUgPSAoaXRlbXMpPT4ge1xyXG5cdGl0ZW1zLmZvckVhY2goKGl0ZW0sIGksIGFycik9PiB7XHJcblx0XHRcclxuXHRcdGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGFyci5mb3JFYWNoKGE9PiB7XHJcblx0XHRcdFx0YS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG5cdFx0XHR9KVxyXG5cdFx0XHR0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcblx0XHR9KVxyXG5cdH0pXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNpZGViYXJMaXN0c1RvZ2dsZVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/sidebarListsToggle.js\n");

/***/ }),

/***/ "./app/js/model/sidebarSearchInput.js":
/*!********************************************!*\
  !*** ./app/js/model/sidebarSearchInput.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar sidebarSearchInput = function sidebarSearchInput(input) {\n  var parent = input.parentNode,\n      searchIcon = parent.querySelector('.search-icon'),\n      removeIcon = parent.querySelector('.remove-icon');\n  input.addEventListener('click', function (e) {\n    if (this.value !== '') {\n      this.select();\n    }\n  });\n  input.addEventListener('input', function (e) {\n    if (this.value !== '') {\n      searchIcon.classList.add('hidden');\n      removeIcon.classList.remove('hidden');\n    } else {\n      searchIcon.classList.remove('hidden');\n      removeIcon.classList.add('hidden');\n    }\n  });\n  removeIcon.addEventListener('click', function (e) {\n    input.value = '';\n    searchIcon.classList.remove('hidden');\n    removeIcon.classList.add('hidden');\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (sidebarSearchInput);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvc2lkZWJhclNlYXJjaElucHV0LmpzP2U0YzQiXSwibmFtZXMiOlsic2lkZWJhclNlYXJjaElucHV0IiwiaW5wdXQiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwic2VhcmNoSWNvbiIsInF1ZXJ5U2VsZWN0b3IiLCJyZW1vdmVJY29uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ2YWx1ZSIsInNlbGVjdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQSxJQUFNQSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNDLEtBQUQsRUFBVTtBQUNwQyxNQUFJQyxNQUFNLEdBQUdELEtBQUssQ0FBQ0UsVUFBbkI7QUFBQSxNQUNBQyxVQUFVLEdBQUdGLE1BQU0sQ0FBQ0csYUFBUCxDQUFxQixjQUFyQixDQURiO0FBQUEsTUFFQUMsVUFBVSxHQUFHSixNQUFNLENBQUNHLGFBQVAsQ0FBcUIsY0FBckIsQ0FGYjtBQUlBSixPQUFLLENBQUNNLGdCQUFOLENBQXVCLE9BQXZCLEVBQWdDLFVBQVNDLENBQVQsRUFBVztBQUMxQyxRQUFHLEtBQUtDLEtBQUwsS0FBZSxFQUFsQixFQUFzQjtBQUNyQixXQUFLQyxNQUFMO0FBQ0E7QUFDRCxHQUpEO0FBS0FULE9BQUssQ0FBQ00sZ0JBQU4sQ0FBdUIsT0FBdkIsRUFBZ0MsVUFBU0MsQ0FBVCxFQUFXO0FBQ3pDLFFBQUcsS0FBS0MsS0FBTCxLQUFlLEVBQWxCLEVBQXNCO0FBQ3JCTCxnQkFBVSxDQUFDTyxTQUFYLENBQXFCQyxHQUFyQixDQUF5QixRQUF6QjtBQUNBTixnQkFBVSxDQUFDSyxTQUFYLENBQXFCRSxNQUFyQixDQUE0QixRQUE1QjtBQUNBLEtBSEQsTUFHTztBQUNOVCxnQkFBVSxDQUFDTyxTQUFYLENBQXFCRSxNQUFyQixDQUE0QixRQUE1QjtBQUNBUCxnQkFBVSxDQUFDSyxTQUFYLENBQXFCQyxHQUFyQixDQUF5QixRQUF6QjtBQUNBO0FBQ0YsR0FSRDtBQVVBTixZQUFVLENBQUNDLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFVBQVNDLENBQVQsRUFBVztBQUMvQ1AsU0FBSyxDQUFDUSxLQUFOLEdBQWMsRUFBZDtBQUNBTCxjQUFVLENBQUNPLFNBQVgsQ0FBcUJFLE1BQXJCLENBQTRCLFFBQTVCO0FBQ0FQLGNBQVUsQ0FBQ0ssU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsUUFBekI7QUFDQSxHQUpEO0FBS0EsQ0F6QkQ7O0FBNEJlWixpRkFBZiIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9zaWRlYmFyU2VhcmNoSW5wdXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNvbnN0IHNpZGViYXJTZWFyY2hJbnB1dCA9IChpbnB1dCk9PiB7XHJcblx0bGV0IHBhcmVudCA9IGlucHV0LnBhcmVudE5vZGUsXHJcblx0c2VhcmNoSWNvbiA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLWljb24nKSxcclxuXHRyZW1vdmVJY29uID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdmUtaWNvbicpO1xyXG5cclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0aWYodGhpcy52YWx1ZSAhPT0gJycpIHtcclxuXHRcdFx0dGhpcy5zZWxlY3QoKVxyXG5cdFx0fVxyXG5cdH0pXHJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0aWYodGhpcy52YWx1ZSAhPT0gJycpIHtcclxuXHRcdFx0XHRzZWFyY2hJY29uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXHJcblx0XHRcdFx0cmVtb3ZlSWNvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlYXJjaEljb24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcclxuXHRcdFx0XHRyZW1vdmVJY29uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXHJcblx0XHRcdH1cclxuXHR9KVxyXG5cclxuXHRyZW1vdmVJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XHJcblx0XHRpbnB1dC52YWx1ZSA9ICcnXHJcblx0XHRzZWFyY2hJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXHJcblx0XHRyZW1vdmVJY29uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXHJcblx0fSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNpZGViYXJTZWFyY2hJbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/model/sidebarSearchInput.js\n");

/***/ }),

/***/ "./app/js/model/testing.js":
/*!*********************************!*\
  !*** ./app/js/model/testing.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\nvar test = function test() {\n  _view__WEBPACK_IMPORTED_MODULE_0__[\"body\"].addEventListener('input', some);\n  _view__WEBPACK_IMPORTED_MODULE_0__[\"body\"].addEventListener('change', some);\n\n  function some(e) {\n    if (e.target.dataset.elastic === 'true') {\n      var elem = e.target,\n          heightLimit = 30000;\n      elem.style.height = \"\";\n      elem.style.height = Math.min(elem.scrollHeight, heightLimit) + \"px\";\n    }\n  } // function elasticArea() {\n  //   $('.js-elasticArea').each(function(index, element) {\n  //      var elasticElement = element,\n  //         $elasticElement = $(element),\n  //         initialHeight = initialHeight || $elasticElement.height(),\n  //         delta = parseInt( $elasticElement.css('paddingBottom') ) + parseInt( $elasticElement.css('paddingTop') ) || 0,\n  //         resize = function() {\n  //           $elasticElement.height(initialHeight);\n  //           $elasticElement.height( elasticElement.scrollHeight - delta );\n  //       };\n  //     $elasticElement.on('input change keyup', resize);\n  //     resize();\n  //   });\n  // };\n  //Init function in the view\n  // elasticArea();\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (test);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvdGVzdGluZy5qcz9iNjM1Il0sIm5hbWVzIjpbInRlc3QiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNvbWUiLCJlIiwidGFyZ2V0IiwiZGF0YXNldCIsImVsYXN0aWMiLCJlbGVtIiwiaGVpZ2h0TGltaXQiLCJzdHlsZSIsImhlaWdodCIsIk1hdGgiLCJtaW4iLCJzY3JvbGxIZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFDO0FBQUE7QUFBQTs7QUFFQSxJQUFNQSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFJO0FBR2xCQyw0Q0FBSSxDQUFDQyxnQkFBTCxDQUFzQixPQUF0QixFQUErQkMsSUFBL0I7QUFDQUYsNENBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0IsUUFBdEIsRUFBZ0NDLElBQWhDOztBQUlBLFdBQVNBLElBQVQsQ0FBY0MsQ0FBZCxFQUFnQjtBQUNkLFFBQUdBLENBQUMsQ0FBQ0MsTUFBRixDQUFTQyxPQUFULENBQWlCQyxPQUFqQixLQUE2QixNQUFoQyxFQUF3QztBQUV2QyxVQUFJQyxJQUFJLEdBQUdKLENBQUMsQ0FBQ0MsTUFBYjtBQUFBLFVBQ0FJLFdBQVcsR0FBRyxLQURkO0FBR0FELFVBQUksQ0FBQ0UsS0FBTCxDQUFXQyxNQUFYLEdBQW9CLEVBQXBCO0FBQ0NILFVBQUksQ0FBQ0UsS0FBTCxDQUFXQyxNQUFYLEdBQW9CQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0wsSUFBSSxDQUFDTSxZQUFkLEVBQTRCTCxXQUE1QixJQUEyQyxJQUEvRDtBQUVGO0FBQ0QsR0FsQmlCLENBdUJoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7QUFLRCxDQTlDQTs7QUFpRGNULG1FQUFmIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL3Rlc3RpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgaW1wb3J0IHtib2R5fSBmcm9tICcuLi92aWV3J1xyXG5cclxuIGNvbnN0IHRlc3QgPSAoKT0+e1xyXG5cclxuXHJcbmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBzb21lKVxyXG5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNvbWUpXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNvbWUoZSl7XHJcblx0XHRpZihlLnRhcmdldC5kYXRhc2V0LmVsYXN0aWMgPT09ICd0cnVlJykge1xyXG5cclxuXHRcdFx0bGV0IGVsZW0gPSBlLnRhcmdldCxcclxuXHRcdFx0aGVpZ2h0TGltaXQgPSAzMDAwMDtcclxuXHJcblx0XHRcdGVsZW0uc3R5bGUuaGVpZ2h0ID0gXCJcIjtcclxuICBcdFx0ZWxlbS5zdHlsZS5oZWlnaHQgPSBNYXRoLm1pbihlbGVtLnNjcm9sbEhlaWdodCwgaGVpZ2h0TGltaXQpICsgXCJweFwiO1xyXG5cclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiAgLy8gZnVuY3Rpb24gZWxhc3RpY0FyZWEoKSB7XHJcbiAgLy8gICAkKCcuanMtZWxhc3RpY0FyZWEnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgLy8gICAgICB2YXIgZWxhc3RpY0VsZW1lbnQgPSBlbGVtZW50LFxyXG4gIC8vICAgICAgICAgJGVsYXN0aWNFbGVtZW50ID0gJChlbGVtZW50KSxcclxuICAvLyAgICAgICAgIGluaXRpYWxIZWlnaHQgPSBpbml0aWFsSGVpZ2h0IHx8ICRlbGFzdGljRWxlbWVudC5oZWlnaHQoKSxcclxuICAvLyAgICAgICAgIGRlbHRhID0gcGFyc2VJbnQoICRlbGFzdGljRWxlbWVudC5jc3MoJ3BhZGRpbmdCb3R0b20nKSApICsgcGFyc2VJbnQoICRlbGFzdGljRWxlbWVudC5jc3MoJ3BhZGRpbmdUb3AnKSApIHx8IDAsXHJcbiAgLy8gICAgICAgICByZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAvLyAgICAgICAgICAgJGVsYXN0aWNFbGVtZW50LmhlaWdodChpbml0aWFsSGVpZ2h0KTtcclxuICAvLyAgICAgICAgICAgJGVsYXN0aWNFbGVtZW50LmhlaWdodCggZWxhc3RpY0VsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZGVsdGEgKTtcclxuICAvLyAgICAgICB9O1xyXG4gICAgICBcclxuICAvLyAgICAgJGVsYXN0aWNFbGVtZW50Lm9uKCdpbnB1dCBjaGFuZ2Uga2V5dXAnLCByZXNpemUpO1xyXG4gIC8vICAgICByZXNpemUoKTtcclxuICAvLyAgIH0pO1xyXG4gICAgXHJcbiAgLy8gfTtcclxuXHJcbiAgLy9Jbml0IGZ1bmN0aW9uIGluIHRoZSB2aWV3XHJcbiAgLy8gZWxhc3RpY0FyZWEoKTtcclxuICBcclxuXHJcblxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/testing.js\n");

/***/ }),

/***/ "./app/js/view/index.js":
/*!******************************!*\
  !*** ./app/js/view/index.js ***!
  \******************************/
/*! exports provided: sidebarListItems, rows, countryTemplate, typeManufacturyTemplate, contactTemplate, lastContactTemplate, managersTemplate, intermediariesTemplate, vacanciesTemplate, sortingTemplate, typeFeedbackTemplate, choiceClientTemplate, workModalRows, workModalSidebar, body, workModalManagerSelect, workModalAddTask, sidebarSearchInput, workModalCountrySelect, workModalContactsHistory, sidebarLayout, workModalVacanciesHistory, modalRowMediaWrapper, modalRowMedia, modalRowLayer, contactsHistory, contactsHistoryShowMore, vacanciesHistory, vacanciesHistoryShowMore, manufacturyTypeAddItem, manufacturyType, contactsHistoryAddItem, workModalMediaLayer, mediaShowMore, workModalFeedbackDate, modal2ManagerSelect, modal2ContactSelect, modal2ContactDate, feedbackAddItem, addfeedbackForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidebarListItems\", function() { return sidebarListItems; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rows\", function() { return rows; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"countryTemplate\", function() { return countryTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typeManufacturyTemplate\", function() { return typeManufacturyTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contactTemplate\", function() { return contactTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lastContactTemplate\", function() { return lastContactTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"managersTemplate\", function() { return managersTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intermediariesTemplate\", function() { return intermediariesTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vacanciesTemplate\", function() { return vacanciesTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sortingTemplate\", function() { return sortingTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typeFeedbackTemplate\", function() { return typeFeedbackTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"choiceClientTemplate\", function() { return choiceClientTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalRows\", function() { return workModalRows; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalSidebar\", function() { return workModalSidebar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"body\", function() { return body; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalManagerSelect\", function() { return workModalManagerSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalAddTask\", function() { return workModalAddTask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidebarSearchInput\", function() { return sidebarSearchInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalCountrySelect\", function() { return workModalCountrySelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalContactsHistory\", function() { return workModalContactsHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidebarLayout\", function() { return sidebarLayout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalVacanciesHistory\", function() { return workModalVacanciesHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modalRowMediaWrapper\", function() { return modalRowMediaWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modalRowMedia\", function() { return modalRowMedia; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modalRowLayer\", function() { return modalRowLayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contactsHistory\", function() { return contactsHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contactsHistoryShowMore\", function() { return contactsHistoryShowMore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vacanciesHistory\", function() { return vacanciesHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vacanciesHistoryShowMore\", function() { return vacanciesHistoryShowMore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"manufacturyTypeAddItem\", function() { return manufacturyTypeAddItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"manufacturyType\", function() { return manufacturyType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contactsHistoryAddItem\", function() { return contactsHistoryAddItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalMediaLayer\", function() { return workModalMediaLayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mediaShowMore\", function() { return mediaShowMore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workModalFeedbackDate\", function() { return workModalFeedbackDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modal2ManagerSelect\", function() { return modal2ManagerSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modal2ContactSelect\", function() { return modal2ContactSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modal2ContactDate\", function() { return modal2ContactDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"feedbackAddItem\", function() { return feedbackAddItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addfeedbackForm\", function() { return addfeedbackForm; });\n// const sidebarWrapper = document.querySelector('.sidebar__wrapper');\nvar body = document.querySelector('body');\nvar sidebarListItems = document.querySelectorAll('.sidebar__list-item');\nvar rows = document.querySelectorAll('.row');\nvar sidebarSearchInput = document.querySelector('.sidebar__search-input');\nvar sidebarLayout = document.querySelector('.sidebar__layout'); ////Tooltips Templates\n\nvar countryTemplate = document.querySelector('#country-popup');\nvar typeManufacturyTemplate = document.querySelector('#type-manufactury-popup');\nvar contactTemplate = document.querySelector('#contact-popup');\nvar managersTemplate = document.querySelector('#managers-popup');\nvar intermediariesTemplate = document.querySelector('#intermediaries-popup');\nvar lastContactTemplate = document.querySelector('#last-contact-popup');\nvar vacanciesTemplate = document.querySelector('#vacancies-popup');\nvar sortingTemplate = document.querySelector('#sorting-popup');\nvar typeFeedbackTemplate = document.querySelector('#type-feedback-popup');\nvar choiceClientTemplate = document.querySelector('#choice-client-feedback-popup'); ///WorkModal elements\n\nvar workModalRows = document.querySelector('.work-modal .rows');\nvar workModalSidebar = document.querySelector('.work-modal .sidebar__layout');\nvar workModalAddTask = document.querySelector('.work-modal .add-task-group .add-item');\nvar workModalManagerSelect = document.querySelector('.work-modal .manager-select');\nvar modal2ManagerSelect = document.querySelector('#modal-2 .manager-select');\nvar modal2ContactSelect = document.querySelector('#modal-2 .contact-select');\nvar workModalCountrySelect = document.querySelector('.work-modal .country-select');\nvar workModalContactsHistory = document.querySelector('.work-modal .contacts-history .modal-row__layer');\nvar workModalVacanciesHistory = document.querySelector('.work-modal .vacancies-history .modal-row__layer');\nvar modalRowMediaWrapper = document.querySelector('.work-modal .modal-row__media-wrapper');\nvar modalRowMedia = document.querySelectorAll('.work-modal .modal-row__media');\nvar workModalMediaLayer = document.querySelector('.work-modal .media .modal-row__layer');\nvar mediaShowMore = document.querySelector('.work-modal .media .show-more');\nvar modalRowLayer = document.querySelectorAll('.work-modal .modal-row__layer');\nvar contactsHistory = document.querySelector('.work-modal .contacts-history');\nvar contactsHistoryShowMore = document.querySelector('.work-modal .contacts-history .show-more');\nvar vacanciesHistory = document.querySelector('.work-modal .vacancies-history');\nvar vacanciesHistoryShowMore = document.querySelector('.work-modal .vacancies-history .show-more');\nvar manufacturyTypeAddItem = document.querySelector('.work-modal .manufactury-type .add-item');\nvar manufacturyType = document.querySelector('.work-modal .manufactury-type');\nvar contactsHistoryAddItem = document.querySelector('.work-modal .contacts-history .add-item');\nvar workModalFeedbackDate = document.querySelector('.work-modal .modal-row__feedback-date input');\nvar modal2ContactDate = document.querySelector('#modal-2 .date-block input');\nvar feedbackAddItem = document.querySelector('.work-modal .feedback .add-item');\nvar addfeedbackForm = document.querySelector('.work-modal .feedback .add-feedback-form'); // Popups elements\n\nvar confirmBtnTypeFeedback = document.querySelector('#type-feedback-popup .confirm-btn');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/view/index.js\n");

/***/ }),

/***/ "./app/libs/libs.js":
/*!**************************!*\
  !*** ./app/libs/libs.js ***!
  \**************************/
/*! exports provided: OverlayScrollbars, MicroModal, tippy, Choices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var overlayscrollbars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! overlayscrollbars */ \"./node_modules/overlayscrollbars/js/OverlayScrollbars.js\");\n/* harmony import */ var overlayscrollbars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(overlayscrollbars__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"OverlayScrollbars\", function() { return overlayscrollbars__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MicroModal\", function() { return micromodal__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"./node_modules/tippy.js/dist/tippy.esm.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tippy\", function() { return tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var choices_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! choices.js */ \"./node_modules/choices.js/public/assets/scripts/choices.js\");\n/* harmony import */ var choices_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(choices_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"Choices\", function() { return choices_js__WEBPACK_IMPORTED_MODULE_3___default.a; });\n// import noUiSlider from 'nouislider'\n// import wNumb from 'wNumb'\n// import Chart from 'chart.js'\n\n\n\n // import { detectOverflow } from '@popperjs/core'\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGlicy9saWJzLmpzPzcxYWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FFQSIsImZpbGUiOiIuL2FwcC9saWJzL2xpYnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgbm9VaVNsaWRlciBmcm9tICdub3Vpc2xpZGVyJ1xyXG4vLyBpbXBvcnQgd051bWIgZnJvbSAnd051bWInXHJcbi8vIGltcG9ydCBDaGFydCBmcm9tICdjaGFydC5qcydcclxuaW1wb3J0IE92ZXJsYXlTY3JvbGxiYXJzIGZyb20gJ292ZXJsYXlzY3JvbGxiYXJzJ1xyXG5pbXBvcnQgTWljcm9Nb2RhbCBmcm9tICdtaWNyb21vZGFsJ1xyXG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnXHJcbmltcG9ydCBDaG9pY2VzIGZyb20gJ2Nob2ljZXMuanMnXHJcbi8vIGltcG9ydCB7IGRldGVjdE92ZXJmbG93IH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHtcclxuXHRPdmVybGF5U2Nyb2xsYmFycyxcclxuXHRNaWNyb01vZGFsLFxyXG5cdHRpcHB5LFxyXG5cdENob2ljZXNcclxuXHQvLyBkZXRlY3RPdmVyZmxvd1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/libs/libs.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzPzVhNDMiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQztBQUNuQyxNQUFJQSxHQUFHLElBQUksSUFBUCxJQUFlQSxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsTUFBN0IsRUFBcUNELEdBQUcsR0FBR0QsR0FBRyxDQUFDRSxNQUFWOztBQUVyQyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVKLEdBQVYsQ0FBdkIsRUFBdUNFLENBQUMsR0FBR0YsR0FBM0MsRUFBZ0RFLENBQUMsRUFBakQsRUFBcUQ7QUFDbkRDLFFBQUksQ0FBQ0QsQ0FBRCxDQUFKLEdBQVVILEdBQUcsQ0FBQ0csQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsU0FBT0MsSUFBUDtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLGlCQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcz8yMjM2Il0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMscUZBQUQsQ0FBOUI7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDO0FBQy9CLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixHQUFkLENBQUosRUFBd0IsT0FBT0gsZ0JBQWdCLENBQUNHLEdBQUQsQ0FBdkI7QUFDekI7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsa0JBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanM/MTFiMCJdLCJuYW1lcyI6WyJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiQXJyYXkiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUksT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDQyxRQUFQLElBQW1CQyxNQUFNLENBQUNILElBQUQsQ0FBOUQsRUFBc0UsT0FBT0ksS0FBSyxDQUFDQyxJQUFOLENBQVdMLElBQVgsQ0FBUDtBQUN2RTs7QUFFRE0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixnQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcz8wNjc2Il0sIm5hbWVzIjpbIl9ub25JdGVyYWJsZVNwcmVhZCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGtCQUFULEdBQThCO0FBQzVCLFFBQU0sSUFBSUMsU0FBSixDQUFjLHNJQUFkLENBQU47QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxrQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz80NDhhIl0sIm5hbWVzIjpbImFycmF5V2l0aG91dEhvbGVzIiwicmVxdWlyZSIsIml0ZXJhYmxlVG9BcnJheSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxpQkFBaUIsR0FBR0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUEvQjs7QUFFQSxJQUFJQyxlQUFlLEdBQUdELG1CQUFPLENBQUMsbUZBQUQsQ0FBN0I7O0FBRUEsSUFBSUUsMEJBQTBCLEdBQUdGLG1CQUFPLENBQUMseUdBQUQsQ0FBeEM7O0FBRUEsSUFBSUcsaUJBQWlCLEdBQUdILG1CQUFPLENBQUMsdUZBQUQsQ0FBL0I7O0FBRUEsU0FBU0ksa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDO0FBQy9CLFNBQU9OLGlCQUFpQixDQUFDTSxHQUFELENBQWpCLElBQTBCSixlQUFlLENBQUNJLEdBQUQsQ0FBekMsSUFBa0RILDBCQUEwQixDQUFDRyxHQUFELENBQTVFLElBQXFGRixpQkFBaUIsRUFBN0c7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxrQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toConsumableArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz82NjEzIl0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxnQkFBZ0IsR0FBR0MsbUJBQU8sQ0FBQyxxRkFBRCxDQUE5Qjs7QUFFQSxTQUFTQywyQkFBVCxDQUFxQ0MsQ0FBckMsRUFBd0NDLE1BQXhDLEVBQWdEO0FBQzlDLE1BQUksQ0FBQ0QsQ0FBTCxFQUFRO0FBQ1IsTUFBSSxPQUFPQSxDQUFQLEtBQWEsUUFBakIsRUFBMkIsT0FBT0gsZ0JBQWdCLENBQUNHLENBQUQsRUFBSUMsTUFBSixDQUF2QjtBQUMzQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTixDQUEvQixFQUFrQ08sS0FBbEMsQ0FBd0MsQ0FBeEMsRUFBMkMsQ0FBQyxDQUE1QyxDQUFSO0FBQ0EsTUFBSUwsQ0FBQyxLQUFLLFFBQU4sSUFBa0JGLENBQUMsQ0FBQ1EsV0FBeEIsRUFBcUNOLENBQUMsR0FBR0YsQ0FBQyxDQUFDUSxXQUFGLENBQWNDLElBQWxCO0FBQ3JDLE1BQUlQLENBQUMsS0FBSyxLQUFOLElBQWVBLENBQUMsS0FBSyxLQUF6QixFQUFnQyxPQUFPUSxLQUFLLENBQUNDLElBQU4sQ0FBV1gsQ0FBWCxDQUFQO0FBQ2hDLE1BQUlFLENBQUMsS0FBSyxXQUFOLElBQXFCLDJDQUEyQ1UsSUFBM0MsQ0FBZ0RWLENBQWhELENBQXpCLEVBQTZFLE9BQU9MLGdCQUFnQixDQUFDRyxDQUFELEVBQUlDLE1BQUosQ0FBdkI7QUFDOUU7O0FBRURZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsMkJBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return contains; });\nfunction contains(parent, child) {\n  // $FlowFixMe: hasOwnProperty doesn't seem to work in tests\n  var isShadow = Boolean(child.getRootNode && child.getRootNode().host); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (isShadow) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcz83ZjM3Il0sIm5hbWVzIjpbImNvbnRhaW5zIiwicGFyZW50IiwiY2hpbGQiLCJpc1NoYWRvdyIsIkJvb2xlYW4iLCJnZXRSb290Tm9kZSIsImhvc3QiLCJuZXh0IiwiaXNTYW1lTm9kZSIsInBhcmVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxRQUFULENBQWtCQyxNQUFsQixFQUEwQkMsS0FBMUIsRUFBaUM7QUFDOUM7QUFDQSxNQUFJQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDRyxXQUFOLElBQXFCSCxLQUFLLENBQUNHLFdBQU4sR0FBb0JDLElBQTFDLENBQXRCLENBRjhDLENBRXlCOztBQUV2RSxNQUFJTCxNQUFNLENBQUNELFFBQVAsQ0FBZ0JFLEtBQWhCLENBQUosRUFBNEI7QUFDMUIsV0FBTyxJQUFQO0FBQ0QsR0FGRCxDQUVFO0FBRkYsT0FHSyxJQUFJQyxRQUFKLEVBQWM7QUFDZixVQUFJSSxJQUFJLEdBQUdMLEtBQVg7O0FBRUEsU0FBRztBQUNELFlBQUlLLElBQUksSUFBSU4sTUFBTSxDQUFDTyxVQUFQLENBQWtCRCxJQUFsQixDQUFaLEVBQXFDO0FBQ25DLGlCQUFPLElBQVA7QUFDRCxTQUhBLENBR0M7OztBQUdGQSxZQUFJLEdBQUdBLElBQUksQ0FBQ0UsVUFBTCxJQUFtQkYsSUFBSSxDQUFDRCxJQUEvQjtBQUNELE9BUEQsUUFPU0MsSUFQVDtBQVFELEtBbEIyQyxDQWtCMUM7OztBQUdKLFNBQU8sS0FBUDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIC8vICRGbG93Rml4TWU6IGhhc093blByb3BlcnR5IGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGluIHRlc3RzXG4gIHZhciBpc1NoYWRvdyA9IEJvb2xlYW4oY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKS5ob3N0KTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAoaXNTaGFkb3cpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/contains.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getBoundingClientRect; });\nfunction getBoundingClientRect(element) {\n  var rect = element.getBoundingClientRect();\n  return {\n    width: rect.width,\n    height: rect.height,\n    top: rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    left: rect.left,\n    x: rect.left,\n    y: rect.top\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanM/MGY4OCJdLCJuYW1lcyI6WyJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50IiwicmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwieCIsInkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxxQkFBVCxDQUErQkMsT0FBL0IsRUFBd0M7QUFDckQsTUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUNELHFCQUFSLEVBQVg7QUFDQSxTQUFPO0FBQ0xHLFNBQUssRUFBRUQsSUFBSSxDQUFDQyxLQURQO0FBRUxDLFVBQU0sRUFBRUYsSUFBSSxDQUFDRSxNQUZSO0FBR0xDLE9BQUcsRUFBRUgsSUFBSSxDQUFDRyxHQUhMO0FBSUxDLFNBQUssRUFBRUosSUFBSSxDQUFDSSxLQUpQO0FBS0xDLFVBQU0sRUFBRUwsSUFBSSxDQUFDSyxNQUxSO0FBTUxDLFFBQUksRUFBRU4sSUFBSSxDQUFDTSxJQU5OO0FBT0xDLEtBQUMsRUFBRVAsSUFBSSxDQUFDTSxJQVBIO0FBUUxFLEtBQUMsRUFBRVIsSUFBSSxDQUFDRztBQVJILEdBQVA7QUFVRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IHJlY3QudG9wXG4gIH07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getClippingRect; });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getViewportRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\");\n/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\");\n/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./listScrollParents.js */ \"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\");\n/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contains.js */ \"./node_modules/@popperjs/core/lib/dom-utils/contains.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ \"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getInnerBoundingClientRect(element) {\n  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(element);\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent) {\n  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"viewport\"] ? Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(Object(_getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element)) : Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__[\"isHTMLElement\"])(clippingParent) ? getInnerBoundingClientRect(clippingParent) : Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(Object(_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = Object(_listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(element).position) >= 0;\n  var clipperElement = canEscapeClipping && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__[\"isHTMLElement\"])(element) ? Object(_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(element) : element;\n\n  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__[\"isElement\"])(clipperElement)) {\n    return [];\n  } // $FlowFixMe: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__[\"isElement\"])(clippingParent) && Object(_contains_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(clippingParent, clipperElement) && Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent);\n    accRect.top = Math.max(rect.top, accRect.top);\n    accRect.right = Math.min(rect.right, accRect.right);\n    accRect.bottom = Math.min(rect.bottom, accRect.bottom);\n    accRect.left = Math.max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getCompositeRect; });\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n\n\n\n\n\n\n // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var documentElement = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(offsetParent);\n  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(elementOrVirtualElement);\n  var isOffsetParentAnElement = Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__[\"isHTMLElement\"])(offsetParent);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(documentElement)) {\n      scroll = Object(_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(offsetParent);\n    }\n\n    if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__[\"isHTMLElement\"])(offsetParent)) {\n      offsets = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzP2QxMTYiXSwibmFtZXMiOlsiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsImRvY3VtZW50RWxlbWVudCIsImdldERvY3VtZW50RWxlbWVudCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJzY3JvbGwiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib2Zmc2V0cyIsIngiLCJ5IiwiZ2V0Tm9kZU5hbWUiLCJpc1Njcm9sbFBhcmVudCIsImdldE5vZGVTY3JvbGwiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsImhlaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ2tEO0FBQ2xEOztBQUVlLFNBQVNBLGdCQUFULENBQTBCQyx1QkFBMUIsRUFBbURDLFlBQW5ELEVBQWlFQyxPQUFqRSxFQUEwRTtBQUN2RixNQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFyQixFQUF3QjtBQUN0QkEsV0FBTyxHQUFHLEtBQVY7QUFDRDs7QUFFRCxNQUFJQyxlQUFlLEdBQUdDLHNFQUFrQixDQUFDSCxZQUFELENBQXhDO0FBQ0EsTUFBSUksSUFBSSxHQUFHQyx5RUFBcUIsQ0FBQ04sdUJBQUQsQ0FBaEM7QUFDQSxNQUFJTyx1QkFBdUIsR0FBR0Msb0VBQWEsQ0FBQ1AsWUFBRCxDQUEzQztBQUNBLE1BQUlRLE1BQU0sR0FBRztBQUNYQyxjQUFVLEVBQUUsQ0FERDtBQUVYQyxhQUFTLEVBQUU7QUFGQSxHQUFiO0FBSUEsTUFBSUMsT0FBTyxHQUFHO0FBQ1pDLEtBQUMsRUFBRSxDQURTO0FBRVpDLEtBQUMsRUFBRTtBQUZTLEdBQWQ7O0FBS0EsTUFBSVAsdUJBQXVCLElBQUksQ0FBQ0EsdUJBQUQsSUFBNEIsQ0FBQ0wsT0FBNUQsRUFBcUU7QUFDbkUsUUFBSWEsK0RBQVcsQ0FBQ2QsWUFBRCxDQUFYLEtBQThCLE1BQTlCLElBQXdDO0FBQzVDZSxzRUFBYyxDQUFDYixlQUFELENBRGQsRUFDaUM7QUFDL0JNLFlBQU0sR0FBR1EsaUVBQWEsQ0FBQ2hCLFlBQUQsQ0FBdEI7QUFDRDs7QUFFRCxRQUFJTyxvRUFBYSxDQUFDUCxZQUFELENBQWpCLEVBQWlDO0FBQy9CVyxhQUFPLEdBQUdOLHlFQUFxQixDQUFDTCxZQUFELENBQS9CO0FBQ0FXLGFBQU8sQ0FBQ0MsQ0FBUixJQUFhWixZQUFZLENBQUNpQixVQUExQjtBQUNBTixhQUFPLENBQUNFLENBQVIsSUFBYWIsWUFBWSxDQUFDa0IsU0FBMUI7QUFDRCxLQUpELE1BSU8sSUFBSWhCLGVBQUosRUFBcUI7QUFDMUJTLGFBQU8sQ0FBQ0MsQ0FBUixHQUFZTyx1RUFBbUIsQ0FBQ2pCLGVBQUQsQ0FBL0I7QUFDRDtBQUNGOztBQUVELFNBQU87QUFDTFUsS0FBQyxFQUFFUixJQUFJLENBQUNnQixJQUFMLEdBQVlaLE1BQU0sQ0FBQ0MsVUFBbkIsR0FBZ0NFLE9BQU8sQ0FBQ0MsQ0FEdEM7QUFFTEMsS0FBQyxFQUFFVCxJQUFJLENBQUNpQixHQUFMLEdBQVdiLE1BQU0sQ0FBQ0UsU0FBbEIsR0FBOEJDLE9BQU8sQ0FBQ0UsQ0FGcEM7QUFHTFMsU0FBSyxFQUFFbEIsSUFBSSxDQUFDa0IsS0FIUDtBQUlMQyxVQUFNLEVBQUVuQixJQUFJLENBQUNtQjtBQUpSLEdBQVA7QUFNRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCk7XG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getComputedStyle; });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\nfunction getComputedStyle(element) {\n  return Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element).getComputedStyle(element);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzP2I1MTkiXSwibmFtZXMiOlsiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnQiLCJnZXRXaW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2UsU0FBU0EsZ0JBQVQsQ0FBMEJDLE9BQTFCLEVBQW1DO0FBQ2hELFNBQU9DLDZEQUFTLENBQUNELE9BQUQsQ0FBVCxDQUFtQkQsZ0JBQW5CLENBQW9DQyxPQUFwQyxDQUFQO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getDocumentElement; });\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe: assume body is always available\n  return (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__[\"isElement\"])(element) ? element.ownerDocument : element.document).documentElement;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanM/ZWY1MiJdLCJuYW1lcyI6WyJnZXREb2N1bWVudEVsZW1lbnQiLCJlbGVtZW50IiwiaXNFbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNlLFNBQVNBLGtCQUFULENBQTRCQyxPQUE1QixFQUFxQztBQUNsRDtBQUNBLFNBQU8sQ0FBQ0MsZ0VBQVMsQ0FBQ0QsT0FBRCxDQUFULEdBQXFCQSxPQUFPLENBQUNFLGFBQTdCLEdBQTZDRixPQUFPLENBQUNHLFFBQXRELEVBQWdFQyxlQUF2RTtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IGVsZW1lbnQuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getDocumentRect; });\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n\n\n\n // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var winScroll = Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element);\n  var body = element.ownerDocument.body;\n  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element);\n  var y = -winScroll.scrollTop;\n\n  if (Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body || html).direction === 'rtl') {\n    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanM/M2U3OSJdLCJuYW1lcyI6WyJnZXREb2N1bWVudFJlY3QiLCJlbGVtZW50IiwiaHRtbCIsImdldERvY3VtZW50RWxlbWVudCIsIndpblNjcm9sbCIsImdldFdpbmRvd1Njcm9sbCIsImJvZHkiLCJvd25lckRvY3VtZW50Iiwid2lkdGgiLCJNYXRoIiwibWF4Iiwic2Nyb2xsV2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIngiLCJzY3JvbGxMZWZ0IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsInkiLCJzY3JvbGxUb3AiLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlyZWN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7Q0FDb0Q7QUFDcEQ7O0FBRWUsU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7QUFDL0MsTUFBSUMsSUFBSSxHQUFHQyxzRUFBa0IsQ0FBQ0YsT0FBRCxDQUE3QjtBQUNBLE1BQUlHLFNBQVMsR0FBR0MsbUVBQWUsQ0FBQ0osT0FBRCxDQUEvQjtBQUNBLE1BQUlLLElBQUksR0FBR0wsT0FBTyxDQUFDTSxhQUFSLENBQXNCRCxJQUFqQztBQUNBLE1BQUlFLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNSLElBQUksQ0FBQ1MsV0FBZCxFQUEyQlQsSUFBSSxDQUFDVSxXQUFoQyxFQUE2Q04sSUFBSSxHQUFHQSxJQUFJLENBQUNLLFdBQVIsR0FBc0IsQ0FBdkUsRUFBMEVMLElBQUksR0FBR0EsSUFBSSxDQUFDTSxXQUFSLEdBQXNCLENBQXBHLENBQVo7QUFDQSxNQUFJQyxNQUFNLEdBQUdKLElBQUksQ0FBQ0MsR0FBTCxDQUFTUixJQUFJLENBQUNZLFlBQWQsRUFBNEJaLElBQUksQ0FBQ2EsWUFBakMsRUFBK0NULElBQUksR0FBR0EsSUFBSSxDQUFDUSxZQUFSLEdBQXVCLENBQTFFLEVBQTZFUixJQUFJLEdBQUdBLElBQUksQ0FBQ1MsWUFBUixHQUF1QixDQUF4RyxDQUFiO0FBQ0EsTUFBSUMsQ0FBQyxHQUFHLENBQUNaLFNBQVMsQ0FBQ2EsVUFBWCxHQUF3QkMsdUVBQW1CLENBQUNqQixPQUFELENBQW5EO0FBQ0EsTUFBSWtCLENBQUMsR0FBRyxDQUFDZixTQUFTLENBQUNnQixTQUFuQjs7QUFFQSxNQUFJQyxvRUFBZ0IsQ0FBQ2YsSUFBSSxJQUFJSixJQUFULENBQWhCLENBQStCb0IsU0FBL0IsS0FBNkMsS0FBakQsRUFBd0Q7QUFDdEROLEtBQUMsSUFBSVAsSUFBSSxDQUFDQyxHQUFMLENBQVNSLElBQUksQ0FBQ1UsV0FBZCxFQUEyQk4sSUFBSSxHQUFHQSxJQUFJLENBQUNNLFdBQVIsR0FBc0IsQ0FBckQsSUFBMERKLEtBQS9EO0FBQ0Q7O0FBRUQsU0FBTztBQUNMQSxTQUFLLEVBQUVBLEtBREY7QUFFTEssVUFBTSxFQUFFQSxNQUZIO0FBR0xHLEtBQUMsRUFBRUEsQ0FIRTtBQUlMRyxLQUFDLEVBQUVBO0FBSkUsR0FBUDtBQU1EIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRSZWN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getHTMLElementScroll; });\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcz81ZmU2Il0sIm5hbWVzIjpbImdldEhUTUxFbGVtZW50U2Nyb2xsIiwiZWxlbWVudCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxvQkFBVCxDQUE4QkMsT0FBOUIsRUFBdUM7QUFDcEQsU0FBTztBQUNMQyxjQUFVLEVBQUVELE9BQU8sQ0FBQ0MsVUFEZjtBQUVMQyxhQUFTLEVBQUVGLE9BQU8sQ0FBQ0U7QUFGZCxHQUFQO0FBSUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getLayoutRect; });\n// Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\nfunction getLayoutRect(element) {\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: element.offsetWidth,\n    height: element.offsetHeight\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzP2UyZTkiXSwibmFtZXMiOlsiZ2V0TGF5b3V0UmVjdCIsImVsZW1lbnQiLCJ4Iiwib2Zmc2V0TGVmdCIsInkiLCJvZmZzZXRUb3AiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNlLFNBQVNBLGFBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDO0FBQzdDLFNBQU87QUFDTEMsS0FBQyxFQUFFRCxPQUFPLENBQUNFLFVBRE47QUFFTEMsS0FBQyxFQUFFSCxPQUFPLENBQUNJLFNBRk47QUFHTEMsU0FBSyxFQUFFTCxPQUFPLENBQUNNLFdBSFY7QUFJTEMsVUFBTSxFQUFFUCxPQUFPLENBQUNRO0FBSlgsR0FBUDtBQU1EIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getNodeName; });\nfunction getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcz81Nzg4Il0sIm5hbWVzIjpbImdldE5vZGVOYW1lIiwiZWxlbWVudCIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxXQUFULENBQXFCQyxPQUFyQixFQUE4QjtBQUMzQyxTQUFPQSxPQUFPLEdBQUcsQ0FBQ0EsT0FBTyxDQUFDQyxRQUFSLElBQW9CLEVBQXJCLEVBQXlCQyxXQUF6QixFQUFILEdBQTRDLElBQTFEO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getNodeScroll; });\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\");\n\n\n\n\nfunction getNodeScroll(node) {\n  if (node === Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node) || !Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_2__[\"isHTMLElement\"])(node)) {\n    return Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node);\n  } else {\n    return Object(_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(node);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzPzE5OWEiXSwibmFtZXMiOlsiZ2V0Tm9kZVNjcm9sbCIsIm5vZGUiLCJnZXRXaW5kb3ciLCJpc0hUTUxFbGVtZW50IiwiZ2V0V2luZG93U2Nyb2xsIiwiZ2V0SFRNTEVsZW1lbnRTY3JvbGwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDMUMsTUFBSUEsSUFBSSxLQUFLQyw2REFBUyxDQUFDRCxJQUFELENBQWxCLElBQTRCLENBQUNFLG9FQUFhLENBQUNGLElBQUQsQ0FBOUMsRUFBc0Q7QUFDcEQsV0FBT0csbUVBQWUsQ0FBQ0gsSUFBRCxDQUF0QjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9JLHdFQUFvQixDQUFDSixJQUFELENBQTNCO0FBQ0Q7QUFDRiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getOffsetParent; });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTableElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n\n\n\n\n\n\n\n\nfunction getTrueOffsetParent(element) {\n  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__[\"isHTMLElement\"])(element) || // https://github.com/popperjs/popper-core/issues/837\n  Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element).position === 'fixed') {\n    return null;\n  }\n\n  var offsetParent = element.offsetParent;\n\n  if (offsetParent) {\n    var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(offsetParent);\n\n    if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(offsetParent) === 'body' && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(offsetParent).position === 'static' && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(html).position !== 'static') {\n      return html;\n    }\n  }\n\n  return offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var currentNode = Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(element);\n\n  while (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__[\"isHTMLElement\"])(currentNode) && ['html', 'body'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(currentNode)) < 0) {\n    var css = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && Object(_isTableElement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(offsetParent) && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(offsetParent) === 'body' && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(offsetParent).position === 'static') {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanM/YjYyYiJdLCJuYW1lcyI6WyJnZXRUcnVlT2Zmc2V0UGFyZW50IiwiZWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJvZmZzZXRQYXJlbnQiLCJodG1sIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0Tm9kZU5hbWUiLCJnZXRDb250YWluaW5nQmxvY2siLCJjdXJyZW50Tm9kZSIsImdldFBhcmVudE5vZGUiLCJpbmRleE9mIiwiY3NzIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJ3aWxsQ2hhbmdlIiwicGFyZW50Tm9kZSIsImdldE9mZnNldFBhcmVudCIsIndpbmRvdyIsImdldFdpbmRvdyIsImlzVGFibGVFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxtQkFBVCxDQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxDQUFDQyxvRUFBYSxDQUFDRCxPQUFELENBQWQsSUFBMkI7QUFDL0JFLHNFQUFnQixDQUFDRixPQUFELENBQWhCLENBQTBCRyxRQUExQixLQUF1QyxPQUR2QyxFQUNnRDtBQUM5QyxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJQyxZQUFZLEdBQUdKLE9BQU8sQ0FBQ0ksWUFBM0I7O0FBRUEsTUFBSUEsWUFBSixFQUFrQjtBQUNoQixRQUFJQyxJQUFJLEdBQUdDLHNFQUFrQixDQUFDRixZQUFELENBQTdCOztBQUVBLFFBQUlHLCtEQUFXLENBQUNILFlBQUQsQ0FBWCxLQUE4QixNQUE5QixJQUF3Q0Ysb0VBQWdCLENBQUNFLFlBQUQsQ0FBaEIsQ0FBK0JELFFBQS9CLEtBQTRDLFFBQXBGLElBQWdHRCxvRUFBZ0IsQ0FBQ0csSUFBRCxDQUFoQixDQUF1QkYsUUFBdkIsS0FBb0MsUUFBeEksRUFBa0o7QUFDaEosYUFBT0UsSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0QsWUFBUDtBQUNELEMsQ0FBQztBQUNGOzs7QUFHQSxTQUFTSSxrQkFBVCxDQUE0QlIsT0FBNUIsRUFBcUM7QUFDbkMsTUFBSVMsV0FBVyxHQUFHQyxpRUFBYSxDQUFDVixPQUFELENBQS9COztBQUVBLFNBQU9DLG9FQUFhLENBQUNRLFdBQUQsQ0FBYixJQUE4QixDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCRSxPQUFqQixDQUF5QkosK0RBQVcsQ0FBQ0UsV0FBRCxDQUFwQyxJQUFxRCxDQUExRixFQUE2RjtBQUMzRixRQUFJRyxHQUFHLEdBQUdWLG9FQUFnQixDQUFDTyxXQUFELENBQTFCLENBRDJGLENBQ2xEO0FBQ3pDOztBQUVBLFFBQUlHLEdBQUcsQ0FBQ0MsU0FBSixLQUFrQixNQUFsQixJQUE0QkQsR0FBRyxDQUFDRSxXQUFKLEtBQW9CLE1BQWhELElBQTBERixHQUFHLENBQUNHLFVBQUosSUFBa0JILEdBQUcsQ0FBQ0csVUFBSixLQUFtQixNQUFuRyxFQUEyRztBQUN6RyxhQUFPTixXQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLGlCQUFXLEdBQUdBLFdBQVcsQ0FBQ08sVUFBMUI7QUFDRDtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNELEMsQ0FBQztBQUNGOzs7QUFHZSxTQUFTQyxlQUFULENBQXlCakIsT0FBekIsRUFBa0M7QUFDL0MsTUFBSWtCLE1BQU0sR0FBR0MsNkRBQVMsQ0FBQ25CLE9BQUQsQ0FBdEI7QUFDQSxNQUFJSSxZQUFZLEdBQUdMLG1CQUFtQixDQUFDQyxPQUFELENBQXRDOztBQUVBLFNBQU9JLFlBQVksSUFBSWdCLGtFQUFjLENBQUNoQixZQUFELENBQTlCLElBQWdERixvRUFBZ0IsQ0FBQ0UsWUFBRCxDQUFoQixDQUErQkQsUUFBL0IsS0FBNEMsUUFBbkcsRUFBNkc7QUFDM0dDLGdCQUFZLEdBQUdMLG1CQUFtQixDQUFDSyxZQUFELENBQWxDO0FBQ0Q7O0FBRUQsTUFBSUEsWUFBWSxJQUFJRywrREFBVyxDQUFDSCxZQUFELENBQVgsS0FBOEIsTUFBOUMsSUFBd0RGLG9FQUFnQixDQUFDRSxZQUFELENBQWhCLENBQStCRCxRQUEvQixLQUE0QyxRQUF4RyxFQUFrSDtBQUNoSCxXQUFPZSxNQUFQO0FBQ0Q7O0FBRUQsU0FBT2QsWUFBWSxJQUFJSSxrQkFBa0IsQ0FBQ1IsT0FBRCxDQUFsQyxJQUErQ2tCLE1BQXREO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcblxuICBpZiAob2Zmc2V0UGFyZW50KSB7XG4gICAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcblxuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJyAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLndpbGxDaGFuZ2UgJiYgY3NzLndpbGxDaGFuZ2UgIT09ICdhdXRvJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getParentNode; });\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n\n\nfunction getParentNode(element) {\n  if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element) === 'html') {\n    return element;\n  }\n\n  return (// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || // DOM Element detected\n    // $FlowFixMe: need a better way to handle this...\n    element.host || // ShadowRoot detected\n    // $FlowFixMe: HTMLElement is a Node\n    Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element) // fallback\n\n  );\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzPzI4YmYiXSwibmFtZXMiOlsiZ2V0UGFyZW50Tm9kZSIsImVsZW1lbnQiLCJnZXROb2RlTmFtZSIsImFzc2lnbmVkU2xvdCIsInBhcmVudE5vZGUiLCJob3N0IiwiZ2V0RG9jdW1lbnRFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDZSxTQUFTQSxhQUFULENBQXVCQyxPQUF2QixFQUFnQztBQUM3QyxNQUFJQywrREFBVyxDQUFDRCxPQUFELENBQVgsS0FBeUIsTUFBN0IsRUFBcUM7QUFDbkMsV0FBT0EsT0FBUDtBQUNEOztBQUVELFNBQVE7QUFDTkEsV0FBTyxDQUFDRSxZQUFSLElBQXdCO0FBQ3hCRixXQUFPLENBQUNHLFVBRFIsSUFDc0I7QUFDdEI7QUFDQUgsV0FBTyxDQUFDSSxJQUhSLElBR2dCO0FBQ2hCO0FBQ0FDLDBFQUFrQixDQUFDTCxPQUFELENBTnBCLENBTThCOztBQU45QjtBQVNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lOiB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cbiAgICBlbGVtZW50Lmhvc3QgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWU6IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getScrollParent; });\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n\n\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node)) >= 0) {\n    // $FlowFixMe: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__[\"isHTMLElement\"])(node) && Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node)) {\n    return node;\n  }\n\n  return getScrollParent(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanM/OWQwZSJdLCJuYW1lcyI6WyJnZXRTY3JvbGxQYXJlbnQiLCJub2RlIiwiaW5kZXhPZiIsImdldE5vZGVOYW1lIiwib3duZXJEb2N1bWVudCIsImJvZHkiLCJpc0hUTUxFbGVtZW50IiwiaXNTY3JvbGxQYXJlbnQiLCJnZXRQYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCO0FBQzVDLE1BQUksQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixXQUFqQixFQUE4QkMsT0FBOUIsQ0FBc0NDLCtEQUFXLENBQUNGLElBQUQsQ0FBakQsS0FBNEQsQ0FBaEUsRUFBbUU7QUFDakU7QUFDQSxXQUFPQSxJQUFJLENBQUNHLGFBQUwsQ0FBbUJDLElBQTFCO0FBQ0Q7O0FBRUQsTUFBSUMsb0VBQWEsQ0FBQ0wsSUFBRCxDQUFiLElBQXVCTSxrRUFBYyxDQUFDTixJQUFELENBQXpDLEVBQWlEO0FBQy9DLFdBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFPRCxlQUFlLENBQUNRLGlFQUFhLENBQUNQLElBQUQsQ0FBZCxDQUF0QjtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWU6IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getViewportRect; });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n\n\n\nfunction getViewportRect(element) {\n  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element),\n    y: y\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanM/N2M3MyJdLCJuYW1lcyI6WyJnZXRWaWV3cG9ydFJlY3QiLCJlbGVtZW50Iiwid2luIiwiZ2V0V2luZG93IiwiaHRtbCIsImdldERvY3VtZW50RWxlbWVudCIsInZpc3VhbFZpZXdwb3J0Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsIngiLCJ5IiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7QUFDL0MsTUFBSUMsR0FBRyxHQUFHQyw2REFBUyxDQUFDRixPQUFELENBQW5CO0FBQ0EsTUFBSUcsSUFBSSxHQUFHQyxzRUFBa0IsQ0FBQ0osT0FBRCxDQUE3QjtBQUNBLE1BQUlLLGNBQWMsR0FBR0osR0FBRyxDQUFDSSxjQUF6QjtBQUNBLE1BQUlDLEtBQUssR0FBR0gsSUFBSSxDQUFDSSxXQUFqQjtBQUNBLE1BQUlDLE1BQU0sR0FBR0wsSUFBSSxDQUFDTSxZQUFsQjtBQUNBLE1BQUlDLENBQUMsR0FBRyxDQUFSO0FBQ0EsTUFBSUMsQ0FBQyxHQUFHLENBQVIsQ0FQK0MsQ0FPcEM7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFJTixjQUFKLEVBQW9CO0FBQ2xCQyxTQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBdkI7QUFDQUUsVUFBTSxHQUFHSCxjQUFjLENBQUNHLE1BQXhCLENBRmtCLENBRWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBSSxDQUFDLGlDQUFpQ0ksSUFBakMsQ0FBc0NDLFNBQVMsQ0FBQ0MsU0FBaEQsQ0FBTCxFQUFpRTtBQUMvREosT0FBQyxHQUFHTCxjQUFjLENBQUNVLFVBQW5CO0FBQ0FKLE9BQUMsR0FBR04sY0FBYyxDQUFDVyxTQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTztBQUNMVixTQUFLLEVBQUVBLEtBREY7QUFFTEUsVUFBTSxFQUFFQSxNQUZIO0FBR0xFLEtBQUMsRUFBRUEsQ0FBQyxHQUFHTyx1RUFBbUIsQ0FBQ2pCLE9BQUQsQ0FIckI7QUFJTFcsS0FBQyxFQUFFQTtBQUpFLEdBQVA7QUFNRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDsgLy8gTkI6IFRoaXMgaXNuJ3Qgc3VwcG9ydGVkIG9uIGlPUyA8PSAxMi4gSWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sIHRoZSBwb3BwZXJcbiAgLy8gY2FuIGJlIG9ic2N1cmVkIHVuZGVybmVhdGggaXQuXG4gIC8vIEFsc28sIGBodG1sLmNsaWVudEhlaWdodGAgYWRkcyB0aGUgYm90dG9tIGJhciBoZWlnaHQgaW4gU2FmYXJpIGlPUywgZXZlblxuICAvLyBpZiBpdCBpc24ndCBvcGVuLCBzbyBpZiB0aGlzIGlzbid0IGF2YWlsYWJsZSwgdGhlIHBvcHBlciB3aWxsIGJlIGRldGVjdGVkXG4gIC8vIHRvIG92ZXJmbG93IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB0b28gZWFybHkuXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7IC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcbiAgICAvLyBGZWF0dXJlIGRldGVjdGlvbiBmYWlscyBpbiBtb2JpbGUgZW11bGF0aW9uIG1vZGUgaW4gQ2hyb21lLlxuICAgIC8vIE1hdGguYWJzKHdpbi5pbm5lcldpZHRoIC8gdmlzdWFsVmlld3BvcnQuc2NhbGUgLSB2aXN1YWxWaWV3cG9ydC53aWR0aCkgPFxuICAgIC8vIDAuMDAxXG4gICAgLy8gRmFsbGJhY2sgaGVyZTogXCJOb3QgU2FmYXJpXCIgdXNlckFnZW50XG5cbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getWindow; });\n/*:: import type { Window } from '../types'; */\n\n/*:: declare function getWindow(node: Node | Window): Window; */\nfunction getWindow(node) {\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView : window;\n  }\n\n  return node;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanM/MWZjMCJdLCJuYW1lcyI6WyJnZXRXaW5kb3ciLCJub2RlIiwidG9TdHJpbmciLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNlLFNBQVNBLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0FBQ3RDLE1BQUlBLElBQUksQ0FBQ0MsUUFBTCxPQUFvQixpQkFBeEIsRUFBMkM7QUFDekMsUUFBSUMsYUFBYSxHQUFHRixJQUFJLENBQUNFLGFBQXpCO0FBQ0EsV0FBT0EsYUFBYSxHQUFHQSxhQUFhLENBQUNDLFdBQWpCLEdBQStCQyxNQUFuRDtBQUNEOztBQUVELFNBQU9KLElBQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qOjogaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7ICovXG5cbi8qOjogZGVjbGFyZSBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZTogTm9kZSB8IFdpbmRvdyk6IFdpbmRvdzsgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getWindowScroll; });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\nfunction getWindowScroll(node) {\n  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanM/YTMyMSJdLCJuYW1lcyI6WyJnZXRXaW5kb3dTY3JvbGwiLCJub2RlIiwid2luIiwiZ2V0V2luZG93Iiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2UsU0FBU0EsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0I7QUFDNUMsTUFBSUMsR0FBRyxHQUFHQyw2REFBUyxDQUFDRixJQUFELENBQW5CO0FBQ0EsTUFBSUcsVUFBVSxHQUFHRixHQUFHLENBQUNHLFdBQXJCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHSixHQUFHLENBQUNLLFdBQXBCO0FBQ0EsU0FBTztBQUNMSCxjQUFVLEVBQUVBLFVBRFA7QUFFTEUsYUFBUyxFQUFFQTtBQUZOLEdBQVA7QUFJRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getWindowScrollBarX; });\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n\n\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element)).left + Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element).scrollLeft;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzPzYxMjUiXSwibmFtZXMiOlsiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJsZWZ0IiwiZ2V0V2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLG1CQUFULENBQTZCQyxPQUE3QixFQUFzQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU9DLHlFQUFxQixDQUFDQyxzRUFBa0IsQ0FBQ0YsT0FBRCxDQUFuQixDQUFyQixDQUFtREcsSUFBbkQsR0FBMERDLG1FQUFlLENBQUNKLE9BQUQsQ0FBZixDQUF5QkssVUFBMUY7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/*! exports provided: isElement, isHTMLElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isElement\", function() { return isElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isHTMLElement\", function() { return isHTMLElement; });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\n/*:: declare function isElement(node: mixed): boolean %checks(node instanceof\n  Element); */\n\nfunction isElement(node) {\n  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof\n  HTMLElement); */\n\n\nfunction isHTMLElement(node) {\n  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzPzI3NjciXSwibmFtZXMiOlsiaXNFbGVtZW50Iiwibm9kZSIsIk93bkVsZW1lbnQiLCJnZXRXaW5kb3ciLCJFbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7OztBQUdBLFNBQVNBLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0FBQ3ZCLE1BQUlDLFVBQVUsR0FBR0MsNkRBQVMsQ0FBQ0YsSUFBRCxDQUFULENBQWdCRyxPQUFqQztBQUNBLFNBQU9ILElBQUksWUFBWUMsVUFBaEIsSUFBOEJELElBQUksWUFBWUcsT0FBckQ7QUFDRDtBQUNEOzs7O0FBSUEsU0FBU0MsYUFBVCxDQUF1QkosSUFBdkIsRUFBNkI7QUFDM0IsTUFBSUMsVUFBVSxHQUFHQyw2REFBUyxDQUFDRixJQUFELENBQVQsQ0FBZ0JLLFdBQWpDO0FBQ0EsU0FBT0wsSUFBSSxZQUFZQyxVQUFoQixJQUE4QkQsSUFBSSxZQUFZSyxXQUFyRDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBFbGVtZW50KTsgKi9cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEhUTUxFbGVtZW50KTsgKi9cblxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return isScrollParent; });\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcz9hZTZjIl0sIm5hbWVzIjpbImlzU2Nyb2xsUGFyZW50IiwiZWxlbWVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDZSxTQUFTQSxjQUFULENBQXdCQyxPQUF4QixFQUFpQztBQUM5QztBQUNBLE1BQUlDLGlCQUFpQixHQUFHQyxvRUFBZ0IsQ0FBQ0YsT0FBRCxDQUF4QztBQUFBLE1BQ0lHLFFBQVEsR0FBR0YsaUJBQWlCLENBQUNFLFFBRGpDO0FBQUEsTUFFSUMsU0FBUyxHQUFHSCxpQkFBaUIsQ0FBQ0csU0FGbEM7QUFBQSxNQUdJQyxTQUFTLEdBQUdKLGlCQUFpQixDQUFDSSxTQUhsQzs7QUFLQSxTQUFPLDZCQUE2QkMsSUFBN0IsQ0FBa0NILFFBQVEsR0FBR0UsU0FBWCxHQUF1QkQsU0FBekQsQ0FBUDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return isTableElement; });\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element)) >= 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcz9iNDUxIl0sIm5hbWVzIjpbImlzVGFibGVFbGVtZW50IiwiZWxlbWVudCIsImluZGV4T2YiLCJnZXROb2RlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDZSxTQUFTQSxjQUFULENBQXdCQyxPQUF4QixFQUFpQztBQUM5QyxTQUFPLENBQUMsT0FBRCxFQUFVLElBQVYsRUFBZ0IsSUFBaEIsRUFBc0JDLE9BQXRCLENBQThCQywrREFBVyxDQUFDRixPQUFELENBQXpDLEtBQXVELENBQTlEO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return listScrollParents; });\n/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n\n\n\n\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the \nreference element's position.\n*/\n\nfunction listScrollParents(element, list) {\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = Object(_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var isBody = Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(scrollParent) === 'body';\n  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(target)));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcz9lYTFhIl0sIm5hbWVzIjpbImxpc3RTY3JvbGxQYXJlbnRzIiwiZWxlbWVudCIsImxpc3QiLCJzY3JvbGxQYXJlbnQiLCJnZXRTY3JvbGxQYXJlbnQiLCJpc0JvZHkiLCJnZXROb2RlTmFtZSIsIndpbiIsImdldFdpbmRvdyIsInRhcmdldCIsImNvbmNhdCIsInZpc3VhbFZpZXdwb3J0IiwiaXNTY3JvbGxQYXJlbnQiLCJ1cGRhdGVkTGlzdCIsImdldFBhcmVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT2UsU0FBU0EsaUJBQVQsQ0FBMkJDLE9BQTNCLEVBQW9DQyxJQUFwQyxFQUEwQztBQUN2RCxNQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFsQixFQUFxQjtBQUNuQkEsUUFBSSxHQUFHLEVBQVA7QUFDRDs7QUFFRCxNQUFJQyxZQUFZLEdBQUdDLG1FQUFlLENBQUNILE9BQUQsQ0FBbEM7QUFDQSxNQUFJSSxNQUFNLEdBQUdDLCtEQUFXLENBQUNILFlBQUQsQ0FBWCxLQUE4QixNQUEzQztBQUNBLE1BQUlJLEdBQUcsR0FBR0MsNkRBQVMsQ0FBQ0wsWUFBRCxDQUFuQjtBQUNBLE1BQUlNLE1BQU0sR0FBR0osTUFBTSxHQUFHLENBQUNFLEdBQUQsRUFBTUcsTUFBTixDQUFhSCxHQUFHLENBQUNJLGNBQUosSUFBc0IsRUFBbkMsRUFBdUNDLGtFQUFjLENBQUNULFlBQUQsQ0FBZCxHQUErQkEsWUFBL0IsR0FBOEMsRUFBckYsQ0FBSCxHQUE4RkEsWUFBakg7QUFDQSxNQUFJVSxXQUFXLEdBQUdYLElBQUksQ0FBQ1EsTUFBTCxDQUFZRCxNQUFaLENBQWxCO0FBQ0EsU0FBT0osTUFBTSxHQUFHUSxXQUFILEdBQWlCO0FBQzlCQSxhQUFXLENBQUNILE1BQVosQ0FBbUJWLGlCQUFpQixDQUFDYyxpRUFBYSxDQUFDTCxNQUFELENBQWQsQ0FBcEMsQ0FEQTtBQUVEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlIFxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBnZXROb2RlTmFtZShzY3JvbGxQYXJlbnQpID09PSAnYm9keSc7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWU6IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"top\", function() { return top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bottom\", function() { return bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"right\", function() { return right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"left\", function() { return left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"auto\", function() { return auto; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"basePlacements\", function() { return basePlacements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"end\", function() { return end; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clippingParents\", function() { return clippingParents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"viewport\", function() { return viewport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"popper\", function() { return popper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reference\", function() { return reference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"variationPlacements\", function() { return variationPlacements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placements\", function() { return placements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"beforeRead\", function() { return beforeRead; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"read\", function() { return read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"afterRead\", function() { return afterRead; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"beforeMain\", function() { return beforeMain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"afterMain\", function() { return afterMain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"beforeWrite\", function() { return beforeWrite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"write\", function() { return write; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"afterWrite\", function() { return afterWrite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modifierPhases\", function() { return modifierPhases; });\nvar top = 'top';\nvar bottom = 'bottom';\nvar right = 'right';\nvar left = 'left';\nvar auto = 'auto';\nvar basePlacements = [top, bottom, right, left];\nvar start = 'start';\nvar end = 'end';\nvar clippingParents = 'clippingParents';\nvar viewport = 'viewport';\nvar popper = 'popper';\nvar reference = 'reference';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = 'beforeRead';\nvar read = 'read';\nvar afterRead = 'afterRead'; // pure-logic modifiers\n\nvar beforeMain = 'beforeMain';\nvar main = 'main';\nvar afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = 'beforeWrite';\nvar write = 'write';\nvar afterWrite = 'afterWrite';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzPzc3ZjkiXSwibmFtZXMiOlsidG9wIiwiYm90dG9tIiwicmlnaHQiLCJsZWZ0IiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwic3RhcnQiLCJlbmQiLCJjbGlwcGluZ1BhcmVudHMiLCJ2aWV3cG9ydCIsInBvcHBlciIsInJlZmVyZW5jZSIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJjb25jYXQiLCJwbGFjZW1lbnRzIiwiYmVmb3JlUmVhZCIsInJlYWQiLCJhZnRlclJlYWQiLCJiZWZvcmVNYWluIiwibWFpbiIsImFmdGVyTWFpbiIsImJlZm9yZVdyaXRlIiwid3JpdGUiLCJhZnRlcldyaXRlIiwibW9kaWZpZXJQaGFzZXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sSUFBSUEsR0FBRyxHQUFHLEtBQVY7QUFDQSxJQUFJQyxNQUFNLEdBQUcsUUFBYjtBQUNBLElBQUlDLEtBQUssR0FBRyxPQUFaO0FBQ0EsSUFBSUMsSUFBSSxHQUFHLE1BQVg7QUFDQSxJQUFJQyxJQUFJLEdBQUcsTUFBWDtBQUNBLElBQUlDLGNBQWMsR0FBRyxDQUFDTCxHQUFELEVBQU1DLE1BQU4sRUFBY0MsS0FBZCxFQUFxQkMsSUFBckIsQ0FBckI7QUFDQSxJQUFJRyxLQUFLLEdBQUcsT0FBWjtBQUNBLElBQUlDLEdBQUcsR0FBRyxLQUFWO0FBQ0EsSUFBSUMsZUFBZSxHQUFHLGlCQUF0QjtBQUNBLElBQUlDLFFBQVEsR0FBRyxVQUFmO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLFFBQWI7QUFDQSxJQUFJQyxTQUFTLEdBQUcsV0FBaEI7QUFDQSxJQUFJQyxtQkFBbUIsR0FBRyxhQUFhUCxjQUFjLENBQUNRLE1BQWYsQ0FBc0IsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCO0FBQzVGLFNBQU9ELEdBQUcsQ0FBQ0UsTUFBSixDQUFXLENBQUNELFNBQVMsR0FBRyxHQUFaLEdBQWtCVCxLQUFuQixFQUEwQlMsU0FBUyxHQUFHLEdBQVosR0FBa0JSLEdBQTVDLENBQVgsQ0FBUDtBQUNELENBRjZDLEVBRTNDLEVBRjJDLENBQXZDO0FBR0EsSUFBSVUsVUFBVSxHQUFHLGFBQWEsR0FBR0QsTUFBSCxDQUFVWCxjQUFWLEVBQTBCLENBQUNELElBQUQsQ0FBMUIsRUFBa0NTLE1BQWxDLENBQXlDLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQjtBQUN0RyxTQUFPRCxHQUFHLENBQUNFLE1BQUosQ0FBVyxDQUFDRCxTQUFELEVBQVlBLFNBQVMsR0FBRyxHQUFaLEdBQWtCVCxLQUE5QixFQUFxQ1MsU0FBUyxHQUFHLEdBQVosR0FBa0JSLEdBQXZELENBQVgsQ0FBUDtBQUNELENBRm9DLEVBRWxDLEVBRmtDLENBQTlCLEMsQ0FFQzs7QUFFRCxJQUFJVyxVQUFVLEdBQUcsWUFBakI7QUFDQSxJQUFJQyxJQUFJLEdBQUcsTUFBWDtBQUNBLElBQUlDLFNBQVMsR0FBRyxXQUFoQixDLENBQTZCOztBQUU3QixJQUFJQyxVQUFVLEdBQUcsWUFBakI7QUFDQSxJQUFJQyxJQUFJLEdBQUcsTUFBWDtBQUNBLElBQUlDLFNBQVMsR0FBRyxXQUFoQixDLENBQTZCOztBQUU3QixJQUFJQyxXQUFXLEdBQUcsYUFBbEI7QUFDQSxJQUFJQyxLQUFLLEdBQUcsT0FBWjtBQUNBLElBQUlDLFVBQVUsR0FBRyxZQUFqQjtBQUNBLElBQUlDLGNBQWMsR0FBRyxDQUFDVCxVQUFELEVBQWFDLElBQWIsRUFBbUJDLFNBQW5CLEVBQThCQyxVQUE5QixFQUEwQ0MsSUFBMUMsRUFBZ0RDLFNBQWhELEVBQTJEQyxXQUEzRCxFQUF3RUMsS0FBeEUsRUFBK0VDLFVBQS9FLENBQXJCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/enums.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases, popperGenerator, createPopper, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"popperGenerator\", function() { return popperGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPopper\", function() { return createPopper; });\n/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ \"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/orderModifiers.js */ \"./node_modules/@popperjs/core/lib/utils/orderModifiers.js\");\n/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/debounce.js */ \"./node_modules/@popperjs/core/lib/utils/debounce.js\");\n/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/validateModifiers.js */ \"./node_modules/@popperjs/core/lib/utils/validateModifiers.js\");\n/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/uniqueBy.js */ \"./node_modules/@popperjs/core/lib/utils/uniqueBy.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/mergeByName.js */ \"./node_modules/@popperjs/core/lib/utils/mergeByName.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"detectOverflow\", function() { return _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"top\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"top\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"bottom\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"bottom\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"right\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"right\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"left\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"left\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"auto\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"auto\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"basePlacements\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"basePlacements\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"start\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"end\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"end\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clippingParents\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"clippingParents\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"viewport\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"viewport\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"popper\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"popper\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"reference\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"reference\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"variationPlacements\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"variationPlacements\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"placements\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"placements\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"beforeRead\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"beforeRead\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"read\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"read\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"afterRead\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"afterRead\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"beforeMain\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"beforeMain\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"main\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"afterMain\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"afterMain\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"beforeWrite\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"beforeWrite\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"write\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"write\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"afterWrite\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"afterWrite\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"modifierPhases\", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"modifierPhases\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(options) {\n        cleanupModifierEffects();\n        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);\n        state.scrollParents = {\n          reference: Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__[\"isElement\"])(reference) ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(reference) : reference.contextElement ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(reference.contextElement) : [],\n          popper: Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = Object(_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Object(_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (true) {\n          var modifiers = Object(_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {\n            var name = _ref.name;\n            return name;\n          });\n          Object(_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(modifiers);\n\n          if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_13__[\"auto\"]) {\n            var flipModifier = state.orderedModifiers.find(function (_ref2) {\n              var name = _ref2.name;\n              return name === 'flip';\n            });\n\n            if (!flipModifier) {\n              console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n            }\n          }\n\n          var _getComputedStyle = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(popper),\n              marginTop = _getComputedStyle.marginTop,\n              marginRight = _getComputedStyle.marginRight,\n              marginBottom = _getComputedStyle.marginBottom,\n              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n\n\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {\n            return parseFloat(margin);\n          })) {\n            console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n          }\n        }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (true) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: Object(_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(reference, Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(popper), state.options.strategy === 'fixed'),\n          popper: Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (true) {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: Object(_utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (true) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nvar createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/index.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__[\"isHTMLElement\"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__[\"isHTMLElement\"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcz8wYWI0Il0sIm5hbWVzIjpbImFwcGx5U3R5bGVzIiwiX3JlZiIsInN0YXRlIiwiT2JqZWN0Iiwia2V5cyIsImVsZW1lbnRzIiwiZm9yRWFjaCIsIm5hbWUiLCJzdHlsZSIsInN0eWxlcyIsImF0dHJpYnV0ZXMiLCJlbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsImdldE5vZGVOYW1lIiwiYXNzaWduIiwidmFsdWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJlZmZlY3QiLCJfcmVmMiIsImluaXRpYWxTdHlsZXMiLCJwb3BwZXIiLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJzdHJhdGVneSIsImxlZnQiLCJ0b3AiLCJtYXJnaW4iLCJhcnJvdyIsInJlZmVyZW5jZSIsInN0eWxlUHJvcGVydGllcyIsImhhc093blByb3BlcnR5IiwicmVkdWNlIiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJlbmFibGVkIiwicGhhc2UiLCJmbiIsInJlcXVpcmVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtDQUM0RDtBQUM1RDs7QUFFQSxTQUFTQSxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixNQUFJQyxLQUFLLEdBQUdELElBQUksQ0FBQ0MsS0FBakI7QUFDQUMsUUFBTSxDQUFDQyxJQUFQLENBQVlGLEtBQUssQ0FBQ0csUUFBbEIsRUFBNEJDLE9BQTVCLENBQW9DLFVBQVVDLElBQVYsRUFBZ0I7QUFDbEQsUUFBSUMsS0FBSyxHQUFHTixLQUFLLENBQUNPLE1BQU4sQ0FBYUYsSUFBYixLQUFzQixFQUFsQztBQUNBLFFBQUlHLFVBQVUsR0FBR1IsS0FBSyxDQUFDUSxVQUFOLENBQWlCSCxJQUFqQixLQUEwQixFQUEzQztBQUNBLFFBQUlJLE9BQU8sR0FBR1QsS0FBSyxDQUFDRyxRQUFOLENBQWVFLElBQWYsQ0FB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QUNDLElBQVAsQ0FBWU0sVUFBWixFQUF3QkosT0FBeEIsQ0FBZ0MsVUFBVTRCLFNBQVYsRUFBcUI7QUFDbkR2QixlQUFPLENBQUNLLGVBQVIsQ0FBd0JrQixTQUF4QjtBQUNELE9BRkQ7QUFHRCxLQXJCRDtBQXNCRCxHQXZCRDtBQXdCRCxDLENBQUM7OztBQUdhO0FBQ2IzQixNQUFJLEVBQUUsYUFETztBQUViNEIsU0FBTyxFQUFFLElBRkk7QUFHYkMsT0FBSyxFQUFFLE9BSE07QUFJYkMsSUFBRSxFQUFFckMsV0FKUztBQUtia0IsUUFBTSxFQUFFQSxNQUxLO0FBTWJvQixVQUFRLEVBQUUsQ0FBQyxlQUFEO0FBTkcsQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVcblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgIC8vICRGbG93Rml4TWVcblxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/contains.js */ \"./node_modules/@popperjs/core/lib/dom-utils/contains.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/within.js */ \"./node_modules/@popperjs/core/lib/utils/within.js\");\n/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ \"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\");\n/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ \"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state.placement);\n  var axis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(basePlacement);\n  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_8__[\"left\"], _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"right\"]].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = state.modifiersData[name + \"#persistent\"].padding;\n  var arrowRect = Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arrowElement);\n  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"top\"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"left\"];\n  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"bottom\"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"right\"];\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,\n      _options$padding = options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (true) {\n    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__[\"isHTMLElement\"])(arrowElement)) {\n      console.error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));\n    }\n  }\n\n  if (!Object(_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.elements.popper, arrowElement)) {\n    if (true) {\n      console.error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' '));\n    }\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n  state.modifiersData[name + \"#persistent\"] = {\n    padding: Object(_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(typeof padding !== 'number' ? padding : Object(_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_8__[\"basePlacements\"]))\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/arrow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/*! exports provided: mapToStyles, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapToStyles\", function() { return mapToStyles; });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsets(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: Math.round(x * dpr) / dpr || 0,\n    y: Math.round(y * dpr) / dpr || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive;\n\n  var _roundOffsets = roundOffsets(offsets),\n      x = _roundOffsets.x,\n      y = _roundOffsets.y;\n\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"left\"];\n  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"top\"];\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(popper);\n\n    if (offsetParent === Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(popper)) {\n      offsetParent = Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(popper);\n    } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n    /*:: offsetParent = (offsetParent: Element); */\n\n\n    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"top\"]) {\n      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"bottom\"];\n      y -= offsetParent.clientHeight - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"left\"]) {\n      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"right\"];\n      x -= offsetParent.clientWidth - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref3) {\n  var state = _ref3.state,\n      options = _ref3.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive;\n\n  if (true) {\n    var transitionProperty = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(state.elements.popper).transitionProperty || '';\n\n    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {\n      return transitionProperty.indexOf(property) >= 0;\n    })) {\n      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".', '\\n\\n', 'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\\n\\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));\n    }\n  }\n\n  var commonStyles = {\n    placement: Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false\n    })));\n  }\n\n  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcz9hZDZlIl0sIm5hbWVzIjpbInBhc3NpdmUiLCJlZmZlY3QiLCJfcmVmIiwic3RhdGUiLCJpbnN0YW5jZSIsIm9wdGlvbnMiLCJfb3B0aW9ucyRzY3JvbGwiLCJzY3JvbGwiLCJfb3B0aW9ucyRyZXNpemUiLCJyZXNpemUiLCJ3aW5kb3ciLCJnZXRXaW5kb3ciLCJlbGVtZW50cyIsInBvcHBlciIsInNjcm9sbFBhcmVudHMiLCJjb25jYXQiLCJyZWZlcmVuY2UiLCJmb3JFYWNoIiwic2Nyb2xsUGFyZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYW1lIiwiZW5hYmxlZCIsInBoYXNlIiwiZm4iLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0NBQW1EOztBQUVuRCxJQUFJQSxPQUFPLEdBQUc7QUFDWkEsU0FBTyxFQUFFO0FBREcsQ0FBZDs7QUFJQSxTQUFTQyxNQUFULENBQWdCQyxJQUFoQixFQUFzQjtBQUNwQixNQUFJQyxLQUFLLEdBQUdELElBQUksQ0FBQ0MsS0FBakI7QUFBQSxNQUNJQyxRQUFRLEdBQUdGLElBQUksQ0FBQ0UsUUFEcEI7QUFBQSxNQUVJQyxPQUFPLEdBQUdILElBQUksQ0FBQ0csT0FGbkI7QUFHQSxNQUFJQyxlQUFlLEdBQUdELE9BQU8sQ0FBQ0UsTUFBOUI7QUFBQSxNQUNJQSxNQUFNLEdBQUdELGVBQWUsS0FBSyxLQUFLLENBQXpCLEdBQTZCLElBQTdCLEdBQW9DQSxlQURqRDtBQUFBLE1BRUlFLGVBQWUsR0FBR0gsT0FBTyxDQUFDSSxNQUY5QjtBQUFBLE1BR0lBLE1BQU0sR0FBR0QsZUFBZSxLQUFLLEtBQUssQ0FBekIsR0FBNkIsSUFBN0IsR0FBb0NBLGVBSGpEO0FBSUEsTUFBSUUsTUFBTSxHQUFHQyx1RUFBUyxDQUFDUixLQUFLLENBQUNTLFFBQU4sQ0FBZUMsTUFBaEIsQ0FBdEI7QUFDQSxNQUFJQyxhQUFhLEdBQUcsR0FBR0MsTUFBSCxDQUFVWixLQUFLLENBQUNXLGFBQU4sQ0FBb0JFLFNBQTlCLEVBQXlDYixLQUFLLENBQUNXLGFBQU4sQ0FBb0JELE1BQTdELENBQXBCOztBQUVBLE1BQUlOLE1BQUosRUFBWTtBQUNWTyxpQkFBYSxDQUFDRyxPQUFkLENBQXNCLFVBQVVDLFlBQVYsRUFBd0I7QUFDNUNBLGtCQUFZLENBQUNDLGdCQUFiLENBQThCLFFBQTlCLEVBQXdDZixRQUFRLENBQUNnQixNQUFqRCxFQUF5RHBCLE9BQXpEO0FBQ0QsS0FGRDtBQUdEOztBQUVELE1BQUlTLE1BQUosRUFBWTtBQUNWQyxVQUFNLENBQUNTLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDZixRQUFRLENBQUNnQixNQUEzQyxFQUFtRHBCLE9BQW5EO0FBQ0Q7O0FBRUQsU0FBTyxZQUFZO0FBQ2pCLFFBQUlPLE1BQUosRUFBWTtBQUNWTyxtQkFBYSxDQUFDRyxPQUFkLENBQXNCLFVBQVVDLFlBQVYsRUFBd0I7QUFDNUNBLG9CQUFZLENBQUNHLG1CQUFiLENBQWlDLFFBQWpDLEVBQTJDakIsUUFBUSxDQUFDZ0IsTUFBcEQsRUFBNERwQixPQUE1RDtBQUNELE9BRkQ7QUFHRDs7QUFFRCxRQUFJUyxNQUFKLEVBQVk7QUFDVkMsWUFBTSxDQUFDVyxtQkFBUCxDQUEyQixRQUEzQixFQUFxQ2pCLFFBQVEsQ0FBQ2dCLE1BQTlDLEVBQXNEcEIsT0FBdEQ7QUFDRDtBQUNGLEdBVkQ7QUFXRCxDLENBQUM7OztBQUdhO0FBQ2JzQixNQUFJLEVBQUUsZ0JBRE87QUFFYkMsU0FBTyxFQUFFLElBRkk7QUFHYkMsT0FBSyxFQUFFLE9BSE07QUFJYkMsSUFBRSxFQUFFLFNBQVNBLEVBQVQsR0FBYyxDQUFFLENBSlA7QUFLYnhCLFFBQU0sRUFBRUEsTUFMSztBQU1ieUIsTUFBSSxFQUFFO0FBTk8sQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"auto\"]) {\n    return [];\n  }\n\n  var oppositePlacement = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement);\n  return [Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(placement), oppositePlacement, Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"auto\"] ? Object(_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement);\n\n    var isStartVariation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"start\"];\n    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_5__[\"top\"], _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"bottom\"]].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"right\"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"left\"] : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"bottom\"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"top\"];\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(mainVariationSide);\n    }\n\n    var altVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/flip.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n\n\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__[\"top\"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"right\"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"bottom\"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"left\"]].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzPzFkNmMiXSwibmFtZXMiOlsiZ2V0U2lkZU9mZnNldHMiLCJvdmVyZmxvdyIsInJlY3QiLCJwcmV2ZW50ZWRPZmZzZXRzIiwieCIsInkiLCJ0b3AiLCJoZWlnaHQiLCJyaWdodCIsIndpZHRoIiwiYm90dG9tIiwibGVmdCIsImlzQW55U2lkZUZ1bGx5Q2xpcHBlZCIsInNvbWUiLCJzaWRlIiwiaGlkZSIsIl9yZWYiLCJzdGF0ZSIsIm5hbWUiLCJyZWZlcmVuY2VSZWN0IiwicmVjdHMiLCJyZWZlcmVuY2UiLCJwb3BwZXJSZWN0IiwicG9wcGVyIiwibW9kaWZpZXJzRGF0YSIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwiZGV0ZWN0T3ZlcmZsb3ciLCJlbGVtZW50Q29udGV4dCIsInBvcHBlckFsdE92ZXJmbG93IiwiYWx0Qm91bmRhcnkiLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiYXR0cmlidXRlcyIsIk9iamVjdCIsImFzc2lnbiIsImVuYWJsZWQiLCJwaGFzZSIsInJlcXVpcmVzSWZFeGlzdHMiLCJmbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFFQSxTQUFTQSxjQUFULENBQXdCQyxRQUF4QixFQUFrQ0MsSUFBbEMsRUFBd0NDLGdCQUF4QyxFQUEwRDtBQUN4RCxNQUFJQSxnQkFBZ0IsS0FBSyxLQUFLLENBQTlCLEVBQWlDO0FBQy9CQSxvQkFBZ0IsR0FBRztBQUNqQkMsT0FBQyxFQUFFLENBRGM7QUFFakJDLE9BQUMsRUFBRTtBQUZjLEtBQW5CO0FBSUQ7O0FBRUQsU0FBTztBQUNMQyxPQUFHLEVBQUVMLFFBQVEsQ0FBQ0ssR0FBVCxHQUFlSixJQUFJLENBQUNLLE1BQXBCLEdBQTZCSixnQkFBZ0IsQ0FBQ0UsQ0FEOUM7QUFFTEcsU0FBSyxFQUFFUCxRQUFRLENBQUNPLEtBQVQsR0FBaUJOLElBQUksQ0FBQ08sS0FBdEIsR0FBOEJOLGdCQUFnQixDQUFDQyxDQUZqRDtBQUdMTSxVQUFNLEVBQUVULFFBQVEsQ0FBQ1MsTUFBVCxHQUFrQlIsSUFBSSxDQUFDSyxNQUF2QixHQUFnQ0osZ0JBQWdCLENBQUNFLENBSHBEO0FBSUxNLFFBQUksRUFBRVYsUUFBUSxDQUFDVSxJQUFULEdBQWdCVCxJQUFJLENBQUNPLEtBQXJCLEdBQTZCTixnQkFBZ0IsQ0FBQ0M7QUFKL0MsR0FBUDtBQU1EOztBQUVELFNBQVNRLHFCQUFULENBQStCWCxRQUEvQixFQUF5QztBQUN2QyxTQUFPLENBQUNLLDZDQUFELEVBQU1FLCtDQUFOLEVBQWFFLGdEQUFiLEVBQXFCQyw4Q0FBckIsRUFBMkJFLElBQTNCLENBQWdDLFVBQVVDLElBQVYsRUFBZ0I7QUFDckQsV0FBT2IsUUFBUSxDQUFDYSxJQUFELENBQVIsSUFBa0IsQ0FBekI7QUFDRCxHQUZNLENBQVA7QUFHRDs7QUFFRCxTQUFTQyxJQUFULENBQWNDLElBQWQsRUFBb0I7QUFDbEIsTUFBSUMsS0FBSyxHQUFHRCxJQUFJLENBQUNDLEtBQWpCO0FBQUEsTUFDSUMsSUFBSSxHQUFHRixJQUFJLENBQUNFLElBRGhCO0FBRUEsTUFBSUMsYUFBYSxHQUFHRixLQUFLLENBQUNHLEtBQU4sQ0FBWUMsU0FBaEM7QUFDQSxNQUFJQyxVQUFVLEdBQUdMLEtBQUssQ0FBQ0csS0FBTixDQUFZRyxNQUE3QjtBQUNBLE1BQUlwQixnQkFBZ0IsR0FBR2MsS0FBSyxDQUFDTyxhQUFOLENBQW9CQyxlQUEzQztBQUNBLE1BQUlDLGlCQUFpQixHQUFHQyx3RUFBYyxDQUFDVixLQUFELEVBQVE7QUFDNUNXLGtCQUFjLEVBQUU7QUFENEIsR0FBUixDQUF0QztBQUdBLE1BQUlDLGlCQUFpQixHQUFHRix3RUFBYyxDQUFDVixLQUFELEVBQVE7QUFDNUNhLGVBQVcsRUFBRTtBQUQrQixHQUFSLENBQXRDO0FBR0EsTUFBSUMsd0JBQXdCLEdBQUcvQixjQUFjLENBQUMwQixpQkFBRCxFQUFvQlAsYUFBcEIsQ0FBN0M7QUFDQSxNQUFJYSxtQkFBbUIsR0FBR2hDLGNBQWMsQ0FBQzZCLGlCQUFELEVBQW9CUCxVQUFwQixFQUFnQ25CLGdCQUFoQyxDQUF4QztBQUNBLE1BQUk4QixpQkFBaUIsR0FBR3JCLHFCQUFxQixDQUFDbUIsd0JBQUQsQ0FBN0M7QUFDQSxNQUFJRyxnQkFBZ0IsR0FBR3RCLHFCQUFxQixDQUFDb0IsbUJBQUQsQ0FBNUM7QUFDQWYsT0FBSyxDQUFDTyxhQUFOLENBQW9CTixJQUFwQixJQUE0QjtBQUMxQmEsNEJBQXdCLEVBQUVBLHdCQURBO0FBRTFCQyx1QkFBbUIsRUFBRUEsbUJBRks7QUFHMUJDLHFCQUFpQixFQUFFQSxpQkFITztBQUkxQkMsb0JBQWdCLEVBQUVBO0FBSlEsR0FBNUI7QUFNQWpCLE9BQUssQ0FBQ2tCLFVBQU4sQ0FBaUJaLE1BQWpCLEdBQTBCYSxNQUFNLENBQUNDLE1BQVAsQ0FBY0QsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQnBCLEtBQUssQ0FBQ2tCLFVBQU4sQ0FBaUJaLE1BQW5DLENBQWQsRUFBMEQsRUFBMUQsRUFBOEQ7QUFDdEYsb0NBQWdDVSxpQkFEc0Q7QUFFdEYsMkJBQXVCQztBQUYrRCxHQUE5RCxDQUExQjtBQUlELEMsQ0FBQzs7O0FBR2E7QUFDYmhCLE1BQUksRUFBRSxNQURPO0FBRWJvQixTQUFPLEVBQUUsSUFGSTtBQUdiQyxPQUFLLEVBQUUsTUFITTtBQUliQyxrQkFBZ0IsRUFBRSxDQUFDLGlCQUFELENBSkw7QUFLYkMsSUFBRSxFQUFFMUI7QUFMUyxDQUFmIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIpLCB7fSwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/hide.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/*! exports provided: distanceAndSkiddingToXY, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceAndSkiddingToXY\", function() { return distanceAndSkiddingToXY; });\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement);\n  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__[\"left\"], _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"top\"]].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__[\"left\"], _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"right\"]].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"placements\"].reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanM/OTgzNSJdLCJuYW1lcyI6WyJkaXN0YW5jZUFuZFNraWRkaW5nVG9YWSIsInBsYWNlbWVudCIsInJlY3RzIiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsImdldEJhc2VQbGFjZW1lbnQiLCJpbnZlcnREaXN0YW5jZSIsImxlZnQiLCJ0b3AiLCJpbmRleE9mIiwiX3JlZiIsIk9iamVjdCIsImFzc2lnbiIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJyaWdodCIsIngiLCJ5IiwiX3JlZjIiLCJzdGF0ZSIsIm9wdGlvbnMiLCJuYW1lIiwiX29wdGlvbnMkb2Zmc2V0IiwiZGF0YSIsInBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJtb2RpZmllcnNEYXRhIiwicG9wcGVyT2Zmc2V0cyIsImVuYWJsZWQiLCJwaGFzZSIsInJlcXVpcmVzIiwiZm4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNPLFNBQVNBLHVCQUFULENBQWlDQyxTQUFqQyxFQUE0Q0MsS0FBNUMsRUFBbURDLE1BQW5ELEVBQTJEO0FBQ2hFLE1BQUlDLGFBQWEsR0FBR0MsMEVBQWdCLENBQUNKLFNBQUQsQ0FBcEM7QUFDQSxNQUFJSyxjQUFjLEdBQUcsQ0FBQ0MsOENBQUQsRUFBT0MsNkNBQVAsRUFBWUMsT0FBWixDQUFvQkwsYUFBcEIsS0FBc0MsQ0FBdEMsR0FBMEMsQ0FBQyxDQUEzQyxHQUErQyxDQUFwRTs7QUFFQSxNQUFJTSxJQUFJLEdBQUcsT0FBT1AsTUFBUCxLQUFrQixVQUFsQixHQUErQkEsTUFBTSxDQUFDUSxNQUFNLENBQUNDLE1BQVAsQ0FBY0QsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQlYsS0FBbEIsQ0FBZCxFQUF3QyxFQUF4QyxFQUE0QztBQUMzRkQsYUFBUyxFQUFFQTtBQURnRixHQUE1QyxDQUFELENBQXJDLEdBRUxFLE1BRk47QUFBQSxNQUdJVSxRQUFRLEdBQUdILElBQUksQ0FBQyxDQUFELENBSG5CO0FBQUEsTUFJSUksUUFBUSxHQUFHSixJQUFJLENBQUMsQ0FBRCxDQUpuQjs7QUFNQUcsVUFBUSxHQUFHQSxRQUFRLElBQUksQ0FBdkI7QUFDQUMsVUFBUSxHQUFHLENBQUNBLFFBQVEsSUFBSSxDQUFiLElBQWtCUixjQUE3QjtBQUNBLFNBQU8sQ0FBQ0MsOENBQUQsRUFBT1EsK0NBQVAsRUFBY04sT0FBZCxDQUFzQkwsYUFBdEIsS0FBd0MsQ0FBeEMsR0FBNEM7QUFDakRZLEtBQUMsRUFBRUYsUUFEOEM7QUFFakRHLEtBQUMsRUFBRUo7QUFGOEMsR0FBNUMsR0FHSDtBQUNGRyxLQUFDLEVBQUVILFFBREQ7QUFFRkksS0FBQyxFQUFFSDtBQUZELEdBSEo7QUFPRDs7QUFFRCxTQUFTWCxNQUFULENBQWdCZSxLQUFoQixFQUF1QjtBQUNyQixNQUFJQyxLQUFLLEdBQUdELEtBQUssQ0FBQ0MsS0FBbEI7QUFBQSxNQUNJQyxPQUFPLEdBQUdGLEtBQUssQ0FBQ0UsT0FEcEI7QUFBQSxNQUVJQyxJQUFJLEdBQUdILEtBQUssQ0FBQ0csSUFGakI7QUFHQSxNQUFJQyxlQUFlLEdBQUdGLE9BQU8sQ0FBQ2pCLE1BQTlCO0FBQUEsTUFDSUEsTUFBTSxHQUFHbUIsZUFBZSxLQUFLLEtBQUssQ0FBekIsR0FBNkIsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUE3QixHQUFzQ0EsZUFEbkQ7QUFFQSxNQUFJQyxJQUFJLEdBQUdDLG9EQUFVLENBQUNDLE1BQVgsQ0FBa0IsVUFBVUMsR0FBVixFQUFlekIsU0FBZixFQUEwQjtBQUNyRHlCLE9BQUcsQ0FBQ3pCLFNBQUQsQ0FBSCxHQUFpQkQsdUJBQXVCLENBQUNDLFNBQUQsRUFBWWtCLEtBQUssQ0FBQ2pCLEtBQWxCLEVBQXlCQyxNQUF6QixDQUF4QztBQUNBLFdBQU91QixHQUFQO0FBQ0QsR0FIVSxFQUdSLEVBSFEsQ0FBWDtBQUlBLE1BQUlDLHFCQUFxQixHQUFHSixJQUFJLENBQUNKLEtBQUssQ0FBQ2xCLFNBQVAsQ0FBaEM7QUFBQSxNQUNJZSxDQUFDLEdBQUdXLHFCQUFxQixDQUFDWCxDQUQ5QjtBQUFBLE1BRUlDLENBQUMsR0FBR1UscUJBQXFCLENBQUNWLENBRjlCOztBQUlBLE1BQUlFLEtBQUssQ0FBQ1MsYUFBTixDQUFvQkMsYUFBcEIsSUFBcUMsSUFBekMsRUFBK0M7QUFDN0NWLFNBQUssQ0FBQ1MsYUFBTixDQUFvQkMsYUFBcEIsQ0FBa0NiLENBQWxDLElBQXVDQSxDQUF2QztBQUNBRyxTQUFLLENBQUNTLGFBQU4sQ0FBb0JDLGFBQXBCLENBQWtDWixDQUFsQyxJQUF1Q0EsQ0FBdkM7QUFDRDs7QUFFREUsT0FBSyxDQUFDUyxhQUFOLENBQW9CUCxJQUFwQixJQUE0QkUsSUFBNUI7QUFDRCxDLENBQUM7OztBQUdhO0FBQ2JGLE1BQUksRUFBRSxRQURPO0FBRWJTLFNBQU8sRUFBRSxJQUZJO0FBR2JDLE9BQUssRUFBRSxNQUhNO0FBSWJDLFVBQVEsRUFBRSxDQUFDLGVBQUQsQ0FKRztBQUtiQyxJQUFFLEVBQUU5QjtBQUxTLENBQWYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlY3RzKSwge30sIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/offset.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ \"./node_modules/@popperjs/core/lib/utils/computeOffsets.js\");\n\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name; // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n\n  state.modifiersData[name] = Object(_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzPzEzNGEiXSwibmFtZXMiOlsicG9wcGVyT2Zmc2V0cyIsIl9yZWYiLCJzdGF0ZSIsIm5hbWUiLCJtb2RpZmllcnNEYXRhIiwiY29tcHV0ZU9mZnNldHMiLCJyZWZlcmVuY2UiLCJyZWN0cyIsImVsZW1lbnQiLCJwb3BwZXIiLCJzdHJhdGVneSIsInBsYWNlbWVudCIsImVuYWJsZWQiLCJwaGFzZSIsImZuIiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztBQUVBLFNBQVNBLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCO0FBQzNCLE1BQUlDLEtBQUssR0FBR0QsSUFBSSxDQUFDQyxLQUFqQjtBQUFBLE1BQ0lDLElBQUksR0FBR0YsSUFBSSxDQUFDRSxJQURoQixDQUQyQixDQUczQjtBQUNBO0FBQ0E7QUFDQTs7QUFDQUQsT0FBSyxDQUFDRSxhQUFOLENBQW9CRCxJQUFwQixJQUE0QkUsd0VBQWMsQ0FBQztBQUN6Q0MsYUFBUyxFQUFFSixLQUFLLENBQUNLLEtBQU4sQ0FBWUQsU0FEa0I7QUFFekNFLFdBQU8sRUFBRU4sS0FBSyxDQUFDSyxLQUFOLENBQVlFLE1BRm9CO0FBR3pDQyxZQUFRLEVBQUUsVUFIK0I7QUFJekNDLGFBQVMsRUFBRVQsS0FBSyxDQUFDUztBQUp3QixHQUFELENBQTFDO0FBTUQsQyxDQUFDOzs7QUFHYTtBQUNiUixNQUFJLEVBQUUsZUFETztBQUViUyxTQUFPLEVBQUUsSUFGSTtBQUdiQyxPQUFLLEVBQUUsTUFITTtBQUliQyxJQUFFLEVBQUVkLGFBSlM7QUFLYmUsTUFBSSxFQUFFO0FBTE8sQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getAltAxis.js */ \"./node_modules/@popperjs/core/lib/utils/getAltAxis.js\");\n/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/within.js */ \"./node_modules/@popperjs/core/lib/utils/within.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ \"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\");\n\n\n\n\n\n\n\n\n\n\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state.placement);\n  var variation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(basePlacement);\n  var altAxis = Object(_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {\n    placement: state.placement\n  })) : tetherOffset;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"top\"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"left\"];\n    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"bottom\"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"right\"];\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = popperOffsets[mainAxis] + overflow[mainSide];\n    var max = popperOffsets[mainAxis] - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"start\"] ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"start\"] ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : Object(_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n    var arrowOffsetParent = state.elements.arrow && Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n    var preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"top\"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"left\"];\n\n    var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"bottom\"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"right\"];\n\n    var _offset = popperOffsets[altAxis];\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var _preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_min, _offset, _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/*! exports provided: createPopper, popperGenerator, defaultModifiers, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPopper\", function() { return createPopper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultModifiers\", function() { return defaultModifiers; });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@popperjs/core/lib/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"popperGenerator\", function() { return _index_js__WEBPACK_IMPORTED_MODULE_0__[\"popperGenerator\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"detectOverflow\", function() { return _index_js__WEBPACK_IMPORTED_MODULE_0__[\"detectOverflow\"]; });\n\n/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ \"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\");\n/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ \"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\");\n/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\");\n/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\");\n/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/offset.js */ \"./node_modules/@popperjs/core/lib/modifiers/offset.js\");\n/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/flip.js */ \"./node_modules/@popperjs/core/lib/modifiers/flip.js\");\n/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ \"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\");\n/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/arrow.js */ \"./node_modules/@popperjs/core/lib/modifiers/arrow.js\");\n/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modifiers/hide.js */ \"./node_modules/@popperjs/core/lib/modifiers/hide.js\");\n\n\n\n\n\n\n\n\n\n\nvar defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]];\nvar createPopper = /*#__PURE__*/Object(_index_js__WEBPACK_IMPORTED_MODULE_0__[\"popperGenerator\"])({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcz8zOWMzIl0sIm5hbWVzIjpbImRlZmF1bHRNb2RpZmllcnMiLCJldmVudExpc3RlbmVycyIsInBvcHBlck9mZnNldHMiLCJjb21wdXRlU3R5bGVzIiwiYXBwbHlTdHlsZXMiLCJvZmZzZXQiLCJmbGlwIiwicHJldmVudE92ZXJmbG93IiwiYXJyb3ciLCJoaWRlIiwiY3JlYXRlUG9wcGVyIiwicG9wcGVyR2VuZXJhdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxnQkFBZ0IsR0FBRyxDQUFDQyxvRUFBRCxFQUFpQkMsbUVBQWpCLEVBQWdDQyxtRUFBaEMsRUFBK0NDLGlFQUEvQyxFQUE0REMsNERBQTVELEVBQW9FQywwREFBcEUsRUFBMEVDLHFFQUExRSxFQUEyRkMsMkRBQTNGLEVBQWtHQywwREFBbEcsQ0FBdkI7QUFDQSxJQUFJQyxZQUFZLEdBQUcsYUFBYUMsaUVBQWUsQ0FBQztBQUM5Q1gsa0JBQWdCLEVBQUVBO0FBRDRCLENBQUQsQ0FBL0MsQyxDQUVJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/popper.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return computeAutoPlacement; });\n/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n\n\n\n\n/*:: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"placements\"] : _options$allowedAutoP;\n  var variation = Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement);\n  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"variationPlacements\"] : _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"variationPlacements\"].filter(function (placement) {\n    return Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement) === variation;\n  }) : _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"basePlacements\"]; // $FlowFixMe\n\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (true) {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = Object(_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzPzQzY2UiXSwibmFtZXMiOlsiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJzdGF0ZSIsIm9wdGlvbnMiLCJfb3B0aW9ucyIsInBsYWNlbWVudCIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwicGFkZGluZyIsImZsaXBWYXJpYXRpb25zIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwiYWxsUGxhY2VtZW50cyIsInZhcmlhdGlvbiIsImdldFZhcmlhdGlvbiIsInBsYWNlbWVudHMiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwiZmlsdGVyIiwiYmFzZVBsYWNlbWVudHMiLCJhbGxvd2VkUGxhY2VtZW50cyIsImluZGV4T2YiLCJsZW5ndGgiLCJwcm9jZXNzIiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsIm92ZXJmbG93cyIsInJlZHVjZSIsImFjYyIsImRldGVjdE92ZXJmbG93IiwiZ2V0QmFzZVBsYWNlbWVudCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7O0FBQ2UsU0FBU0Esb0JBQVQsQ0FBOEJDLEtBQTlCLEVBQXFDQyxPQUFyQyxFQUE4QztBQUMzRCxNQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFyQixFQUF3QjtBQUN0QkEsV0FBTyxHQUFHLEVBQVY7QUFDRDs7QUFFRCxNQUFJQyxRQUFRLEdBQUdELE9BQWY7QUFBQSxNQUNJRSxTQUFTLEdBQUdELFFBQVEsQ0FBQ0MsU0FEekI7QUFBQSxNQUVJQyxRQUFRLEdBQUdGLFFBQVEsQ0FBQ0UsUUFGeEI7QUFBQSxNQUdJQyxZQUFZLEdBQUdILFFBQVEsQ0FBQ0csWUFINUI7QUFBQSxNQUlJQyxPQUFPLEdBQUdKLFFBQVEsQ0FBQ0ksT0FKdkI7QUFBQSxNQUtJQyxjQUFjLEdBQUdMLFFBQVEsQ0FBQ0ssY0FMOUI7QUFBQSxNQU1JQyxxQkFBcUIsR0FBR04sUUFBUSxDQUFDTyxxQkFOckM7QUFBQSxNQU9JQSxxQkFBcUIsR0FBR0QscUJBQXFCLEtBQUssS0FBSyxDQUEvQixHQUFtQ0Usb0RBQW5DLEdBQW1ERixxQkFQL0U7QUFRQSxNQUFJRyxTQUFTLEdBQUdDLGdFQUFZLENBQUNULFNBQUQsQ0FBNUI7QUFDQSxNQUFJVSxVQUFVLEdBQUdGLFNBQVMsR0FBR0osY0FBYyxHQUFHTyw2REFBSCxHQUF5QkEsNkRBQW1CLENBQUNDLE1BQXBCLENBQTJCLFVBQVVaLFNBQVYsRUFBcUI7QUFDbEgsV0FBT1MsZ0VBQVksQ0FBQ1QsU0FBRCxDQUFaLEtBQTRCUSxTQUFuQztBQUNELEdBRm1FLENBQTFDLEdBRXJCSyx3REFGTCxDQWQyRCxDQWdCdEM7O0FBRXJCLE1BQUlDLGlCQUFpQixHQUFHSixVQUFVLENBQUNFLE1BQVgsQ0FBa0IsVUFBVVosU0FBVixFQUFxQjtBQUM3RCxXQUFPTSxxQkFBcUIsQ0FBQ1MsT0FBdEIsQ0FBOEJmLFNBQTlCLEtBQTRDLENBQW5EO0FBQ0QsR0FGdUIsQ0FBeEI7O0FBSUEsTUFBSWMsaUJBQWlCLENBQUNFLE1BQWxCLEtBQTZCLENBQWpDLEVBQW9DO0FBQ2xDRixxQkFBaUIsR0FBR0osVUFBcEI7O0FBRUEsUUFBSU8sSUFBSixFQUEyQztBQUN6Q0MsYUFBTyxDQUFDQyxLQUFSLENBQWMsQ0FBQyw4REFBRCxFQUFpRSxpRUFBakUsRUFBb0ksNEJBQXBJLEVBQWtLLDZEQUFsSyxFQUFpTywyQkFBak8sRUFBOFBDLElBQTlQLENBQW1RLEdBQW5RLENBQWQ7QUFDRDtBQUNGLEdBNUIwRCxDQTRCekQ7OztBQUdGLE1BQUlDLFNBQVMsR0FBR1AsaUJBQWlCLENBQUNRLE1BQWxCLENBQXlCLFVBQVVDLEdBQVYsRUFBZXZCLFNBQWYsRUFBMEI7QUFDakV1QixPQUFHLENBQUN2QixTQUFELENBQUgsR0FBaUJ3QixrRUFBYyxDQUFDM0IsS0FBRCxFQUFRO0FBQ3JDRyxlQUFTLEVBQUVBLFNBRDBCO0FBRXJDQyxjQUFRLEVBQUVBLFFBRjJCO0FBR3JDQyxrQkFBWSxFQUFFQSxZQUh1QjtBQUlyQ0MsYUFBTyxFQUFFQTtBQUo0QixLQUFSLENBQWQsQ0FLZHNCLG9FQUFnQixDQUFDekIsU0FBRCxDQUxGLENBQWpCO0FBTUEsV0FBT3VCLEdBQVA7QUFDRCxHQVJlLEVBUWIsRUFSYSxDQUFoQjtBQVNBLFNBQU9HLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixTQUFaLEVBQXVCTyxJQUF2QixDQUE0QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDakQsV0FBT1QsU0FBUyxDQUFDUSxDQUFELENBQVQsR0FBZVIsU0FBUyxDQUFDUyxDQUFELENBQS9CO0FBQ0QsR0FGTSxDQUFQO0FBR0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuXG4vKjo6IHR5cGUgT3ZlcmZsb3dzTWFwID0geyBbQ29tcHV0ZWRQbGFjZW1lbnRdOiBudW1iZXIgfTsgKi9cblxuLyo7OyB0eXBlIE92ZXJmbG93c01hcCA9IHsgW2tleSBpbiBDb21wdXRlZFBsYWNlbWVudF06IG51bWJlciB9OyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzOyAvLyAkRmxvd0ZpeE1lXG5cbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return computeOffsets; });\n/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\n\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement) : null;\n  var variation = placement ? Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"top\"]:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"bottom\"]:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"right\"]:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"left\"]:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? Object(_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"start\"]:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n\n      case _enums_js__WEBPACK_IMPORTED_MODULE_3__[\"end\"]:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzPzVkN2UiXSwibmFtZXMiOlsiY29tcHV0ZU9mZnNldHMiLCJfcmVmIiwicmVmZXJlbmNlIiwiZWxlbWVudCIsInBsYWNlbWVudCIsImJhc2VQbGFjZW1lbnQiLCJnZXRCYXNlUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0VmFyaWF0aW9uIiwiY29tbW9uWCIsIngiLCJ3aWR0aCIsImNvbW1vblkiLCJ5IiwiaGVpZ2h0Iiwib2Zmc2V0cyIsInRvcCIsImJvdHRvbSIsInJpZ2h0IiwibGVmdCIsIm1haW5BeGlzIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwibGVuIiwic3RhcnQiLCJNYXRoIiwiZmxvb3IiLCJlbmQiLCJjZWlsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLGNBQVQsQ0FBd0JDLElBQXhCLEVBQThCO0FBQzNDLE1BQUlDLFNBQVMsR0FBR0QsSUFBSSxDQUFDQyxTQUFyQjtBQUFBLE1BQ0lDLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQURuQjtBQUFBLE1BRUlDLFNBQVMsR0FBR0gsSUFBSSxDQUFDRyxTQUZyQjtBQUdBLE1BQUlDLGFBQWEsR0FBR0QsU0FBUyxHQUFHRSxvRUFBZ0IsQ0FBQ0YsU0FBRCxDQUFuQixHQUFpQyxJQUE5RDtBQUNBLE1BQUlHLFNBQVMsR0FBR0gsU0FBUyxHQUFHSSxnRUFBWSxDQUFDSixTQUFELENBQWYsR0FBNkIsSUFBdEQ7QUFDQSxNQUFJSyxPQUFPLEdBQUdQLFNBQVMsQ0FBQ1EsQ0FBVixHQUFjUixTQUFTLENBQUNTLEtBQVYsR0FBa0IsQ0FBaEMsR0FBb0NSLE9BQU8sQ0FBQ1EsS0FBUixHQUFnQixDQUFsRTtBQUNBLE1BQUlDLE9BQU8sR0FBR1YsU0FBUyxDQUFDVyxDQUFWLEdBQWNYLFNBQVMsQ0FBQ1ksTUFBVixHQUFtQixDQUFqQyxHQUFxQ1gsT0FBTyxDQUFDVyxNQUFSLEdBQWlCLENBQXBFO0FBQ0EsTUFBSUMsT0FBSjs7QUFFQSxVQUFRVixhQUFSO0FBQ0UsU0FBS1csNkNBQUw7QUFDRUQsYUFBTyxHQUFHO0FBQ1JMLFNBQUMsRUFBRUQsT0FESztBQUVSSSxTQUFDLEVBQUVYLFNBQVMsQ0FBQ1csQ0FBVixHQUFjVixPQUFPLENBQUNXO0FBRmpCLE9BQVY7QUFJQTs7QUFFRixTQUFLRyxnREFBTDtBQUNFRixhQUFPLEdBQUc7QUFDUkwsU0FBQyxFQUFFRCxPQURLO0FBRVJJLFNBQUMsRUFBRVgsU0FBUyxDQUFDVyxDQUFWLEdBQWNYLFNBQVMsQ0FBQ1k7QUFGbkIsT0FBVjtBQUlBOztBQUVGLFNBQUtJLCtDQUFMO0FBQ0VILGFBQU8sR0FBRztBQUNSTCxTQUFDLEVBQUVSLFNBQVMsQ0FBQ1EsQ0FBVixHQUFjUixTQUFTLENBQUNTLEtBRG5CO0FBRVJFLFNBQUMsRUFBRUQ7QUFGSyxPQUFWO0FBSUE7O0FBRUYsU0FBS08sOENBQUw7QUFDRUosYUFBTyxHQUFHO0FBQ1JMLFNBQUMsRUFBRVIsU0FBUyxDQUFDUSxDQUFWLEdBQWNQLE9BQU8sQ0FBQ1EsS0FEakI7QUFFUkUsU0FBQyxFQUFFRDtBQUZLLE9BQVY7QUFJQTs7QUFFRjtBQUNFRyxhQUFPLEdBQUc7QUFDUkwsU0FBQyxFQUFFUixTQUFTLENBQUNRLENBREw7QUFFUkcsU0FBQyxFQUFFWCxTQUFTLENBQUNXO0FBRkwsT0FBVjtBQTlCSjs7QUFvQ0EsTUFBSU8sUUFBUSxHQUFHZixhQUFhLEdBQUdnQiw0RUFBd0IsQ0FBQ2hCLGFBQUQsQ0FBM0IsR0FBNkMsSUFBekU7O0FBRUEsTUFBSWUsUUFBUSxJQUFJLElBQWhCLEVBQXNCO0FBQ3BCLFFBQUlFLEdBQUcsR0FBR0YsUUFBUSxLQUFLLEdBQWIsR0FBbUIsUUFBbkIsR0FBOEIsT0FBeEM7O0FBRUEsWUFBUWIsU0FBUjtBQUNFLFdBQUtnQiwrQ0FBTDtBQUNFUixlQUFPLENBQUNLLFFBQUQsQ0FBUCxHQUFvQkksSUFBSSxDQUFDQyxLQUFMLENBQVdWLE9BQU8sQ0FBQ0ssUUFBRCxDQUFsQixJQUFnQ0ksSUFBSSxDQUFDQyxLQUFMLENBQVd2QixTQUFTLENBQUNvQixHQUFELENBQVQsR0FBaUIsQ0FBakIsR0FBcUJuQixPQUFPLENBQUNtQixHQUFELENBQVAsR0FBZSxDQUEvQyxDQUFwRDtBQUNBOztBQUVGLFdBQUtJLDZDQUFMO0FBQ0VYLGVBQU8sQ0FBQ0ssUUFBRCxDQUFQLEdBQW9CSSxJQUFJLENBQUNDLEtBQUwsQ0FBV1YsT0FBTyxDQUFDSyxRQUFELENBQWxCLElBQWdDSSxJQUFJLENBQUNHLElBQUwsQ0FBVXpCLFNBQVMsQ0FBQ29CLEdBQUQsQ0FBVCxHQUFpQixDQUFqQixHQUFxQm5CLE9BQU8sQ0FBQ21CLEdBQUQsQ0FBUCxHQUFlLENBQTlDLENBQXBEO0FBQ0E7O0FBRUY7QUFURjtBQVdEOztBQUVELFNBQU9QLE9BQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBNYXRoLmZsb29yKG9mZnNldHNbbWFpbkF4aXNdKSAtIE1hdGguZmxvb3IocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBNYXRoLmZsb29yKG9mZnNldHNbbWFpbkF4aXNdKSArIE1hdGguY2VpbChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/computeOffsets.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return debounce; });\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzP2IxZTIiXSwibmFtZXMiOlsiZGVib3VuY2UiLCJmbiIsInBlbmRpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxRQUFULENBQWtCQyxFQUFsQixFQUFzQjtBQUNuQyxNQUFJQyxPQUFKO0FBQ0EsU0FBTyxZQUFZO0FBQ2pCLFFBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1pBLGFBQU8sR0FBRyxJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQjtBQUN2Q0QsZUFBTyxDQUFDQyxPQUFSLEdBQWtCQyxJQUFsQixDQUF1QixZQUFZO0FBQ2pDSCxpQkFBTyxHQUFHSSxTQUFWO0FBQ0FGLGlCQUFPLENBQUNILEVBQUUsRUFBSCxDQUFQO0FBQ0QsU0FIRDtBQUlELE9BTFMsQ0FBVjtBQU1EOztBQUVELFdBQU9DLE9BQVA7QUFDRCxHQVhEO0FBWUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZm4pIHtcbiAgdmFyIHBlbmRpbmc7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwZW5kaW5nO1xuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/debounce.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return detectOverflow; });\n/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\");\n/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./computeOffsets.js */ \"./node_modules/@popperjs/core/lib/utils/computeOffsets.js\");\n/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rectToClientRect.js */ \"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mergePaddingObject.js */ \"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\");\n/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./expandToHashMap.js */ \"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\");\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"clippingParents\"] : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"viewport\"] : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"popper\"] : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = Object(_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(typeof padding !== 'number' ? padding : Object(_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"basePlacements\"]));\n  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"popper\"] ? _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"reference\"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"popper\"];\n  var referenceElement = state.elements.reference;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = Object(_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__[\"isElement\"])(element) ? element : element.contextElement || Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = Object(_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(referenceElement);\n  var popperOffsets = Object(_computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = Object(_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Object.assign(Object.assign({}, popperRect), popperOffsets));\n  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"popper\"] ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"popper\"] && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_5__[\"right\"], _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"bottom\"]].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_5__[\"top\"], _enums_js__WEBPACK_IMPORTED_MODULE_5__[\"bottom\"]].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/detectOverflow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return expandToHashMap; });\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcz85ODUyIl0sIm5hbWVzIjpbImV4cGFuZFRvSGFzaE1hcCIsInZhbHVlIiwia2V5cyIsInJlZHVjZSIsImhhc2hNYXAiLCJrZXkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxlQUFULENBQXlCQyxLQUF6QixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDbkQsU0FBT0EsSUFBSSxDQUFDQyxNQUFMLENBQVksVUFBVUMsT0FBVixFQUFtQkMsR0FBbkIsRUFBd0I7QUFDekNELFdBQU8sQ0FBQ0MsR0FBRCxDQUFQLEdBQWVKLEtBQWY7QUFDQSxXQUFPRyxPQUFQO0FBQ0QsR0FITSxFQUdKLEVBSEksQ0FBUDtBQUlEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBhbmRUb0hhc2hNYXAodmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNoTWFwLCBrZXkpIHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return format; });\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return [].concat(args).reduce(function (p, c) {\n    return p.replace(/%s/, c);\n  }, str);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2Zvcm1hdC5qcz9mNTNlIl0sIm5hbWVzIjpbImZvcm1hdCIsInN0ciIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwicmVkdWNlIiwicCIsImMiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWUsU0FBU0EsTUFBVCxDQUFnQkMsR0FBaEIsRUFBcUI7QUFDbEMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBckIsRUFBNkJDLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVKLElBQUksR0FBRyxDQUFQLEdBQVdBLElBQUksR0FBRyxDQUFsQixHQUFzQixDQUFoQyxDQUFwQyxFQUF3RUssSUFBSSxHQUFHLENBQXBGLEVBQXVGQSxJQUFJLEdBQUdMLElBQTlGLEVBQW9HSyxJQUFJLEVBQXhHLEVBQTRHO0FBQzFHRixRQUFJLENBQUNFLElBQUksR0FBRyxDQUFSLENBQUosR0FBaUJKLFNBQVMsQ0FBQ0ksSUFBRCxDQUExQjtBQUNEOztBQUVELFNBQU8sR0FBR0MsTUFBSCxDQUFVSCxJQUFWLEVBQWdCSSxNQUFoQixDQUF1QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDNUMsV0FBT0QsQ0FBQyxDQUFDRSxPQUFGLENBQVUsSUFBVixFQUFnQkQsQ0FBaEIsQ0FBUDtBQUNELEdBRk0sRUFFSlYsR0FGSSxDQUFQO0FBR0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2Zvcm1hdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/format.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getAltAxis; });\nfunction getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanM/ZjJlMCJdLCJuYW1lcyI6WyJnZXRBbHRBeGlzIiwiYXhpcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlLFNBQVNBLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3ZDLFNBQU9BLElBQUksS0FBSyxHQUFULEdBQWUsR0FBZixHQUFxQixHQUE1QjtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getAltAxis.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getBasePlacement; });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanM/YjUwZSJdLCJuYW1lcyI6WyJnZXRCYXNlUGxhY2VtZW50IiwicGxhY2VtZW50Iiwic3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2UsU0FBU0EsZ0JBQVQsQ0FBMEJDLFNBQTFCLEVBQXFDO0FBQ2xELFNBQU9BLFNBQVMsQ0FBQ0MsS0FBVixDQUFnQixHQUFoQixFQUFxQixDQUFyQixDQUFQO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getFreshSideObject; });\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcz8zNWY2Il0sIm5hbWVzIjpbImdldEZyZXNoU2lkZU9iamVjdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlLFNBQVNBLGtCQUFULEdBQThCO0FBQzNDLFNBQU87QUFDTEMsT0FBRyxFQUFFLENBREE7QUFFTEMsU0FBSyxFQUFFLENBRkY7QUFHTEMsVUFBTSxFQUFFLENBSEg7QUFJTEMsUUFBSSxFQUFFO0FBSkQsR0FBUDtBQU1EIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getMainAxisFromPlacement; });\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcz9hZDlkIl0sIm5hbWVzIjpbImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsInBsYWNlbWVudCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSx3QkFBVCxDQUFrQ0MsU0FBbEMsRUFBNkM7QUFDMUQsU0FBTyxDQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCQyxPQUFsQixDQUEwQkQsU0FBMUIsS0FBd0MsQ0FBeEMsR0FBNEMsR0FBNUMsR0FBa0QsR0FBekQ7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getOppositePlacement; });\nvar hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzPzUyMzIiXSwibmFtZXMiOlsiaGFzaCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVwbGFjZSIsIm1hdGNoZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSxJQUFJQSxJQUFJLEdBQUc7QUFDVEMsTUFBSSxFQUFFLE9BREc7QUFFVEMsT0FBSyxFQUFFLE1BRkU7QUFHVEMsUUFBTSxFQUFFLEtBSEM7QUFJVEMsS0FBRyxFQUFFO0FBSkksQ0FBWDtBQU1lLFNBQVNDLG9CQUFULENBQThCQyxTQUE5QixFQUF5QztBQUN0RCxTQUFPQSxTQUFTLENBQUNDLE9BQVYsQ0FBa0Isd0JBQWxCLEVBQTRDLFVBQVVDLE9BQVYsRUFBbUI7QUFDcEUsV0FBT1IsSUFBSSxDQUFDUSxPQUFELENBQVg7QUFDRCxHQUZNLENBQVA7QUFHRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getOppositeVariationPlacement; });\nvar hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzPzUwMGIiXSwibmFtZXMiOlsiaGFzaCIsInN0YXJ0IiwiZW5kIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJyZXBsYWNlIiwibWF0Y2hlZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBLElBQUlBLElBQUksR0FBRztBQUNUQyxPQUFLLEVBQUUsS0FERTtBQUVUQyxLQUFHLEVBQUU7QUFGSSxDQUFYO0FBSWUsU0FBU0MsNkJBQVQsQ0FBdUNDLFNBQXZDLEVBQWtEO0FBQy9ELFNBQU9BLFNBQVMsQ0FBQ0MsT0FBVixDQUFrQixZQUFsQixFQUFnQyxVQUFVQyxPQUFWLEVBQW1CO0FBQ3hELFdBQU9OLElBQUksQ0FBQ00sT0FBRCxDQUFYO0FBQ0QsR0FGTSxDQUFQO0FBR0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return getVariation; });\nfunction getVariation(placement) {\n  return placement.split('-')[1];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcz8zZDhkIl0sIm5hbWVzIjpbImdldFZhcmlhdGlvbiIsInBsYWNlbWVudCIsInNwbGl0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWUsU0FBU0EsWUFBVCxDQUFzQkMsU0FBdEIsRUFBaUM7QUFDOUMsU0FBT0EsU0FBUyxDQUFDQyxLQUFWLENBQWdCLEdBQWhCLEVBQXFCLENBQXJCLENBQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getVariation.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return mergeByName; });\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {\n      options: Object.assign(Object.assign({}, existing.options), current.options),\n      data: Object.assign(Object.assign({}, existing.data), current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzPzJhMzUiXSwibmFtZXMiOlsibWVyZ2VCeU5hbWUiLCJtb2RpZmllcnMiLCJtZXJnZWQiLCJyZWR1Y2UiLCJjdXJyZW50IiwiZXhpc3RpbmciLCJuYW1lIiwiT2JqZWN0IiwiYXNzaWduIiwib3B0aW9ucyIsImRhdGEiLCJrZXlzIiwibWFwIiwia2V5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWUsU0FBU0EsV0FBVCxDQUFxQkMsU0FBckIsRUFBZ0M7QUFDN0MsTUFBSUMsTUFBTSxHQUFHRCxTQUFTLENBQUNFLE1BQVYsQ0FBaUIsVUFBVUQsTUFBVixFQUFrQkUsT0FBbEIsRUFBMkI7QUFDdkQsUUFBSUMsUUFBUSxHQUFHSCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0UsSUFBVCxDQUFyQjtBQUNBSixVQUFNLENBQUNFLE9BQU8sQ0FBQ0UsSUFBVCxDQUFOLEdBQXVCRCxRQUFRLEdBQUdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRCxNQUFNLENBQUNDLE1BQVAsQ0FBY0QsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsUUFBbEIsQ0FBZCxFQUEyQ0QsT0FBM0MsQ0FBZCxFQUFtRSxFQUFuRSxFQUF1RTtBQUN2R0ssYUFBTyxFQUFFRixNQUFNLENBQUNDLE1BQVAsQ0FBY0QsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsUUFBUSxDQUFDSSxPQUEzQixDQUFkLEVBQW1ETCxPQUFPLENBQUNLLE9BQTNELENBRDhGO0FBRXZHQyxVQUFJLEVBQUVILE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxRQUFRLENBQUNLLElBQTNCLENBQWQsRUFBZ0ROLE9BQU8sQ0FBQ00sSUFBeEQ7QUFGaUcsS0FBdkUsQ0FBSCxHQUcxQk4sT0FITDtBQUlBLFdBQU9GLE1BQVA7QUFDRCxHQVBZLEVBT1YsRUFQVSxDQUFiLENBRDZDLENBUXJDOztBQUVSLFNBQU9LLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZVCxNQUFaLEVBQW9CVSxHQUFwQixDQUF3QixVQUFVQyxHQUFWLEVBQWU7QUFDNUMsV0FBT1gsTUFBTSxDQUFDVyxHQUFELENBQWI7QUFDRCxHQUZNLENBQVA7QUFHRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcpLCBjdXJyZW50KSwge30sIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucyksIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEpLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/mergeByName.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return mergePaddingObject; });\n/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ \"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\");\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign(Object.assign({}, Object(_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()), paddingObject);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcz9kMzliIl0sIm5hbWVzIjpbIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRGcmVzaFNpZGVPYmplY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2UsU0FBU0Esa0JBQVQsQ0FBNEJDLGFBQTVCLEVBQTJDO0FBQ3hELFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCQyxzRUFBa0IsRUFBcEMsQ0FBZCxFQUF1REgsYUFBdkQsQ0FBUDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCkpLCBwYWRkaW5nT2JqZWN0KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return orderModifiers; });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return _enums_js__WEBPACK_IMPORTED_MODULE_0__[\"modifierPhases\"].reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzP2I5ZTYiXSwibmFtZXMiOlsib3JkZXIiLCJtb2RpZmllcnMiLCJtYXAiLCJNYXAiLCJ2aXNpdGVkIiwiU2V0IiwicmVzdWx0IiwiZm9yRWFjaCIsIm1vZGlmaWVyIiwic2V0IiwibmFtZSIsInNvcnQiLCJhZGQiLCJyZXF1aXJlcyIsImNvbmNhdCIsInJlcXVpcmVzSWZFeGlzdHMiLCJkZXAiLCJoYXMiLCJkZXBNb2RpZmllciIsImdldCIsInB1c2giLCJvcmRlck1vZGlmaWVycyIsIm9yZGVyZWRNb2RpZmllcnMiLCJtb2RpZmllclBoYXNlcyIsInJlZHVjZSIsImFjYyIsInBoYXNlIiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7Q0FBOEM7O0FBRTlDLFNBQVNBLEtBQVQsQ0FBZUMsU0FBZixFQUEwQjtBQUN4QixNQUFJQyxHQUFHLEdBQUcsSUFBSUMsR0FBSixFQUFWO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLElBQUlDLEdBQUosRUFBZDtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0FMLFdBQVMsQ0FBQ00sT0FBVixDQUFrQixVQUFVQyxRQUFWLEVBQW9CO0FBQ3BDTixPQUFHLENBQUNPLEdBQUosQ0FBUUQsUUFBUSxDQUFDRSxJQUFqQixFQUF1QkYsUUFBdkI7QUFDRCxHQUZELEVBSndCLENBTXBCOztBQUVKLFdBQVNHLElBQVQsQ0FBY0gsUUFBZCxFQUF3QjtBQUN0QkosV0FBTyxDQUFDUSxHQUFSLENBQVlKLFFBQVEsQ0FBQ0UsSUFBckI7QUFDQSxRQUFJRyxRQUFRLEdBQUcsR0FBR0MsTUFBSCxDQUFVTixRQUFRLENBQUNLLFFBQVQsSUFBcUIsRUFBL0IsRUFBbUNMLFFBQVEsQ0FBQ08sZ0JBQVQsSUFBNkIsRUFBaEUsQ0FBZjtBQUNBRixZQUFRLENBQUNOLE9BQVQsQ0FBaUIsVUFBVVMsR0FBVixFQUFlO0FBQzlCLFVBQUksQ0FBQ1osT0FBTyxDQUFDYSxHQUFSLENBQVlELEdBQVosQ0FBTCxFQUF1QjtBQUNyQixZQUFJRSxXQUFXLEdBQUdoQixHQUFHLENBQUNpQixHQUFKLENBQVFILEdBQVIsQ0FBbEI7O0FBRUEsWUFBSUUsV0FBSixFQUFpQjtBQUNmUCxjQUFJLENBQUNPLFdBQUQsQ0FBSjtBQUNEO0FBQ0Y7QUFDRixLQVJEO0FBU0FaLFVBQU0sQ0FBQ2MsSUFBUCxDQUFZWixRQUFaO0FBQ0Q7O0FBRURQLFdBQVMsQ0FBQ00sT0FBVixDQUFrQixVQUFVQyxRQUFWLEVBQW9CO0FBQ3BDLFFBQUksQ0FBQ0osT0FBTyxDQUFDYSxHQUFSLENBQVlULFFBQVEsQ0FBQ0UsSUFBckIsQ0FBTCxFQUFpQztBQUMvQjtBQUNBQyxVQUFJLENBQUNILFFBQUQsQ0FBSjtBQUNEO0FBQ0YsR0FMRDtBQU1BLFNBQU9GLE1BQVA7QUFDRDs7QUFFYyxTQUFTZSxjQUFULENBQXdCcEIsU0FBeEIsRUFBbUM7QUFDaEQ7QUFDQSxNQUFJcUIsZ0JBQWdCLEdBQUd0QixLQUFLLENBQUNDLFNBQUQsQ0FBNUIsQ0FGZ0QsQ0FFUDs7QUFFekMsU0FBT3NCLHdEQUFjLENBQUNDLE1BQWYsQ0FBc0IsVUFBVUMsR0FBVixFQUFlQyxLQUFmLEVBQXNCO0FBQ2pELFdBQU9ELEdBQUcsQ0FBQ1gsTUFBSixDQUFXUSxnQkFBZ0IsQ0FBQ0ssTUFBakIsQ0FBd0IsVUFBVW5CLFFBQVYsRUFBb0I7QUFDNUQsYUFBT0EsUUFBUSxDQUFDa0IsS0FBVCxLQUFtQkEsS0FBMUI7QUFDRCxLQUZpQixDQUFYLENBQVA7QUFHRCxHQUpNLEVBSUosRUFKSSxDQUFQO0FBS0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/orderModifiers.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return rectToClientRect; });\nfunction rectToClientRect(rect) {\n  return Object.assign(Object.assign({}, rect), {}, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanM/N2JjZiJdLCJuYW1lcyI6WyJyZWN0VG9DbGllbnRSZWN0IiwicmVjdCIsIk9iamVjdCIsImFzc2lnbiIsImxlZnQiLCJ4IiwidG9wIiwieSIsInJpZ2h0Iiwid2lkdGgiLCJib3R0b20iLCJoZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDN0MsU0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWNELE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JGLElBQWxCLENBQWQsRUFBdUMsRUFBdkMsRUFBMkM7QUFDaERHLFFBQUksRUFBRUgsSUFBSSxDQUFDSSxDQURxQztBQUVoREMsT0FBRyxFQUFFTCxJQUFJLENBQUNNLENBRnNDO0FBR2hEQyxTQUFLLEVBQUVQLElBQUksQ0FBQ0ksQ0FBTCxHQUFTSixJQUFJLENBQUNRLEtBSDJCO0FBSWhEQyxVQUFNLEVBQUVULElBQUksQ0FBQ00sQ0FBTCxHQUFTTixJQUFJLENBQUNVO0FBSjBCLEdBQTNDLENBQVA7QUFNRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZWN0KSwge30sIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return uniqueBy; });\nfunction uniqueBy(arr, fn) {\n  var identifiers = new Set();\n  return arr.filter(function (item) {\n    var identifier = fn(item);\n\n    if (!identifiers.has(identifier)) {\n      identifiers.add(identifier);\n      return true;\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VuaXF1ZUJ5LmpzPzYwMTQiXSwibmFtZXMiOlsidW5pcXVlQnkiLCJhcnIiLCJmbiIsImlkZW50aWZpZXJzIiwiU2V0IiwiZmlsdGVyIiwiaXRlbSIsImlkZW50aWZpZXIiLCJoYXMiLCJhZGQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZSxTQUFTQSxRQUFULENBQWtCQyxHQUFsQixFQUF1QkMsRUFBdkIsRUFBMkI7QUFDeEMsTUFBSUMsV0FBVyxHQUFHLElBQUlDLEdBQUosRUFBbEI7QUFDQSxTQUFPSCxHQUFHLENBQUNJLE1BQUosQ0FBVyxVQUFVQyxJQUFWLEVBQWdCO0FBQ2hDLFFBQUlDLFVBQVUsR0FBR0wsRUFBRSxDQUFDSSxJQUFELENBQW5COztBQUVBLFFBQUksQ0FBQ0gsV0FBVyxDQUFDSyxHQUFaLENBQWdCRCxVQUFoQixDQUFMLEVBQWtDO0FBQ2hDSixpQkFBVyxDQUFDTSxHQUFaLENBQWdCRixVQUFoQjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQTSxDQUFQO0FBUUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VuaXF1ZUJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pcXVlQnkoYXJyLCBmbikge1xuICB2YXIgaWRlbnRpZmllcnMgPSBuZXcgU2V0KCk7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBmbihpdGVtKTtcblxuICAgIGlmICghaWRlbnRpZmllcnMuaGFzKGlkZW50aWZpZXIpKSB7XG4gICAgICBpZGVudGlmaWVycy5hZGQoaWRlbnRpZmllcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/uniqueBy.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return validateModifiers; });\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ \"./node_modules/@popperjs/core/lib/utils/format.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\nfunction validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    Object.keys(modifier).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\" + String(modifier.name) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled) + \"\\\"\"));\n          }\n\n        case 'phase':\n          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__[\"modifierPhases\"].indexOf(modifier.phase) < 0) {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + _enums_js__WEBPACK_IMPORTED_MODULE_1__[\"modifierPhases\"].join(', '), \"\\\"\" + String(modifier.phase) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\" + s + \"\\\"\";\n          }).join(', ') + \"; but \\\"\" + key + \"\\\" was provided.\");\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/validateModifiers.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return within; });\nfunction within(min, value, max) {\n  return Math.max(min, Math.min(value, max));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcz9lNDNmIl0sIm5hbWVzIjpbIndpdGhpbiIsIm1pbiIsInZhbHVlIiwibWF4IiwiTWF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCQyxLQUFyQixFQUE0QkMsR0FBNUIsRUFBaUM7QUFDOUMsU0FBT0MsSUFBSSxDQUFDRCxHQUFMLENBQVNGLEdBQVQsRUFBY0csSUFBSSxDQUFDSCxHQUFMLENBQVNDLEtBQVQsRUFBZ0JDLEdBQWhCLENBQWQsQ0FBUDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbHVlLCBtYXgpKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/within.js\n");

/***/ }),

/***/ "./node_modules/choices.js/public/assets/scripts/choices.js":
/*!******************************************************************!*\
  !*** ./node_modules/choices.js/public/assets/scripts/choices.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! choices.js v9.0.1 | © 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true) module.exports = factory();else {}\n})(window, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"/public/assets/scripts/\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 4);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var isMergeableObject = function isMergeableObject(value) {\n        return isNonNullObject(value) && !isSpecial(value);\n      };\n\n      function isNonNullObject(value) {\n        return !!value && typeof value === 'object';\n      }\n\n      function isSpecial(value) {\n        var stringValue = Object.prototype.toString.call(value);\n        return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n      } // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\n\n      var canUseSymbol = typeof Symbol === 'function' && Symbol.for;\n      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\n      function isReactElement(value) {\n        return value.$$typeof === REACT_ELEMENT_TYPE;\n      }\n\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n\n      function cloneUnlessOtherwiseSpecified(value, options) {\n        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n      }\n\n      function defaultArrayMerge(target, source, options) {\n        return target.concat(source).map(function (element) {\n          return cloneUnlessOtherwiseSpecified(element, options);\n        });\n      }\n\n      function getMergeFunction(key, options) {\n        if (!options.customMerge) {\n          return deepmerge;\n        }\n\n        var customMerge = options.customMerge(key);\n        return typeof customMerge === 'function' ? customMerge : deepmerge;\n      }\n\n      function getEnumerableOwnPropertySymbols(target) {\n        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n          return target.propertyIsEnumerable(symbol);\n        }) : [];\n      }\n\n      function getKeys(target) {\n        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n      } // Protects from prototype poisoning and unexpected merging up the prototype chain.\n\n\n      function propertyIsUnsafe(target, key) {\n        try {\n          return key in target && // Properties are safe to merge if they don't exist in the target yet,\n          !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n          && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n        } catch (unused) {\n          // Counterintuitively, it's safe to merge any property on a target that causes the `in` operator to throw.\n          // This happens when trying to copy an object in the source over a plain string in the target.\n          return false;\n        }\n      }\n\n      function mergeObject(target, source, options) {\n        var destination = {};\n\n        if (options.isMergeableObject(target)) {\n          getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n          });\n        }\n\n        getKeys(source).forEach(function (key) {\n          if (propertyIsUnsafe(target, key)) {\n            return;\n          }\n\n          if (!options.isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n          } else {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n          }\n        });\n        return destination;\n      }\n\n      function deepmerge(target, source, options) {\n        options = options || {};\n        options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n        options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n        // implementations can use it. The caller may not replace it.\n\n        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n        var sourceIsArray = Array.isArray(source);\n        var targetIsArray = Array.isArray(target);\n        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n        if (!sourceAndTargetTypesMatch) {\n          return cloneUnlessOtherwiseSpecified(source, options);\n        } else if (sourceIsArray) {\n          return options.arrayMerge(target, source, options);\n        } else {\n          return mergeObject(target, source, options);\n        }\n      }\n\n      deepmerge.all = function deepmergeAll(array, options) {\n        if (!Array.isArray(array)) {\n          throw new Error('first argument should be an array');\n        }\n\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, options);\n        }, {});\n      };\n\n      var deepmerge_1 = deepmerge;\n      module.exports = deepmerge_1;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (global, module) {\n        /* harmony import */\n        var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n        /* global window */\n\n\n        var root;\n\n        if (typeof self !== 'undefined') {\n          root = self;\n        } else if (typeof window !== 'undefined') {\n          root = window;\n        } else if (typeof global !== 'undefined') {\n          root = global;\n        } else if (true) {\n          root = module;\n        } else {}\n\n        var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__[\n        /* default */\n        \"a\"])(root);\n        /* harmony default export */\n\n        __webpack_exports__[\"a\"] = result;\n        /* WEBPACK VAR INJECTION */\n      }).call(this, __webpack_require__(5), __webpack_require__(6)(module));\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*!\n       * Fuse.js v3.4.5 - Lightweight fuzzy-search (http://fusejs.io)\n       * \n       * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\n       * All Rights Reserved. Apache Software License 2.0\n       * \n       * http://www.apache.org/licenses/LICENSE-2.0\n       */\n      !function (e, t) {\n        true ? module.exports = t() : undefined;\n      }(this, function () {\n        return function (e) {\n          var t = {};\n\n          function n(r) {\n            if (t[r]) return t[r].exports;\n            var o = t[r] = {\n              i: r,\n              l: !1,\n              exports: {}\n            };\n            return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;\n          }\n\n          return n.m = e, n.c = t, n.d = function (e, t, r) {\n            n.o(e, t) || Object.defineProperty(e, t, {\n              enumerable: !0,\n              get: r\n            });\n          }, n.r = function (e) {\n            \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n              value: \"Module\"\n            }), Object.defineProperty(e, \"__esModule\", {\n              value: !0\n            });\n          }, n.t = function (e, t) {\n            if (1 & t && (e = n(e)), 8 & t) return e;\n            if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n            var r = Object.create(null);\n            if (n.r(r), Object.defineProperty(r, \"default\", {\n              enumerable: !0,\n              value: e\n            }), 2 & t && \"string\" != typeof e) for (var o in e) n.d(r, o, function (t) {\n              return e[t];\n            }.bind(null, o));\n            return r;\n          }, n.n = function (e) {\n            var t = e && e.__esModule ? function () {\n              return e.default;\n            } : function () {\n              return e;\n            };\n            return n.d(t, \"a\", t), t;\n          }, n.o = function (e, t) {\n            return Object.prototype.hasOwnProperty.call(e, t);\n          }, n.p = \"\", n(n.s = 1);\n        }([function (e, t) {\n          e.exports = function (e) {\n            return Array.isArray ? Array.isArray(e) : \"[object Array]\" === Object.prototype.toString.call(e);\n          };\n        }, function (e, t, n) {\n          function r(e) {\n            return (r = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n              return typeof e;\n            } : function (e) {\n              return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n            })(e);\n          }\n\n          function o(e, t) {\n            for (var n = 0; n < t.length; n++) {\n              var r = t[n];\n              r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n            }\n          }\n\n          var i = n(2),\n              a = n(8),\n              s = n(0),\n              c = function () {\n            function e(t, n) {\n              var r = n.location,\n                  o = void 0 === r ? 0 : r,\n                  i = n.distance,\n                  s = void 0 === i ? 100 : i,\n                  c = n.threshold,\n                  h = void 0 === c ? .6 : c,\n                  l = n.maxPatternLength,\n                  u = void 0 === l ? 32 : l,\n                  f = n.caseSensitive,\n                  d = void 0 !== f && f,\n                  v = n.tokenSeparator,\n                  p = void 0 === v ? / +/g : v,\n                  g = n.findAllMatches,\n                  y = void 0 !== g && g,\n                  m = n.minMatchCharLength,\n                  k = void 0 === m ? 1 : m,\n                  S = n.id,\n                  x = void 0 === S ? null : S,\n                  b = n.keys,\n                  M = void 0 === b ? [] : b,\n                  _ = n.shouldSort,\n                  L = void 0 === _ || _,\n                  w = n.getFn,\n                  A = void 0 === w ? a : w,\n                  C = n.sortFn,\n                  I = void 0 === C ? function (e, t) {\n                return e.score - t.score;\n              } : C,\n                  O = n.tokenize,\n                  j = void 0 !== O && O,\n                  P = n.matchAllTokens,\n                  F = void 0 !== P && P,\n                  T = n.includeMatches,\n                  z = void 0 !== T && T,\n                  E = n.includeScore,\n                  K = void 0 !== E && E,\n                  $ = n.verbose,\n                  J = void 0 !== $ && $;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: s,\n                threshold: h,\n                maxPatternLength: u,\n                isCaseSensitive: d,\n                tokenSeparator: p,\n                findAllMatches: y,\n                minMatchCharLength: k,\n                id: x,\n                keys: M,\n                includeMatches: z,\n                includeScore: K,\n                shouldSort: L,\n                getFn: A,\n                sortFn: I,\n                verbose: J,\n                tokenize: j,\n                matchAllTokens: F\n              }, this.setCollection(t);\n            }\n\n            var t, n, c;\n            return t = e, (n = [{\n              key: \"setCollection\",\n              value: function (e) {\n                return this.list = e, e;\n              }\n            }, {\n              key: \"search\",\n              value: function (e) {\n                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {\n                  limit: !1\n                };\n\n                this._log('---------\\nSearch pattern: \"'.concat(e, '\"'));\n\n                var n = this._prepareSearchers(e),\n                    r = n.tokenSearchers,\n                    o = n.fullSearcher,\n                    i = this._search(r, o),\n                    a = i.weights,\n                    s = i.results;\n\n                return this._computeScore(a, s), this.options.shouldSort && this._sort(s), t.limit && \"number\" == typeof t.limit && (s = s.slice(0, t.limit)), this._format(s);\n              }\n            }, {\n              key: \"_prepareSearchers\",\n              value: function () {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n                    t = [];\n                if (this.options.tokenize) for (var n = e.split(this.options.tokenSeparator), r = 0, o = n.length; r < o; r += 1) t.push(new i(n[r], this.options));\n                return {\n                  tokenSearchers: t,\n                  fullSearcher: new i(e, this.options)\n                };\n              }\n            }, {\n              key: \"_search\",\n              value: function () {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n                    t = arguments.length > 1 ? arguments[1] : void 0,\n                    n = this.list,\n                    r = {},\n                    o = [];\n\n                if (\"string\" == typeof n[0]) {\n                  for (var i = 0, a = n.length; i < a; i += 1) this._analyze({\n                    key: \"\",\n                    value: n[i],\n                    record: i,\n                    index: i\n                  }, {\n                    resultMap: r,\n                    results: o,\n                    tokenSearchers: e,\n                    fullSearcher: t\n                  });\n\n                  return {\n                    weights: null,\n                    results: o\n                  };\n                }\n\n                for (var s = {}, c = 0, h = n.length; c < h; c += 1) for (var l = n[c], u = 0, f = this.options.keys.length; u < f; u += 1) {\n                  var d = this.options.keys[u];\n\n                  if (\"string\" != typeof d) {\n                    if (s[d.name] = {\n                      weight: 1 - d.weight || 1\n                    }, d.weight <= 0 || d.weight > 1) throw new Error(\"Key weight has to be > 0 and <= 1\");\n                    d = d.name;\n                  } else s[d] = {\n                    weight: 1\n                  };\n\n                  this._analyze({\n                    key: d,\n                    value: this.options.getFn(l, d),\n                    record: l,\n                    index: c\n                  }, {\n                    resultMap: r,\n                    results: o,\n                    tokenSearchers: e,\n                    fullSearcher: t\n                  });\n                }\n\n                return {\n                  weights: s,\n                  results: o\n                };\n              }\n            }, {\n              key: \"_analyze\",\n              value: function (e, t) {\n                var n = e.key,\n                    r = e.arrayIndex,\n                    o = void 0 === r ? -1 : r,\n                    i = e.value,\n                    a = e.record,\n                    c = e.index,\n                    h = t.tokenSearchers,\n                    l = void 0 === h ? [] : h,\n                    u = t.fullSearcher,\n                    f = void 0 === u ? [] : u,\n                    d = t.resultMap,\n                    v = void 0 === d ? {} : d,\n                    p = t.results,\n                    g = void 0 === p ? [] : p;\n\n                if (null != i) {\n                  var y = !1,\n                      m = -1,\n                      k = 0;\n\n                  if (\"string\" == typeof i) {\n                    this._log(\"\\nKey: \".concat(\"\" === n ? \"-\" : n));\n\n                    var S = f.search(i);\n\n                    if (this._log('Full text: \"'.concat(i, '\", score: ').concat(S.score)), this.options.tokenize) {\n                      for (var x = i.split(this.options.tokenSeparator), b = [], M = 0; M < l.length; M += 1) {\n                        var _ = l[M];\n\n                        this._log('\\nPattern: \"'.concat(_.pattern, '\"'));\n\n                        for (var L = !1, w = 0; w < x.length; w += 1) {\n                          var A = x[w],\n                              C = _.search(A),\n                              I = {};\n\n                          C.isMatch ? (I[A] = C.score, y = !0, L = !0, b.push(C.score)) : (I[A] = 1, this.options.matchAllTokens || b.push(1)), this._log('Token: \"'.concat(A, '\", score: ').concat(I[A]));\n                        }\n\n                        L && (k += 1);\n                      }\n\n                      m = b[0];\n\n                      for (var O = b.length, j = 1; j < O; j += 1) m += b[j];\n\n                      m /= O, this._log(\"Token score average:\", m);\n                    }\n\n                    var P = S.score;\n                    m > -1 && (P = (P + m) / 2), this._log(\"Score average:\", P);\n                    var F = !this.options.tokenize || !this.options.matchAllTokens || k >= l.length;\n\n                    if (this._log(\"\\nCheck Matches: \".concat(F)), (y || S.isMatch) && F) {\n                      var T = v[c];\n                      T ? T.output.push({\n                        key: n,\n                        arrayIndex: o,\n                        value: i,\n                        score: P,\n                        matchedIndices: S.matchedIndices\n                      }) : (v[c] = {\n                        item: a,\n                        output: [{\n                          key: n,\n                          arrayIndex: o,\n                          value: i,\n                          score: P,\n                          matchedIndices: S.matchedIndices\n                        }]\n                      }, g.push(v[c]));\n                    }\n                  } else if (s(i)) for (var z = 0, E = i.length; z < E; z += 1) this._analyze({\n                    key: n,\n                    arrayIndex: z,\n                    value: i[z],\n                    record: a,\n                    index: c\n                  }, {\n                    resultMap: v,\n                    results: g,\n                    tokenSearchers: l,\n                    fullSearcher: f\n                  });\n                }\n              }\n            }, {\n              key: \"_computeScore\",\n              value: function (e, t) {\n                this._log(\"\\n\\nComputing score:\\n\");\n\n                for (var n = 0, r = t.length; n < r; n += 1) {\n                  for (var o = t[n].output, i = o.length, a = 1, s = 1, c = 0; c < i; c += 1) {\n                    var h = e ? e[o[c].key].weight : 1,\n                        l = (1 === h ? o[c].score : o[c].score || .001) * h;\n                    1 !== h ? s = Math.min(s, l) : (o[c].nScore = l, a *= l);\n                  }\n\n                  t[n].score = 1 === s ? a : s, this._log(t[n]);\n                }\n              }\n            }, {\n              key: \"_sort\",\n              value: function (e) {\n                this._log(\"\\n\\nSorting....\"), e.sort(this.options.sortFn);\n              }\n            }, {\n              key: \"_format\",\n              value: function (e) {\n                var t = [];\n\n                if (this.options.verbose) {\n                  var n = [];\n                  this._log(\"\\n\\nOutput:\\n\\n\", JSON.stringify(e, function (e, t) {\n                    if (\"object\" === r(t) && null !== t) {\n                      if (-1 !== n.indexOf(t)) return;\n                      n.push(t);\n                    }\n\n                    return t;\n                  })), n = null;\n                }\n\n                var o = [];\n                this.options.includeMatches && o.push(function (e, t) {\n                  var n = e.output;\n                  t.matches = [];\n\n                  for (var r = 0, o = n.length; r < o; r += 1) {\n                    var i = n[r];\n\n                    if (0 !== i.matchedIndices.length) {\n                      var a = {\n                        indices: i.matchedIndices,\n                        value: i.value\n                      };\n                      i.key && (a.key = i.key), i.hasOwnProperty(\"arrayIndex\") && i.arrayIndex > -1 && (a.arrayIndex = i.arrayIndex), t.matches.push(a);\n                    }\n                  }\n                }), this.options.includeScore && o.push(function (e, t) {\n                  t.score = e.score;\n                });\n\n                for (var i = 0, a = e.length; i < a; i += 1) {\n                  var s = e[i];\n\n                  if (this.options.id && (s.item = this.options.getFn(s.item, this.options.id)[0]), o.length) {\n                    for (var c = {\n                      item: s.item\n                    }, h = 0, l = o.length; h < l; h += 1) o[h](s, c);\n\n                    t.push(c);\n                  } else t.push(s.item);\n                }\n\n                return t;\n              }\n            }, {\n              key: \"_log\",\n              value: function () {\n                var e;\n                this.options.verbose && (e = console).log.apply(e, arguments);\n              }\n            }]) && o(t.prototype, n), c && o(t, c), e;\n          }();\n\n          e.exports = c;\n        }, function (e, t, n) {\n          function r(e, t) {\n            for (var n = 0; n < t.length; n++) {\n              var r = t[n];\n              r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n            }\n          }\n\n          var o = n(3),\n              i = n(4),\n              a = n(7),\n              s = function () {\n            function e(t, n) {\n              var r = n.location,\n                  o = void 0 === r ? 0 : r,\n                  i = n.distance,\n                  s = void 0 === i ? 100 : i,\n                  c = n.threshold,\n                  h = void 0 === c ? .6 : c,\n                  l = n.maxPatternLength,\n                  u = void 0 === l ? 32 : l,\n                  f = n.isCaseSensitive,\n                  d = void 0 !== f && f,\n                  v = n.tokenSeparator,\n                  p = void 0 === v ? / +/g : v,\n                  g = n.findAllMatches,\n                  y = void 0 !== g && g,\n                  m = n.minMatchCharLength,\n                  k = void 0 === m ? 1 : m;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: s,\n                threshold: h,\n                maxPatternLength: u,\n                isCaseSensitive: d,\n                tokenSeparator: p,\n                findAllMatches: y,\n                minMatchCharLength: k\n              }, this.pattern = this.options.isCaseSensitive ? t : t.toLowerCase(), this.pattern.length <= u && (this.patternAlphabet = a(this.pattern));\n            }\n\n            var t, n, s;\n            return t = e, (n = [{\n              key: \"search\",\n              value: function (e) {\n                if (this.options.isCaseSensitive || (e = e.toLowerCase()), this.pattern === e) return {\n                  isMatch: !0,\n                  score: 0,\n                  matchedIndices: [[0, e.length - 1]]\n                };\n                var t = this.options,\n                    n = t.maxPatternLength,\n                    r = t.tokenSeparator;\n                if (this.pattern.length > n) return o(e, this.pattern, r);\n                var a = this.options,\n                    s = a.location,\n                    c = a.distance,\n                    h = a.threshold,\n                    l = a.findAllMatches,\n                    u = a.minMatchCharLength;\n                return i(e, this.pattern, this.patternAlphabet, {\n                  location: s,\n                  distance: c,\n                  threshold: h,\n                  findAllMatches: l,\n                  minMatchCharLength: u\n                });\n              }\n            }]) && r(t.prototype, n), s && r(t, s), e;\n          }();\n\n          e.exports = s;\n        }, function (e, t) {\n          var n = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n\n          e.exports = function (e, t) {\n            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : / +/g,\n                o = new RegExp(t.replace(n, \"\\\\$&\").replace(r, \"|\")),\n                i = e.match(o),\n                a = !!i,\n                s = [];\n            if (a) for (var c = 0, h = i.length; c < h; c += 1) {\n              var l = i[c];\n              s.push([e.indexOf(l), l.length - 1]);\n            }\n            return {\n              score: a ? .5 : 1,\n              isMatch: a,\n              matchedIndices: s\n            };\n          };\n        }, function (e, t, n) {\n          var r = n(5),\n              o = n(6);\n\n          e.exports = function (e, t, n, i) {\n            for (var a = i.location, s = void 0 === a ? 0 : a, c = i.distance, h = void 0 === c ? 100 : c, l = i.threshold, u = void 0 === l ? .6 : l, f = i.findAllMatches, d = void 0 !== f && f, v = i.minMatchCharLength, p = void 0 === v ? 1 : v, g = s, y = e.length, m = u, k = e.indexOf(t, g), S = t.length, x = [], b = 0; b < y; b += 1) x[b] = 0;\n\n            if (-1 !== k) {\n              var M = r(t, {\n                errors: 0,\n                currentLocation: k,\n                expectedLocation: g,\n                distance: h\n              });\n\n              if (m = Math.min(M, m), -1 !== (k = e.lastIndexOf(t, g + S))) {\n                var _ = r(t, {\n                  errors: 0,\n                  currentLocation: k,\n                  expectedLocation: g,\n                  distance: h\n                });\n\n                m = Math.min(_, m);\n              }\n            }\n\n            k = -1;\n\n            for (var L = [], w = 1, A = S + y, C = 1 << S - 1, I = 0; I < S; I += 1) {\n              for (var O = 0, j = A; O < j;) {\n                r(t, {\n                  errors: I,\n                  currentLocation: g + j,\n                  expectedLocation: g,\n                  distance: h\n                }) <= m ? O = j : A = j, j = Math.floor((A - O) / 2 + O);\n              }\n\n              A = j;\n              var P = Math.max(1, g - j + 1),\n                  F = d ? y : Math.min(g + j, y) + S,\n                  T = Array(F + 2);\n              T[F + 1] = (1 << I) - 1;\n\n              for (var z = F; z >= P; z -= 1) {\n                var E = z - 1,\n                    K = n[e.charAt(E)];\n\n                if (K && (x[E] = 1), T[z] = (T[z + 1] << 1 | 1) & K, 0 !== I && (T[z] |= (L[z + 1] | L[z]) << 1 | 1 | L[z + 1]), T[z] & C && (w = r(t, {\n                  errors: I,\n                  currentLocation: E,\n                  expectedLocation: g,\n                  distance: h\n                })) <= m) {\n                  if (m = w, (k = E) <= g) break;\n                  P = Math.max(1, 2 * g - k);\n                }\n              }\n\n              if (r(t, {\n                errors: I + 1,\n                currentLocation: g,\n                expectedLocation: g,\n                distance: h\n              }) > m) break;\n              L = T;\n            }\n\n            return {\n              isMatch: k >= 0,\n              score: 0 === w ? .001 : w,\n              matchedIndices: o(x, p)\n            };\n          };\n        }, function (e, t) {\n          e.exports = function (e, t) {\n            var n = t.errors,\n                r = void 0 === n ? 0 : n,\n                o = t.currentLocation,\n                i = void 0 === o ? 0 : o,\n                a = t.expectedLocation,\n                s = void 0 === a ? 0 : a,\n                c = t.distance,\n                h = void 0 === c ? 100 : c,\n                l = r / e.length,\n                u = Math.abs(s - i);\n            return h ? l + u / h : u ? 1 : l;\n          };\n        }, function (e, t) {\n          e.exports = function () {\n            for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, n = [], r = -1, o = -1, i = 0, a = e.length; i < a; i += 1) {\n              var s = e[i];\n              s && -1 === r ? r = i : s || -1 === r || ((o = i - 1) - r + 1 >= t && n.push([r, o]), r = -1);\n            }\n\n            return e[i - 1] && i - r >= t && n.push([r, i - 1]), n;\n          };\n        }, function (e, t) {\n          e.exports = function (e) {\n            for (var t = {}, n = e.length, r = 0; r < n; r += 1) t[e.charAt(r)] = 0;\n\n            for (var o = 0; o < n; o += 1) t[e.charAt(o)] |= 1 << n - o - 1;\n\n            return t;\n          };\n        }, function (e, t, n) {\n          var r = n(0);\n\n          e.exports = function (e, t) {\n            return function e(t, n, o) {\n              if (n) {\n                var i = n.indexOf(\".\"),\n                    a = n,\n                    s = null;\n                -1 !== i && (a = n.slice(0, i), s = n.slice(i + 1));\n                var c = t[a];\n                if (null != c) if (s || \"string\" != typeof c && \"number\" != typeof c) {\n                  if (r(c)) for (var h = 0, l = c.length; h < l; h += 1) e(c[h], s, o);else s && e(c, s, o);\n                } else o.push(c.toString());\n              } else o.push(t);\n\n              return o;\n            }(e, t, []);\n          };\n        }]);\n      });\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n      /* harmony export (binding) */\n\n      __webpack_require__.d(__webpack_exports__, \"a\", function () {\n        return symbolObservablePonyfill;\n      });\n\n      function symbolObservablePonyfill(root) {\n        var result;\n        var Symbol = root.Symbol;\n\n        if (typeof Symbol === 'function') {\n          if (Symbol.observable) {\n            result = Symbol.observable;\n          } else {\n            result = Symbol('observable');\n            Symbol.observable = result;\n          }\n        } else {\n          result = '@@observable';\n        }\n\n        return result;\n      }\n\n      ;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = __webpack_require__(7);\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      var g; // This works in non-strict mode\n\n      g = function () {\n        return this;\n      }();\n\n      try {\n        // This works if eval is allowed (see CSP)\n        g = g || new Function(\"return this\")();\n      } catch (e) {\n        // This works if the window reference is available\n        if (typeof window === \"object\") g = window;\n      } // g can still be undefined, but nothing to do about it...\n      // We return undefined, instead of nothing here, so it's\n      // easier to handle this case. if(!global) { ...}\n\n\n      module.exports = g;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      module.exports = function (originalModule) {\n        if (!originalModule.webpackPolyfill) {\n          var module = Object.create(originalModule); // module.parent = undefined by default\n\n          if (!module.children) module.children = [];\n          Object.defineProperty(module, \"loaded\", {\n            enumerable: true,\n            get: function () {\n              return module.l;\n            }\n          });\n          Object.defineProperty(module, \"id\", {\n            enumerable: true,\n            get: function () {\n              return module.i;\n            }\n          });\n          Object.defineProperty(module, \"exports\", {\n            enumerable: true\n          });\n          module.webpackPolyfill = 1;\n        }\n\n        return module;\n      };\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      __webpack_require__.r(__webpack_exports__); // EXTERNAL MODULE: ./node_modules/fuse.js/dist/fuse.js\n\n\n      var dist_fuse = __webpack_require__(2);\n\n      var fuse_default = /*#__PURE__*/__webpack_require__.n(dist_fuse); // EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js\n\n\n      var cjs = __webpack_require__(0);\n\n      var cjs_default = /*#__PURE__*/__webpack_require__.n(cjs); // EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js\n\n\n      var es = __webpack_require__(1); // CONCATENATED MODULE: ./node_modules/redux/es/redux.js\n\n      /**\n       * These are private action types reserved by Redux.\n       * For any unknown actions, you must return the current state.\n       * If the current state is undefined, you must return the initial state.\n       * Do not reference these action types directly in your code.\n       */\n\n\n      var randomString = function randomString() {\n        return Math.random().toString(36).substring(7).split('').join('.');\n      };\n\n      var ActionTypes = {\n        INIT: \"@@redux/INIT\" + randomString(),\n        REPLACE: \"@@redux/REPLACE\" + randomString(),\n        PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n          return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n        }\n      };\n      /**\n       * @param {any} obj The object to inspect.\n       * @returns {boolean} True if the argument appears to be a plain object.\n       */\n\n      function isPlainObject(obj) {\n        if (typeof obj !== 'object' || obj === null) return false;\n        var proto = obj;\n\n        while (Object.getPrototypeOf(proto) !== null) {\n          proto = Object.getPrototypeOf(proto);\n        }\n\n        return Object.getPrototypeOf(obj) === proto;\n      }\n      /**\n       * Creates a Redux store that holds the state tree.\n       * The only way to change the data in the store is to call `dispatch()` on it.\n       *\n       * There should only be a single store in your app. To specify how different\n       * parts of the state tree respond to actions, you may combine several reducers\n       * into a single reducer function by using `combineReducers`.\n       *\n       * @param {Function} reducer A function that returns the next state tree, given\n       * the current state tree and the action to handle.\n       *\n       * @param {any} [preloadedState] The initial state. You may optionally specify it\n       * to hydrate the state from the server in universal apps, or to restore a\n       * previously serialized user session.\n       * If you use `combineReducers` to produce the root reducer function, this must be\n       * an object with the same shape as `combineReducers` keys.\n       *\n       * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n       * to enhance the store with third-party capabilities such as middleware,\n       * time travel, persistence, etc. The only store enhancer that ships with Redux\n       * is `applyMiddleware()`.\n       *\n       * @returns {Store} A Redux store that lets you read the state, dispatch actions\n       * and subscribe to changes.\n       */\n\n\n      function createStore(reducer, preloadedState, enhancer) {\n        var _ref2;\n\n        if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n          throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n        }\n\n        if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n          enhancer = preloadedState;\n          preloadedState = undefined;\n        }\n\n        if (typeof enhancer !== 'undefined') {\n          if (typeof enhancer !== 'function') {\n            throw new Error('Expected the enhancer to be a function.');\n          }\n\n          return enhancer(createStore)(reducer, preloadedState);\n        }\n\n        if (typeof reducer !== 'function') {\n          throw new Error('Expected the reducer to be a function.');\n        }\n\n        var currentReducer = reducer;\n        var currentState = preloadedState;\n        var currentListeners = [];\n        var nextListeners = currentListeners;\n        var isDispatching = false;\n        /**\n         * This makes a shallow copy of currentListeners so we can use\n         * nextListeners as a temporary list while dispatching.\n         *\n         * This prevents any bugs around consumers calling\n         * subscribe/unsubscribe in the middle of a dispatch.\n         */\n\n        function ensureCanMutateNextListeners() {\n          if (nextListeners === currentListeners) {\n            nextListeners = currentListeners.slice();\n          }\n        }\n        /**\n         * Reads the state tree managed by the store.\n         *\n         * @returns {any} The current state tree of your application.\n         */\n\n\n        function getState() {\n          if (isDispatching) {\n            throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n          }\n\n          return currentState;\n        }\n        /**\n         * Adds a change listener. It will be called any time an action is dispatched,\n         * and some part of the state tree may potentially have changed. You may then\n         * call `getState()` to read the current state tree inside the callback.\n         *\n         * You may call `dispatch()` from a change listener, with the following\n         * caveats:\n         *\n         * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n         * If you subscribe or unsubscribe while the listeners are being invoked, this\n         * will not have any effect on the `dispatch()` that is currently in progress.\n         * However, the next `dispatch()` call, whether nested or not, will use a more\n         * recent snapshot of the subscription list.\n         *\n         * 2. The listener should not expect to see all state changes, as the state\n         * might have been updated multiple times during a nested `dispatch()` before\n         * the listener is called. It is, however, guaranteed that all subscribers\n         * registered before the `dispatch()` started will be called with the latest\n         * state by the time it exits.\n         *\n         * @param {Function} listener A callback to be invoked on every dispatch.\n         * @returns {Function} A function to remove this change listener.\n         */\n\n\n        function subscribe(listener) {\n          if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n          }\n\n          if (isDispatching) {\n            throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n          }\n\n          var isSubscribed = true;\n          ensureCanMutateNextListeners();\n          nextListeners.push(listener);\n          return function unsubscribe() {\n            if (!isSubscribed) {\n              return;\n            }\n\n            if (isDispatching) {\n              throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n            }\n\n            isSubscribed = false;\n            ensureCanMutateNextListeners();\n            var index = nextListeners.indexOf(listener);\n            nextListeners.splice(index, 1);\n          };\n        }\n        /**\n         * Dispatches an action. It is the only way to trigger a state change.\n         *\n         * The `reducer` function, used to create the store, will be called with the\n         * current state tree and the given `action`. Its return value will\n         * be considered the **next** state of the tree, and the change listeners\n         * will be notified.\n         *\n         * The base implementation only supports plain object actions. If you want to\n         * dispatch a Promise, an Observable, a thunk, or something else, you need to\n         * wrap your store creating function into the corresponding middleware. For\n         * example, see the documentation for the `redux-thunk` package. Even the\n         * middleware will eventually dispatch plain object actions using this method.\n         *\n         * @param {Object} action A plain object representing “what changed”. It is\n         * a good idea to keep actions serializable so you can record and replay user\n         * sessions, or use the time travelling `redux-devtools`. An action must have\n         * a `type` property which may not be `undefined`. It is a good idea to use\n         * string constants for action types.\n         *\n         * @returns {Object} For convenience, the same action object you dispatched.\n         *\n         * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n         * return something else (for example, a Promise you can await).\n         */\n\n\n        function dispatch(action) {\n          if (!isPlainObject(action)) {\n            throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n          }\n\n          if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n          }\n\n          if (isDispatching) {\n            throw new Error('Reducers may not dispatch actions.');\n          }\n\n          try {\n            isDispatching = true;\n            currentState = currentReducer(currentState, action);\n          } finally {\n            isDispatching = false;\n          }\n\n          var listeners = currentListeners = nextListeners;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i];\n            listener();\n          }\n\n          return action;\n        }\n        /**\n         * Replaces the reducer currently used by the store to calculate the state.\n         *\n         * You might need this if your app implements code splitting and you want to\n         * load some of the reducers dynamically. You might also need this if you\n         * implement a hot reloading mechanism for Redux.\n         *\n         * @param {Function} nextReducer The reducer for the store to use instead.\n         * @returns {void}\n         */\n\n\n        function replaceReducer(nextReducer) {\n          if (typeof nextReducer !== 'function') {\n            throw new Error('Expected the nextReducer to be a function.');\n          }\n\n          currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n          // Any reducers that existed in both the new and old rootReducer\n          // will receive the previous state. This effectively populates\n          // the new state tree with any relevant data from the old one.\n\n          dispatch({\n            type: ActionTypes.REPLACE\n          });\n        }\n        /**\n         * Interoperability point for observable/reactive libraries.\n         * @returns {observable} A minimal observable of state changes.\n         * For more information, see the observable proposal:\n         * https://github.com/tc39/proposal-observable\n         */\n\n\n        function observable() {\n          var _ref;\n\n          var outerSubscribe = subscribe;\n          return _ref = {\n            /**\n             * The minimal observable subscription method.\n             * @param {Object} observer Any object that can be used as an observer.\n             * The observer object should have a `next` method.\n             * @returns {subscription} An object with an `unsubscribe` method that can\n             * be used to unsubscribe the observable from the store, and prevent further\n             * emission of values from the observable.\n             */\n            subscribe: function subscribe(observer) {\n              if (typeof observer !== 'object' || observer === null) {\n                throw new TypeError('Expected the observer to be an object.');\n              }\n\n              function observeState() {\n                if (observer.next) {\n                  observer.next(getState());\n                }\n              }\n\n              observeState();\n              var unsubscribe = outerSubscribe(observeState);\n              return {\n                unsubscribe: unsubscribe\n              };\n            }\n          }, _ref[es[\"a\"\n          /* default */\n          ]] = function () {\n            return this;\n          }, _ref;\n        } // When a store is created, an \"INIT\" action is dispatched so that every\n        // reducer returns their initial state. This effectively populates\n        // the initial state tree.\n\n\n        dispatch({\n          type: ActionTypes.INIT\n        });\n        return _ref2 = {\n          dispatch: dispatch,\n          subscribe: subscribe,\n          getState: getState,\n          replaceReducer: replaceReducer\n        }, _ref2[es[\"a\"\n        /* default */\n        ]] = observable, _ref2;\n      }\n      /**\n       * Prints a warning in the console if it exists.\n       *\n       * @param {String} message The warning message.\n       * @returns {void}\n       */\n\n\n      function warning(message) {\n        /* eslint-disable no-console */\n        if (typeof console !== 'undefined' && typeof console.error === 'function') {\n          console.error(message);\n        }\n        /* eslint-enable no-console */\n\n\n        try {\n          // This error was thrown as a convenience so that if you enable\n          // \"break on all exceptions\" in your console,\n          // it would pause the execution at this line.\n          throw new Error(message);\n        } catch (e) {} // eslint-disable-line no-empty\n\n      }\n\n      function getUndefinedStateErrorMessage(key, action) {\n        var actionType = action && action.type;\n        var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n        return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n      }\n\n      function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n        var reducerKeys = Object.keys(reducers);\n        var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n        if (reducerKeys.length === 0) {\n          return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n        }\n\n        if (!isPlainObject(inputState)) {\n          return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n        }\n\n        var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n          return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n        });\n        unexpectedKeys.forEach(function (key) {\n          unexpectedKeyCache[key] = true;\n        });\n        if (action && action.type === ActionTypes.REPLACE) return;\n\n        if (unexpectedKeys.length > 0) {\n          return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n        }\n      }\n\n      function assertReducerShape(reducers) {\n        Object.keys(reducers).forEach(function (key) {\n          var reducer = reducers[key];\n          var initialState = reducer(undefined, {\n            type: ActionTypes.INIT\n          });\n\n          if (typeof initialState === 'undefined') {\n            throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n          }\n\n          if (typeof reducer(undefined, {\n            type: ActionTypes.PROBE_UNKNOWN_ACTION()\n          }) === 'undefined') {\n            throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n          }\n        });\n      }\n      /**\n       * Turns an object whose values are different reducer functions, into a single\n       * reducer function. It will call every child reducer, and gather their results\n       * into a single state object, whose keys correspond to the keys of the passed\n       * reducer functions.\n       *\n       * @param {Object} reducers An object whose values correspond to different\n       * reducer functions that need to be combined into one. One handy way to obtain\n       * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n       * undefined for any action. Instead, they should return their initial state\n       * if the state passed to them was undefined, and the current state for any\n       * unrecognized action.\n       *\n       * @returns {Function} A reducer function that invokes every reducer inside the\n       * passed object, and builds a state object with the same shape.\n       */\n\n\n      function combineReducers(reducers) {\n        var reducerKeys = Object.keys(reducers);\n        var finalReducers = {};\n\n        for (var i = 0; i < reducerKeys.length; i++) {\n          var key = reducerKeys[i];\n\n          if (false) {}\n\n          if (typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key];\n          }\n        }\n\n        var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n        // keys multiple times.\n\n        var unexpectedKeyCache;\n\n        if (false) {}\n\n        var shapeAssertionError;\n\n        try {\n          assertReducerShape(finalReducers);\n        } catch (e) {\n          shapeAssertionError = e;\n        }\n\n        return function combination(state, action) {\n          if (state === void 0) {\n            state = {};\n          }\n\n          if (shapeAssertionError) {\n            throw shapeAssertionError;\n          }\n\n          if (false) { var warningMessage; }\n\n          var hasChanged = false;\n          var nextState = {};\n\n          for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n            var _key = finalReducerKeys[_i];\n            var reducer = finalReducers[_key];\n            var previousStateForKey = state[_key];\n            var nextStateForKey = reducer(previousStateForKey, action);\n\n            if (typeof nextStateForKey === 'undefined') {\n              var errorMessage = getUndefinedStateErrorMessage(_key, action);\n              throw new Error(errorMessage);\n            }\n\n            nextState[_key] = nextStateForKey;\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n          }\n\n          return hasChanged ? nextState : state;\n        };\n      }\n\n      function bindActionCreator(actionCreator, dispatch) {\n        return function () {\n          return dispatch(actionCreator.apply(this, arguments));\n        };\n      }\n      /**\n       * Turns an object whose values are action creators, into an object with the\n       * same keys, but with every function wrapped into a `dispatch` call so they\n       * may be invoked directly. This is just a convenience method, as you can call\n       * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n       *\n       * For convenience, you can also pass an action creator as the first argument,\n       * and get a dispatch wrapped function in return.\n       *\n       * @param {Function|Object} actionCreators An object whose values are action\n       * creator functions. One handy way to obtain it is to use ES6 `import * as`\n       * syntax. You may also pass a single function.\n       *\n       * @param {Function} dispatch The `dispatch` function available on your Redux\n       * store.\n       *\n       * @returns {Function|Object} The object mimicking the original object, but with\n       * every action creator wrapped into the `dispatch` call. If you passed a\n       * function as `actionCreators`, the return value will also be a single\n       * function.\n       */\n\n\n      function bindActionCreators(actionCreators, dispatch) {\n        if (typeof actionCreators === 'function') {\n          return bindActionCreator(actionCreators, dispatch);\n        }\n\n        if (typeof actionCreators !== 'object' || actionCreators === null) {\n          throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n        }\n\n        var boundActionCreators = {};\n\n        for (var key in actionCreators) {\n          var actionCreator = actionCreators[key];\n\n          if (typeof actionCreator === 'function') {\n            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n          }\n        }\n\n        return boundActionCreators;\n      }\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n\n        if (Object.getOwnPropertySymbols) {\n          keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n        }\n\n        if (enumerableOnly) keys = keys.filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        return keys;\n      }\n\n      function _objectSpread2(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i] != null ? arguments[i] : {};\n\n          if (i % 2) {\n            ownKeys(source, true).forEach(function (key) {\n              _defineProperty(target, key, source[key]);\n            });\n          } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n          } else {\n            ownKeys(source).forEach(function (key) {\n              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n          }\n        }\n\n        return target;\n      }\n      /**\n       * Composes single-argument functions from right to left. The rightmost\n       * function can take multiple arguments as it provides the signature for\n       * the resulting composite function.\n       *\n       * @param {...Function} funcs The functions to compose.\n       * @returns {Function} A function obtained by composing the argument functions\n       * from right to left. For example, compose(f, g, h) is identical to doing\n       * (...args) => f(g(h(...args))).\n       */\n\n\n      function compose() {\n        for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n          funcs[_key] = arguments[_key];\n        }\n\n        if (funcs.length === 0) {\n          return function (arg) {\n            return arg;\n          };\n        }\n\n        if (funcs.length === 1) {\n          return funcs[0];\n        }\n\n        return funcs.reduce(function (a, b) {\n          return function () {\n            return a(b.apply(void 0, arguments));\n          };\n        });\n      }\n      /**\n       * Creates a store enhancer that applies middleware to the dispatch method\n       * of the Redux store. This is handy for a variety of tasks, such as expressing\n       * asynchronous actions in a concise manner, or logging every action payload.\n       *\n       * See `redux-thunk` package as an example of the Redux middleware.\n       *\n       * Because middleware is potentially asynchronous, this should be the first\n       * store enhancer in the composition chain.\n       *\n       * Note that each middleware will be given the `dispatch` and `getState` functions\n       * as named arguments.\n       *\n       * @param {...Function} middlewares The middleware chain to be applied.\n       * @returns {Function} A store enhancer applying the middleware.\n       */\n\n\n      function applyMiddleware() {\n        for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n          middlewares[_key] = arguments[_key];\n        }\n\n        return function (createStore) {\n          return function () {\n            var store = createStore.apply(void 0, arguments);\n\n            var _dispatch = function dispatch() {\n              throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n            };\n\n            var middlewareAPI = {\n              getState: store.getState,\n              dispatch: function dispatch() {\n                return _dispatch.apply(void 0, arguments);\n              }\n            };\n            var chain = middlewares.map(function (middleware) {\n              return middleware(middlewareAPI);\n            });\n            _dispatch = compose.apply(void 0, chain)(store.dispatch);\n            return _objectSpread2({}, store, {\n              dispatch: _dispatch\n            });\n          };\n        };\n      }\n      /*\n       * This is a dummy function to check if the function name has been altered by minification.\n       * If the function has been minified and NODE_ENV !== 'production', warn the user.\n       */\n\n\n      function isCrushed() {}\n\n      if (false) {} // CONCATENATED MODULE: ./src/scripts/reducers/items.js\n\n\n      var defaultState = [];\n\n      function items_items(state, action) {\n        if (state === void 0) {\n          state = defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_ITEM':\n            {\n              // Add object to items array\n              var newState = [].concat(state, [{\n                id: action.id,\n                choiceId: action.choiceId,\n                groupId: action.groupId,\n                value: action.value,\n                label: action.label,\n                active: true,\n                highlighted: false,\n                customProperties: action.customProperties,\n                placeholder: action.placeholder || false,\n                keyCode: null\n              }]);\n              return newState.map(function (obj) {\n                var item = obj;\n                item.highlighted = false;\n                return item;\n              });\n            }\n\n          case 'REMOVE_ITEM':\n            {\n              // Set item to inactive\n              return state.map(function (obj) {\n                var item = obj;\n\n                if (item.id === action.id) {\n                  item.active = false;\n                }\n\n                return item;\n              });\n            }\n\n          case 'HIGHLIGHT_ITEM':\n            {\n              return state.map(function (obj) {\n                var item = obj;\n\n                if (item.id === action.id) {\n                  item.highlighted = action.highlighted;\n                }\n\n                return item;\n              });\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/groups.js\n\n\n      var groups_defaultState = [];\n\n      function groups(state, action) {\n        if (state === void 0) {\n          state = groups_defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_GROUP':\n            {\n              return [].concat(state, [{\n                id: action.id,\n                value: action.value,\n                active: action.active,\n                disabled: action.disabled\n              }]);\n            }\n\n          case 'CLEAR_CHOICES':\n            {\n              return [];\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/choices.js\n\n\n      var choices_defaultState = [];\n\n      function choices_choices(state, action) {\n        if (state === void 0) {\n          state = choices_defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_CHOICE':\n            {\n              /*\n                  A disabled choice appears in the choice dropdown but cannot be selected\n                  A selected choice has been added to the passed input's value (added as an item)\n                  An active choice appears within the choice dropdown\n               */\n              return [].concat(state, [{\n                id: action.id,\n                elementId: action.elementId,\n                groupId: action.groupId,\n                value: action.value,\n                label: action.label || action.value,\n                disabled: action.disabled || false,\n                selected: false,\n                active: true,\n                score: 9999,\n                customProperties: action.customProperties,\n                placeholder: action.placeholder || false,\n                keyCode: null\n              }]);\n            }\n\n          case 'ADD_ITEM':\n            {\n              // If all choices need to be activated\n              if (action.activateOptions) {\n                return state.map(function (obj) {\n                  var choice = obj;\n                  choice.active = action.active;\n                  return choice;\n                });\n              } // When an item is added and it has an associated choice,\n              // we want to disable it so it can't be chosen again\n\n\n              if (action.choiceId > -1) {\n                return state.map(function (obj) {\n                  var choice = obj;\n\n                  if (choice.id === parseInt(action.choiceId, 10)) {\n                    choice.selected = true;\n                  }\n\n                  return choice;\n                });\n              }\n\n              return state;\n            }\n\n          case 'REMOVE_ITEM':\n            {\n              // When an item is removed and it has an associated choice,\n              // we want to re-enable it so it can be chosen again\n              if (action.choiceId > -1) {\n                return state.map(function (obj) {\n                  var choice = obj;\n\n                  if (choice.id === parseInt(action.choiceId, 10)) {\n                    choice.selected = false;\n                  }\n\n                  return choice;\n                });\n              }\n\n              return state;\n            }\n\n          case 'FILTER_CHOICES':\n            {\n              return state.map(function (obj) {\n                var choice = obj; // Set active state based on whether choice is\n                // within filtered results\n\n                choice.active = action.results.some(function (_ref) {\n                  var item = _ref.item,\n                      score = _ref.score;\n\n                  if (item.id === choice.id) {\n                    choice.score = score;\n                    return true;\n                  }\n\n                  return false;\n                });\n                return choice;\n              });\n            }\n\n          case 'ACTIVATE_CHOICES':\n            {\n              return state.map(function (obj) {\n                var choice = obj;\n                choice.active = action.active;\n                return choice;\n              });\n            }\n\n          case 'CLEAR_CHOICES':\n            {\n              return choices_defaultState;\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/general.js\n\n\n      var general_defaultState = {\n        loading: false\n      };\n\n      var general = function general(state, action) {\n        if (state === void 0) {\n          state = general_defaultState;\n        }\n\n        switch (action.type) {\n          case 'SET_IS_LOADING':\n            {\n              return {\n                loading: action.isLoading\n              };\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      };\n      /* harmony default export */\n\n\n      var reducers_general = general; // CONCATENATED MODULE: ./src/scripts/lib/utils.js\n\n      /**\n       * @param {number} min\n       * @param {number} max\n       * @returns {number}\n       */\n\n      var getRandomNumber = function getRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n      };\n      /**\n       * @param {number} length\n       * @returns {string}\n       */\n\n\n      var generateChars = function generateChars(length) {\n        return Array.from({\n          length: length\n        }, function () {\n          return getRandomNumber(0, 36).toString(36);\n        }).join('');\n      };\n      /**\n       * @param {HTMLInputElement | HTMLSelectElement} element\n       * @param {string} prefix\n       * @returns {string}\n       */\n\n\n      var generateId = function generateId(element, prefix) {\n        var id = element.id || element.name && element.name + \"-\" + generateChars(2) || generateChars(4);\n        id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n        id = prefix + \"-\" + id;\n        return id;\n      };\n      /**\n       * @param {any} obj\n       * @returns {string}\n       */\n\n\n      var getType = function getType(obj) {\n        return Object.prototype.toString.call(obj).slice(8, -1);\n      };\n      /**\n       * @param {string} type\n       * @param {any} obj\n       * @returns {boolean}\n       */\n\n\n      var isType = function isType(type, obj) {\n        return obj !== undefined && obj !== null && getType(obj) === type;\n      };\n      /**\n       * @param {HTMLElement} element\n       * @param {HTMLElement} [wrapper={HTMLDivElement}]\n       * @returns {HTMLElement}\n       */\n\n\n      var utils_wrap = function wrap(element, wrapper) {\n        if (wrapper === void 0) {\n          wrapper = document.createElement('div');\n        }\n\n        if (element.nextSibling) {\n          element.parentNode.insertBefore(wrapper, element.nextSibling);\n        } else {\n          element.parentNode.appendChild(wrapper);\n        }\n\n        return wrapper.appendChild(element);\n      };\n      /**\n       * @param {Element} startEl\n       * @param {string} selector\n       * @param {1 | -1} direction\n       * @returns {Element | undefined}\n       */\n\n\n      var getAdjacentEl = function getAdjacentEl(startEl, selector, direction) {\n        if (direction === void 0) {\n          direction = 1;\n        }\n\n        if (!(startEl instanceof Element) || typeof selector !== 'string') {\n          return undefined;\n        }\n\n        var prop = (direction > 0 ? 'next' : 'previous') + \"ElementSibling\";\n        var sibling = startEl[prop];\n\n        while (sibling) {\n          if (sibling.matches(selector)) {\n            return sibling;\n          }\n\n          sibling = sibling[prop];\n        }\n\n        return sibling;\n      };\n      /**\n       * @param {Element} element\n       * @param {Element} parent\n       * @param {-1 | 1} direction\n       * @returns {boolean}\n       */\n\n\n      var isScrolledIntoView = function isScrolledIntoView(element, parent, direction) {\n        if (direction === void 0) {\n          direction = 1;\n        }\n\n        if (!element) {\n          return false;\n        }\n\n        var isVisible;\n\n        if (direction > 0) {\n          // In view from bottom\n          isVisible = parent.scrollTop + parent.offsetHeight >= element.offsetTop + element.offsetHeight;\n        } else {\n          // In view from top\n          isVisible = element.offsetTop >= parent.scrollTop;\n        }\n\n        return isVisible;\n      };\n      /**\n       * @param {any} value\n       * @returns {any}\n       */\n\n\n      var sanitise = function sanitise(value) {\n        if (typeof value !== 'string') {\n          return value;\n        }\n\n        return value.replace(/&/g, '&amp;').replace(/>/g, '&rt;').replace(/</g, '&lt;').replace(/\"/g, '&quot;');\n      };\n      /**\n       * @returns {() => (str: string) => Element}\n       */\n\n\n      var strToEl = function () {\n        var tmpEl = document.createElement('div');\n        return function (str) {\n          var cleanedInput = str.trim();\n          tmpEl.innerHTML = cleanedInput;\n          var firldChild = tmpEl.children[0];\n\n          while (tmpEl.firstChild) {\n            tmpEl.removeChild(tmpEl.firstChild);\n          }\n\n          return firldChild;\n        };\n      }();\n      /**\n       * @param {{ label?: string, value: string }} a\n       * @param {{ label?: string, value: string }} b\n       * @returns {number}\n       */\n\n\n      var sortByAlpha = function sortByAlpha(_ref, _ref2) {\n        var value = _ref.value,\n            _ref$label = _ref.label,\n            label = _ref$label === void 0 ? value : _ref$label;\n        var value2 = _ref2.value,\n            _ref2$label = _ref2.label,\n            label2 = _ref2$label === void 0 ? value2 : _ref2$label;\n        return label.localeCompare(label2, [], {\n          sensitivity: 'base',\n          ignorePunctuation: true,\n          numeric: true\n        });\n      };\n      /**\n       * @param {{ score: number }} a\n       * @param {{ score: number }} b\n       */\n\n\n      var sortByScore = function sortByScore(a, b) {\n        return a.score - b.score;\n      };\n      /**\n       * @param {HTMLElement} element\n       * @param {string} type\n       * @param {object} customArgs\n       */\n\n\n      var dispatchEvent = function dispatchEvent(element, type, customArgs) {\n        if (customArgs === void 0) {\n          customArgs = null;\n        }\n\n        var event = new CustomEvent(type, {\n          detail: customArgs,\n          bubbles: true,\n          cancelable: true\n        });\n        return element.dispatchEvent(event);\n      };\n      /**\n       * @param {array} array\n       * @param {any} value\n       * @param {string} [key=\"value\"]\n       * @returns {boolean}\n       */\n\n\n      var existsInArray = function existsInArray(array, value, key) {\n        if (key === void 0) {\n          key = 'value';\n        }\n\n        return array.some(function (item) {\n          if (typeof value === 'string') {\n            return item[key] === value.trim();\n          }\n\n          return item[key] === value;\n        });\n      };\n      /**\n       * @param {any} obj\n       * @returns {any}\n       */\n\n\n      var cloneObject = function cloneObject(obj) {\n        return JSON.parse(JSON.stringify(obj));\n      };\n      /**\n       * Returns an array of keys present on the first but missing on the second object\n       * @param {object} a\n       * @param {object} b\n       * @returns {string[]}\n       */\n\n\n      var diff = function diff(a, b) {\n        var aKeys = Object.keys(a).sort();\n        var bKeys = Object.keys(b).sort();\n        return aKeys.filter(function (i) {\n          return bKeys.indexOf(i) < 0;\n        });\n      }; // CONCATENATED MODULE: ./src/scripts/reducers/index.js\n\n\n      var appReducer = combineReducers({\n        items: items_items,\n        groups: groups,\n        choices: choices_choices,\n        general: reducers_general\n      });\n\n      var reducers_rootReducer = function rootReducer(passedState, action) {\n        var state = passedState; // If we are clearing all items, groups and options we reassign\n        // state and then pass that state to our proper reducer. This isn't\n        // mutating our actual state\n        // See: http://stackoverflow.com/a/35641992\n\n        if (action.type === 'CLEAR_ALL') {\n          state = undefined;\n        } else if (action.type === 'RESET_TO') {\n          return cloneObject(action.state);\n        }\n\n        return appReducer(state, action);\n      };\n      /* harmony default export */\n\n\n      var reducers = reducers_rootReducer; // CONCATENATED MODULE: ./src/scripts/store/store.js\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../../types/index').Choices.Group} Group\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n\n      var store_Store = /*#__PURE__*/function () {\n        function Store() {\n          this._store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n        }\n        /**\n         * Subscribe store to function call (wrapped Redux method)\n         * @param  {Function} onChange Function to trigger when state changes\n         * @return\n         */\n\n\n        var _proto = Store.prototype;\n\n        _proto.subscribe = function subscribe(onChange) {\n          this._store.subscribe(onChange);\n        }\n        /**\n         * Dispatch event to store (wrapped Redux method)\n         * @param  {{ type: string, [x: string]: any }} action Action to trigger\n         * @return\n         */\n        ;\n\n        _proto.dispatch = function dispatch(action) {\n          this._store.dispatch(action);\n        }\n        /**\n         * Get store object (wrapping Redux method)\n         * @returns {object} State\n         */\n        ;\n        /**\n         * Get loading state from store\n         * @returns {boolean} Loading State\n         */\n\n\n        _proto.isLoading = function isLoading() {\n          return this.state.general.loading;\n        }\n        /**\n         * Get single choice by it's ID\n         * @param {string} id\n         * @returns {Choice | undefined} Found choice\n         */\n        ;\n\n        _proto.getChoiceById = function getChoiceById(id) {\n          return this.activeChoices.find(function (choice) {\n            return choice.id === parseInt(id, 10);\n          });\n        }\n        /**\n         * Get group by group id\n         * @param  {number} id Group ID\n         * @returns {Group | undefined} Group data\n         */\n        ;\n\n        _proto.getGroupById = function getGroupById(id) {\n          return this.groups.find(function (group) {\n            return group.id === id;\n          });\n        };\n\n        _createClass(Store, [{\n          key: \"state\",\n          get: function get() {\n            return this._store.getState();\n          }\n          /**\n           * Get items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"items\",\n          get: function get() {\n            return this.state.items;\n          }\n          /**\n           * Get active items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"activeItems\",\n          get: function get() {\n            return this.items.filter(function (item) {\n              return item.active === true;\n            });\n          }\n          /**\n           * Get highlighted items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"highlightedActiveItems\",\n          get: function get() {\n            return this.items.filter(function (item) {\n              return item.active && item.highlighted;\n            });\n          }\n          /**\n           * Get choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"choices\",\n          get: function get() {\n            return this.state.choices;\n          }\n          /**\n           * Get active choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"activeChoices\",\n          get: function get() {\n            return this.choices.filter(function (choice) {\n              return choice.active === true;\n            });\n          }\n          /**\n           * Get selectable choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"selectableChoices\",\n          get: function get() {\n            return this.choices.filter(function (choice) {\n              return choice.disabled !== true;\n            });\n          }\n          /**\n           * Get choices that can be searched (excluding placeholders)\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"searchableChoices\",\n          get: function get() {\n            return this.selectableChoices.filter(function (choice) {\n              return choice.placeholder !== true;\n            });\n          }\n          /**\n           * Get placeholder choice from store\n           * @returns {Choice | undefined} Found placeholder\n           */\n\n        }, {\n          key: \"placeholderChoice\",\n          get: function get() {\n            return [].concat(this.choices).reverse().find(function (choice) {\n              return choice.placeholder === true;\n            });\n          }\n          /**\n           * Get groups from store\n           * @returns {Group[]} Group objects\n           */\n\n        }, {\n          key: \"groups\",\n          get: function get() {\n            return this.state.groups;\n          }\n          /**\n           * Get active groups from store\n           * @returns {Group[]} Group objects\n           */\n\n        }, {\n          key: \"activeGroups\",\n          get: function get() {\n            var groups = this.groups,\n                choices = this.choices;\n            return groups.filter(function (group) {\n              var isActive = group.active === true && group.disabled === false;\n              var hasActiveOptions = choices.some(function (choice) {\n                return choice.active === true && choice.disabled === false;\n              });\n              return isActive && hasActiveOptions;\n            }, []);\n          }\n        }]);\n\n        return Store;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/dropdown.js\n\n\n      function dropdown_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function dropdown_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) dropdown_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) dropdown_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var Dropdown = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         * }} args\n         */\n        function Dropdown(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames;\n          this.element = element;\n          this.classNames = classNames;\n          this.type = type;\n          this.isActive = false;\n        }\n        /**\n         * Bottom position of dropdown in viewport coordinates\n         * @returns {number} Vertical position\n         */\n\n\n        var _proto = Dropdown.prototype;\n        /**\n         * Find element that matches passed selector\n         * @param {string} selector\n         * @returns {HTMLElement | null}\n         */\n\n        _proto.getChild = function getChild(selector) {\n          return this.element.querySelector(selector);\n        }\n        /**\n         * Show dropdown to user by adding active state class\n         * @returns {this}\n         */\n        ;\n\n        _proto.show = function show() {\n          this.element.classList.add(this.classNames.activeState);\n          this.element.setAttribute('aria-expanded', 'true');\n          this.isActive = true;\n          return this;\n        }\n        /**\n         * Hide dropdown from user\n         * @returns {this}\n         */\n        ;\n\n        _proto.hide = function hide() {\n          this.element.classList.remove(this.classNames.activeState);\n          this.element.setAttribute('aria-expanded', 'false');\n          this.isActive = false;\n          return this;\n        };\n\n        dropdown_createClass(Dropdown, [{\n          key: \"distanceFromTopWindow\",\n          get: function get() {\n            return this.element.getBoundingClientRect().bottom;\n          }\n        }]);\n        return Dropdown;\n      }(); // CONCATENATED MODULE: ./src/scripts/constants.js\n\n      /**\n       * @typedef {import('../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../types/index').Choices.Options} Options\n       */\n\n      /** @type {ClassNames} */\n\n\n      var DEFAULT_CLASSNAMES = {\n        containerOuter: 'choices',\n        containerInner: 'choices__inner',\n        input: 'choices__input',\n        inputCloned: 'choices__input--cloned',\n        list: 'choices__list',\n        listItems: 'choices__list--multiple',\n        listSingle: 'choices__list--single',\n        listDropdown: 'choices__list--dropdown',\n        item: 'choices__item',\n        itemSelectable: 'choices__item--selectable',\n        itemDisabled: 'choices__item--disabled',\n        itemChoice: 'choices__item--choice',\n        placeholder: 'choices__placeholder',\n        group: 'choices__group',\n        groupHeading: 'choices__heading',\n        button: 'choices__button',\n        activeState: 'is-active',\n        focusState: 'is-focused',\n        openState: 'is-open',\n        disabledState: 'is-disabled',\n        highlightedState: 'is-highlighted',\n        selectedState: 'is-selected',\n        flippedState: 'is-flipped',\n        loadingState: 'is-loading',\n        noResults: 'has-no-results',\n        noChoices: 'has-no-choices'\n      };\n      /** @type {Options} */\n\n      var DEFAULT_CONFIG = {\n        items: [],\n        choices: [],\n        silent: false,\n        renderChoiceLimit: -1,\n        maxItemCount: -1,\n        addItems: true,\n        addItemFilter: null,\n        removeItems: true,\n        removeItemButton: false,\n        editItems: false,\n        duplicateItemsAllowed: true,\n        delimiter: ',',\n        paste: true,\n        searchEnabled: true,\n        searchChoices: true,\n        searchFloor: 1,\n        searchResultLimit: 4,\n        searchFields: ['label', 'value'],\n        position: 'auto',\n        resetScrollPosition: true,\n        shouldSort: true,\n        shouldSortItems: false,\n        sorter: sortByAlpha,\n        placeholder: true,\n        placeholderValue: null,\n        searchPlaceholderValue: null,\n        prependValue: null,\n        appendValue: null,\n        renderSelectedChoices: 'auto',\n        loadingText: 'Loading...',\n        noResultsText: 'No results found',\n        noChoicesText: 'No choices to choose from',\n        itemSelectText: 'Press to select',\n        uniqueItemText: 'Only unique values can be added',\n        customAddItemText: 'Only values matching specific conditions can be added',\n        addItemText: function addItemText(value) {\n          return \"Press Enter to add <b>\\\"\" + sanitise(value) + \"\\\"</b>\";\n        },\n        maxItemText: function maxItemText(maxItemCount) {\n          return \"Only \" + maxItemCount + \" values can be added\";\n        },\n        valueComparer: function valueComparer(value1, value2) {\n          return value1 === value2;\n        },\n        fuseOptions: {\n          includeScore: true\n        },\n        callbackOnInit: null,\n        callbackOnCreateTemplates: null,\n        classNames: DEFAULT_CLASSNAMES\n      };\n      var EVENTS = {\n        showDropdown: 'showDropdown',\n        hideDropdown: 'hideDropdown',\n        change: 'change',\n        choice: 'choice',\n        search: 'search',\n        addItem: 'addItem',\n        removeItem: 'removeItem',\n        highlightItem: 'highlightItem',\n        highlightChoice: 'highlightChoice'\n      };\n      var ACTION_TYPES = {\n        ADD_CHOICE: 'ADD_CHOICE',\n        FILTER_CHOICES: 'FILTER_CHOICES',\n        ACTIVATE_CHOICES: 'ACTIVATE_CHOICES',\n        CLEAR_CHOICES: 'CLEAR_CHOICES',\n        ADD_GROUP: 'ADD_GROUP',\n        ADD_ITEM: 'ADD_ITEM',\n        REMOVE_ITEM: 'REMOVE_ITEM',\n        HIGHLIGHT_ITEM: 'HIGHLIGHT_ITEM',\n        CLEAR_ALL: 'CLEAR_ALL'\n      };\n      var KEY_CODES = {\n        BACK_KEY: 46,\n        DELETE_KEY: 8,\n        ENTER_KEY: 13,\n        A_KEY: 65,\n        ESC_KEY: 27,\n        UP_KEY: 38,\n        DOWN_KEY: 40,\n        PAGE_UP_KEY: 33,\n        PAGE_DOWN_KEY: 34\n      };\n      var TEXT_TYPE = 'text';\n      var SELECT_ONE_TYPE = 'select-one';\n      var SELECT_MULTIPLE_TYPE = 'select-multiple';\n      var SCROLLING_SPEED = 4; // CONCATENATED MODULE: ./src/scripts/components/container.js\n\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n      var container_Container = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         *  position\n         * }} args\n         */\n        function Container(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames,\n              position = _ref.position;\n          this.element = element;\n          this.classNames = classNames;\n          this.type = type;\n          this.position = position;\n          this.isOpen = false;\n          this.isFlipped = false;\n          this.isFocussed = false;\n          this.isDisabled = false;\n          this.isLoading = false;\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n        }\n\n        var _proto = Container.prototype;\n\n        _proto.addEventListeners = function addEventListeners() {\n          this.element.addEventListener('focus', this._onFocus);\n          this.element.addEventListener('blur', this._onBlur);\n        };\n\n        _proto.removeEventListeners = function removeEventListeners() {\n          this.element.removeEventListener('focus', this._onFocus);\n          this.element.removeEventListener('blur', this._onBlur);\n        }\n        /**\n         * Determine whether container should be flipped based on passed\n         * dropdown position\n         * @param {number} dropdownPos\n         * @returns {boolean}\n         */\n        ;\n\n        _proto.shouldFlip = function shouldFlip(dropdownPos) {\n          if (typeof dropdownPos !== 'number') {\n            return false;\n          } // If flip is enabled and the dropdown bottom position is\n          // greater than the window height flip the dropdown.\n\n\n          var shouldFlip = false;\n\n          if (this.position === 'auto') {\n            shouldFlip = !window.matchMedia(\"(min-height: \" + (dropdownPos + 1) + \"px)\").matches;\n          } else if (this.position === 'top') {\n            shouldFlip = true;\n          }\n\n          return shouldFlip;\n        }\n        /**\n         * @param {string} activeDescendantID\n         */\n        ;\n\n        _proto.setActiveDescendant = function setActiveDescendant(activeDescendantID) {\n          this.element.setAttribute('aria-activedescendant', activeDescendantID);\n        };\n\n        _proto.removeActiveDescendant = function removeActiveDescendant() {\n          this.element.removeAttribute('aria-activedescendant');\n        }\n        /**\n         * @param {number} dropdownPos\n         */\n        ;\n\n        _proto.open = function open(dropdownPos) {\n          this.element.classList.add(this.classNames.openState);\n          this.element.setAttribute('aria-expanded', 'true');\n          this.isOpen = true;\n\n          if (this.shouldFlip(dropdownPos)) {\n            this.element.classList.add(this.classNames.flippedState);\n            this.isFlipped = true;\n          }\n        };\n\n        _proto.close = function close() {\n          this.element.classList.remove(this.classNames.openState);\n          this.element.setAttribute('aria-expanded', 'false');\n          this.removeActiveDescendant();\n          this.isOpen = false; // A dropdown flips if it does not have space within the page\n\n          if (this.isFlipped) {\n            this.element.classList.remove(this.classNames.flippedState);\n            this.isFlipped = false;\n          }\n        };\n\n        _proto.focus = function focus() {\n          if (!this.isFocussed) {\n            this.element.focus();\n          }\n        };\n\n        _proto.addFocusState = function addFocusState() {\n          this.element.classList.add(this.classNames.focusState);\n        };\n\n        _proto.removeFocusState = function removeFocusState() {\n          this.element.classList.remove(this.classNames.focusState);\n        };\n\n        _proto.enable = function enable() {\n          this.element.classList.remove(this.classNames.disabledState);\n          this.element.removeAttribute('aria-disabled');\n\n          if (this.type === SELECT_ONE_TYPE) {\n            this.element.setAttribute('tabindex', '0');\n          }\n\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.classList.add(this.classNames.disabledState);\n          this.element.setAttribute('aria-disabled', 'true');\n\n          if (this.type === SELECT_ONE_TYPE) {\n            this.element.setAttribute('tabindex', '-1');\n          }\n\n          this.isDisabled = true;\n        }\n        /**\n         * @param {HTMLElement} element\n         */\n        ;\n\n        _proto.wrap = function wrap(element) {\n          utils_wrap(element, this.element);\n        }\n        /**\n         * @param {Element} element\n         */\n        ;\n\n        _proto.unwrap = function unwrap(element) {\n          // Move passed element outside this element\n          this.element.parentNode.insertBefore(element, this.element); // Remove this element\n\n          this.element.parentNode.removeChild(this.element);\n        };\n\n        _proto.addLoadingState = function addLoadingState() {\n          this.element.classList.add(this.classNames.loadingState);\n          this.element.setAttribute('aria-busy', 'true');\n          this.isLoading = true;\n        };\n\n        _proto.removeLoadingState = function removeLoadingState() {\n          this.element.classList.remove(this.classNames.loadingState);\n          this.element.removeAttribute('aria-busy');\n          this.isLoading = false;\n        };\n\n        _proto._onFocus = function _onFocus() {\n          this.isFocussed = true;\n        };\n\n        _proto._onBlur = function _onBlur() {\n          this.isFocussed = false;\n        };\n\n        return Container;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/input.js\n\n\n      function input_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function input_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) input_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) input_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var input_Input = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLInputElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         *  preventPaste: boolean\n         * }} args\n         */\n        function Input(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames,\n              preventPaste = _ref.preventPaste;\n          this.element = element;\n          this.type = type;\n          this.classNames = classNames;\n          this.preventPaste = preventPaste;\n          this.isFocussed = this.element === document.activeElement;\n          this.isDisabled = element.disabled;\n          this._onPaste = this._onPaste.bind(this);\n          this._onInput = this._onInput.bind(this);\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n        }\n        /**\n         * @param {string} placeholder\n         */\n\n\n        var _proto = Input.prototype;\n\n        _proto.addEventListeners = function addEventListeners() {\n          this.element.addEventListener('paste', this._onPaste);\n          this.element.addEventListener('input', this._onInput, {\n            passive: true\n          });\n          this.element.addEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.element.addEventListener('blur', this._onBlur, {\n            passive: true\n          });\n        };\n\n        _proto.removeEventListeners = function removeEventListeners() {\n          this.element.removeEventListener('input', this._onInput, {\n            passive: true\n          });\n          this.element.removeEventListener('paste', this._onPaste);\n          this.element.removeEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.element.removeEventListener('blur', this._onBlur, {\n            passive: true\n          });\n        };\n\n        _proto.enable = function enable() {\n          this.element.removeAttribute('disabled');\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.setAttribute('disabled', '');\n          this.isDisabled = true;\n        };\n\n        _proto.focus = function focus() {\n          if (!this.isFocussed) {\n            this.element.focus();\n          }\n        };\n\n        _proto.blur = function blur() {\n          if (this.isFocussed) {\n            this.element.blur();\n          }\n        }\n        /**\n         * Set value of input to blank\n         * @param {boolean} setWidth\n         * @returns {this}\n         */\n        ;\n\n        _proto.clear = function clear(setWidth) {\n          if (setWidth === void 0) {\n            setWidth = true;\n          }\n\n          if (this.element.value) {\n            this.element.value = '';\n          }\n\n          if (setWidth) {\n            this.setWidth();\n          }\n\n          return this;\n        }\n        /**\n         * Set the correct input width based on placeholder\n         * value or input value\n         */\n        ;\n\n        _proto.setWidth = function setWidth() {\n          // Resize input to contents or placeholder\n          var _this$element = this.element,\n              style = _this$element.style,\n              value = _this$element.value,\n              placeholder = _this$element.placeholder;\n          style.minWidth = placeholder.length + 1 + \"ch\";\n          style.width = value.length + 1 + \"ch\";\n        }\n        /**\n         * @param {string} activeDescendantID\n         */\n        ;\n\n        _proto.setActiveDescendant = function setActiveDescendant(activeDescendantID) {\n          this.element.setAttribute('aria-activedescendant', activeDescendantID);\n        };\n\n        _proto.removeActiveDescendant = function removeActiveDescendant() {\n          this.element.removeAttribute('aria-activedescendant');\n        };\n\n        _proto._onInput = function _onInput() {\n          if (this.type !== SELECT_ONE_TYPE) {\n            this.setWidth();\n          }\n        }\n        /**\n         * @param {Event} event\n         */\n        ;\n\n        _proto._onPaste = function _onPaste(event) {\n          if (this.preventPaste) {\n            event.preventDefault();\n          }\n        };\n\n        _proto._onFocus = function _onFocus() {\n          this.isFocussed = true;\n        };\n\n        _proto._onBlur = function _onBlur() {\n          this.isFocussed = false;\n        };\n\n        input_createClass(Input, [{\n          key: \"placeholder\",\n          set: function set(placeholder) {\n            this.element.placeholder = placeholder;\n          }\n          /**\n           * @returns {string}\n           */\n\n        }, {\n          key: \"value\",\n          get: function get() {\n            return sanitise(this.element.value);\n          }\n          /**\n           * @param {string} value\n           */\n          ,\n          set: function set(value) {\n            this.element.value = value;\n          }\n        }]);\n        return Input;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/list.js\n\n      /**\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n\n      var list_List = /*#__PURE__*/function () {\n        /**\n         * @param {{ element: HTMLElement }} args\n         */\n        function List(_ref) {\n          var element = _ref.element;\n          this.element = element;\n          this.scrollPos = this.element.scrollTop;\n          this.height = this.element.offsetHeight;\n        }\n\n        var _proto = List.prototype;\n\n        _proto.clear = function clear() {\n          this.element.innerHTML = '';\n        }\n        /**\n         * @param {Element | DocumentFragment} node\n         */\n        ;\n\n        _proto.append = function append(node) {\n          this.element.appendChild(node);\n        }\n        /**\n         * @param {string} selector\n         * @returns {Element | null}\n         */\n        ;\n\n        _proto.getChild = function getChild(selector) {\n          return this.element.querySelector(selector);\n        }\n        /**\n         * @returns {boolean}\n         */\n        ;\n\n        _proto.hasChildren = function hasChildren() {\n          return this.element.hasChildNodes();\n        };\n\n        _proto.scrollToTop = function scrollToTop() {\n          this.element.scrollTop = 0;\n        }\n        /**\n         * @param {Element} element\n         * @param {1 | -1} direction\n         */\n        ;\n\n        _proto.scrollToChildElement = function scrollToChildElement(element, direction) {\n          var _this = this;\n\n          if (!element) {\n            return;\n          }\n\n          var listHeight = this.element.offsetHeight; // Scroll position of dropdown\n\n          var listScrollPosition = this.element.scrollTop + listHeight;\n          var elementHeight = element.offsetHeight; // Distance from bottom of element to top of parent\n\n          var elementPos = element.offsetTop + elementHeight; // Difference between the element and scroll position\n\n          var destination = direction > 0 ? this.element.scrollTop + elementPos - listScrollPosition : element.offsetTop;\n          requestAnimationFrame(function () {\n            _this._animateScroll(destination, direction);\n          });\n        }\n        /**\n         * @param {number} scrollPos\n         * @param {number} strength\n         * @param {number} destination\n         */\n        ;\n\n        _proto._scrollDown = function _scrollDown(scrollPos, strength, destination) {\n          var easing = (destination - scrollPos) / strength;\n          var distance = easing > 1 ? easing : 1;\n          this.element.scrollTop = scrollPos + distance;\n        }\n        /**\n         * @param {number} scrollPos\n         * @param {number} strength\n         * @param {number} destination\n         */\n        ;\n\n        _proto._scrollUp = function _scrollUp(scrollPos, strength, destination) {\n          var easing = (scrollPos - destination) / strength;\n          var distance = easing > 1 ? easing : 1;\n          this.element.scrollTop = scrollPos - distance;\n        }\n        /**\n         * @param {*} destination\n         * @param {*} direction\n         */\n        ;\n\n        _proto._animateScroll = function _animateScroll(destination, direction) {\n          var _this2 = this;\n\n          var strength = SCROLLING_SPEED;\n          var choiceListScrollTop = this.element.scrollTop;\n          var continueAnimation = false;\n\n          if (direction > 0) {\n            this._scrollDown(choiceListScrollTop, strength, destination);\n\n            if (choiceListScrollTop < destination) {\n              continueAnimation = true;\n            }\n          } else {\n            this._scrollUp(choiceListScrollTop, strength, destination);\n\n            if (choiceListScrollTop > destination) {\n              continueAnimation = true;\n            }\n          }\n\n          if (continueAnimation) {\n            requestAnimationFrame(function () {\n              _this2._animateScroll(destination, direction);\n            });\n          }\n        };\n\n        return List;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/wrapped-element.js\n\n\n      function wrapped_element_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_element_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_element_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_element_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var wrapped_element_WrappedElement = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLInputElement | HTMLSelectElement,\n         *  classNames: ClassNames,\n         * }} args\n         */\n        function WrappedElement(_ref) {\n          var element = _ref.element,\n              classNames = _ref.classNames;\n          this.element = element;\n          this.classNames = classNames;\n\n          if (!(element instanceof HTMLInputElement) && !(element instanceof HTMLSelectElement)) {\n            throw new TypeError('Invalid element passed');\n          }\n\n          this.isDisabled = false;\n        }\n\n        var _proto = WrappedElement.prototype;\n\n        _proto.conceal = function conceal() {\n          // Hide passed input\n          this.element.classList.add(this.classNames.input);\n          this.element.hidden = true; // Remove element from tab index\n\n          this.element.tabIndex = -1; // Backup original styles if any\n\n          var origStyle = this.element.getAttribute('style');\n\n          if (origStyle) {\n            this.element.setAttribute('data-choice-orig-style', origStyle);\n          }\n\n          this.element.setAttribute('data-choice', 'active');\n        };\n\n        _proto.reveal = function reveal() {\n          // Reinstate passed element\n          this.element.classList.remove(this.classNames.input);\n          this.element.hidden = false;\n          this.element.removeAttribute('tabindex'); // Recover original styles if any\n\n          var origStyle = this.element.getAttribute('data-choice-orig-style');\n\n          if (origStyle) {\n            this.element.removeAttribute('data-choice-orig-style');\n            this.element.setAttribute('style', origStyle);\n          } else {\n            this.element.removeAttribute('style');\n          }\n\n          this.element.removeAttribute('data-choice'); // Re-assign values - this is weird, I know\n          // @todo Figure out why we need to do this\n\n          this.element.value = this.element.value; // eslint-disable-line no-self-assign\n        };\n\n        _proto.enable = function enable() {\n          this.element.removeAttribute('disabled');\n          this.element.disabled = false;\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.setAttribute('disabled', '');\n          this.element.disabled = true;\n          this.isDisabled = true;\n        };\n\n        _proto.triggerEvent = function triggerEvent(eventType, data) {\n          dispatchEvent(this.element, eventType, data);\n        };\n\n        wrapped_element_createClass(WrappedElement, [{\n          key: \"isActive\",\n          get: function get() {\n            return this.element.dataset.choice === 'active';\n          }\n        }, {\n          key: \"dir\",\n          get: function get() {\n            return this.element.dir;\n          }\n        }, {\n          key: \"value\",\n          get: function get() {\n            return this.element.value;\n          },\n          set: function set(value) {\n            // you must define setter here otherwise it will be readonly property\n            this.element.value = value;\n          }\n        }]);\n        return WrappedElement;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/wrapped-input.js\n\n\n      function wrapped_input_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_input_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_input_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_input_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n\n      var WrappedInput = /*#__PURE__*/function (_WrappedElement) {\n        _inheritsLoose(WrappedInput, _WrappedElement);\n        /**\n         * @param {{\n         *  element: HTMLInputElement,\n         *  classNames: ClassNames,\n         *  delimiter: string\n         * }} args\n         */\n\n\n        function WrappedInput(_ref) {\n          var _this;\n\n          var element = _ref.element,\n              classNames = _ref.classNames,\n              delimiter = _ref.delimiter;\n          _this = _WrappedElement.call(this, {\n            element: element,\n            classNames: classNames\n          }) || this;\n          _this.delimiter = delimiter;\n          return _this;\n        }\n        /**\n         * @returns {string}\n         */\n\n\n        wrapped_input_createClass(WrappedInput, [{\n          key: \"value\",\n          get: function get() {\n            return this.element.value;\n          }\n          /**\n           * @param {Item[]} items\n           */\n          ,\n          set: function set(items) {\n            var itemValues = items.map(function (_ref2) {\n              var value = _ref2.value;\n              return value;\n            });\n            var joinedValues = itemValues.join(this.delimiter);\n            this.element.setAttribute('value', joinedValues);\n            this.element.value = joinedValues;\n          }\n        }]);\n        return WrappedInput;\n      }(wrapped_element_WrappedElement); // CONCATENATED MODULE: ./src/scripts/components/wrapped-select.js\n\n\n      function wrapped_select_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_select_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_select_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_select_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function wrapped_select_inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n\n      var WrappedSelect = /*#__PURE__*/function (_WrappedElement) {\n        wrapped_select_inheritsLoose(WrappedSelect, _WrappedElement);\n        /**\n         * @param {{\n         *  element: HTMLSelectElement,\n         *  classNames: ClassNames,\n         *  delimiter: string\n         *  template: function\n         * }} args\n         */\n\n        function WrappedSelect(_ref) {\n          var _this;\n\n          var element = _ref.element,\n              classNames = _ref.classNames,\n              template = _ref.template;\n          _this = _WrappedElement.call(this, {\n            element: element,\n            classNames: classNames\n          }) || this;\n          _this.template = template;\n          return _this;\n        }\n\n        var _proto = WrappedSelect.prototype;\n        /**\n         * @param {DocumentFragment} fragment\n         */\n\n        _proto.appendDocFragment = function appendDocFragment(fragment) {\n          this.element.innerHTML = '';\n          this.element.appendChild(fragment);\n        };\n\n        wrapped_select_createClass(WrappedSelect, [{\n          key: \"placeholderOption\",\n          get: function get() {\n            return this.element.querySelector('option[value=\"\"]') || // Backward compatibility layer for the non-standard placeholder attribute supported in older versions.\n            this.element.querySelector('option[placeholder]');\n          }\n          /**\n           * @returns {Element[]}\n           */\n\n        }, {\n          key: \"optionGroups\",\n          get: function get() {\n            return Array.from(this.element.getElementsByTagName('OPTGROUP'));\n          }\n          /**\n           * @returns {Item[] | Choice[]}\n           */\n\n        }, {\n          key: \"options\",\n          get: function get() {\n            return Array.from(this.element.options);\n          }\n          /**\n           * @param {Item[] | Choice[]} options\n           */\n          ,\n          set: function set(options) {\n            var _this2 = this;\n\n            var fragment = document.createDocumentFragment();\n\n            var addOptionToFragment = function addOptionToFragment(data) {\n              // Create a standard select option\n              var option = _this2.template(data); // Append it to fragment\n\n\n              fragment.appendChild(option);\n            }; // Add each list item to list\n\n\n            options.forEach(function (optionData) {\n              return addOptionToFragment(optionData);\n            });\n            this.appendDocFragment(fragment);\n          }\n        }]);\n        return WrappedSelect;\n      }(wrapped_element_WrappedElement); // CONCATENATED MODULE: ./src/scripts/components/index.js\n      // CONCATENATED MODULE: ./src/scripts/templates.js\n\n      /**\n       * Helpers to create HTML elements used by Choices\n       * Can be overridden by providing `callbackOnCreateTemplates` option\n       * @typedef {import('../../types/index').Choices.Templates} Templates\n       * @typedef {import('../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../types/index').Choices.Options} Options\n       * @typedef {import('../../types/index').Choices.Item} Item\n       * @typedef {import('../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../types/index').Choices.Group} Group\n       */\n\n\n      var TEMPLATES =\n      /** @type {Templates} */\n      {\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {\"ltr\" | \"rtl\" | \"auto\"} dir\n         * @param {boolean} isSelectElement\n         * @param {boolean} isSelectOneElement\n         * @param {boolean} searchEnabled\n         * @param {\"select-one\" | \"select-multiple\" | \"text\"} passedElementType\n         */\n        containerOuter: function containerOuter(_ref, dir, isSelectElement, isSelectOneElement, searchEnabled, passedElementType) {\n          var _containerOuter = _ref.containerOuter;\n          var div = Object.assign(document.createElement('div'), {\n            className: _containerOuter\n          });\n          div.dataset.type = passedElementType;\n\n          if (dir) {\n            div.dir = dir;\n          }\n\n          if (isSelectOneElement) {\n            div.tabIndex = 0;\n          }\n\n          if (isSelectElement) {\n            div.setAttribute('role', searchEnabled ? 'combobox' : 'listbox');\n\n            if (searchEnabled) {\n              div.setAttribute('aria-autocomplete', 'list');\n            }\n          }\n\n          div.setAttribute('aria-haspopup', 'true');\n          div.setAttribute('aria-expanded', 'false');\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         */\n        containerInner: function containerInner(_ref2) {\n          var _containerInner = _ref2.containerInner;\n          return Object.assign(document.createElement('div'), {\n            className: _containerInner\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {boolean} isSelectOneElement\n         */\n        itemList: function itemList(_ref3, isSelectOneElement) {\n          var list = _ref3.list,\n              listSingle = _ref3.listSingle,\n              listItems = _ref3.listItems;\n          return Object.assign(document.createElement('div'), {\n            className: list + \" \" + (isSelectOneElement ? listSingle : listItems)\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} value\n         */\n        placeholder: function placeholder(_ref4, value) {\n          var _placeholder = _ref4.placeholder;\n          return Object.assign(document.createElement('div'), {\n            className: _placeholder,\n            innerHTML: value\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Item} item\n         * @param {boolean} removeItemButton\n         */\n        item: function item(_ref5, _ref6, removeItemButton) {\n          var _item = _ref5.item,\n              button = _ref5.button,\n              highlightedState = _ref5.highlightedState,\n              itemSelectable = _ref5.itemSelectable,\n              placeholder = _ref5.placeholder;\n          var id = _ref6.id,\n              value = _ref6.value,\n              label = _ref6.label,\n              customProperties = _ref6.customProperties,\n              active = _ref6.active,\n              disabled = _ref6.disabled,\n              highlighted = _ref6.highlighted,\n              isPlaceholder = _ref6.placeholder;\n          var div = Object.assign(document.createElement('div'), {\n            className: _item,\n            innerHTML: label\n          });\n          Object.assign(div.dataset, {\n            item: '',\n            id: id,\n            value: value,\n            customProperties: customProperties\n          });\n\n          if (active) {\n            div.setAttribute('aria-selected', 'true');\n          }\n\n          if (disabled) {\n            div.setAttribute('aria-disabled', 'true');\n          }\n\n          if (isPlaceholder) {\n            div.classList.add(placeholder);\n          }\n\n          div.classList.add(highlighted ? highlightedState : itemSelectable);\n\n          if (removeItemButton) {\n            if (disabled) {\n              div.classList.remove(itemSelectable);\n            }\n\n            div.dataset.deletable = '';\n            /** @todo This MUST be localizable, not hardcoded! */\n\n            var REMOVE_ITEM_TEXT = 'Remove item';\n            var removeButton = Object.assign(document.createElement('button'), {\n              type: 'button',\n              className: button,\n              innerHTML: REMOVE_ITEM_TEXT\n            });\n            removeButton.setAttribute('aria-label', REMOVE_ITEM_TEXT + \": '\" + value + \"'\");\n            removeButton.dataset.button = '';\n            div.appendChild(removeButton);\n          }\n\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {boolean} isSelectOneElement\n         */\n        choiceList: function choiceList(_ref7, isSelectOneElement) {\n          var list = _ref7.list;\n          var div = Object.assign(document.createElement('div'), {\n            className: list\n          });\n\n          if (!isSelectOneElement) {\n            div.setAttribute('aria-multiselectable', 'true');\n          }\n\n          div.setAttribute('role', 'listbox');\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Group} group\n         */\n        choiceGroup: function choiceGroup(_ref8, _ref9) {\n          var group = _ref8.group,\n              groupHeading = _ref8.groupHeading,\n              itemDisabled = _ref8.itemDisabled;\n          var id = _ref9.id,\n              value = _ref9.value,\n              disabled = _ref9.disabled;\n          var div = Object.assign(document.createElement('div'), {\n            className: group + \" \" + (disabled ? itemDisabled : '')\n          });\n          div.setAttribute('role', 'group');\n          Object.assign(div.dataset, {\n            group: '',\n            id: id,\n            value: value\n          });\n\n          if (disabled) {\n            div.setAttribute('aria-disabled', 'true');\n          }\n\n          div.appendChild(Object.assign(document.createElement('div'), {\n            className: groupHeading,\n            innerHTML: value\n          }));\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Choice} choice\n         * @param {Options['itemSelectText']} selectText\n         */\n        choice: function choice(_ref10, _ref11, selectText) {\n          var item = _ref10.item,\n              itemChoice = _ref10.itemChoice,\n              itemSelectable = _ref10.itemSelectable,\n              selectedState = _ref10.selectedState,\n              itemDisabled = _ref10.itemDisabled,\n              placeholder = _ref10.placeholder;\n          var id = _ref11.id,\n              value = _ref11.value,\n              label = _ref11.label,\n              groupId = _ref11.groupId,\n              elementId = _ref11.elementId,\n              isDisabled = _ref11.disabled,\n              isSelected = _ref11.selected,\n              isPlaceholder = _ref11.placeholder;\n          var div = Object.assign(document.createElement('div'), {\n            id: elementId,\n            innerHTML: label,\n            className: item + \" \" + itemChoice\n          });\n\n          if (isSelected) {\n            div.classList.add(selectedState);\n          }\n\n          if (isPlaceholder) {\n            div.classList.add(placeholder);\n          }\n\n          div.setAttribute('role', groupId > 0 ? 'treeitem' : 'option');\n          Object.assign(div.dataset, {\n            choice: '',\n            id: id,\n            value: value,\n            selectText: selectText\n          });\n\n          if (isDisabled) {\n            div.classList.add(itemDisabled);\n            div.dataset.choiceDisabled = '';\n            div.setAttribute('aria-disabled', 'true');\n          } else {\n            div.classList.add(itemSelectable);\n            div.dataset.choiceSelectable = '';\n          }\n\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} placeholderValue\n         */\n        input: function input(_ref12, placeholderValue) {\n          var _input = _ref12.input,\n              inputCloned = _ref12.inputCloned;\n          var inp = Object.assign(document.createElement('input'), {\n            type: 'text',\n            className: _input + \" \" + inputCloned,\n            autocomplete: 'off',\n            autocapitalize: 'off',\n            spellcheck: false\n          });\n          inp.setAttribute('role', 'textbox');\n          inp.setAttribute('aria-autocomplete', 'list');\n          inp.setAttribute('aria-label', placeholderValue);\n          return inp;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         */\n        dropdown: function dropdown(_ref13) {\n          var list = _ref13.list,\n              listDropdown = _ref13.listDropdown;\n          var div = document.createElement('div');\n          div.classList.add(list, listDropdown);\n          div.setAttribute('aria-expanded', 'false');\n          return div;\n        },\n\n        /**\n         *\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} innerHTML\n         * @param {\"no-choices\" | \"no-results\" | \"\"} type\n         */\n        notice: function notice(_ref14, innerHTML, type) {\n          var item = _ref14.item,\n              itemChoice = _ref14.itemChoice,\n              noResults = _ref14.noResults,\n              noChoices = _ref14.noChoices;\n\n          if (type === void 0) {\n            type = '';\n          }\n\n          var classes = [item, itemChoice];\n\n          if (type === 'no-choices') {\n            classes.push(noChoices);\n          } else if (type === 'no-results') {\n            classes.push(noResults);\n          }\n\n          return Object.assign(document.createElement('div'), {\n            innerHTML: innerHTML,\n            className: classes.join(' ')\n          });\n        },\n\n        /**\n         * @param {Item} option\n         */\n        option: function option(_ref15) {\n          var label = _ref15.label,\n              value = _ref15.value,\n              customProperties = _ref15.customProperties,\n              active = _ref15.active,\n              disabled = _ref15.disabled;\n          var opt = new Option(label, value, false, active);\n\n          if (customProperties) {\n            opt.dataset.customProperties = customProperties;\n          }\n\n          opt.disabled = disabled;\n          return opt;\n        }\n      };\n      /* harmony default export */\n\n      var templates = TEMPLATES; // CONCATENATED MODULE: ./src/scripts/actions/choices.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n      /**\n       * @argument {Choice} choice\n       * @returns {Action & Choice}\n       */\n\n      var choices_addChoice = function addChoice(_ref) {\n        var value = _ref.value,\n            label = _ref.label,\n            id = _ref.id,\n            groupId = _ref.groupId,\n            disabled = _ref.disabled,\n            elementId = _ref.elementId,\n            customProperties = _ref.customProperties,\n            placeholder = _ref.placeholder,\n            keyCode = _ref.keyCode;\n        return {\n          type: ACTION_TYPES.ADD_CHOICE,\n          value: value,\n          label: label,\n          id: id,\n          groupId: groupId,\n          disabled: disabled,\n          elementId: elementId,\n          customProperties: customProperties,\n          placeholder: placeholder,\n          keyCode: keyCode\n        };\n      };\n      /**\n       * @argument {Choice[]} results\n       * @returns {Action & { results: Choice[] }}\n       */\n\n\n      var choices_filterChoices = function filterChoices(results) {\n        return {\n          type: ACTION_TYPES.FILTER_CHOICES,\n          results: results\n        };\n      };\n      /**\n       * @argument {boolean} active\n       * @returns {Action & { active: boolean }}\n       */\n\n\n      var choices_activateChoices = function activateChoices(active) {\n        if (active === void 0) {\n          active = true;\n        }\n\n        return {\n          type: ACTION_TYPES.ACTIVATE_CHOICES,\n          active: active\n        };\n      };\n      /**\n       * @returns {Action}\n       */\n\n\n      var choices_clearChoices = function clearChoices() {\n        return {\n          type: ACTION_TYPES.CLEAR_CHOICES\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/items.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n      /**\n       * @param {Item} item\n       * @returns {Action & Item}\n       */\n\n\n      var items_addItem = function addItem(_ref) {\n        var value = _ref.value,\n            label = _ref.label,\n            id = _ref.id,\n            choiceId = _ref.choiceId,\n            groupId = _ref.groupId,\n            customProperties = _ref.customProperties,\n            placeholder = _ref.placeholder,\n            keyCode = _ref.keyCode;\n        return {\n          type: ACTION_TYPES.ADD_ITEM,\n          value: value,\n          label: label,\n          id: id,\n          choiceId: choiceId,\n          groupId: groupId,\n          customProperties: customProperties,\n          placeholder: placeholder,\n          keyCode: keyCode\n        };\n      };\n      /**\n       * @param {string} id\n       * @param {string} choiceId\n       * @returns {Action & { id: string, choiceId: string }}\n       */\n\n\n      var items_removeItem = function removeItem(id, choiceId) {\n        return {\n          type: ACTION_TYPES.REMOVE_ITEM,\n          id: id,\n          choiceId: choiceId\n        };\n      };\n      /**\n       * @param {string} id\n       * @param {boolean} highlighted\n       * @returns {Action & { id: string, highlighted: boolean }}\n       */\n\n\n      var items_highlightItem = function highlightItem(id, highlighted) {\n        return {\n          type: ACTION_TYPES.HIGHLIGHT_ITEM,\n          id: id,\n          highlighted: highlighted\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/groups.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Group} Group\n       */\n\n      /**\n       * @param {Group} group\n       * @returns {Action & Group}\n       */\n\n\n      var groups_addGroup = function addGroup(_ref) {\n        var value = _ref.value,\n            id = _ref.id,\n            active = _ref.active,\n            disabled = _ref.disabled;\n        return {\n          type: ACTION_TYPES.ADD_GROUP,\n          value: value,\n          id: id,\n          active: active,\n          disabled: disabled\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/misc.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       */\n\n      /**\n       * @returns {Action}\n       */\n\n\n      var clearAll = function clearAll() {\n        return {\n          type: 'CLEAR_ALL'\n        };\n      };\n      /**\n       * @param {any} state\n       * @returns {Action & { state: object }}\n       */\n\n\n      var resetTo = function resetTo(state) {\n        return {\n          type: 'RESET_TO',\n          state: state\n        };\n      };\n      /**\n       * @param {boolean} isLoading\n       * @returns {Action & { isLoading: boolean }}\n       */\n\n\n      var setIsLoading = function setIsLoading(isLoading) {\n        return {\n          type: 'SET_IS_LOADING',\n          isLoading: isLoading\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/choices.js\n\n\n      function choices_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function choices_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) choices_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) choices_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /** @see {@link http://browserhacks.com/#hack-acea075d0ac6954f275a70023906050c} */\n\n\n      var IS_IE11 = '-ms-scroll-limit' in document.documentElement.style && '-ms-ime-align' in document.documentElement.style;\n      /**\n       * @typedef {import('../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../types/index').Choices.Item} Item\n       * @typedef {import('../../types/index').Choices.Group} Group\n       * @typedef {import('../../types/index').Choices.Options} Options\n       */\n\n      /** @type {Partial<Options>} */\n\n      var USER_DEFAULTS = {};\n      /**\n       * Choices\n       * @author Josh Johnson<josh@joshuajohnson.co.uk>\n       */\n\n      var choices_Choices = /*#__PURE__*/function () {\n        choices_createClass(Choices, null, [{\n          key: \"defaults\",\n          get: function get() {\n            return Object.preventExtensions({\n              get options() {\n                return USER_DEFAULTS;\n              },\n\n              get templates() {\n                return TEMPLATES;\n              }\n\n            });\n          }\n          /**\n           * @param {string | HTMLInputElement | HTMLSelectElement} element\n           * @param {Partial<Options>} userConfig\n           */\n\n        }]);\n\n        function Choices(element, userConfig) {\n          var _this = this;\n\n          if (element === void 0) {\n            element = '[data-choice]';\n          }\n\n          if (userConfig === void 0) {\n            userConfig = {};\n          }\n          /** @type {Partial<Options>} */\n\n\n          this.config = cjs_default.a.all([DEFAULT_CONFIG, Choices.defaults.options, userConfig], // When merging array configs, replace with a copy of the userConfig array,\n          // instead of concatenating with the default array\n          {\n            arrayMerge: function arrayMerge(_, sourceArray) {\n              return [].concat(sourceArray);\n            }\n          });\n          var invalidConfigOptions = diff(this.config, DEFAULT_CONFIG);\n\n          if (invalidConfigOptions.length) {\n            console.warn('Unknown config option(s) passed', invalidConfigOptions.join(', '));\n          }\n\n          var passedElement = typeof element === 'string' ? document.querySelector(element) : element;\n\n          if (!(passedElement instanceof HTMLInputElement || passedElement instanceof HTMLSelectElement)) {\n            throw TypeError('Expected one of the following types text|select-one|select-multiple');\n          }\n\n          this._isTextElement = passedElement.type === TEXT_TYPE;\n          this._isSelectOneElement = passedElement.type === SELECT_ONE_TYPE;\n          this._isSelectMultipleElement = passedElement.type === SELECT_MULTIPLE_TYPE;\n          this._isSelectElement = this._isSelectOneElement || this._isSelectMultipleElement;\n          this.config.searchEnabled = this._isSelectMultipleElement || this.config.searchEnabled;\n\n          if (!['auto', 'always'].includes(this.config.renderSelectedChoices)) {\n            this.config.renderSelectedChoices = 'auto';\n          }\n\n          if (userConfig.addItemFilter && typeof userConfig.addItemFilter !== 'function') {\n            var re = userConfig.addItemFilter instanceof RegExp ? userConfig.addItemFilter : new RegExp(userConfig.addItemFilter);\n            this.config.addItemFilter = re.test.bind(re);\n          }\n\n          if (this._isTextElement) {\n            this.passedElement = new WrappedInput({\n              element: passedElement,\n              classNames: this.config.classNames,\n              delimiter: this.config.delimiter\n            });\n          } else {\n            this.passedElement = new WrappedSelect({\n              element: passedElement,\n              classNames: this.config.classNames,\n              template: function template(data) {\n                return _this._templates.option(data);\n              }\n            });\n          }\n\n          this.initialised = false;\n          this._store = new store_Store();\n          this._initialState = {};\n          this._currentState = {};\n          this._prevState = {};\n          this._currentValue = '';\n          this._canSearch = this.config.searchEnabled;\n          this._isScrollingOnIe = false;\n          this._highlightPosition = 0;\n          this._wasTap = true;\n          this._placeholderValue = this._generatePlaceholderValue();\n          this._baseId = generateId(this.passedElement.element, 'choices-');\n          /**\n           * setting direction in cases where it's explicitly set on passedElement\n           * or when calculated direction is different from the document\n           * @type {HTMLElement['dir']}\n           */\n\n          this._direction = this.passedElement.dir;\n\n          if (!this._direction) {\n            var _window$getComputedSt = window.getComputedStyle(this.passedElement.element),\n                elementDirection = _window$getComputedSt.direction;\n\n            var _window$getComputedSt2 = window.getComputedStyle(document.documentElement),\n                documentDirection = _window$getComputedSt2.direction;\n\n            if (elementDirection !== documentDirection) {\n              this._direction = elementDirection;\n            }\n          }\n\n          this._idNames = {\n            itemChoice: 'item-choice'\n          }; // Assign preset groups from passed element\n\n          this._presetGroups = this.passedElement.optionGroups; // Assign preset options from passed element\n\n          this._presetOptions = this.passedElement.options; // Assign preset choices from passed object\n\n          this._presetChoices = this.config.choices; // Assign preset items from passed object first\n\n          this._presetItems = this.config.items; // Add any values passed from attribute\n\n          if (this.passedElement.value) {\n            this._presetItems = this._presetItems.concat(this.passedElement.value.split(this.config.delimiter));\n          } // Create array of choices from option elements\n\n\n          if (this.passedElement.options) {\n            this.passedElement.options.forEach(function (o) {\n              _this._presetChoices.push({\n                value: o.value,\n                label: o.innerHTML,\n                selected: o.selected,\n                disabled: o.disabled || o.parentNode.disabled,\n                placeholder: o.value === '' || o.hasAttribute('placeholder'),\n                customProperties: o.getAttribute('data-custom-properties')\n              });\n            });\n          }\n\n          this._render = this._render.bind(this);\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n          this._onKeyUp = this._onKeyUp.bind(this);\n          this._onKeyDown = this._onKeyDown.bind(this);\n          this._onClick = this._onClick.bind(this);\n          this._onTouchMove = this._onTouchMove.bind(this);\n          this._onTouchEnd = this._onTouchEnd.bind(this);\n          this._onMouseDown = this._onMouseDown.bind(this);\n          this._onMouseOver = this._onMouseOver.bind(this);\n          this._onFormReset = this._onFormReset.bind(this);\n          this._onAKey = this._onAKey.bind(this);\n          this._onEnterKey = this._onEnterKey.bind(this);\n          this._onEscapeKey = this._onEscapeKey.bind(this);\n          this._onDirectionKey = this._onDirectionKey.bind(this);\n          this._onDeleteKey = this._onDeleteKey.bind(this); // If element has already been initialised with Choices, fail silently\n\n          if (this.passedElement.isActive) {\n            if (!this.config.silent) {\n              console.warn('Trying to initialise Choices on element already initialised');\n            }\n\n            this.initialised = true;\n            return;\n          } // Let's go\n\n\n          this.init();\n        }\n\n        var _proto = Choices.prototype;\n\n        _proto.init = function init() {\n          if (this.initialised) {\n            return;\n          }\n\n          this._createTemplates();\n\n          this._createElements();\n\n          this._createStructure(); // Set initial state (We need to clone the state because some reducers\n          // modify the inner objects properties in the state) 🤢\n\n\n          this._initialState = cloneObject(this._store.state);\n\n          this._store.subscribe(this._render);\n\n          this._render();\n\n          this._addEventListeners();\n\n          var shouldDisable = !this.config.addItems || this.passedElement.element.hasAttribute('disabled');\n\n          if (shouldDisable) {\n            this.disable();\n          }\n\n          this.initialised = true;\n          var callbackOnInit = this.config.callbackOnInit; // Run callback if it is a function\n\n          if (callbackOnInit && typeof callbackOnInit === 'function') {\n            callbackOnInit.call(this);\n          }\n        };\n\n        _proto.destroy = function destroy() {\n          if (!this.initialised) {\n            return;\n          }\n\n          this._removeEventListeners();\n\n          this.passedElement.reveal();\n          this.containerOuter.unwrap(this.passedElement.element);\n          this.clearStore();\n\n          if (this._isSelectElement) {\n            this.passedElement.options = this._presetOptions;\n          }\n\n          this._templates = null;\n          this.initialised = false;\n        };\n\n        _proto.enable = function enable() {\n          if (this.passedElement.isDisabled) {\n            this.passedElement.enable();\n          }\n\n          if (this.containerOuter.isDisabled) {\n            this._addEventListeners();\n\n            this.input.enable();\n            this.containerOuter.enable();\n          }\n\n          return this;\n        };\n\n        _proto.disable = function disable() {\n          if (!this.passedElement.isDisabled) {\n            this.passedElement.disable();\n          }\n\n          if (!this.containerOuter.isDisabled) {\n            this._removeEventListeners();\n\n            this.input.disable();\n            this.containerOuter.disable();\n          }\n\n          return this;\n        };\n\n        _proto.highlightItem = function highlightItem(item, runEvent) {\n          if (runEvent === void 0) {\n            runEvent = true;\n          }\n\n          if (!item) {\n            return this;\n          }\n\n          var id = item.id,\n              _item$groupId = item.groupId,\n              groupId = _item$groupId === void 0 ? -1 : _item$groupId,\n              _item$value = item.value,\n              value = _item$value === void 0 ? '' : _item$value,\n              _item$label = item.label,\n              label = _item$label === void 0 ? '' : _item$label;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_highlightItem(id, true));\n\n          if (runEvent) {\n            this.passedElement.triggerEvent(EVENTS.highlightItem, {\n              id: id,\n              value: value,\n              label: label,\n              groupValue: group && group.value ? group.value : null\n            });\n          }\n\n          return this;\n        };\n\n        _proto.unhighlightItem = function unhighlightItem(item) {\n          if (!item) {\n            return this;\n          }\n\n          var id = item.id,\n              _item$groupId2 = item.groupId,\n              groupId = _item$groupId2 === void 0 ? -1 : _item$groupId2,\n              _item$value2 = item.value,\n              value = _item$value2 === void 0 ? '' : _item$value2,\n              _item$label2 = item.label,\n              label = _item$label2 === void 0 ? '' : _item$label2;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_highlightItem(id, false));\n\n          this.passedElement.triggerEvent(EVENTS.highlightItem, {\n            id: id,\n            value: value,\n            label: label,\n            groupValue: group && group.value ? group.value : null\n          });\n          return this;\n        };\n\n        _proto.highlightAll = function highlightAll() {\n          var _this2 = this;\n\n          this._store.items.forEach(function (item) {\n            return _this2.highlightItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.unhighlightAll = function unhighlightAll() {\n          var _this3 = this;\n\n          this._store.items.forEach(function (item) {\n            return _this3.unhighlightItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeActiveItemsByValue = function removeActiveItemsByValue(value) {\n          var _this4 = this;\n\n          this._store.activeItems.filter(function (item) {\n            return item.value === value;\n          }).forEach(function (item) {\n            return _this4._removeItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeActiveItems = function removeActiveItems(excludedId) {\n          var _this5 = this;\n\n          this._store.activeItems.filter(function (_ref) {\n            var id = _ref.id;\n            return id !== excludedId;\n          }).forEach(function (item) {\n            return _this5._removeItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeHighlightedItems = function removeHighlightedItems(runEvent) {\n          var _this6 = this;\n\n          if (runEvent === void 0) {\n            runEvent = false;\n          }\n\n          this._store.highlightedActiveItems.forEach(function (item) {\n            _this6._removeItem(item); // If this action was performed by the user\n            // trigger the event\n\n\n            if (runEvent) {\n              _this6._triggerChange(item.value);\n            }\n          });\n\n          return this;\n        };\n\n        _proto.showDropdown = function showDropdown(preventInputFocus) {\n          var _this7 = this;\n\n          if (this.dropdown.isActive) {\n            return this;\n          }\n\n          requestAnimationFrame(function () {\n            _this7.dropdown.show();\n\n            _this7.containerOuter.open(_this7.dropdown.distanceFromTopWindow);\n\n            if (!preventInputFocus && _this7._canSearch) {\n              _this7.input.focus();\n            }\n\n            _this7.passedElement.triggerEvent(EVENTS.showDropdown, {});\n          });\n          return this;\n        };\n\n        _proto.hideDropdown = function hideDropdown(preventInputBlur) {\n          var _this8 = this;\n\n          if (!this.dropdown.isActive) {\n            return this;\n          }\n\n          requestAnimationFrame(function () {\n            _this8.dropdown.hide();\n\n            _this8.containerOuter.close();\n\n            if (!preventInputBlur && _this8._canSearch) {\n              _this8.input.removeActiveDescendant();\n\n              _this8.input.blur();\n            }\n\n            _this8.passedElement.triggerEvent(EVENTS.hideDropdown, {});\n          });\n          return this;\n        };\n\n        _proto.getValue = function getValue(valueOnly) {\n          if (valueOnly === void 0) {\n            valueOnly = false;\n          }\n\n          var values = this._store.activeItems.reduce(function (selectedItems, item) {\n            var itemValue = valueOnly ? item.value : item;\n            selectedItems.push(itemValue);\n            return selectedItems;\n          }, []);\n\n          return this._isSelectOneElement ? values[0] : values;\n        }\n        /**\n         * @param {string[] | import('../../types/index').Choices.Item[]} items\n         */\n        ;\n\n        _proto.setValue = function setValue(items) {\n          var _this9 = this;\n\n          if (!this.initialised) {\n            return this;\n          }\n\n          items.forEach(function (value) {\n            return _this9._setChoiceOrItem(value);\n          });\n          return this;\n        };\n\n        _proto.setChoiceByValue = function setChoiceByValue(value) {\n          var _this10 = this;\n\n          if (!this.initialised || this._isTextElement) {\n            return this;\n          } // If only one value has been passed, convert to array\n\n\n          var choiceValue = Array.isArray(value) ? value : [value]; // Loop through each value and\n\n          choiceValue.forEach(function (val) {\n            return _this10._findAndSelectChoiceByValue(val);\n          });\n          return this;\n        }\n        /**\n         * Set choices of select input via an array of objects (or function that returns array of object or promise of it),\n         * a value field name and a label field name.\n         * This behaves the same as passing items via the choices option but can be called after initialising Choices.\n         * This can also be used to add groups of choices (see example 2); Optionally pass a true `replaceChoices` value to remove any existing choices.\n         * Optionally pass a `customProperties` object to add additional data to your choices (useful when searching/filtering etc).\n         *\n         * **Input types affected:** select-one, select-multiple\n         *\n         * @template {Choice[] | ((instance: Choices) => object[] | Promise<object[]>)} T\n         * @param {T} [choicesArrayOrFetcher]\n         * @param {string} [value = 'value'] - name of `value` field\n         * @param {string} [label = 'label'] - name of 'label' field\n         * @param {boolean} [replaceChoices = false] - whether to replace of add choices\n         * @returns {this | Promise<this>}\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices([\n         *   {value: 'One', label: 'Label One', disabled: true},\n         *   {value: 'Two', label: 'Label Two', selected: true},\n         *   {value: 'Three', label: 'Label Three'},\n         * ], 'value', 'label', false);\n         * ```\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices(async () => {\n         *   try {\n         *      const items = await fetch('/items');\n         *      return items.json()\n         *   } catch(err) {\n         *      console.error(err)\n         *   }\n         * });\n         * ```\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices([{\n         *   label: 'Group one',\n         *   id: 1,\n         *   disabled: false,\n         *   choices: [\n         *     {value: 'Child One', label: 'Child One', selected: true},\n         *     {value: 'Child Two', label: 'Child Two',  disabled: true},\n         *     {value: 'Child Three', label: 'Child Three'},\n         *   ]\n         * },\n         * {\n         *   label: 'Group two',\n         *   id: 2,\n         *   disabled: false,\n         *   choices: [\n         *     {value: 'Child Four', label: 'Child Four', disabled: true},\n         *     {value: 'Child Five', label: 'Child Five'},\n         *     {value: 'Child Six', label: 'Child Six', customProperties: {\n         *       description: 'Custom description about child six',\n         *       random: 'Another random custom property'\n         *     }},\n         *   ]\n         * }], 'value', 'label', false);\n         * ```\n         */\n        ;\n\n        _proto.setChoices = function setChoices(choicesArrayOrFetcher, value, label, replaceChoices) {\n          var _this11 = this;\n\n          if (choicesArrayOrFetcher === void 0) {\n            choicesArrayOrFetcher = [];\n          }\n\n          if (value === void 0) {\n            value = 'value';\n          }\n\n          if (label === void 0) {\n            label = 'label';\n          }\n\n          if (replaceChoices === void 0) {\n            replaceChoices = false;\n          }\n\n          if (!this.initialised) {\n            throw new ReferenceError(\"setChoices was called on a non-initialized instance of Choices\");\n          }\n\n          if (!this._isSelectElement) {\n            throw new TypeError(\"setChoices can't be used with INPUT based Choices\");\n          }\n\n          if (typeof value !== 'string' || !value) {\n            throw new TypeError(\"value parameter must be a name of 'value' field in passed objects\");\n          } // Clear choices if needed\n\n\n          if (replaceChoices) {\n            this.clearChoices();\n          }\n\n          if (typeof choicesArrayOrFetcher === 'function') {\n            // it's a choices fetcher function\n            var fetcher = choicesArrayOrFetcher(this);\n\n            if (typeof Promise === 'function' && fetcher instanceof Promise) {\n              // that's a promise\n              // eslint-disable-next-line compat/compat\n              return new Promise(function (resolve) {\n                return requestAnimationFrame(resolve);\n              }).then(function () {\n                return _this11._handleLoadingState(true);\n              }).then(function () {\n                return fetcher;\n              }).then(function (data) {\n                return _this11.setChoices(data, value, label, replaceChoices);\n              }).catch(function (err) {\n                if (!_this11.config.silent) {\n                  console.error(err);\n                }\n              }).then(function () {\n                return _this11._handleLoadingState(false);\n              }).then(function () {\n                return _this11;\n              });\n            } // function returned something else than promise, let's check if it's an array of choices\n\n\n            if (!Array.isArray(fetcher)) {\n              throw new TypeError(\".setChoices first argument function must return either array of choices or Promise, got: \" + typeof fetcher);\n            } // recursion with results, it's sync and choices were cleared already\n\n\n            return this.setChoices(fetcher, value, label, false);\n          }\n\n          if (!Array.isArray(choicesArrayOrFetcher)) {\n            throw new TypeError(\".setChoices must be called either with array of choices with a function resulting into Promise of array of choices\");\n          }\n\n          this.containerOuter.removeLoadingState();\n\n          this._startLoading();\n\n          choicesArrayOrFetcher.forEach(function (groupOrChoice) {\n            if (groupOrChoice.choices) {\n              _this11._addGroup({\n                id: parseInt(groupOrChoice.id, 10) || null,\n                group: groupOrChoice,\n                valueKey: value,\n                labelKey: label\n              });\n            } else {\n              _this11._addChoice({\n                value: groupOrChoice[value],\n                label: groupOrChoice[label],\n                isSelected: groupOrChoice.selected,\n                isDisabled: groupOrChoice.disabled,\n                customProperties: groupOrChoice.customProperties,\n                placeholder: groupOrChoice.placeholder\n              });\n            }\n          });\n\n          this._stopLoading();\n\n          return this;\n        };\n\n        _proto.clearChoices = function clearChoices() {\n          this._store.dispatch(choices_clearChoices());\n\n          return this;\n        };\n\n        _proto.clearStore = function clearStore() {\n          this._store.dispatch(clearAll());\n\n          return this;\n        };\n\n        _proto.clearInput = function clearInput() {\n          var shouldSetInputWidth = !this._isSelectOneElement;\n          this.input.clear(shouldSetInputWidth);\n\n          if (!this._isTextElement && this._canSearch) {\n            this._isSearching = false;\n\n            this._store.dispatch(choices_activateChoices(true));\n          }\n\n          return this;\n        };\n\n        _proto._render = function _render() {\n          if (this._store.isLoading()) {\n            return;\n          }\n\n          this._currentState = this._store.state;\n          var stateChanged = this._currentState.choices !== this._prevState.choices || this._currentState.groups !== this._prevState.groups || this._currentState.items !== this._prevState.items;\n          var shouldRenderChoices = this._isSelectElement;\n          var shouldRenderItems = this._currentState.items !== this._prevState.items;\n\n          if (!stateChanged) {\n            return;\n          }\n\n          if (shouldRenderChoices) {\n            this._renderChoices();\n          }\n\n          if (shouldRenderItems) {\n            this._renderItems();\n          }\n\n          this._prevState = this._currentState;\n        };\n\n        _proto._renderChoices = function _renderChoices() {\n          var _this12 = this;\n\n          var _this$_store = this._store,\n              activeGroups = _this$_store.activeGroups,\n              activeChoices = _this$_store.activeChoices;\n          var choiceListFragment = document.createDocumentFragment();\n          this.choiceList.clear();\n\n          if (this.config.resetScrollPosition) {\n            requestAnimationFrame(function () {\n              return _this12.choiceList.scrollToTop();\n            });\n          } // If we have grouped options\n\n\n          if (activeGroups.length >= 1 && !this._isSearching) {\n            // If we have a placeholder choice along with groups\n            var activePlaceholders = activeChoices.filter(function (activeChoice) {\n              return activeChoice.placeholder === true && activeChoice.groupId === -1;\n            });\n\n            if (activePlaceholders.length >= 1) {\n              choiceListFragment = this._createChoicesFragment(activePlaceholders, choiceListFragment);\n            }\n\n            choiceListFragment = this._createGroupsFragment(activeGroups, activeChoices, choiceListFragment);\n          } else if (activeChoices.length >= 1) {\n            choiceListFragment = this._createChoicesFragment(activeChoices, choiceListFragment);\n          } // If we have choices to show\n\n\n          if (choiceListFragment.childNodes && choiceListFragment.childNodes.length > 0) {\n            var activeItems = this._store.activeItems;\n\n            var canAddItem = this._canAddItem(activeItems, this.input.value); // ...and we can select them\n\n\n            if (canAddItem.response) {\n              // ...append them and highlight the first choice\n              this.choiceList.append(choiceListFragment);\n\n              this._highlightChoice();\n            } else {\n              // ...otherwise show a notice\n              this.choiceList.append(this._getTemplate('notice', canAddItem.notice));\n            }\n          } else {\n            // Otherwise show a notice\n            var dropdownItem;\n            var notice;\n\n            if (this._isSearching) {\n              notice = typeof this.config.noResultsText === 'function' ? this.config.noResultsText() : this.config.noResultsText;\n              dropdownItem = this._getTemplate('notice', notice, 'no-results');\n            } else {\n              notice = typeof this.config.noChoicesText === 'function' ? this.config.noChoicesText() : this.config.noChoicesText;\n              dropdownItem = this._getTemplate('notice', notice, 'no-choices');\n            }\n\n            this.choiceList.append(dropdownItem);\n          }\n        };\n\n        _proto._renderItems = function _renderItems() {\n          var activeItems = this._store.activeItems || [];\n          this.itemList.clear(); // Create a fragment to store our list items\n          // (so we don't have to update the DOM for each item)\n\n          var itemListFragment = this._createItemsFragment(activeItems); // If we have items to add, append them\n\n\n          if (itemListFragment.childNodes) {\n            this.itemList.append(itemListFragment);\n          }\n        };\n\n        _proto._createGroupsFragment = function _createGroupsFragment(groups, choices, fragment) {\n          var _this13 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          }\n\n          var getGroupChoices = function getGroupChoices(group) {\n            return choices.filter(function (choice) {\n              if (_this13._isSelectOneElement) {\n                return choice.groupId === group.id;\n              }\n\n              return choice.groupId === group.id && (_this13.config.renderSelectedChoices === 'always' || !choice.selected);\n            });\n          }; // If sorting is enabled, filter groups\n\n\n          if (this.config.shouldSort) {\n            groups.sort(this.config.sorter);\n          }\n\n          groups.forEach(function (group) {\n            var groupChoices = getGroupChoices(group);\n\n            if (groupChoices.length >= 1) {\n              var dropdownGroup = _this13._getTemplate('choiceGroup', group);\n\n              fragment.appendChild(dropdownGroup);\n\n              _this13._createChoicesFragment(groupChoices, fragment, true);\n            }\n          });\n          return fragment;\n        };\n\n        _proto._createChoicesFragment = function _createChoicesFragment(choices, fragment, withinGroup) {\n          var _this14 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          }\n\n          if (withinGroup === void 0) {\n            withinGroup = false;\n          } // Create a fragment to store our list items (so we don't have to update the DOM for each item)\n\n\n          var _this$config = this.config,\n              renderSelectedChoices = _this$config.renderSelectedChoices,\n              searchResultLimit = _this$config.searchResultLimit,\n              renderChoiceLimit = _this$config.renderChoiceLimit;\n          var filter = this._isSearching ? sortByScore : this.config.sorter;\n\n          var appendChoice = function appendChoice(choice) {\n            var shouldRender = renderSelectedChoices === 'auto' ? _this14._isSelectOneElement || !choice.selected : true;\n\n            if (shouldRender) {\n              var dropdownItem = _this14._getTemplate('choice', choice, _this14.config.itemSelectText);\n\n              fragment.appendChild(dropdownItem);\n            }\n          };\n\n          var rendererableChoices = choices;\n\n          if (renderSelectedChoices === 'auto' && !this._isSelectOneElement) {\n            rendererableChoices = choices.filter(function (choice) {\n              return !choice.selected;\n            });\n          } // Split array into placeholders and \"normal\" choices\n\n\n          var _rendererableChoices$ = rendererableChoices.reduce(function (acc, choice) {\n            if (choice.placeholder) {\n              acc.placeholderChoices.push(choice);\n            } else {\n              acc.normalChoices.push(choice);\n            }\n\n            return acc;\n          }, {\n            placeholderChoices: [],\n            normalChoices: []\n          }),\n              placeholderChoices = _rendererableChoices$.placeholderChoices,\n              normalChoices = _rendererableChoices$.normalChoices; // If sorting is enabled or the user is searching, filter choices\n\n\n          if (this.config.shouldSort || this._isSearching) {\n            normalChoices.sort(filter);\n          }\n\n          var choiceLimit = rendererableChoices.length; // Prepend placeholeder\n\n          var sortedChoices = this._isSelectOneElement ? [].concat(placeholderChoices, normalChoices) : normalChoices;\n\n          if (this._isSearching) {\n            choiceLimit = searchResultLimit;\n          } else if (renderChoiceLimit && renderChoiceLimit > 0 && !withinGroup) {\n            choiceLimit = renderChoiceLimit;\n          } // Add each choice to dropdown within range\n\n\n          for (var i = 0; i < choiceLimit; i += 1) {\n            if (sortedChoices[i]) {\n              appendChoice(sortedChoices[i]);\n            }\n          }\n\n          return fragment;\n        };\n\n        _proto._createItemsFragment = function _createItemsFragment(items, fragment) {\n          var _this15 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          } // Create fragment to add elements to\n\n\n          var _this$config2 = this.config,\n              shouldSortItems = _this$config2.shouldSortItems,\n              sorter = _this$config2.sorter,\n              removeItemButton = _this$config2.removeItemButton; // If sorting is enabled, filter items\n\n          if (shouldSortItems && !this._isSelectOneElement) {\n            items.sort(sorter);\n          }\n\n          if (this._isTextElement) {\n            // Update the value of the hidden input\n            this.passedElement.value = items;\n          } else {\n            // Update the options of the hidden input\n            this.passedElement.options = items;\n          }\n\n          var addItemToFragment = function addItemToFragment(item) {\n            // Create new list element\n            var listItem = _this15._getTemplate('item', item, removeItemButton); // Append it to list\n\n\n            fragment.appendChild(listItem);\n          }; // Add each list item to list\n\n\n          items.forEach(addItemToFragment);\n          return fragment;\n        };\n\n        _proto._triggerChange = function _triggerChange(value) {\n          if (value === undefined || value === null) {\n            return;\n          }\n\n          this.passedElement.triggerEvent(EVENTS.change, {\n            value: value\n          });\n        };\n\n        _proto._selectPlaceholderChoice = function _selectPlaceholderChoice() {\n          var placeholderChoice = this._store.placeholderChoice;\n\n          if (placeholderChoice) {\n            this._addItem({\n              value: placeholderChoice.value,\n              label: placeholderChoice.label,\n              choiceId: placeholderChoice.id,\n              groupId: placeholderChoice.groupId,\n              placeholder: placeholderChoice.placeholder\n            });\n\n            this._triggerChange(placeholderChoice.value);\n          }\n        };\n\n        _proto._handleButtonAction = function _handleButtonAction(activeItems, element) {\n          if (!activeItems || !element || !this.config.removeItems || !this.config.removeItemButton) {\n            return;\n          }\n\n          var itemId = element.parentNode.getAttribute('data-id');\n          var itemToRemove = activeItems.find(function (item) {\n            return item.id === parseInt(itemId, 10);\n          }); // Remove item associated with button\n\n          this._removeItem(itemToRemove);\n\n          this._triggerChange(itemToRemove.value);\n\n          if (this._isSelectOneElement) {\n            this._selectPlaceholderChoice();\n          }\n        };\n\n        _proto._handleItemAction = function _handleItemAction(activeItems, element, hasShiftKey) {\n          var _this16 = this;\n\n          if (hasShiftKey === void 0) {\n            hasShiftKey = false;\n          }\n\n          if (!activeItems || !element || !this.config.removeItems || this._isSelectOneElement) {\n            return;\n          }\n\n          var passedId = element.getAttribute('data-id'); // We only want to select one item with a click\n          // so we deselect any items that aren't the target\n          // unless shift is being pressed\n\n          activeItems.forEach(function (item) {\n            if (item.id === parseInt(passedId, 10) && !item.highlighted) {\n              _this16.highlightItem(item);\n            } else if (!hasShiftKey && item.highlighted) {\n              _this16.unhighlightItem(item);\n            }\n          }); // Focus input as without focus, a user cannot do anything with a\n          // highlighted item\n\n          this.input.focus();\n        };\n\n        _proto._handleChoiceAction = function _handleChoiceAction(activeItems, element) {\n          if (!activeItems || !element) {\n            return;\n          } // If we are clicking on an option\n\n\n          var id = element.dataset.id;\n\n          var choice = this._store.getChoiceById(id);\n\n          if (!choice) {\n            return;\n          }\n\n          var passedKeyCode = activeItems[0] && activeItems[0].keyCode ? activeItems[0].keyCode : null;\n          var hasActiveDropdown = this.dropdown.isActive; // Update choice keyCode\n\n          choice.keyCode = passedKeyCode;\n          this.passedElement.triggerEvent(EVENTS.choice, {\n            choice: choice\n          });\n\n          if (!choice.selected && !choice.disabled) {\n            var canAddItem = this._canAddItem(activeItems, choice.value);\n\n            if (canAddItem.response) {\n              this._addItem({\n                value: choice.value,\n                label: choice.label,\n                choiceId: choice.id,\n                groupId: choice.groupId,\n                customProperties: choice.customProperties,\n                placeholder: choice.placeholder,\n                keyCode: choice.keyCode\n              });\n\n              this._triggerChange(choice.value);\n            }\n          }\n\n          this.clearInput(); // We want to close the dropdown if we are dealing with a single select box\n\n          if (hasActiveDropdown && this._isSelectOneElement) {\n            this.hideDropdown(true);\n            this.containerOuter.focus();\n          }\n        };\n\n        _proto._handleBackspace = function _handleBackspace(activeItems) {\n          if (!this.config.removeItems || !activeItems) {\n            return;\n          }\n\n          var lastItem = activeItems[activeItems.length - 1];\n          var hasHighlightedItems = activeItems.some(function (item) {\n            return item.highlighted;\n          }); // If editing the last item is allowed and there are not other selected items,\n          // we can edit the item value. Otherwise if we can remove items, remove all selected items\n\n          if (this.config.editItems && !hasHighlightedItems && lastItem) {\n            this.input.value = lastItem.value;\n            this.input.setWidth();\n\n            this._removeItem(lastItem);\n\n            this._triggerChange(lastItem.value);\n          } else {\n            if (!hasHighlightedItems) {\n              // Highlight last item if none already highlighted\n              this.highlightItem(lastItem, false);\n            }\n\n            this.removeHighlightedItems(true);\n          }\n        };\n\n        _proto._startLoading = function _startLoading() {\n          this._store.dispatch(setIsLoading(true));\n        };\n\n        _proto._stopLoading = function _stopLoading() {\n          this._store.dispatch(setIsLoading(false));\n        };\n\n        _proto._handleLoadingState = function _handleLoadingState(setLoading) {\n          if (setLoading === void 0) {\n            setLoading = true;\n          }\n\n          var placeholderItem = this.itemList.getChild(\".\" + this.config.classNames.placeholder);\n\n          if (setLoading) {\n            this.disable();\n            this.containerOuter.addLoadingState();\n\n            if (this._isSelectOneElement) {\n              if (!placeholderItem) {\n                placeholderItem = this._getTemplate('placeholder', this.config.loadingText);\n                this.itemList.append(placeholderItem);\n              } else {\n                placeholderItem.innerHTML = this.config.loadingText;\n              }\n            } else {\n              this.input.placeholder = this.config.loadingText;\n            }\n          } else {\n            this.enable();\n            this.containerOuter.removeLoadingState();\n\n            if (this._isSelectOneElement) {\n              placeholderItem.innerHTML = this._placeholderValue || '';\n            } else {\n              this.input.placeholder = this._placeholderValue || '';\n            }\n          }\n        };\n\n        _proto._handleSearch = function _handleSearch(value) {\n          if (!value || !this.input.isFocussed) {\n            return;\n          }\n\n          var choices = this._store.choices;\n          var _this$config3 = this.config,\n              searchFloor = _this$config3.searchFloor,\n              searchChoices = _this$config3.searchChoices;\n          var hasUnactiveChoices = choices.some(function (option) {\n            return !option.active;\n          }); // Check that we have a value to search and the input was an alphanumeric character\n\n          if (value && value.length >= searchFloor) {\n            var resultCount = searchChoices ? this._searchChoices(value) : 0; // Trigger search event\n\n            this.passedElement.triggerEvent(EVENTS.search, {\n              value: value,\n              resultCount: resultCount\n            });\n          } else if (hasUnactiveChoices) {\n            // Otherwise reset choices to active\n            this._isSearching = false;\n\n            this._store.dispatch(choices_activateChoices(true));\n          }\n        };\n\n        _proto._canAddItem = function _canAddItem(activeItems, value) {\n          var canAddItem = true;\n          var notice = typeof this.config.addItemText === 'function' ? this.config.addItemText(value) : this.config.addItemText;\n\n          if (!this._isSelectOneElement) {\n            var isDuplicateValue = existsInArray(activeItems, value);\n\n            if (this.config.maxItemCount > 0 && this.config.maxItemCount <= activeItems.length) {\n              // If there is a max entry limit and we have reached that limit\n              // don't update\n              canAddItem = false;\n              notice = typeof this.config.maxItemText === 'function' ? this.config.maxItemText(this.config.maxItemCount) : this.config.maxItemText;\n            }\n\n            if (!this.config.duplicateItemsAllowed && isDuplicateValue && canAddItem) {\n              canAddItem = false;\n              notice = typeof this.config.uniqueItemText === 'function' ? this.config.uniqueItemText(value) : this.config.uniqueItemText;\n            }\n\n            if (this._isTextElement && this.config.addItems && canAddItem && typeof this.config.addItemFilter === 'function' && !this.config.addItemFilter(value)) {\n              canAddItem = false;\n              notice = typeof this.config.customAddItemText === 'function' ? this.config.customAddItemText(value) : this.config.customAddItemText;\n            }\n          }\n\n          return {\n            response: canAddItem,\n            notice: notice\n          };\n        };\n\n        _proto._searchChoices = function _searchChoices(value) {\n          var newValue = typeof value === 'string' ? value.trim() : value;\n          var currentValue = typeof this._currentValue === 'string' ? this._currentValue.trim() : this._currentValue;\n\n          if (newValue.length < 1 && newValue === currentValue + \" \") {\n            return 0;\n          } // If new value matches the desired length and is not the same as the current value with a space\n\n\n          var haystack = this._store.searchableChoices;\n          var needle = newValue;\n          var keys = [].concat(this.config.searchFields);\n          var options = Object.assign(this.config.fuseOptions, {\n            keys: keys\n          });\n          var fuse = new fuse_default.a(haystack, options);\n          var results = fuse.search(needle);\n          this._currentValue = newValue;\n          this._highlightPosition = 0;\n          this._isSearching = true;\n\n          this._store.dispatch(choices_filterChoices(results));\n\n          return results.length;\n        };\n\n        _proto._addEventListeners = function _addEventListeners() {\n          var _document = document,\n              documentElement = _document.documentElement; // capture events - can cancel event processing or propagation\n\n          documentElement.addEventListener('touchend', this._onTouchEnd, true);\n          this.containerOuter.element.addEventListener('keydown', this._onKeyDown, true);\n          this.containerOuter.element.addEventListener('mousedown', this._onMouseDown, true); // passive events - doesn't call `preventDefault` or `stopPropagation`\n\n          documentElement.addEventListener('click', this._onClick, {\n            passive: true\n          });\n          documentElement.addEventListener('touchmove', this._onTouchMove, {\n            passive: true\n          });\n          this.dropdown.element.addEventListener('mouseover', this._onMouseOver, {\n            passive: true\n          });\n\n          if (this._isSelectOneElement) {\n            this.containerOuter.element.addEventListener('focus', this._onFocus, {\n              passive: true\n            });\n            this.containerOuter.element.addEventListener('blur', this._onBlur, {\n              passive: true\n            });\n          }\n\n          this.input.element.addEventListener('keyup', this._onKeyUp, {\n            passive: true\n          });\n          this.input.element.addEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.input.element.addEventListener('blur', this._onBlur, {\n            passive: true\n          });\n\n          if (this.input.element.form) {\n            this.input.element.form.addEventListener('reset', this._onFormReset, {\n              passive: true\n            });\n          }\n\n          this.input.addEventListeners();\n        };\n\n        _proto._removeEventListeners = function _removeEventListeners() {\n          var _document2 = document,\n              documentElement = _document2.documentElement;\n          documentElement.removeEventListener('touchend', this._onTouchEnd, true);\n          this.containerOuter.element.removeEventListener('keydown', this._onKeyDown, true);\n          this.containerOuter.element.removeEventListener('mousedown', this._onMouseDown, true);\n          documentElement.removeEventListener('click', this._onClick);\n          documentElement.removeEventListener('touchmove', this._onTouchMove);\n          this.dropdown.element.removeEventListener('mouseover', this._onMouseOver);\n\n          if (this._isSelectOneElement) {\n            this.containerOuter.element.removeEventListener('focus', this._onFocus);\n            this.containerOuter.element.removeEventListener('blur', this._onBlur);\n          }\n\n          this.input.element.removeEventListener('keyup', this._onKeyUp);\n          this.input.element.removeEventListener('focus', this._onFocus);\n          this.input.element.removeEventListener('blur', this._onBlur);\n\n          if (this.input.element.form) {\n            this.input.element.form.removeEventListener('reset', this._onFormReset);\n          }\n\n          this.input.removeEventListeners();\n        }\n        /**\n         * @param {KeyboardEvent} event\n         */\n        ;\n\n        _proto._onKeyDown = function _onKeyDown(event) {\n          var _keyDownActions;\n\n          var target = event.target,\n              keyCode = event.keyCode,\n              ctrlKey = event.ctrlKey,\n              metaKey = event.metaKey;\n          var activeItems = this._store.activeItems;\n          var hasFocusedInput = this.input.isFocussed;\n          var hasActiveDropdown = this.dropdown.isActive;\n          var hasItems = this.itemList.hasChildren();\n          var keyString = String.fromCharCode(keyCode);\n          var BACK_KEY = KEY_CODES.BACK_KEY,\n              DELETE_KEY = KEY_CODES.DELETE_KEY,\n              ENTER_KEY = KEY_CODES.ENTER_KEY,\n              A_KEY = KEY_CODES.A_KEY,\n              ESC_KEY = KEY_CODES.ESC_KEY,\n              UP_KEY = KEY_CODES.UP_KEY,\n              DOWN_KEY = KEY_CODES.DOWN_KEY,\n              PAGE_UP_KEY = KEY_CODES.PAGE_UP_KEY,\n              PAGE_DOWN_KEY = KEY_CODES.PAGE_DOWN_KEY;\n          var hasCtrlDownKeyPressed = ctrlKey || metaKey; // If a user is typing and the dropdown is not active\n\n          if (!this._isTextElement && /[a-zA-Z0-9-_ ]/.test(keyString)) {\n            this.showDropdown();\n          } // Map keys to key actions\n\n\n          var keyDownActions = (_keyDownActions = {}, _keyDownActions[A_KEY] = this._onAKey, _keyDownActions[ENTER_KEY] = this._onEnterKey, _keyDownActions[ESC_KEY] = this._onEscapeKey, _keyDownActions[UP_KEY] = this._onDirectionKey, _keyDownActions[PAGE_UP_KEY] = this._onDirectionKey, _keyDownActions[DOWN_KEY] = this._onDirectionKey, _keyDownActions[PAGE_DOWN_KEY] = this._onDirectionKey, _keyDownActions[DELETE_KEY] = this._onDeleteKey, _keyDownActions[BACK_KEY] = this._onDeleteKey, _keyDownActions); // If keycode has a function, run it\n\n          if (keyDownActions[keyCode]) {\n            keyDownActions[keyCode]({\n              event: event,\n              target: target,\n              keyCode: keyCode,\n              metaKey: metaKey,\n              activeItems: activeItems,\n              hasFocusedInput: hasFocusedInput,\n              hasActiveDropdown: hasActiveDropdown,\n              hasItems: hasItems,\n              hasCtrlDownKeyPressed: hasCtrlDownKeyPressed\n            });\n          }\n        };\n\n        _proto._onKeyUp = function _onKeyUp(_ref2) {\n          var target = _ref2.target,\n              keyCode = _ref2.keyCode;\n          var value = this.input.value;\n          var activeItems = this._store.activeItems;\n\n          var canAddItem = this._canAddItem(activeItems, value);\n\n          var backKey = KEY_CODES.BACK_KEY,\n              deleteKey = KEY_CODES.DELETE_KEY; // We are typing into a text input and have a value, we want to show a dropdown\n          // notice. Otherwise hide the dropdown\n\n          if (this._isTextElement) {\n            var canShowDropdownNotice = canAddItem.notice && value;\n\n            if (canShowDropdownNotice) {\n              var dropdownItem = this._getTemplate('notice', canAddItem.notice);\n\n              this.dropdown.element.innerHTML = dropdownItem.outerHTML;\n              this.showDropdown(true);\n            } else {\n              this.hideDropdown(true);\n            }\n          } else {\n            var userHasRemovedValue = (keyCode === backKey || keyCode === deleteKey) && !target.value;\n            var canReactivateChoices = !this._isTextElement && this._isSearching;\n            var canSearch = this._canSearch && canAddItem.response;\n\n            if (userHasRemovedValue && canReactivateChoices) {\n              this._isSearching = false;\n\n              this._store.dispatch(choices_activateChoices(true));\n            } else if (canSearch) {\n              this._handleSearch(this.input.value);\n            }\n          }\n\n          this._canSearch = this.config.searchEnabled;\n        };\n\n        _proto._onAKey = function _onAKey(_ref3) {\n          var hasItems = _ref3.hasItems,\n              hasCtrlDownKeyPressed = _ref3.hasCtrlDownKeyPressed; // If CTRL + A or CMD + A have been pressed and there are items to select\n\n          if (hasCtrlDownKeyPressed && hasItems) {\n            this._canSearch = false;\n            var shouldHightlightAll = this.config.removeItems && !this.input.value && this.input.element === document.activeElement;\n\n            if (shouldHightlightAll) {\n              this.highlightAll();\n            }\n          }\n        };\n\n        _proto._onEnterKey = function _onEnterKey(_ref4) {\n          var event = _ref4.event,\n              target = _ref4.target,\n              activeItems = _ref4.activeItems,\n              hasActiveDropdown = _ref4.hasActiveDropdown;\n          var enterKey = KEY_CODES.ENTER_KEY;\n          var targetWasButton = target.hasAttribute('data-button');\n\n          if (this._isTextElement && target.value) {\n            var value = this.input.value;\n\n            var canAddItem = this._canAddItem(activeItems, value);\n\n            if (canAddItem.response) {\n              this.hideDropdown(true);\n\n              this._addItem({\n                value: value\n              });\n\n              this._triggerChange(value);\n\n              this.clearInput();\n            }\n          }\n\n          if (targetWasButton) {\n            this._handleButtonAction(activeItems, target);\n\n            event.preventDefault();\n          }\n\n          if (hasActiveDropdown) {\n            var highlightedChoice = this.dropdown.getChild(\".\" + this.config.classNames.highlightedState);\n\n            if (highlightedChoice) {\n              // add enter keyCode value\n              if (activeItems[0]) {\n                activeItems[0].keyCode = enterKey; // eslint-disable-line no-param-reassign\n              }\n\n              this._handleChoiceAction(activeItems, highlightedChoice);\n            }\n\n            event.preventDefault();\n          } else if (this._isSelectOneElement) {\n            this.showDropdown();\n            event.preventDefault();\n          }\n        };\n\n        _proto._onEscapeKey = function _onEscapeKey(_ref5) {\n          var hasActiveDropdown = _ref5.hasActiveDropdown;\n\n          if (hasActiveDropdown) {\n            this.hideDropdown(true);\n            this.containerOuter.focus();\n          }\n        };\n\n        _proto._onDirectionKey = function _onDirectionKey(_ref6) {\n          var event = _ref6.event,\n              hasActiveDropdown = _ref6.hasActiveDropdown,\n              keyCode = _ref6.keyCode,\n              metaKey = _ref6.metaKey;\n          var downKey = KEY_CODES.DOWN_KEY,\n              pageUpKey = KEY_CODES.PAGE_UP_KEY,\n              pageDownKey = KEY_CODES.PAGE_DOWN_KEY; // If up or down key is pressed, traverse through options\n\n          if (hasActiveDropdown || this._isSelectOneElement) {\n            this.showDropdown();\n            this._canSearch = false;\n            var directionInt = keyCode === downKey || keyCode === pageDownKey ? 1 : -1;\n            var skipKey = metaKey || keyCode === pageDownKey || keyCode === pageUpKey;\n            var selectableChoiceIdentifier = '[data-choice-selectable]';\n            var nextEl;\n\n            if (skipKey) {\n              if (directionInt > 0) {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier + \":last-of-type\");\n              } else {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);\n              }\n            } else {\n              var currentEl = this.dropdown.element.querySelector(\".\" + this.config.classNames.highlightedState);\n\n              if (currentEl) {\n                nextEl = getAdjacentEl(currentEl, selectableChoiceIdentifier, directionInt);\n              } else {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);\n              }\n            }\n\n            if (nextEl) {\n              // We prevent default to stop the cursor moving\n              // when pressing the arrow\n              if (!isScrolledIntoView(nextEl, this.choiceList.element, directionInt)) {\n                this.choiceList.scrollToChildElement(nextEl, directionInt);\n              }\n\n              this._highlightChoice(nextEl);\n            } // Prevent default to maintain cursor position whilst\n            // traversing dropdown options\n\n\n            event.preventDefault();\n          }\n        };\n\n        _proto._onDeleteKey = function _onDeleteKey(_ref7) {\n          var event = _ref7.event,\n              target = _ref7.target,\n              hasFocusedInput = _ref7.hasFocusedInput,\n              activeItems = _ref7.activeItems; // If backspace or delete key is pressed and the input has no value\n\n          if (hasFocusedInput && !target.value && !this._isSelectOneElement) {\n            this._handleBackspace(activeItems);\n\n            event.preventDefault();\n          }\n        };\n\n        _proto._onTouchMove = function _onTouchMove() {\n          if (this._wasTap) {\n            this._wasTap = false;\n          }\n        };\n\n        _proto._onTouchEnd = function _onTouchEnd(event) {\n          var _ref8 = event || event.touches[0],\n              target = _ref8.target;\n\n          var touchWasWithinContainer = this._wasTap && this.containerOuter.element.contains(target);\n\n          if (touchWasWithinContainer) {\n            var containerWasExactTarget = target === this.containerOuter.element || target === this.containerInner.element;\n\n            if (containerWasExactTarget) {\n              if (this._isTextElement) {\n                this.input.focus();\n              } else if (this._isSelectMultipleElement) {\n                this.showDropdown();\n              }\n            } // Prevents focus event firing\n\n\n            event.stopPropagation();\n          }\n\n          this._wasTap = true;\n        }\n        /**\n         * Handles mousedown event in capture mode for containetOuter.element\n         * @param {MouseEvent} event\n         */\n        ;\n\n        _proto._onMouseDown = function _onMouseDown(event) {\n          var target = event.target;\n\n          if (!(target instanceof HTMLElement)) {\n            return;\n          } // If we have our mouse down on the scrollbar and are on IE11...\n\n\n          if (IS_IE11 && this.choiceList.element.contains(target)) {\n            // check if click was on a scrollbar area\n            var firstChoice =\n            /** @type {HTMLElement} */\n            this.choiceList.element.firstElementChild;\n            var isOnScrollbar = this._direction === 'ltr' ? event.offsetX >= firstChoice.offsetWidth : event.offsetX < firstChoice.offsetLeft;\n            this._isScrollingOnIe = isOnScrollbar;\n          }\n\n          if (target === this.input.element) {\n            return;\n          }\n\n          var item = target.closest('[data-button],[data-item],[data-choice]');\n\n          if (item instanceof HTMLElement) {\n            var hasShiftKey = event.shiftKey;\n            var activeItems = this._store.activeItems;\n            var dataset = item.dataset;\n\n            if ('button' in dataset) {\n              this._handleButtonAction(activeItems, item);\n            } else if ('item' in dataset) {\n              this._handleItemAction(activeItems, item, hasShiftKey);\n            } else if ('choice' in dataset) {\n              this._handleChoiceAction(activeItems, item);\n            }\n          }\n\n          event.preventDefault();\n        }\n        /**\n         * Handles mouseover event over this.dropdown\n         * @param {MouseEvent} event\n         */\n        ;\n\n        _proto._onMouseOver = function _onMouseOver(_ref9) {\n          var target = _ref9.target;\n\n          if (target instanceof HTMLElement && 'choice' in target.dataset) {\n            this._highlightChoice(target);\n          }\n        };\n\n        _proto._onClick = function _onClick(_ref10) {\n          var target = _ref10.target;\n          var clickWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (clickWasWithinContainer) {\n            if (!this.dropdown.isActive && !this.containerOuter.isDisabled) {\n              if (this._isTextElement) {\n                if (document.activeElement !== this.input.element) {\n                  this.input.focus();\n                }\n              } else {\n                this.showDropdown();\n                this.containerOuter.focus();\n              }\n            } else if (this._isSelectOneElement && target !== this.input.element && !this.dropdown.element.contains(target)) {\n              this.hideDropdown();\n            }\n          } else {\n            var hasHighlightedItems = this._store.highlightedActiveItems.length > 0;\n\n            if (hasHighlightedItems) {\n              this.unhighlightAll();\n            }\n\n            this.containerOuter.removeFocusState();\n            this.hideDropdown(true);\n          }\n        };\n\n        _proto._onFocus = function _onFocus(_ref11) {\n          var _this17 = this,\n              _focusActions;\n\n          var target = _ref11.target;\n          var focusWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (!focusWasWithinContainer) {\n            return;\n          }\n\n          var focusActions = (_focusActions = {}, _focusActions[TEXT_TYPE] = function () {\n            if (target === _this17.input.element) {\n              _this17.containerOuter.addFocusState();\n            }\n          }, _focusActions[SELECT_ONE_TYPE] = function () {\n            _this17.containerOuter.addFocusState();\n\n            if (target === _this17.input.element) {\n              _this17.showDropdown(true);\n            }\n          }, _focusActions[SELECT_MULTIPLE_TYPE] = function () {\n            if (target === _this17.input.element) {\n              _this17.showDropdown(true); // If element is a select box, the focused element is the container and the dropdown\n              // isn't already open, focus and show dropdown\n\n\n              _this17.containerOuter.addFocusState();\n            }\n          }, _focusActions);\n          focusActions[this.passedElement.element.type]();\n        };\n\n        _proto._onBlur = function _onBlur(_ref12) {\n          var _this18 = this;\n\n          var target = _ref12.target;\n          var blurWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (blurWasWithinContainer && !this._isScrollingOnIe) {\n            var _blurActions;\n\n            var activeItems = this._store.activeItems;\n            var hasHighlightedItems = activeItems.some(function (item) {\n              return item.highlighted;\n            });\n            var blurActions = (_blurActions = {}, _blurActions[TEXT_TYPE] = function () {\n              if (target === _this18.input.element) {\n                _this18.containerOuter.removeFocusState();\n\n                if (hasHighlightedItems) {\n                  _this18.unhighlightAll();\n                }\n\n                _this18.hideDropdown(true);\n              }\n            }, _blurActions[SELECT_ONE_TYPE] = function () {\n              _this18.containerOuter.removeFocusState();\n\n              if (target === _this18.input.element || target === _this18.containerOuter.element && !_this18._canSearch) {\n                _this18.hideDropdown(true);\n              }\n            }, _blurActions[SELECT_MULTIPLE_TYPE] = function () {\n              if (target === _this18.input.element) {\n                _this18.containerOuter.removeFocusState();\n\n                _this18.hideDropdown(true);\n\n                if (hasHighlightedItems) {\n                  _this18.unhighlightAll();\n                }\n              }\n            }, _blurActions);\n            blurActions[this.passedElement.element.type]();\n          } else {\n            // On IE11, clicking the scollbar blurs our input and thus\n            // closes the dropdown. To stop this, we refocus our input\n            // if we know we are on IE *and* are scrolling.\n            this._isScrollingOnIe = false;\n            this.input.element.focus();\n          }\n        };\n\n        _proto._onFormReset = function _onFormReset() {\n          this._store.dispatch(resetTo(this._initialState));\n        };\n\n        _proto._highlightChoice = function _highlightChoice(el) {\n          var _this19 = this;\n\n          if (el === void 0) {\n            el = null;\n          }\n\n          var choices = Array.from(this.dropdown.element.querySelectorAll('[data-choice-selectable]'));\n\n          if (!choices.length) {\n            return;\n          }\n\n          var passedEl = el;\n          var highlightedChoices = Array.from(this.dropdown.element.querySelectorAll(\".\" + this.config.classNames.highlightedState)); // Remove any highlighted choices\n\n          highlightedChoices.forEach(function (choice) {\n            choice.classList.remove(_this19.config.classNames.highlightedState);\n            choice.setAttribute('aria-selected', 'false');\n          });\n\n          if (passedEl) {\n            this._highlightPosition = choices.indexOf(passedEl);\n          } else {\n            // Highlight choice based on last known highlight location\n            if (choices.length > this._highlightPosition) {\n              // If we have an option to highlight\n              passedEl = choices[this._highlightPosition];\n            } else {\n              // Otherwise highlight the option before\n              passedEl = choices[choices.length - 1];\n            }\n\n            if (!passedEl) {\n              passedEl = choices[0];\n            }\n          }\n\n          passedEl.classList.add(this.config.classNames.highlightedState);\n          passedEl.setAttribute('aria-selected', 'true');\n          this.passedElement.triggerEvent(EVENTS.highlightChoice, {\n            el: passedEl\n          });\n\n          if (this.dropdown.isActive) {\n            // IE11 ignores aria-label and blocks virtual keyboard\n            // if aria-activedescendant is set without a dropdown\n            this.input.setActiveDescendant(passedEl.id);\n            this.containerOuter.setActiveDescendant(passedEl.id);\n          }\n        };\n\n        _proto._addItem = function _addItem(_ref13) {\n          var value = _ref13.value,\n              _ref13$label = _ref13.label,\n              label = _ref13$label === void 0 ? null : _ref13$label,\n              _ref13$choiceId = _ref13.choiceId,\n              choiceId = _ref13$choiceId === void 0 ? -1 : _ref13$choiceId,\n              _ref13$groupId = _ref13.groupId,\n              groupId = _ref13$groupId === void 0 ? -1 : _ref13$groupId,\n              _ref13$customProperti = _ref13.customProperties,\n              customProperties = _ref13$customProperti === void 0 ? null : _ref13$customProperti,\n              _ref13$placeholder = _ref13.placeholder,\n              placeholder = _ref13$placeholder === void 0 ? false : _ref13$placeholder,\n              _ref13$keyCode = _ref13.keyCode,\n              keyCode = _ref13$keyCode === void 0 ? null : _ref13$keyCode;\n          var passedValue = typeof value === 'string' ? value.trim() : value;\n          var passedKeyCode = keyCode;\n          var passedCustomProperties = customProperties;\n          var items = this._store.items;\n          var passedLabel = label || passedValue;\n          var passedOptionId = choiceId || -1;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n          var id = items ? items.length + 1 : 1; // If a prepended value has been passed, prepend it\n\n          if (this.config.prependValue) {\n            passedValue = this.config.prependValue + passedValue.toString();\n          } // If an appended value has been passed, append it\n\n\n          if (this.config.appendValue) {\n            passedValue += this.config.appendValue.toString();\n          }\n\n          this._store.dispatch(items_addItem({\n            value: passedValue,\n            label: passedLabel,\n            id: id,\n            choiceId: passedOptionId,\n            groupId: groupId,\n            customProperties: customProperties,\n            placeholder: placeholder,\n            keyCode: passedKeyCode\n          }));\n\n          if (this._isSelectOneElement) {\n            this.removeActiveItems(id);\n          } // Trigger change event\n\n\n          this.passedElement.triggerEvent(EVENTS.addItem, {\n            id: id,\n            value: passedValue,\n            label: passedLabel,\n            customProperties: passedCustomProperties,\n            groupValue: group && group.value ? group.value : undefined,\n            keyCode: passedKeyCode\n          });\n          return this;\n        };\n\n        _proto._removeItem = function _removeItem(item) {\n          if (!item || !isType('Object', item)) {\n            return this;\n          }\n\n          var id = item.id,\n              value = item.value,\n              label = item.label,\n              choiceId = item.choiceId,\n              groupId = item.groupId;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_removeItem(id, choiceId));\n\n          if (group && group.value) {\n            this.passedElement.triggerEvent(EVENTS.removeItem, {\n              id: id,\n              value: value,\n              label: label,\n              groupValue: group.value\n            });\n          } else {\n            this.passedElement.triggerEvent(EVENTS.removeItem, {\n              id: id,\n              value: value,\n              label: label\n            });\n          }\n\n          return this;\n        };\n\n        _proto._addChoice = function _addChoice(_ref14) {\n          var value = _ref14.value,\n              _ref14$label = _ref14.label,\n              label = _ref14$label === void 0 ? null : _ref14$label,\n              _ref14$isSelected = _ref14.isSelected,\n              isSelected = _ref14$isSelected === void 0 ? false : _ref14$isSelected,\n              _ref14$isDisabled = _ref14.isDisabled,\n              isDisabled = _ref14$isDisabled === void 0 ? false : _ref14$isDisabled,\n              _ref14$groupId = _ref14.groupId,\n              groupId = _ref14$groupId === void 0 ? -1 : _ref14$groupId,\n              _ref14$customProperti = _ref14.customProperties,\n              customProperties = _ref14$customProperti === void 0 ? null : _ref14$customProperti,\n              _ref14$placeholder = _ref14.placeholder,\n              placeholder = _ref14$placeholder === void 0 ? false : _ref14$placeholder,\n              _ref14$keyCode = _ref14.keyCode,\n              keyCode = _ref14$keyCode === void 0 ? null : _ref14$keyCode;\n\n          if (typeof value === 'undefined' || value === null) {\n            return;\n          } // Generate unique id\n\n\n          var choices = this._store.choices;\n          var choiceLabel = label || value;\n          var choiceId = choices ? choices.length + 1 : 1;\n          var choiceElementId = this._baseId + \"-\" + this._idNames.itemChoice + \"-\" + choiceId;\n\n          this._store.dispatch(choices_addChoice({\n            id: choiceId,\n            groupId: groupId,\n            elementId: choiceElementId,\n            value: value,\n            label: choiceLabel,\n            disabled: isDisabled,\n            customProperties: customProperties,\n            placeholder: placeholder,\n            keyCode: keyCode\n          }));\n\n          if (isSelected) {\n            this._addItem({\n              value: value,\n              label: choiceLabel,\n              choiceId: choiceId,\n              customProperties: customProperties,\n              placeholder: placeholder,\n              keyCode: keyCode\n            });\n          }\n        };\n\n        _proto._addGroup = function _addGroup(_ref15) {\n          var _this20 = this;\n\n          var group = _ref15.group,\n              id = _ref15.id,\n              _ref15$valueKey = _ref15.valueKey,\n              valueKey = _ref15$valueKey === void 0 ? 'value' : _ref15$valueKey,\n              _ref15$labelKey = _ref15.labelKey,\n              labelKey = _ref15$labelKey === void 0 ? 'label' : _ref15$labelKey;\n          var groupChoices = isType('Object', group) ? group.choices : Array.from(group.getElementsByTagName('OPTION'));\n          var groupId = id || Math.floor(new Date().valueOf() * Math.random());\n          var isDisabled = group.disabled ? group.disabled : false;\n\n          if (groupChoices) {\n            this._store.dispatch(groups_addGroup({\n              value: group.label,\n              id: groupId,\n              active: true,\n              disabled: isDisabled\n            }));\n\n            var addGroupChoices = function addGroupChoices(choice) {\n              var isOptDisabled = choice.disabled || choice.parentNode && choice.parentNode.disabled;\n\n              _this20._addChoice({\n                value: choice[valueKey],\n                label: isType('Object', choice) ? choice[labelKey] : choice.innerHTML,\n                isSelected: choice.selected,\n                isDisabled: isOptDisabled,\n                groupId: groupId,\n                customProperties: choice.customProperties,\n                placeholder: choice.placeholder\n              });\n            };\n\n            groupChoices.forEach(addGroupChoices);\n          } else {\n            this._store.dispatch(groups_addGroup({\n              value: group.label,\n              id: group.id,\n              active: false,\n              disabled: group.disabled\n            }));\n          }\n        };\n\n        _proto._getTemplate = function _getTemplate(template) {\n          var _this$_templates$temp;\n\n          if (!template) {\n            return null;\n          }\n\n          var classNames = this.config.classNames;\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return (_this$_templates$temp = this._templates[template]).call.apply(_this$_templates$temp, [this, classNames].concat(args));\n        };\n\n        _proto._createTemplates = function _createTemplates() {\n          var callbackOnCreateTemplates = this.config.callbackOnCreateTemplates;\n          var userTemplates = {};\n\n          if (callbackOnCreateTemplates && typeof callbackOnCreateTemplates === 'function') {\n            userTemplates = callbackOnCreateTemplates.call(this, strToEl);\n          }\n\n          this._templates = cjs_default()(TEMPLATES, userTemplates);\n        };\n\n        _proto._createElements = function _createElements() {\n          this.containerOuter = new container_Container({\n            element: this._getTemplate('containerOuter', this._direction, this._isSelectElement, this._isSelectOneElement, this.config.searchEnabled, this.passedElement.element.type),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          });\n          this.containerInner = new container_Container({\n            element: this._getTemplate('containerInner'),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          });\n          this.input = new input_Input({\n            element: this._getTemplate('input', this._placeholderValue),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            preventPaste: !this.config.paste\n          });\n          this.choiceList = new list_List({\n            element: this._getTemplate('choiceList', this._isSelectOneElement)\n          });\n          this.itemList = new list_List({\n            element: this._getTemplate('itemList', this._isSelectOneElement)\n          });\n          this.dropdown = new Dropdown({\n            element: this._getTemplate('dropdown'),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type\n          });\n        };\n\n        _proto._createStructure = function _createStructure() {\n          // Hide original element\n          this.passedElement.conceal(); // Wrap input in container preserving DOM ordering\n\n          this.containerInner.wrap(this.passedElement.element); // Wrapper inner container with outer container\n\n          this.containerOuter.wrap(this.containerInner.element);\n\n          if (this._isSelectOneElement) {\n            this.input.placeholder = this.config.searchPlaceholderValue || '';\n          } else if (this._placeholderValue) {\n            this.input.placeholder = this._placeholderValue;\n            this.input.setWidth();\n          }\n\n          this.containerOuter.element.appendChild(this.containerInner.element);\n          this.containerOuter.element.appendChild(this.dropdown.element);\n          this.containerInner.element.appendChild(this.itemList.element);\n\n          if (!this._isTextElement) {\n            this.dropdown.element.appendChild(this.choiceList.element);\n          }\n\n          if (!this._isSelectOneElement) {\n            this.containerInner.element.appendChild(this.input.element);\n          } else if (this.config.searchEnabled) {\n            this.dropdown.element.insertBefore(this.input.element, this.dropdown.element.firstChild);\n          }\n\n          if (this._isSelectElement) {\n            this._highlightPosition = 0;\n            this._isSearching = false;\n\n            this._startLoading();\n\n            if (this._presetGroups.length) {\n              this._addPredefinedGroups(this._presetGroups);\n            } else {\n              this._addPredefinedChoices(this._presetChoices);\n            }\n\n            this._stopLoading();\n          }\n\n          if (this._isTextElement) {\n            this._addPredefinedItems(this._presetItems);\n          }\n        };\n\n        _proto._addPredefinedGroups = function _addPredefinedGroups(groups) {\n          var _this21 = this; // If we have a placeholder option\n\n\n          var placeholderChoice = this.passedElement.placeholderOption;\n\n          if (placeholderChoice && placeholderChoice.parentNode.tagName === 'SELECT') {\n            this._addChoice({\n              value: placeholderChoice.value,\n              label: placeholderChoice.innerHTML,\n              isSelected: placeholderChoice.selected,\n              isDisabled: placeholderChoice.disabled,\n              placeholder: true\n            });\n          }\n\n          groups.forEach(function (group) {\n            return _this21._addGroup({\n              group: group,\n              id: group.id || null\n            });\n          });\n        };\n\n        _proto._addPredefinedChoices = function _addPredefinedChoices(choices) {\n          var _this22 = this; // If sorting is enabled or the user is searching, filter choices\n\n\n          if (this.config.shouldSort) {\n            choices.sort(this.config.sorter);\n          }\n\n          var hasSelectedChoice = choices.some(function (choice) {\n            return choice.selected;\n          });\n          var firstEnabledChoiceIndex = choices.findIndex(function (choice) {\n            return choice.disabled === undefined || !choice.disabled;\n          });\n          choices.forEach(function (choice, index) {\n            var value = choice.value,\n                label = choice.label,\n                customProperties = choice.customProperties,\n                placeholder = choice.placeholder;\n\n            if (_this22._isSelectElement) {\n              // If the choice is actually a group\n              if (choice.choices) {\n                _this22._addGroup({\n                  group: choice,\n                  id: choice.id || null\n                });\n              } else {\n                /**\n                 * If there is a selected choice already or the choice is not the first in\n                 * the array, add each choice normally.\n                 *\n                 * Otherwise we pre-select the first enabled choice in the array (\"select-one\" only)\n                 */\n                var shouldPreselect = _this22._isSelectOneElement && !hasSelectedChoice && index === firstEnabledChoiceIndex;\n                var isSelected = shouldPreselect ? true : choice.selected;\n                var isDisabled = choice.disabled;\n\n                _this22._addChoice({\n                  value: value,\n                  label: label,\n                  isSelected: isSelected,\n                  isDisabled: isDisabled,\n                  customProperties: customProperties,\n                  placeholder: placeholder\n                });\n              }\n            } else {\n              _this22._addChoice({\n                value: value,\n                label: label,\n                isSelected: choice.selected,\n                isDisabled: choice.disabled,\n                customProperties: customProperties,\n                placeholder: placeholder\n              });\n            }\n          });\n        }\n        /**\n         * @param {Item[]} items\n         */\n        ;\n\n        _proto._addPredefinedItems = function _addPredefinedItems(items) {\n          var _this23 = this;\n\n          items.forEach(function (item) {\n            if (typeof item === 'object' && item.value) {\n              _this23._addItem({\n                value: item.value,\n                label: item.label,\n                choiceId: item.id,\n                customProperties: item.customProperties,\n                placeholder: item.placeholder\n              });\n            }\n\n            if (typeof item === 'string') {\n              _this23._addItem({\n                value: item\n              });\n            }\n          });\n        };\n\n        _proto._setChoiceOrItem = function _setChoiceOrItem(item) {\n          var _this24 = this;\n\n          var itemType = getType(item).toLowerCase();\n          var handleType = {\n            object: function object() {\n              if (!item.value) {\n                return;\n              } // If we are dealing with a select input, we need to create an option first\n              // that is then selected. For text inputs we can just add items normally.\n\n\n              if (!_this24._isTextElement) {\n                _this24._addChoice({\n                  value: item.value,\n                  label: item.label,\n                  isSelected: true,\n                  isDisabled: false,\n                  customProperties: item.customProperties,\n                  placeholder: item.placeholder\n                });\n              } else {\n                _this24._addItem({\n                  value: item.value,\n                  label: item.label,\n                  choiceId: item.id,\n                  customProperties: item.customProperties,\n                  placeholder: item.placeholder\n                });\n              }\n            },\n            string: function string() {\n              if (!_this24._isTextElement) {\n                _this24._addChoice({\n                  value: item,\n                  label: item,\n                  isSelected: true,\n                  isDisabled: false\n                });\n              } else {\n                _this24._addItem({\n                  value: item\n                });\n              }\n            }\n          };\n          handleType[itemType]();\n        };\n\n        _proto._findAndSelectChoiceByValue = function _findAndSelectChoiceByValue(val) {\n          var _this25 = this;\n\n          var choices = this._store.choices; // Check 'value' property exists and the choice isn't already selected\n\n          var foundChoice = choices.find(function (choice) {\n            return _this25.config.valueComparer(choice.value, val);\n          });\n\n          if (foundChoice && !foundChoice.selected) {\n            this._addItem({\n              value: foundChoice.value,\n              label: foundChoice.label,\n              choiceId: foundChoice.id,\n              groupId: foundChoice.groupId,\n              customProperties: foundChoice.customProperties,\n              placeholder: foundChoice.placeholder,\n              keyCode: foundChoice.keyCode\n            });\n          }\n        };\n\n        _proto._generatePlaceholderValue = function _generatePlaceholderValue() {\n          if (this._isSelectElement) {\n            var placeholderOption = this.passedElement.placeholderOption;\n            return placeholderOption ? placeholderOption.text : false;\n          }\n\n          var _this$config4 = this.config,\n              placeholder = _this$config4.placeholder,\n              placeholderValue = _this$config4.placeholderValue;\n          var dataset = this.passedElement.element.dataset;\n\n          if (placeholder) {\n            if (placeholderValue) {\n              return placeholderValue;\n            }\n\n            if (dataset.placeholder) {\n              return dataset.placeholder;\n            }\n          }\n\n          return false;\n        };\n\n        return Choices;\n      }();\n      /* harmony default export */\n\n\n      var scripts_choices = __webpack_exports__[\"default\"] = choices_Choices;\n      /***/\n    }\n    /******/\n    ])[\"default\"]\n  );\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/choices.js/public/assets/scripts/choices.js\n");

/***/ }),

/***/ "./node_modules/micromodal/dist/micromodal.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/micromodal/dist/micromodal.es.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar MicroModal = function () {\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(_ref) {\n      var targetModal = _ref.targetModal,\n          _ref$triggers = _ref.triggers,\n          triggers = _ref$triggers === void 0 ? [] : _ref$triggers,\n          _ref$onShow = _ref.onShow,\n          onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,\n          _ref$onClose = _ref.onClose,\n          onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n          _ref$openTrigger = _ref.openTrigger,\n          openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,\n          _ref$closeTrigger = _ref.closeTrigger,\n          closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,\n          _ref$openClass = _ref.openClass,\n          openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,\n          _ref$disableScroll = _ref.disableScroll,\n          disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,\n          _ref$disableFocus = _ref.disableFocus,\n          disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,\n          _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,\n          awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,\n          _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,\n          awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,\n          _ref$debugMode = _ref.debugMode,\n          debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;\n\n      _classCallCheck(this, Modal); // Save a reference of the modal\n\n\n      this.modal = document.getElementById(targetModal); // Save a reference to the passed config\n\n      this.config = {\n        debugMode: debugMode,\n        disableScroll: disableScroll,\n        openTrigger: openTrigger,\n        closeTrigger: closeTrigger,\n        openClass: openClass,\n        onShow: onShow,\n        onClose: onClose,\n        awaitCloseAnimation: awaitCloseAnimation,\n        awaitOpenAnimation: awaitOpenAnimation,\n        disableFocus: disableFocus\n      }; // Register click events only if pre binding eventListeners\n\n      if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners\n\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n\n    _createClass(Modal, [{\n      key: \"registerTriggers\",\n      value: function registerTriggers() {\n        var _this = this;\n\n        for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {\n          triggers[_key] = arguments[_key];\n        }\n\n        triggers.filter(Boolean).forEach(function (trigger) {\n          trigger.addEventListener('click', function (event) {\n            return _this.showModal(event);\n          });\n        });\n      }\n    }, {\n      key: \"showModal\",\n      value: function showModal() {\n        var _this2 = this;\n\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.activeElement = document.activeElement;\n        this.modal.setAttribute('aria-hidden', 'false');\n        this.modal.classList.add(this.config.openClass);\n        this.scrollBehaviour('disable');\n        this.addEventListeners();\n\n        if (this.config.awaitOpenAnimation) {\n          var handler = function handler() {\n            _this2.modal.removeEventListener('animationend', handler, false);\n\n            _this2.setFocusToFirstNode();\n          };\n\n          this.modal.addEventListener('animationend', handler, false);\n        } else {\n          this.setFocusToFirstNode();\n        }\n\n        this.config.onShow(this.modal, this.activeElement, event);\n      }\n    }, {\n      key: \"closeModal\",\n      value: function closeModal() {\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var modal = this.modal;\n        this.modal.setAttribute('aria-hidden', 'true');\n        this.removeEventListeners();\n        this.scrollBehaviour('enable');\n\n        if (this.activeElement && this.activeElement.focus) {\n          this.activeElement.focus();\n        }\n\n        this.config.onClose(this.modal, this.activeElement, event);\n\n        if (this.config.awaitCloseAnimation) {\n          var openClass = this.config.openClass; // <- old school ftw\n\n          this.modal.addEventListener('animationend', function handler() {\n            modal.classList.remove(openClass);\n            modal.removeEventListener('animationend', handler, false);\n          }, false);\n        } else {\n          modal.classList.remove(this.config.openClass);\n        }\n      }\n    }, {\n      key: \"closeModalById\",\n      value: function closeModalById(targetModal) {\n        this.modal = document.getElementById(targetModal);\n        if (this.modal) this.closeModal();\n      }\n    }, {\n      key: \"scrollBehaviour\",\n      value: function scrollBehaviour(toggle) {\n        if (!this.config.disableScroll) return;\n        var body = document.querySelector('body');\n\n        switch (toggle) {\n          case 'enable':\n            Object.assign(body.style, {\n              overflow: ''\n            });\n            break;\n\n          case 'disable':\n            Object.assign(body.style, {\n              overflow: 'hidden'\n            });\n            break;\n        }\n      }\n    }, {\n      key: \"addEventListeners\",\n      value: function addEventListeners() {\n        this.modal.addEventListener('touchstart', this.onClick);\n        this.modal.addEventListener('click', this.onClick);\n        document.addEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"removeEventListeners\",\n      value: function removeEventListeners() {\n        this.modal.removeEventListener('touchstart', this.onClick);\n        this.modal.removeEventListener('click', this.onClick);\n        document.removeEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (event.target.hasAttribute(this.config.closeTrigger)) {\n          this.closeModal(event);\n        }\n      }\n    }, {\n      key: \"onKeydown\",\n      value: function onKeydown(event) {\n        if (event.keyCode === 27) this.closeModal(event); // esc\n\n        if (event.keyCode === 9) this.retainFocus(event); // tab\n      }\n    }, {\n      key: \"getFocusableNodes\",\n      value: function getFocusableNodes() {\n        var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n        return Array.apply(void 0, _toConsumableArray(nodes));\n      }\n      /**\n       * Tries to set focus on a node which is not a close trigger\n       * if no other nodes exist then focuses on first close trigger\n       */\n\n    }, {\n      key: \"setFocusToFirstNode\",\n      value: function setFocusToFirstNode() {\n        var _this3 = this;\n\n        if (this.config.disableFocus) return;\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes\n        // could not think of a better name :(\n\n        var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {\n          return !node.hasAttribute(_this3.config.closeTrigger);\n        });\n        if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n        if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n      }\n    }, {\n      key: \"retainFocus\",\n      value: function retainFocus(event) {\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return;\n        /**\n         * Filters nodes which are hidden to prevent\n         * focus leak outside modal\n         */\n\n        focusableNodes = focusableNodes.filter(function (node) {\n          return node.offsetParent !== null;\n        }); // if disableFocus is true\n\n        if (!this.modal.contains(document.activeElement)) {\n          focusableNodes[0].focus();\n        } else {\n          var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n          if (event.shiftKey && focusedItemIndex === 0) {\n            focusableNodes[focusableNodes.length - 1].focus();\n            event.preventDefault();\n          }\n\n          if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n            focusableNodes[0].focus();\n            event.preventDefault();\n          }\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n  // Keep a reference to the opened modal\n\n\n  var activeModal = null;\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n\n  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {\n    var triggerMap = [];\n    triggers.forEach(function (trigger) {\n      var targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n    return triggerMap;\n  };\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n\n\n  var validateModalPresence = function validateModalPresence(id) {\n    if (!document.getElementById(id)) {\n      console.warn(\"MicroModal: \\u2757Seems like you have missed %c'\".concat(id, \"'\"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<div class=\\\"modal\\\" id=\\\"\".concat(id, \"\\\"></div>\"));\n      return false;\n    }\n  };\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n\n\n  var validateTriggerPresence = function validateTriggerPresence(triggers) {\n    if (triggers.length <= 0) {\n      console.warn(\"MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<a href=\\\"#\\\" data-micromodal-trigger=\\\"my-modal\\\"></a>\");\n      return false;\n    }\n  };\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n\n\n  var validateArgs = function validateArgs(triggers, triggerMap) {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n\n    for (var id in triggerMap) {\n      validateModalPresence(id);\n    }\n\n    return true;\n  };\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n\n\n  var init = function init(config) {\n    // Create an config object with default openTrigger\n    var options = Object.assign({}, {\n      openTrigger: 'data-micromodal-trigger'\n    }, config); // Collects all the nodes with the trigger\n\n    var triggers = _toConsumableArray(document.querySelectorAll(\"[\".concat(options.openTrigger, \"]\"))); // Makes a mappings of modals with their trigger nodes\n\n\n    var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance\n\n    for (var key in triggerMap) {\n      var value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = _toConsumableArray(value);\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n\n\n  var show = function show(targetModal, config) {\n    var options = config || {};\n    options.targetModal = targetModal; // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close\n\n    if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal\n\n    activeModal = new Modal(options); // eslint-disable-line no-new\n\n    activeModal.showModal();\n  };\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n\n\n  var close = function close(targetModal) {\n    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();\n  };\n\n  return {\n    init: init,\n    show: show,\n    close: close\n  };\n}();\n\nwindow.MicroModal = MicroModal;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MicroModal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/micromodal/dist/micromodal.es.js\n");

/***/ }),

/***/ "./node_modules/overlayscrollbars/js/OverlayScrollbars.js":
/*!****************************************************************!*\
  !*** ./node_modules/overlayscrollbars/js/OverlayScrollbars.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * OverlayScrollbars\r\n * https://github.com/KingSora/OverlayScrollbars\r\n *\r\n * Version: 1.12.0\r\n *\r\n * Copyright KingSora | Rene Haas.\r\n * https://github.com/KingSora\r\n *\r\n * Released under the MIT license.\r\n * Date: 05.04.2020\r\n */\n(function (global, factory) {\n  if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return factory(global, global.document, undefined);\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(typeof window !== 'undefined' ? window : this, function (window, document, undefined) {\n  'use strict';\n\n  var PLUGINNAME = 'OverlayScrollbars';\n  var TYPES = {\n    o: 'object',\n    f: 'function',\n    a: 'array',\n    s: 'string',\n    b: 'boolean',\n    n: 'number',\n    u: 'undefined',\n    z: 'null' //d : 'date',\n    //e : 'error',\n    //r : 'regexp',\n    //y : 'symbol'\n\n  };\n  var LEXICON = {\n    c: 'class',\n    s: 'style',\n    i: 'id',\n    l: 'length',\n    p: 'prototype',\n    ti: 'tabindex',\n    oH: 'offsetHeight',\n    cH: 'clientHeight',\n    sH: 'scrollHeight',\n    oW: 'offsetWidth',\n    cW: 'clientWidth',\n    sW: 'scrollWidth',\n    hOP: 'hasOwnProperty',\n    bCR: 'getBoundingClientRect'\n  };\n\n  var VENDORS = function () {\n    //https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\n    var jsCache = {};\n    var cssCache = {};\n    var cssPrefixes = ['-webkit-', '-moz-', '-o-', '-ms-'];\n    var jsPrefixes = ['WebKit', 'Moz', 'O', 'MS'];\n\n    function firstLetterToUpper(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    return {\n      _cssPrefixes: cssPrefixes,\n      _jsPrefixes: jsPrefixes,\n      _cssProperty: function (name) {\n        var result = cssCache[name];\n        if (cssCache[LEXICON.hOP](name)) return result;\n        var uppercasedName = firstLetterToUpper(name);\n        var elmStyle = document.createElement('div')[LEXICON.s];\n        var resultPossibilities;\n        var i = 0;\n        var v;\n        var currVendorWithoutDashes;\n\n        for (; i < cssPrefixes.length; i++) {\n          currVendorWithoutDashes = cssPrefixes[i].replace(/-/g, '');\n          resultPossibilities = [name, //transition\n          cssPrefixes[i] + name, //-webkit-transition\n          currVendorWithoutDashes + uppercasedName, //webkitTransition\n          firstLetterToUpper(currVendorWithoutDashes) + uppercasedName //WebkitTransition\n          ];\n\n          for (v = 0; v < resultPossibilities[LEXICON.l]; v++) {\n            if (elmStyle[resultPossibilities[v]] !== undefined) {\n              result = resultPossibilities[v];\n              break;\n            }\n          }\n        }\n\n        cssCache[name] = result;\n        return result;\n      },\n      _cssPropertyValue: function (property, values, suffix) {\n        var name = property + ' ' + values;\n        var result = cssCache[name];\n        if (cssCache[LEXICON.hOP](name)) return result;\n        var dummyStyle = document.createElement('div')[LEXICON.s];\n        var possbleValues = values.split(' ');\n        var preparedSuffix = suffix || '';\n        var i = 0;\n        var v = -1;\n        var prop;\n\n        for (; i < possbleValues[LEXICON.l]; i++) {\n          for (; v < VENDORS._cssPrefixes[LEXICON.l]; v++) {\n            prop = v < 0 ? possbleValues[i] : VENDORS._cssPrefixes[v] + possbleValues[i];\n            dummyStyle.cssText = property + ':' + prop + preparedSuffix;\n\n            if (dummyStyle[LEXICON.l]) {\n              result = prop;\n              break;\n            }\n          }\n        }\n\n        cssCache[name] = result;\n        return result;\n      },\n      _jsAPI: function (name, isInterface, fallback) {\n        var i = 0;\n        var result = jsCache[name];\n\n        if (!jsCache[LEXICON.hOP](name)) {\n          result = window[name];\n\n          for (; i < jsPrefixes[LEXICON.l]; i++) result = result || window[(isInterface ? jsPrefixes[i] : jsPrefixes[i].toLowerCase()) + firstLetterToUpper(name)];\n\n          jsCache[name] = result;\n        }\n\n        return result || fallback;\n      }\n    };\n  }();\n\n  var COMPATIBILITY = function () {\n    function windowSize(x) {\n      return x ? window.innerWidth || document.documentElement[LEXICON.cW] || document.body[LEXICON.cW] : window.innerHeight || document.documentElement[LEXICON.cH] || document.body[LEXICON.cH];\n    }\n\n    function bind(func, thisObj) {\n      if (typeof func != TYPES.f) {\n        throw \"Can't bind function!\"; // closest thing possible to the ECMAScript 5\n        // internal IsCallable function\n        //throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n      }\n\n      var proto = LEXICON.p;\n      var aArgs = Array[proto].slice.call(arguments, 2);\n\n      var fNOP = function () {};\n\n      var fBound = function () {\n        return func.apply(this instanceof fNOP ? this : thisObj, aArgs.concat(Array[proto].slice.call(arguments)));\n      };\n\n      if (func[proto]) fNOP[proto] = func[proto]; // Function.prototype doesn't have a prototype property\n\n      fBound[proto] = new fNOP();\n      return fBound;\n    }\n\n    return {\n      /**\r\n       * Gets the current window width.\r\n       * @returns {Number|number} The current window width in pixel.\r\n       */\n      wW: bind(windowSize, 0, true),\n\n      /**\r\n       * Gets the current window height.\r\n       * @returns {Number|number} The current window height in pixel.\r\n       */\n      wH: bind(windowSize, 0),\n\n      /**\r\n       * Gets the MutationObserver Object or undefined if not supported.\r\n       * @returns {MutationObserver|*|undefined} The MutationsObserver Object or undefined.\r\n       */\n      mO: bind(VENDORS._jsAPI, 0, 'MutationObserver', true),\n\n      /**\r\n       * Gets the ResizeObserver Object or undefined if not supported.\r\n       * @returns {MutationObserver|*|undefined} The ResizeObserver Object or undefined.\r\n       */\n      rO: bind(VENDORS._jsAPI, 0, 'ResizeObserver', true),\n\n      /**\r\n       * Gets the RequestAnimationFrame method or it's corresponding polyfill.\r\n       * @returns {*|Function} The RequestAnimationFrame method or it's corresponding polyfill.\r\n       */\n      rAF: bind(VENDORS._jsAPI, 0, 'requestAnimationFrame', false, function (func) {\n        return window.setTimeout(func, 1000 / 60);\n      }),\n\n      /**\r\n       * Gets the CancelAnimationFrame method or it's corresponding polyfill.\r\n       * @returns {*|Function} The CancelAnimationFrame method or it's corresponding polyfill.\r\n       */\n      cAF: bind(VENDORS._jsAPI, 0, 'cancelAnimationFrame', false, function (id) {\n        return window.clearTimeout(id);\n      }),\n\n      /**\r\n       * Gets the current time.\r\n       * @returns {number} The current time.\r\n       */\n      now: function () {\n        return Date.now && Date.now() || new Date().getTime();\n      },\n\n      /**\r\n       * Stops the propagation of the given event.\r\n       * @param event The event of which the propagation shall be stoped.\r\n       */\n      stpP: function (event) {\n        if (event.stopPropagation) event.stopPropagation();else event.cancelBubble = true;\n      },\n\n      /**\r\n       * Prevents the default action of the given event.\r\n       * @param event The event of which the default action shall be prevented.\r\n       */\n      prvD: function (event) {\n        if (event.preventDefault && event.cancelable) event.preventDefault();else event.returnValue = false;\n      },\n\n      /**\r\n       * Gets the pageX and pageY values of the given mouse event.\r\n       * @param event The mouse event of which the pageX and pageX shall be got.\r\n       * @returns {{x: number, y: number}} x = pageX value, y = pageY value.\r\n       */\n      page: function (event) {\n        event = event.originalEvent || event;\n        var strPage = 'page';\n        var strClient = 'client';\n        var strX = 'X';\n        var strY = 'Y';\n        var target = event.target || event.srcElement || document;\n        var eventDoc = target.ownerDocument || document;\n        var doc = eventDoc.documentElement;\n        var body = eventDoc.body; //if touch event return return pageX/Y of it\n\n        if (event.touches !== undefined) {\n          var touch = event.touches[0];\n          return {\n            x: touch[strPage + strX],\n            y: touch[strPage + strY]\n          };\n        } // Calculate pageX/Y if not native supported\n\n\n        if (!event[strPage + strX] && event[strClient + strX] && event[strClient + strX] != null) {\n          return {\n            x: event[strClient + strX] + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0),\n            y: event[strClient + strY] + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)\n          };\n        }\n\n        return {\n          x: event[strPage + strX],\n          y: event[strPage + strY]\n        };\n      },\n\n      /**\r\n       * Gets the clicked mouse button of the given mouse event.\r\n       * @param event The mouse event of which the clicked button shal be got.\r\n       * @returns {number} The number of the clicked mouse button. (0 : none | 1 : leftButton | 2 : middleButton | 3 : rightButton)\r\n       */\n      mBtn: function (event) {\n        var button = event.button;\n        if (!event.which && button !== undefined) return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;else return event.which;\n      },\n\n      /**\r\n       * Checks whether a item is in the given array and returns its index.\r\n       * @param item The item of which the position in the array shall be determined.\r\n       * @param arr The array.\r\n       * @returns {number} The zero based index of the item or -1 if the item isn't in the array.\r\n       */\n      inA: function (item, arr) {\n        for (var i = 0; i < arr[LEXICON.l]; i++) //Sometiems in IE a \"SCRIPT70\" Permission denied error occurs if HTML elements in a iFrame are compared\n        try {\n          if (arr[i] === item) return i;\n        } catch (e) {}\n\n        return -1;\n      },\n\n      /**\r\n       * Returns true if the given value is a array.\r\n       * @param arr The potential array.\r\n       * @returns {boolean} True if the given value is a array, false otherwise.\r\n       */\n      isA: function (arr) {\n        var def = Array.isArray;\n        return def ? def(arr) : this.type(arr) == TYPES.a;\n      },\n\n      /**\r\n       * Determine the internal JavaScript [[Class]] of the given object.\r\n       * @param obj The object of which the type shall be determined.\r\n       * @returns {string} The type of the given object.\r\n       */\n      type: function (obj) {\n        if (obj === undefined) return obj + '';\n        if (obj === null) return obj + '';\n        return Object[LEXICON.p].toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n      },\n      bind: bind\n      /**\r\n       * Gets the vendor-prefixed CSS property by the given name.\r\n       * For example the given name is \"transform\" and you're using a old Firefox browser then the returned value would be \"-moz-transform\".\r\n       * If the browser doesn't need a vendor-prefix, then the returned string is the given name.\r\n       * If the browser doesn't support the given property name at all (not even with a vendor-prefix) the returned value is null.\r\n       * @param propName The unprefixed CSS property name.\r\n       * @returns {string|null} The vendor-prefixed CSS property or null if the browser doesn't support the given CSS property.\r\n        cssProp: function(propName) {\r\n          return VENDORS._cssProperty(propName);\r\n      }\r\n      */\n\n    };\n  }();\n\n  var MATH = Math;\n  var JQUERY = window.jQuery;\n\n  var EASING = function () {\n    var _easingsMath = {\n      p: MATH.PI,\n      c: MATH.cos,\n      s: MATH.sin,\n      w: MATH.pow,\n      t: MATH.sqrt,\n      n: MATH.asin,\n      a: MATH.abs,\n      o: 1.70158\n    };\n    /*\r\n     x : current percent (0 - 1),\r\n     t : current time (duration * percent),\r\n     b : start value (from),\r\n     c : end value (to),\r\n     d : duration\r\n       easingName : function(x, t, b, c, d) { return easedValue; }\r\n     */\n\n    return {\n      swing: function (x, t, b, c, d) {\n        return 0.5 - _easingsMath.c(x * _easingsMath.p) / 2;\n      },\n      linear: function (x, t, b, c, d) {\n        return x;\n      },\n      easeInQuad: function (x, t, b, c, d) {\n        return c * (t /= d) * t + b;\n      },\n      easeOutQuad: function (x, t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n      },\n      easeInOutQuad: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t + b : -c / 2 * (--t * (t - 2) - 1) + b;\n      },\n      easeInCubic: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n      },\n      easeOutCubic: function (x, t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n      },\n      easeInOutCubic: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;\n      },\n      easeInQuart: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n      },\n      easeOutQuart: function (x, t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n      },\n      easeInOutQuart: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n      },\n      easeInQuint: function (x, t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n      },\n      easeOutQuint: function (x, t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n      },\n      easeInOutQuint: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n      },\n      easeInSine: function (x, t, b, c, d) {\n        return -c * _easingsMath.c(t / d * (_easingsMath.p / 2)) + c + b;\n      },\n      easeOutSine: function (x, t, b, c, d) {\n        return c * _easingsMath.s(t / d * (_easingsMath.p / 2)) + b;\n      },\n      easeInOutSine: function (x, t, b, c, d) {\n        return -c / 2 * (_easingsMath.c(_easingsMath.p * t / d) - 1) + b;\n      },\n      easeInExpo: function (x, t, b, c, d) {\n        return t == 0 ? b : c * _easingsMath.w(2, 10 * (t / d - 1)) + b;\n      },\n      easeOutExpo: function (x, t, b, c, d) {\n        return t == d ? b + c : c * (-_easingsMath.w(2, -10 * t / d) + 1) + b;\n      },\n      easeInOutExpo: function (x, t, b, c, d) {\n        if (t == 0) return b;\n        if (t == d) return b + c;\n        if ((t /= d / 2) < 1) return c / 2 * _easingsMath.w(2, 10 * (t - 1)) + b;\n        return c / 2 * (-_easingsMath.w(2, -10 * --t) + 2) + b;\n      },\n      easeInCirc: function (x, t, b, c, d) {\n        return -c * (_easingsMath.t(1 - (t /= d) * t) - 1) + b;\n      },\n      easeOutCirc: function (x, t, b, c, d) {\n        return c * _easingsMath.t(1 - (t = t / d - 1) * t) + b;\n      },\n      easeInOutCirc: function (x, t, b, c, d) {\n        return (t /= d / 2) < 1 ? -c / 2 * (_easingsMath.t(1 - t * t) - 1) + b : c / 2 * (_easingsMath.t(1 - (t -= 2) * t) + 1) + b;\n      },\n      easeInElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d) == 1) return b + c;\n        if (!p) p = d * .3;\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        return -(a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\n      },\n      easeOutElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d) == 1) return b + c;\n        if (!p) p = d * .3;\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        return a * _easingsMath.w(2, -10 * t) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) + c + b;\n      },\n      easeInOutElastic: function (x, t, b, c, d) {\n        var s = _easingsMath.o;\n        var p = 0;\n        var a = c;\n        if (t == 0) return b;\n        if ((t /= d / 2) == 2) return b + c;\n        if (!p) p = d * (.3 * 1.5);\n\n        if (a < _easingsMath.a(c)) {\n          a = c;\n          s = p / 4;\n        } else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\n\n        if (t < 1) return -.5 * (a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\n        return a * _easingsMath.w(2, -10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) * .5 + c + b;\n      },\n      easeInBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n      },\n      easeOutBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n      },\n      easeInOutBack: function (x, t, b, c, d, s) {\n        s = s || _easingsMath.o;\n        return (t /= d / 2) < 1 ? c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b : c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n      },\n      easeInBounce: function (x, t, b, c, d) {\n        return c - this.easeOutBounce(x, d - t, 0, c, d) + b;\n      },\n      easeOutBounce: function (x, t, b, c, d) {\n        var o = 7.5625;\n\n        if ((t /= d) < 1 / 2.75) {\n          return c * (o * t * t) + b;\n        } else if (t < 2 / 2.75) {\n          return c * (o * (t -= 1.5 / 2.75) * t + .75) + b;\n        } else if (t < 2.5 / 2.75) {\n          return c * (o * (t -= 2.25 / 2.75) * t + .9375) + b;\n        } else {\n          return c * (o * (t -= 2.625 / 2.75) * t + .984375) + b;\n        }\n      },\n      easeInOutBounce: function (x, t, b, c, d) {\n        return t < d / 2 ? this.easeInBounce(x, t * 2, 0, c, d) * .5 + b : this.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n      }\n    };\n    /*\r\n     *\r\n     * TERMS OF USE - EASING EQUATIONS\r\n     * \r\n     * Open source under the BSD License. \r\n     * \r\n     * Copyright Â© 2001 Robert Penner\r\n     * All rights reserved.\r\n     * \r\n     * Redistribution and use in source and binary forms, with or without modification, \r\n     * are permitted provided that the following conditions are met:\r\n     * \r\n     * Redistributions of source code must retain the above copyright notice, this list of \r\n     * conditions and the following disclaimer.\r\n     * Redistributions in binary form must reproduce the above copyright notice, this list \r\n     * of conditions and the following disclaimer in the documentation and/or other materials \r\n     * provided with the distribution.\r\n     * \r\n     * Neither the name of the author nor the names of contributors may be used to endorse \r\n     * or promote products derived from this software without specific prior written permission.\r\n     * \r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \r\n     * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n     * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n     *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n     *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n     *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \r\n     * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n     *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \r\n     * OF THE POSSIBILITY OF SUCH DAMAGE. \r\n     *\r\n     */\n  }();\n\n  var FRAMEWORK = function () {\n    var _rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\n    var _strSpace = ' ';\n    var _strEmpty = '';\n    var _strScrollLeft = 'scrollLeft';\n    var _strScrollTop = 'scrollTop';\n    var _animations = [];\n    var _type = COMPATIBILITY.type;\n    var _cssNumber = {\n      animationIterationCount: true,\n      columnCount: true,\n      fillOpacity: true,\n      flexGrow: true,\n      flexShrink: true,\n      fontWeight: true,\n      lineHeight: true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      widows: true,\n      zIndex: true,\n      zoom: true\n    };\n\n    function extend() {\n      var src,\n          copyIsArray,\n          copy,\n          name,\n          options,\n          clone,\n          target = arguments[0] || {},\n          i = 1,\n          length = arguments[LEXICON.l],\n          deep = false; // Handle a deep copy situation\n\n      if (_type(target) == TYPES.b) {\n        deep = target;\n        target = arguments[1] || {}; // skip the boolean and the target\n\n        i = 2;\n      } // Handle case when target is a string or something (possible in deep copy)\n\n\n      if (_type(target) != TYPES.o && !_type(target) == TYPES.f) {\n        target = {};\n      } // extend jQuery itself if only one argument is passed\n\n\n      if (length === i) {\n        target = FakejQuery;\n        --i;\n      }\n\n      for (; i < length; i++) {\n        // Only deal with non-null/undefined values\n        if ((options = arguments[i]) != null) {\n          // Extend the base object\n          for (name in options) {\n            src = target[name];\n            copy = options[name]; // Prevent never-ending loop\n\n            if (target === copy) {\n              continue;\n            } // Recurse if we're merging plain objects or arrays\n\n\n            if (deep && copy && (isPlainObject(copy) || (copyIsArray = COMPATIBILITY.isA(copy)))) {\n              if (copyIsArray) {\n                copyIsArray = false;\n                clone = src && COMPATIBILITY.isA(src) ? src : [];\n              } else {\n                clone = src && isPlainObject(src) ? src : {};\n              } // Never move original objects, clone them\n\n\n              target[name] = extend(deep, clone, copy); // Don't bring in undefined values\n            } else if (copy !== undefined) {\n              target[name] = copy;\n            }\n          }\n        }\n      } // Return the modified object\n\n\n      return target;\n    }\n\n    ;\n\n    function inArray(item, arr, fromIndex) {\n      for (var i = fromIndex || 0; i < arr[LEXICON.l]; i++) if (arr[i] === item) return i;\n\n      return -1;\n    }\n\n    function isFunction(obj) {\n      return _type(obj) == TYPES.f;\n    }\n\n    ;\n\n    function isEmptyObject(obj) {\n      for (var name in obj) return false;\n\n      return true;\n    }\n\n    ;\n\n    function isPlainObject(obj) {\n      if (!obj || _type(obj) != TYPES.o) return false;\n      var key;\n      var proto = LEXICON.p;\n      var hasOwnProperty = Object[proto].hasOwnProperty;\n      var hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\n      var hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\n\n      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n        return false;\n      }\n\n      for (key in obj) {\n        /**/\n      }\n\n      return _type(key) == TYPES.u || hasOwnProperty.call(obj, key);\n    }\n\n    ;\n\n    function each(obj, callback) {\n      var i = 0;\n\n      if (isArrayLike(obj)) {\n        for (; i < obj[LEXICON.l]; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) break;\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) break;\n        }\n      }\n\n      return obj;\n    }\n\n    ;\n\n    function isArrayLike(obj) {\n      var length = !!obj && [LEXICON.l] in obj && obj[LEXICON.l];\n\n      var t = _type(obj);\n\n      return isFunction(t) ? false : t == TYPES.a || length === 0 || _type(length) == TYPES.n && length > 0 && length - 1 in obj;\n    }\n\n    function stripAndCollapse(value) {\n      var tokens = value.match(_rnothtmlwhite) || [];\n      return tokens.join(_strSpace);\n    }\n\n    function matches(elem, selector) {\n      var nodeList = (elem.parentNode || document).querySelectorAll(selector) || [];\n      var i = nodeList[LEXICON.l];\n\n      while (i--) if (nodeList[i] == elem) return true;\n\n      return false;\n    }\n\n    function insertAdjacentElement(el, strategy, child) {\n      if (COMPATIBILITY.isA(child)) {\n        for (var i = 0; i < child[LEXICON.l]; i++) insertAdjacentElement(el, strategy, child[i]);\n      } else if (_type(child) == TYPES.s) el.insertAdjacentHTML(strategy, child);else el.insertAdjacentElement(strategy, child.nodeType ? child : child[0]);\n    }\n\n    function setCSSVal(el, prop, val) {\n      try {\n        if (el[LEXICON.s][prop] !== undefined) el[LEXICON.s][prop] = parseCSSVal(prop, val);\n      } catch (e) {}\n    }\n\n    function parseCSSVal(prop, val) {\n      if (!_cssNumber[prop.toLowerCase()] && _type(val) == TYPES.n) val += 'px';\n      return val;\n    }\n\n    function startNextAnimationInQ(animObj, removeFromQ) {\n      var index;\n      var nextAnim;\n      if (removeFromQ !== false) animObj.q.splice(0, 1);\n\n      if (animObj.q[LEXICON.l] > 0) {\n        nextAnim = animObj.q[0];\n        animate(animObj.el, nextAnim.props, nextAnim.duration, nextAnim.easing, nextAnim.complete, true);\n      } else {\n        index = inArray(animObj, _animations);\n        if (index > -1) _animations.splice(index, 1);\n      }\n    }\n\n    function setAnimationValue(el, prop, value) {\n      if (prop === _strScrollLeft || prop === _strScrollTop) el[prop] = value;else setCSSVal(el, prop, value);\n    }\n\n    function animate(el, props, options, easing, complete, guaranteedNext) {\n      var hasOptions = isPlainObject(options);\n      var from = {};\n      var to = {};\n      var i = 0;\n      var key;\n      var animObj;\n      var start;\n      var progress;\n      var step;\n      var specialEasing;\n      var duration;\n\n      if (hasOptions) {\n        easing = options.easing;\n        start = options.start;\n        progress = options.progress;\n        step = options.step;\n        specialEasing = options.specialEasing;\n        complete = options.complete;\n        duration = options.duration;\n      } else duration = options;\n\n      specialEasing = specialEasing || {};\n      duration = duration || 400;\n      easing = easing || 'swing';\n      guaranteedNext = guaranteedNext || false;\n\n      for (; i < _animations[LEXICON.l]; i++) {\n        if (_animations[i].el === el) {\n          animObj = _animations[i];\n          break;\n        }\n      }\n\n      if (!animObj) {\n        animObj = {\n          el: el,\n          q: []\n        };\n\n        _animations.push(animObj);\n      }\n\n      for (key in props) {\n        if (key === _strScrollLeft || key === _strScrollTop) from[key] = el[key];else from[key] = FakejQuery(el).css(key);\n      }\n\n      for (key in from) {\n        if (from[key] !== props[key] && props[key] !== undefined) to[key] = props[key];\n      }\n\n      if (!isEmptyObject(to)) {\n        var timeNow;\n        var end;\n        var percent;\n        var fromVal;\n        var toVal;\n        var easedVal;\n        var timeStart;\n        var frame;\n        var elapsed;\n        var qPos = guaranteedNext ? 0 : inArray(qObj, animObj.q);\n        var qObj = {\n          props: to,\n          duration: hasOptions ? options : duration,\n          easing: easing,\n          complete: complete\n        };\n\n        if (qPos === -1) {\n          qPos = animObj.q[LEXICON.l];\n          animObj.q.push(qObj);\n        }\n\n        if (qPos === 0) {\n          if (duration > 0) {\n            timeStart = COMPATIBILITY.now();\n\n            frame = function () {\n              timeNow = COMPATIBILITY.now();\n              elapsed = timeNow - timeStart;\n              end = qObj.stop || elapsed >= duration;\n              percent = 1 - (MATH.max(0, timeStart + duration - timeNow) / duration || 0);\n\n              for (key in to) {\n                fromVal = parseFloat(from[key]);\n                toVal = parseFloat(to[key]);\n                easedVal = (toVal - fromVal) * EASING[specialEasing[key] || easing](percent, percent * duration, 0, 1, duration) + fromVal;\n                setAnimationValue(el, key, easedVal);\n\n                if (isFunction(step)) {\n                  step(easedVal, {\n                    elem: el,\n                    prop: key,\n                    start: fromVal,\n                    now: easedVal,\n                    end: toVal,\n                    pos: percent,\n                    options: {\n                      easing: easing,\n                      speacialEasing: specialEasing,\n                      duration: duration,\n                      complete: complete,\n                      step: step\n                    },\n                    startTime: timeStart\n                  });\n                }\n              }\n\n              if (isFunction(progress)) progress({}, percent, MATH.max(0, duration - elapsed));\n\n              if (end) {\n                startNextAnimationInQ(animObj);\n                if (isFunction(complete)) complete();\n              } else qObj.frame = COMPATIBILITY.rAF()(frame);\n            };\n\n            qObj.frame = COMPATIBILITY.rAF()(frame);\n          } else {\n            for (key in to) setAnimationValue(el, key, to[key]);\n\n            startNextAnimationInQ(animObj);\n          }\n        }\n      } else if (guaranteedNext) startNextAnimationInQ(animObj);\n    }\n\n    function stop(el, clearQ, jumpToEnd) {\n      var animObj;\n      var qObj;\n      var key;\n      var i = 0;\n\n      for (; i < _animations[LEXICON.l]; i++) {\n        animObj = _animations[i];\n\n        if (animObj.el === el) {\n          if (animObj.q[LEXICON.l] > 0) {\n            qObj = animObj.q[0];\n            qObj.stop = true;\n            COMPATIBILITY.cAF()(qObj.frame);\n            animObj.q.splice(0, 1);\n            if (jumpToEnd) for (key in qObj.props) setAnimationValue(el, key, qObj.props[key]);\n            if (clearQ) animObj.q = [];else startNextAnimationInQ(animObj, false);\n          }\n\n          break;\n        }\n      }\n    }\n\n    function elementIsVisible(el) {\n      return !!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\n    }\n\n    function FakejQuery(selector) {\n      if (arguments[LEXICON.l] === 0) return this;\n      var base = new FakejQuery();\n      var elements = selector;\n      var i = 0;\n      var elms;\n      var el;\n\n      if (_type(selector) == TYPES.s) {\n        elements = [];\n\n        if (selector.charAt(0) === '<') {\n          el = document.createElement('div');\n          el.innerHTML = selector;\n          elms = el.children;\n        } else {\n          elms = document.querySelectorAll(selector);\n        }\n\n        for (; i < elms[LEXICON.l]; i++) elements.push(elms[i]);\n      }\n\n      if (elements) {\n        if (_type(elements) != TYPES.s && (!isArrayLike(elements) || elements === window || elements === elements.self)) elements = [elements];\n\n        for (i = 0; i < elements[LEXICON.l]; i++) base[i] = elements[i];\n\n        base[LEXICON.l] = elements[LEXICON.l];\n      }\n\n      return base;\n    }\n\n    ;\n    FakejQuery[LEXICON.p] = {\n      //EVENTS:\n      on: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        var eventNameLength = eventName[LEXICON.l];\n        var i = 0;\n        var el;\n        return this.each(function () {\n          el = this;\n\n          try {\n            if (el.addEventListener) {\n              for (; i < eventNameLength; i++) el.addEventListener(eventName[i], handler);\n            } else if (el.detachEvent) {\n              for (; i < eventNameLength; i++) el.attachEvent('on' + eventName[i], handler);\n            }\n          } catch (e) {}\n        });\n      },\n      off: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        var eventNameLength = eventName[LEXICON.l];\n        var i = 0;\n        var el;\n        return this.each(function () {\n          el = this;\n\n          try {\n            if (el.removeEventListener) {\n              for (; i < eventNameLength; i++) el.removeEventListener(eventName[i], handler);\n            } else if (el.detachEvent) {\n              for (; i < eventNameLength; i++) el.detachEvent('on' + eventName[i], handler);\n            }\n          } catch (e) {}\n        });\n      },\n      one: function (eventName, handler) {\n        eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n        return this.each(function () {\n          var el = FakejQuery(this);\n          FakejQuery.each(eventName, function (i, oneEventName) {\n            var oneHandler = function (e) {\n              handler.call(this, e);\n              el.off(oneEventName, oneHandler);\n            };\n\n            el.on(oneEventName, oneHandler);\n          });\n        });\n      },\n      trigger: function (eventName) {\n        var el;\n        var event;\n        return this.each(function () {\n          el = this;\n\n          if (document.createEvent) {\n            event = document.createEvent('HTMLEvents');\n            event.initEvent(eventName, true, false);\n            el.dispatchEvent(event);\n          } else {\n            el.fireEvent('on' + eventName);\n          }\n        });\n      },\n      //DOM NODE INSERTING / REMOVING:\n      append: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'beforeend', child);\n        });\n      },\n      prepend: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'afterbegin', child);\n        });\n      },\n      before: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'beforebegin', child);\n        });\n      },\n      after: function (child) {\n        return this.each(function () {\n          insertAdjacentElement(this, 'afterend', child);\n        });\n      },\n      remove: function () {\n        return this.each(function () {\n          var el = this;\n          var parentNode = el.parentNode;\n          if (parentNode != null) parentNode.removeChild(el);\n        });\n      },\n      unwrap: function () {\n        var parents = [];\n        var i;\n        var el;\n        var parent;\n        this.each(function () {\n          parent = this.parentNode;\n          if (inArray(parent, parents) === -1) parents.push(parent);\n        });\n\n        for (i = 0; i < parents[LEXICON.l]; i++) {\n          el = parents[i];\n          parent = el.parentNode;\n\n          while (el.firstChild) parent.insertBefore(el.firstChild, el);\n\n          parent.removeChild(el);\n        }\n\n        return this;\n      },\n      wrapAll: function (wrapperHTML) {\n        var i;\n        var nodes = this;\n        var wrapper = FakejQuery(wrapperHTML)[0];\n        var deepest = wrapper;\n        var parent = nodes[0].parentNode;\n        var previousSibling = nodes[0].previousSibling;\n\n        while (deepest.childNodes[LEXICON.l] > 0) deepest = deepest.childNodes[0];\n\n        for (i = 0; nodes[LEXICON.l] - i; deepest.firstChild === nodes[0] && i++) deepest.appendChild(nodes[i]);\n\n        var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\n        parent.insertBefore(wrapper, nextSibling);\n        return this;\n      },\n      wrapInner: function (wrapperHTML) {\n        return this.each(function () {\n          var el = FakejQuery(this);\n          var contents = el.contents();\n          if (contents[LEXICON.l]) contents.wrapAll(wrapperHTML);else el.append(wrapperHTML);\n        });\n      },\n      wrap: function (wrapperHTML) {\n        return this.each(function () {\n          FakejQuery(this).wrapAll(wrapperHTML);\n        });\n      },\n      //DOM NODE MANIPULATION / INFORMATION:\n      css: function (styles, val) {\n        var el;\n        var key;\n        var cptStyle;\n        var getCptStyle = window.getComputedStyle;\n\n        if (_type(styles) == TYPES.s) {\n          if (val === undefined) {\n            el = this[0];\n            cptStyle = getCptStyle ? getCptStyle(el, null) : el.currentStyle[styles]; //https://bugzilla.mozilla.org/show_bug.cgi?id=548397 can be null sometimes if iframe with display: none (firefox only!)\n\n            return getCptStyle ? cptStyle != null ? cptStyle.getPropertyValue(styles) : el[LEXICON.s][styles] : cptStyle;\n          } else {\n            return this.each(function () {\n              setCSSVal(this, styles, val);\n            });\n          }\n        } else {\n          return this.each(function () {\n            for (key in styles) setCSSVal(this, key, styles[key]);\n          });\n        }\n      },\n      hasClass: function (className) {\n        var elem,\n            i = 0;\n        var classNamePrepared = _strSpace + className + _strSpace;\n        var classList;\n\n        while (elem = this[i++]) {\n          classList = elem.classList;\n          if (classList && classList.contains(className)) return true;else if (elem.nodeType === 1 && (_strSpace + stripAndCollapse(elem.className + _strEmpty) + _strSpace).indexOf(classNamePrepared) > -1) return true;\n        }\n\n        return false;\n      },\n      addClass: function (className) {\n        var classes;\n        var elem;\n        var cur;\n        var curValue;\n        var clazz;\n        var finalValue;\n        var supportClassList;\n        var elmClassList;\n        var i = 0;\n        var v = 0;\n\n        if (className) {\n          classes = className.match(_rnothtmlwhite) || [];\n\n          while (elem = this[i++]) {\n            elmClassList = elem.classList;\n            if (supportClassList === undefined) supportClassList = elmClassList !== undefined;\n\n            if (supportClassList) {\n              while (clazz = classes[v++]) elmClassList.add(clazz);\n            } else {\n              curValue = elem.className + _strEmpty;\n              cur = elem.nodeType === 1 && _strSpace + stripAndCollapse(curValue) + _strSpace;\n\n              if (cur) {\n                while (clazz = classes[v++]) if (cur.indexOf(_strSpace + clazz + _strSpace) < 0) cur += clazz + _strSpace;\n\n                finalValue = stripAndCollapse(cur);\n                if (curValue !== finalValue) elem.className = finalValue;\n              }\n            }\n          }\n        }\n\n        return this;\n      },\n      removeClass: function (className) {\n        var classes;\n        var elem;\n        var cur;\n        var curValue;\n        var clazz;\n        var finalValue;\n        var supportClassList;\n        var elmClassList;\n        var i = 0;\n        var v = 0;\n\n        if (className) {\n          classes = className.match(_rnothtmlwhite) || [];\n\n          while (elem = this[i++]) {\n            elmClassList = elem.classList;\n            if (supportClassList === undefined) supportClassList = elmClassList !== undefined;\n\n            if (supportClassList) {\n              while (clazz = classes[v++]) elmClassList.remove(clazz);\n            } else {\n              curValue = elem.className + _strEmpty;\n              cur = elem.nodeType === 1 && _strSpace + stripAndCollapse(curValue) + _strSpace;\n\n              if (cur) {\n                while (clazz = classes[v++]) while (cur.indexOf(_strSpace + clazz + _strSpace) > -1) cur = cur.replace(_strSpace + clazz + _strSpace, _strSpace);\n\n                finalValue = stripAndCollapse(cur);\n                if (curValue !== finalValue) elem.className = finalValue;\n              }\n            }\n          }\n        }\n\n        return this;\n      },\n      hide: function () {\n        return this.each(function () {\n          this[LEXICON.s].display = 'none';\n        });\n      },\n      show: function () {\n        return this.each(function () {\n          this[LEXICON.s].display = 'block';\n        });\n      },\n      attr: function (attrName, value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el.getAttribute(attrName);\n          el.setAttribute(attrName, value);\n        }\n\n        return this;\n      },\n      removeAttr: function (attrName) {\n        return this.each(function () {\n          this.removeAttribute(attrName);\n        });\n      },\n      offset: function () {\n        var el = this[0];\n        var rect = el[LEXICON.bCR]();\n        var scrollLeft = window.pageXOffset || document.documentElement[_strScrollLeft];\n        var scrollTop = window.pageYOffset || document.documentElement[_strScrollTop];\n        return {\n          top: rect.top + scrollTop,\n          left: rect.left + scrollLeft\n        };\n      },\n      position: function () {\n        var el = this[0];\n        return {\n          top: el.offsetTop,\n          left: el.offsetLeft\n        };\n      },\n      scrollLeft: function (value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el[_strScrollLeft];\n          el[_strScrollLeft] = value;\n        }\n\n        return this;\n      },\n      scrollTop: function (value) {\n        var i = 0;\n        var el;\n\n        while (el = this[i++]) {\n          if (value === undefined) return el[_strScrollTop];\n          el[_strScrollTop] = value;\n        }\n\n        return this;\n      },\n      val: function (value) {\n        var el = this[0];\n        if (!value) return el.value;\n        el.value = value;\n        return this;\n      },\n      //DOM TRAVERSAL / FILTERING:\n      first: function () {\n        return this.eq(0);\n      },\n      last: function () {\n        return this.eq(-1);\n      },\n      eq: function (index) {\n        return FakejQuery(this[index >= 0 ? index : this[LEXICON.l] + index]);\n      },\n      find: function (selector) {\n        var children = [];\n        var i;\n        this.each(function () {\n          var el = this;\n          var ch = el.querySelectorAll(selector);\n\n          for (i = 0; i < ch[LEXICON.l]; i++) children.push(ch[i]);\n        });\n        return FakejQuery(children);\n      },\n      children: function (selector) {\n        var children = [];\n        var el;\n        var ch;\n        var i;\n        this.each(function () {\n          ch = this.children;\n\n          for (i = 0; i < ch[LEXICON.l]; i++) {\n            el = ch[i];\n\n            if (selector) {\n              if (el.matches && el.matches(selector) || matches(el, selector)) children.push(el);\n            } else children.push(el);\n          }\n        });\n        return FakejQuery(children);\n      },\n      parent: function (selector) {\n        var parents = [];\n        var parent;\n        this.each(function () {\n          parent = this.parentNode;\n          if (selector ? FakejQuery(parent).is(selector) : true) parents.push(parent);\n        });\n        return FakejQuery(parents);\n      },\n      is: function (selector) {\n        var el;\n        var i;\n\n        for (i = 0; i < this[LEXICON.l]; i++) {\n          el = this[i];\n          if (selector === ':visible') return elementIsVisible(el);\n          if (selector === ':hidden') return !elementIsVisible(el);\n          if (el.matches && el.matches(selector) || matches(el, selector)) return true;\n        }\n\n        return false;\n      },\n      contents: function () {\n        var contents = [];\n        var childs;\n        var i;\n        this.each(function () {\n          childs = this.childNodes;\n\n          for (i = 0; i < childs[LEXICON.l]; i++) contents.push(childs[i]);\n        });\n        return FakejQuery(contents);\n      },\n      each: function (callback) {\n        return each(this, callback);\n      },\n      //ANIMATION:\n      animate: function (props, duration, easing, complete) {\n        return this.each(function () {\n          animate(this, props, duration, easing, complete);\n        });\n      },\n      stop: function (clearQ, jump) {\n        return this.each(function () {\n          stop(this, clearQ, jump);\n        });\n      }\n    };\n    extend(FakejQuery, {\n      extend: extend,\n      inArray: inArray,\n      isEmptyObject: isEmptyObject,\n      isPlainObject: isPlainObject,\n      each: each\n    });\n    return FakejQuery;\n  }();\n\n  var INSTANCES = function () {\n    var _targets = [];\n    var _instancePropertyString = '__overlayScrollbars__';\n    /**\r\n     * Register, unregister or get a certain (or all) instances.\r\n     * Register: Pass the target and the instance.\r\n     * Unregister: Pass the target and null.\r\n     * Get Instance: Pass the target from which the instance shall be got.\r\n     * Get Targets: Pass no arguments.\r\n     * @param target The target to which the instance shall be registered / from which the instance shall be unregistered / the instance shall be got\r\n     * @param instance The instance.\r\n     * @returns {*|void} Returns the instance from the given target.\r\n     */\n\n    return function (target, instance) {\n      var argLen = arguments[LEXICON.l];\n\n      if (argLen < 1) {\n        //return all targets\n        return _targets;\n      } else {\n        if (instance) {\n          //register instance\n          target[_instancePropertyString] = instance;\n\n          _targets.push(target);\n        } else {\n          var index = COMPATIBILITY.inA(target, _targets);\n\n          if (index > -1) {\n            if (argLen > 1) {\n              //unregister instance\n              delete target[_instancePropertyString];\n\n              _targets.splice(index, 1);\n            } else {\n              //get instance from target\n              return _targets[index][_instancePropertyString];\n            }\n          }\n        }\n      }\n    };\n  }();\n\n  var PLUGIN = function () {\n    var _plugin;\n\n    var _pluginsGlobals;\n\n    var _pluginsAutoUpdateLoop;\n\n    var _pluginsExtensions = [];\n\n    var _pluginsOptions = function () {\n      var type = COMPATIBILITY.type;\n      var possibleTemplateTypes = [TYPES.b, //boolean\n      TYPES.n, //number\n      TYPES.s, //string\n      TYPES.a, //array\n      TYPES.o, //object\n      TYPES.f, //function\n      TYPES.z //null\n      ];\n      var restrictedStringsSplit = ' ';\n      var restrictedStringsPossibilitiesSplit = ':';\n      var classNameAllowedValues = [TYPES.z, TYPES.s];\n      var numberAllowedValues = TYPES.n;\n      var booleanNullAllowedValues = [TYPES.z, TYPES.b];\n      var booleanTrueTemplate = [true, TYPES.b];\n      var booleanFalseTemplate = [false, TYPES.b];\n      var callbackTemplate = [null, [TYPES.z, TYPES.f]];\n      var updateOnLoadTemplate = [['img'], [TYPES.s, TYPES.a, TYPES.z]];\n      var inheritedAttrsTemplate = [['style', 'class'], [TYPES.s, TYPES.a, TYPES.z]];\n      var resizeAllowedValues = 'n:none b:both h:horizontal v:vertical';\n      var overflowBehaviorAllowedValues = 'v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden';\n      var scrollbarsVisibilityAllowedValues = 'v:visible h:hidden a:auto';\n      var scrollbarsAutoHideAllowedValues = 'n:never s:scroll l:leave m:move';\n      var optionsDefaultsAndTemplate = {\n        className: ['os-theme-dark', classNameAllowedValues],\n        //null || string\n        resize: ['none', resizeAllowedValues],\n        //none || both  || horizontal || vertical || n || b || h || v\n        sizeAutoCapable: booleanTrueTemplate,\n        //true || false\n        clipAlways: booleanTrueTemplate,\n        //true || false\n        normalizeRTL: booleanTrueTemplate,\n        //true || false\n        paddingAbsolute: booleanFalseTemplate,\n        //true || false\n        autoUpdate: [null, booleanNullAllowedValues],\n        //true || false || null\n        autoUpdateInterval: [33, numberAllowedValues],\n        //number\n        updateOnLoad: updateOnLoadTemplate,\n        //string || array || null\n        nativeScrollbarsOverlaid: {\n          showNativeScrollbars: booleanFalseTemplate,\n          //true || false\n          initialize: booleanTrueTemplate //true || false\n\n        },\n        overflowBehavior: {\n          x: ['scroll', overflowBehaviorAllowedValues],\n          //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n          y: ['scroll', overflowBehaviorAllowedValues] //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n\n        },\n        scrollbars: {\n          visibility: ['auto', scrollbarsVisibilityAllowedValues],\n          //visible || hidden || auto || v || h || a\n          autoHide: ['never', scrollbarsAutoHideAllowedValues],\n          //never || scroll || leave || move || n || s || l || m\n          autoHideDelay: [800, numberAllowedValues],\n          //number\n          dragScrolling: booleanTrueTemplate,\n          //true || false\n          clickScrolling: booleanFalseTemplate,\n          //true || false\n          touchSupport: booleanTrueTemplate,\n          //true || false\n          snapHandle: booleanFalseTemplate //true || false\n\n        },\n        textarea: {\n          dynWidth: booleanFalseTemplate,\n          //true || false\n          dynHeight: booleanFalseTemplate,\n          //true || false\n          inheritedAttrs: inheritedAttrsTemplate //string || array || null\n\n        },\n        callbacks: {\n          onInitialized: callbackTemplate,\n          //null || function\n          onInitializationWithdrawn: callbackTemplate,\n          //null || function\n          onDestroyed: callbackTemplate,\n          //null || function\n          onScrollStart: callbackTemplate,\n          //null || function\n          onScroll: callbackTemplate,\n          //null || function\n          onScrollStop: callbackTemplate,\n          //null || function\n          onOverflowChanged: callbackTemplate,\n          //null || function\n          onOverflowAmountChanged: callbackTemplate,\n          //null || function\n          onDirectionChanged: callbackTemplate,\n          //null || function\n          onContentSizeChanged: callbackTemplate,\n          //null || function\n          onHostSizeChanged: callbackTemplate,\n          //null || function\n          onUpdated: callbackTemplate //null || function\n\n        }\n      };\n\n      var convert = function (template) {\n        var recursive = function (obj) {\n          var key;\n          var val;\n          var valType;\n\n          for (key in obj) {\n            if (!obj[LEXICON.hOP](key)) continue;\n            val = obj[key];\n            valType = type(val);\n            if (valType == TYPES.a) obj[key] = val[template ? 1 : 0];else if (valType == TYPES.o) obj[key] = recursive(val);\n          }\n\n          return obj;\n        };\n\n        return recursive(FRAMEWORK.extend(true, {}, optionsDefaultsAndTemplate));\n      };\n\n      return {\n        _defaults: convert(),\n        _template: convert(true),\n\n        /**\r\n         * Validates the passed object by the passed template.\r\n         * @param obj The object which shall be validated.\r\n         * @param template The template which defines the allowed values and types.\r\n         * @param writeErrors True if errors shall be logged to the console.\r\n         * @param diffObj If a object is passed then only valid differences to this object will be returned.\r\n         * @returns {{}} A object which contains two objects called \"default\" and \"prepared\" which contains only the valid properties of the passed original object and discards not different values compared to the passed diffObj.\r\n         */\n        _validate: function (obj, template, writeErrors, diffObj) {\n          var validatedOptions = {};\n          var validatedOptionsPrepared = {};\n          var objectCopy = FRAMEWORK.extend(true, {}, obj);\n          var inArray = FRAMEWORK.inArray;\n          var isEmptyObj = FRAMEWORK.isEmptyObject;\n\n          var checkObjectProps = function (data, template, diffData, validatedOptions, validatedOptionsPrepared, prevPropName) {\n            for (var prop in template) {\n              if (template[LEXICON.hOP](prop) && data[LEXICON.hOP](prop)) {\n                var isValid = false;\n                var isDiff = false;\n                var templateValue = template[prop];\n                var templateValueType = type(templateValue);\n                var templateIsComplex = templateValueType == TYPES.o;\n                var templateTypes = !COMPATIBILITY.isA(templateValue) ? [templateValue] : templateValue;\n                var dataDiffValue = diffData[prop];\n                var dataValue = data[prop];\n                var dataValueType = type(dataValue);\n                var propPrefix = prevPropName ? prevPropName + '.' : '';\n                var error = \"The option \\\"\" + propPrefix + prop + \"\\\" wasn't set, because\";\n                var errorPossibleTypes = [];\n                var errorRestrictedStrings = [];\n                var restrictedStringValuesSplit;\n                var restrictedStringValuesPossibilitiesSplit;\n                var isRestrictedValue;\n                var mainPossibility;\n                var currType;\n                var i;\n                var v;\n                var j;\n                dataDiffValue = dataDiffValue === undefined ? {} : dataDiffValue; //if the template has a object as value, it means that the options are complex (verschachtelt)\n\n                if (templateIsComplex && dataValueType == TYPES.o) {\n                  validatedOptions[prop] = {};\n                  validatedOptionsPrepared[prop] = {};\n                  checkObjectProps(dataValue, templateValue, dataDiffValue, validatedOptions[prop], validatedOptionsPrepared[prop], propPrefix + prop);\n                  FRAMEWORK.each([data, validatedOptions, validatedOptionsPrepared], function (index, value) {\n                    if (isEmptyObj(value[prop])) {\n                      delete value[prop];\n                    }\n                  });\n                } else if (!templateIsComplex) {\n                  for (i = 0; i < templateTypes[LEXICON.l]; i++) {\n                    currType = templateTypes[i];\n                    templateValueType = type(currType); //if currtype is string and starts with restrictedStringPrefix and end with restrictedStringSuffix\n\n                    isRestrictedValue = templateValueType == TYPES.s && inArray(currType, possibleTemplateTypes) === -1;\n\n                    if (isRestrictedValue) {\n                      errorPossibleTypes.push(TYPES.s); //split it into a array which contains all possible values for example: [\"y:yes\", \"n:no\", \"m:maybe\"]\n\n                      restrictedStringValuesSplit = currType.split(restrictedStringsSplit);\n                      errorRestrictedStrings = errorRestrictedStrings.concat(restrictedStringValuesSplit);\n\n                      for (v = 0; v < restrictedStringValuesSplit[LEXICON.l]; v++) {\n                        //split the possible values into their possibiliteis for example: [\"y\", \"yes\"] -> the first is always the mainPossibility\n                        restrictedStringValuesPossibilitiesSplit = restrictedStringValuesSplit[v].split(restrictedStringsPossibilitiesSplit);\n                        mainPossibility = restrictedStringValuesPossibilitiesSplit[0];\n\n                        for (j = 0; j < restrictedStringValuesPossibilitiesSplit[LEXICON.l]; j++) {\n                          //if any possibility matches with the dataValue, its valid\n                          if (dataValue === restrictedStringValuesPossibilitiesSplit[j]) {\n                            isValid = true;\n                            break;\n                          }\n                        }\n\n                        if (isValid) break;\n                      }\n                    } else {\n                      errorPossibleTypes.push(currType);\n\n                      if (dataValueType === currType) {\n                        isValid = true;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (isValid) {\n                    isDiff = dataValue !== dataDiffValue;\n                    if (isDiff) validatedOptions[prop] = dataValue;\n                    if (isRestrictedValue ? inArray(dataDiffValue, restrictedStringValuesPossibilitiesSplit) < 0 : isDiff) validatedOptionsPrepared[prop] = isRestrictedValue ? mainPossibility : dataValue;\n                  } else if (writeErrors) {\n                    console.warn(error + \" it doesn't accept the type [ \" + dataValueType.toUpperCase() + \" ] with the value of \\\"\" + dataValue + \"\\\".\\r\\n\" + \"Accepted types are: [ \" + errorPossibleTypes.join(', ').toUpperCase() + \" ].\" + (errorRestrictedStrings[length] > 0 ? \"\\r\\nValid strings are: [ \" + errorRestrictedStrings.join(', ').split(restrictedStringsPossibilitiesSplit).join(', ') + \" ].\" : ''));\n                  }\n\n                  delete data[prop];\n                }\n              }\n            }\n          };\n\n          checkObjectProps(objectCopy, template, diffObj || {}, validatedOptions, validatedOptionsPrepared); //add values which aren't specified in the template to the finished validated object to prevent them from being discarded\n\n          /*\r\n          if(keepForeignProps) {\r\n              FRAMEWORK.extend(true, validatedOptions, objectCopy);\r\n              FRAMEWORK.extend(true, validatedOptionsPrepared, objectCopy);\r\n          }\r\n          */\n\n          if (!isEmptyObj(objectCopy) && writeErrors) console.warn('The following options are discarded due to invalidity:\\r\\n' + window.JSON.stringify(objectCopy, null, 2));\n          return {\n            _default: validatedOptions,\n            _prepared: validatedOptionsPrepared\n          };\n        }\n      };\n    }();\n    /**\r\n     * Initializes the object which contains global information about the plugin and each instance of it.\r\n     */\n\n\n    function initOverlayScrollbarsStatics() {\n      if (!_pluginsGlobals) _pluginsGlobals = new OverlayScrollbarsGlobals(_pluginsOptions._defaults);\n      if (!_pluginsAutoUpdateLoop) _pluginsAutoUpdateLoop = new OverlayScrollbarsAutoUpdateLoop(_pluginsGlobals);\n    }\n    /**\r\n     * The global object for the OverlayScrollbars objects. It contains resources which every OverlayScrollbars object needs. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n     * @param defaultOptions\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsGlobals(defaultOptions) {\n      var _base = this;\n\n      var strOverflow = 'overflow';\n      var strHidden = 'hidden';\n      var strScroll = 'scroll';\n      var bodyElement = FRAMEWORK('body');\n      var scrollbarDummyElement = FRAMEWORK('<div id=\"os-dummy-scrollbar-size\"><div></div></div>');\n      var scrollbarDummyElement0 = scrollbarDummyElement[0];\n      var dummyContainerChild = FRAMEWORK(scrollbarDummyElement.children('div').eq(0));\n      bodyElement.append(scrollbarDummyElement);\n      scrollbarDummyElement.hide().show(); //fix IE8 bug (incorrect measuring)\n\n      var nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement0);\n      var nativeScrollbarIsOverlaid = {\n        x: nativeScrollbarSize.x === 0,\n        y: nativeScrollbarSize.y === 0\n      };\n\n      var msie = function () {\n        var ua = window.navigator.userAgent;\n        var strIndexOf = 'indexOf';\n        var strSubString = 'substring';\n        var msie = ua[strIndexOf]('MSIE ');\n        var trident = ua[strIndexOf]('Trident/');\n        var edge = ua[strIndexOf]('Edge/');\n        var rv = ua[strIndexOf]('rv:');\n        var result;\n        var parseIntFunc = parseInt; // IE 10 or older => return version number\n\n        if (msie > 0) result = parseIntFunc(ua[strSubString](msie + 5, ua[strIndexOf]('.', msie)), 10); // IE 11 => return version number\n        else if (trident > 0) result = parseIntFunc(ua[strSubString](rv + 3, ua[strIndexOf]('.', rv)), 10); // Edge (IE 12+) => return version number\n          else if (edge > 0) result = parseIntFunc(ua[strSubString](edge + 5, ua[strIndexOf]('.', edge)), 10); // other browser\n\n        return result;\n      }();\n\n      FRAMEWORK.extend(_base, {\n        defaultOptions: defaultOptions,\n        msie: msie,\n        autoUpdateLoop: false,\n        autoUpdateRecommended: !COMPATIBILITY.mO(),\n        nativeScrollbarSize: nativeScrollbarSize,\n        nativeScrollbarIsOverlaid: nativeScrollbarIsOverlaid,\n        nativeScrollbarStyling: function () {\n          var result = false;\n          scrollbarDummyElement.addClass('os-viewport-native-scrollbars-invisible');\n\n          try {\n            result = scrollbarDummyElement.css('scrollbar-width') === 'none' && (msie > 9 || !msie) || window.getComputedStyle(scrollbarDummyElement0, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\n          } catch (ex) {} //fix opera bug: scrollbar styles will only appear if overflow value is scroll or auto during the activation of the style.\n          //and set overflow to scroll\n          //scrollbarDummyElement.css(strOverflow, strHidden).hide().css(strOverflow, strScroll).show();\n          //return (scrollbarDummyElement0[LEXICON.oH] - scrollbarDummyElement0[LEXICON.cH]) === 0 && (scrollbarDummyElement0[LEXICON.oW] - scrollbarDummyElement0[LEXICON.cW]) === 0;\n\n\n          return result;\n        }(),\n        overlayScrollbarDummySize: {\n          x: 30,\n          y: 30\n        },\n        cssCalc: VENDORS._cssPropertyValue('width', 'calc', '(1px)') || null,\n        restrictedMeasuring: function () {\n          //https://bugzilla.mozilla.org/show_bug.cgi?id=1439305\n          //since 1.11.0 always false -> fixed via CSS (hopefully)\n          scrollbarDummyElement.css(strOverflow, strHidden);\n          var scrollSize = {\n            w: scrollbarDummyElement0[LEXICON.sW],\n            h: scrollbarDummyElement0[LEXICON.sH]\n          };\n          scrollbarDummyElement.css(strOverflow, 'visible');\n          var scrollSize2 = {\n            w: scrollbarDummyElement0[LEXICON.sW],\n            h: scrollbarDummyElement0[LEXICON.sH]\n          };\n          return scrollSize.w - scrollSize2.w !== 0 || scrollSize.h - scrollSize2.h !== 0;\n        }(),\n        rtlScrollBehavior: function () {\n          scrollbarDummyElement.css({\n            'overflow-y': strHidden,\n            'overflow-x': strScroll,\n            'direction': 'rtl'\n          }).scrollLeft(0);\n          var dummyContainerOffset = scrollbarDummyElement.offset();\n          var dummyContainerChildOffset = dummyContainerChild.offset(); //https://github.com/KingSora/OverlayScrollbars/issues/187\n\n          scrollbarDummyElement.scrollLeft(-999);\n          var dummyContainerChildOffsetAfterScroll = dummyContainerChild.offset();\n          return {\n            //origin direction = determines if the zero scroll position is on the left or right side\n            //'i' means 'invert' (i === true means that the axis must be inverted to be correct)\n            //true = on the left side\n            //false = on the right side\n            i: dummyContainerOffset.left === dummyContainerChildOffset.left,\n            //negative = determines if the maximum scroll is positive or negative\n            //'n' means 'negate' (n === true means that the axis must be negated to be correct)\n            //true = negative\n            //false = positive\n            n: dummyContainerChildOffset.left !== dummyContainerChildOffsetAfterScroll.left\n          };\n        }(),\n        supportTransform: !!VENDORS._cssProperty('transform'),\n        supportTransition: !!VENDORS._cssProperty('transition'),\n        supportPassiveEvents: function () {\n          var supportsPassive = false;\n\n          try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n              get: function () {\n                supportsPassive = true;\n              }\n            }));\n          } catch (e) {}\n\n          return supportsPassive;\n        }(),\n        supportResizeObserver: !!COMPATIBILITY.rO(),\n        supportMutationObserver: !!COMPATIBILITY.mO()\n      });\n      scrollbarDummyElement.removeAttr(LEXICON.s).remove(); //Catch zoom event:\n\n      (function () {\n        if (nativeScrollbarIsOverlaid.x && nativeScrollbarIsOverlaid.y) return;\n        var abs = MATH.abs;\n        var windowWidth = COMPATIBILITY.wW();\n        var windowHeight = COMPATIBILITY.wH();\n        var windowDpr = getWindowDPR();\n\n        var onResize = function () {\n          if (INSTANCES().length > 0) {\n            var newW = COMPATIBILITY.wW();\n            var newH = COMPATIBILITY.wH();\n            var deltaW = newW - windowWidth;\n            var deltaH = newH - windowHeight;\n            if (deltaW === 0 && deltaH === 0) return;\n            var deltaWRatio = MATH.round(newW / (windowWidth / 100.0));\n            var deltaHRatio = MATH.round(newH / (windowHeight / 100.0));\n            var absDeltaW = abs(deltaW);\n            var absDeltaH = abs(deltaH);\n            var absDeltaWRatio = abs(deltaWRatio);\n            var absDeltaHRatio = abs(deltaHRatio);\n            var newDPR = getWindowDPR();\n            var deltaIsBigger = absDeltaW > 2 && absDeltaH > 2;\n            var difference = !differenceIsBiggerThanOne(absDeltaWRatio, absDeltaHRatio);\n            var dprChanged = newDPR !== windowDpr && windowDpr > 0;\n            var isZoom = deltaIsBigger && difference && dprChanged;\n            var oldScrollbarSize = _base.nativeScrollbarSize;\n            var newScrollbarSize;\n\n            if (isZoom) {\n              bodyElement.append(scrollbarDummyElement);\n              newScrollbarSize = _base.nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement[0]);\n              scrollbarDummyElement.remove();\n\n              if (oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\n                FRAMEWORK.each(INSTANCES(), function () {\n                  if (INSTANCES(this)) INSTANCES(this).update('zoom');\n                });\n              }\n            }\n\n            windowWidth = newW;\n            windowHeight = newH;\n            windowDpr = newDPR;\n          }\n        };\n\n        function differenceIsBiggerThanOne(valOne, valTwo) {\n          var absValOne = abs(valOne);\n          var absValTwo = abs(valTwo);\n          return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\n        }\n\n        function getWindowDPR() {\n          var dDPI = window.screen.deviceXDPI || 0;\n          var sDPI = window.screen.logicalXDPI || 1;\n          return window.devicePixelRatio || dDPI / sDPI;\n        }\n\n        FRAMEWORK(window).on('resize', onResize);\n      })();\n\n      function calcNativeScrollbarSize(measureElement) {\n        return {\n          x: measureElement[LEXICON.oH] - measureElement[LEXICON.cH],\n          y: measureElement[LEXICON.oW] - measureElement[LEXICON.cW]\n        };\n      }\n    }\n    /**\r\n     * The object which manages the auto update loop for all OverlayScrollbars objects. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsAutoUpdateLoop(globals) {\n      var _base = this;\n\n      var _inArray = FRAMEWORK.inArray;\n      var _getNow = COMPATIBILITY.now;\n      var _strAutoUpdate = 'autoUpdate';\n\n      var _strAutoUpdateInterval = _strAutoUpdate + 'Interval';\n\n      var _strLength = LEXICON.l;\n      var _loopingInstances = [];\n      var _loopingInstancesIntervalCache = [];\n      var _loopIsActive = false;\n      var _loopIntervalDefault = 33;\n      var _loopInterval = _loopIntervalDefault;\n\n      var _loopTimeOld = _getNow();\n\n      var _loopID;\n      /**\r\n       * The auto update loop which will run every 50 milliseconds or less if the update interval of a instance is lower than 50 milliseconds.\r\n       */\n\n\n      var loop = function () {\n        if (_loopingInstances[_strLength] > 0 && _loopIsActive) {\n          _loopID = COMPATIBILITY.rAF()(function () {\n            loop();\n          });\n\n          var timeNew = _getNow();\n\n          var timeDelta = timeNew - _loopTimeOld;\n          var lowestInterval;\n          var instance;\n          var instanceOptions;\n          var instanceAutoUpdateAllowed;\n          var instanceAutoUpdateInterval;\n          var now;\n\n          if (timeDelta > _loopInterval) {\n            _loopTimeOld = timeNew - timeDelta % _loopInterval;\n            lowestInterval = _loopIntervalDefault;\n\n            for (var i = 0; i < _loopingInstances[_strLength]; i++) {\n              instance = _loopingInstances[i];\n\n              if (instance !== undefined) {\n                instanceOptions = instance.options();\n                instanceAutoUpdateAllowed = instanceOptions[_strAutoUpdate];\n                instanceAutoUpdateInterval = MATH.max(1, instanceOptions[_strAutoUpdateInterval]);\n                now = _getNow();\n\n                if ((instanceAutoUpdateAllowed === true || instanceAutoUpdateAllowed === null) && now - _loopingInstancesIntervalCache[i] > instanceAutoUpdateInterval) {\n                  instance.update('auto');\n                  _loopingInstancesIntervalCache[i] = new Date(now += instanceAutoUpdateInterval);\n                }\n\n                lowestInterval = MATH.max(1, MATH.min(lowestInterval, instanceAutoUpdateInterval));\n              }\n            }\n\n            _loopInterval = lowestInterval;\n          }\n        } else {\n          _loopInterval = _loopIntervalDefault;\n        }\n      };\n      /**\r\n       * Add OverlayScrollbars instance to the auto update loop. Only successful if the instance isn't already added.\r\n       * @param instance The instance which shall be updated in a loop automatically.\r\n       */\n\n\n      _base.add = function (instance) {\n        if (_inArray(instance, _loopingInstances) === -1) {\n          _loopingInstances.push(instance);\n\n          _loopingInstancesIntervalCache.push(_getNow());\n\n          if (_loopingInstances[_strLength] > 0 && !_loopIsActive) {\n            _loopIsActive = true;\n            globals.autoUpdateLoop = _loopIsActive;\n            loop();\n          }\n        }\n      };\n      /**\r\n       * Remove OverlayScrollbars instance from the auto update loop. Only successful if the instance was added before.\r\n       * @param instance The instance which shall be updated in a loop automatically.\r\n       */\n\n\n      _base.remove = function (instance) {\n        var index = _inArray(instance, _loopingInstances);\n\n        if (index > -1) {\n          //remove from loopingInstances list\n          _loopingInstancesIntervalCache.splice(index, 1);\n\n          _loopingInstances.splice(index, 1); //correct update loop behavior\n\n\n          if (_loopingInstances[_strLength] === 0 && _loopIsActive) {\n            _loopIsActive = false;\n            globals.autoUpdateLoop = _loopIsActive;\n\n            if (_loopID !== undefined) {\n              COMPATIBILITY.cAF()(_loopID);\n              _loopID = -1;\n            }\n          }\n        }\n      };\n    }\n    /**\r\n     * A object which manages the scrollbars visibility of the target element.\r\n     * @param pluginTargetElement The element from which the scrollbars shall be hidden.\r\n     * @param options The custom options.\r\n     * @param extensions The custom extensions.\r\n     * @param globals\r\n     * @param autoUpdateLoop\r\n     * @returns {*}\r\n     * @constructor\r\n     */\n\n\n    function OverlayScrollbarsInstance(pluginTargetElement, options, extensions, globals, autoUpdateLoop) {\n      //shortcuts\n      var type = COMPATIBILITY.type;\n      var inArray = FRAMEWORK.inArray;\n      var each = FRAMEWORK.each; //make correct instanceof\n\n      var _base = new _plugin();\n\n      var _frameworkProto = FRAMEWORK[LEXICON.p]; //if passed element is no HTML element: skip and return\n\n      if (!isHTMLElement(pluginTargetElement)) return; //if passed element is already initialized: set passed options if there are any and return its instance\n\n      if (INSTANCES(pluginTargetElement)) {\n        var inst = INSTANCES(pluginTargetElement);\n        inst.options(options);\n        return inst;\n      } //globals:\n\n\n      var _nativeScrollbarIsOverlaid;\n\n      var _overlayScrollbarDummySize;\n\n      var _rtlScrollBehavior;\n\n      var _autoUpdateRecommended;\n\n      var _msieVersion;\n\n      var _nativeScrollbarStyling;\n\n      var _cssCalc;\n\n      var _nativeScrollbarSize;\n\n      var _supportTransition;\n\n      var _supportTransform;\n\n      var _supportPassiveEvents;\n\n      var _supportResizeObserver;\n\n      var _supportMutationObserver;\n\n      var _restrictedMeasuring; //general readonly:\n\n\n      var _initialized;\n\n      var _destroyed;\n\n      var _isTextarea;\n\n      var _isBody;\n\n      var _documentMixed;\n\n      var _domExists; //general:\n\n\n      var _isBorderBox;\n\n      var _sizeAutoObserverAdded;\n\n      var _paddingX;\n\n      var _paddingY;\n\n      var _borderX;\n\n      var _borderY;\n\n      var _marginX;\n\n      var _marginY;\n\n      var _isRTL;\n\n      var _sleeping;\n\n      var _contentBorderSize = {};\n      var _scrollHorizontalInfo = {};\n      var _scrollVerticalInfo = {};\n      var _viewportSize = {};\n      var _nativeScrollbarMinSize = {}; //naming:\t\n\n      var _strMinusHidden = '-hidden';\n      var _strMarginMinus = 'margin-';\n      var _strPaddingMinus = 'padding-';\n      var _strBorderMinus = 'border-';\n      var _strTop = 'top';\n      var _strRight = 'right';\n      var _strBottom = 'bottom';\n      var _strLeft = 'left';\n      var _strMinMinus = 'min-';\n      var _strMaxMinus = 'max-';\n      var _strWidth = 'width';\n      var _strHeight = 'height';\n      var _strFloat = 'float';\n      var _strEmpty = '';\n      var _strAuto = 'auto';\n      var _strSync = 'sync';\n      var _strScroll = 'scroll';\n      var _strHundredPercent = '100%';\n      var _strX = 'x';\n      var _strY = 'y';\n      var _strDot = '.';\n      var _strSpace = ' ';\n      var _strScrollbar = 'scrollbar';\n      var _strMinusHorizontal = '-horizontal';\n      var _strMinusVertical = '-vertical';\n\n      var _strScrollLeft = _strScroll + 'Left';\n\n      var _strScrollTop = _strScroll + 'Top';\n\n      var _strMouseTouchDownEvent = 'mousedown touchstart';\n      var _strMouseTouchUpEvent = 'mouseup touchend touchcancel';\n      var _strMouseTouchMoveEvent = 'mousemove touchmove';\n      var _strMouseEnter = 'mouseenter';\n      var _strMouseLeave = 'mouseleave';\n      var _strKeyDownEvent = 'keydown';\n      var _strKeyUpEvent = 'keyup';\n      var _strSelectStartEvent = 'selectstart';\n      var _strTransitionEndEvent = 'transitionend webkitTransitionEnd oTransitionEnd';\n      var _strResizeObserverProperty = '__overlayScrollbarsRO__'; //class names:\t\n\n      var _cassNamesPrefix = 'os-';\n\n      var _classNameHTMLElement = _cassNamesPrefix + 'html';\n\n      var _classNameHostElement = _cassNamesPrefix + 'host';\n\n      var _classNameHostElementForeign = _classNameHostElement + '-foreign';\n\n      var _classNameHostTextareaElement = _classNameHostElement + '-textarea';\n\n      var _classNameHostScrollbarHorizontalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusHorizontal + _strMinusHidden;\n\n      var _classNameHostScrollbarVerticalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusVertical + _strMinusHidden;\n\n      var _classNameHostTransition = _classNameHostElement + '-transition';\n\n      var _classNameHostRTL = _classNameHostElement + '-rtl';\n\n      var _classNameHostResizeDisabled = _classNameHostElement + '-resize-disabled';\n\n      var _classNameHostScrolling = _classNameHostElement + '-scrolling';\n\n      var _classNameHostOverflow = _classNameHostElement + '-overflow';\n\n      var _classNameHostOverflow = _classNameHostElement + '-overflow';\n\n      var _classNameHostOverflowX = _classNameHostOverflow + '-x';\n\n      var _classNameHostOverflowY = _classNameHostOverflow + '-y';\n\n      var _classNameTextareaElement = _cassNamesPrefix + 'textarea';\n\n      var _classNameTextareaCoverElement = _classNameTextareaElement + '-cover';\n\n      var _classNamePaddingElement = _cassNamesPrefix + 'padding';\n\n      var _classNameViewportElement = _cassNamesPrefix + 'viewport';\n\n      var _classNameViewportNativeScrollbarsInvisible = _classNameViewportElement + '-native-scrollbars-invisible';\n\n      var _classNameViewportNativeScrollbarsOverlaid = _classNameViewportElement + '-native-scrollbars-overlaid';\n\n      var _classNameContentElement = _cassNamesPrefix + 'content';\n\n      var _classNameContentArrangeElement = _cassNamesPrefix + 'content-arrange';\n\n      var _classNameContentGlueElement = _cassNamesPrefix + 'content-glue';\n\n      var _classNameSizeAutoObserverElement = _cassNamesPrefix + 'size-auto-observer';\n\n      var _classNameResizeObserverElement = _cassNamesPrefix + 'resize-observer';\n\n      var _classNameResizeObserverItemElement = _cassNamesPrefix + 'resize-observer-item';\n\n      var _classNameResizeObserverItemFinalElement = _classNameResizeObserverItemElement + '-final';\n\n      var _classNameTextInherit = _cassNamesPrefix + 'text-inherit';\n\n      var _classNameScrollbar = _cassNamesPrefix + _strScrollbar;\n\n      var _classNameScrollbarTrack = _classNameScrollbar + '-track';\n\n      var _classNameScrollbarTrackOff = _classNameScrollbarTrack + '-off';\n\n      var _classNameScrollbarHandle = _classNameScrollbar + '-handle';\n\n      var _classNameScrollbarHandleOff = _classNameScrollbarHandle + '-off';\n\n      var _classNameScrollbarUnusable = _classNameScrollbar + '-unusable';\n\n      var _classNameScrollbarAutoHidden = _classNameScrollbar + '-' + _strAuto + _strMinusHidden;\n\n      var _classNameScrollbarCorner = _classNameScrollbar + '-corner';\n\n      var _classNameScrollbarCornerResize = _classNameScrollbarCorner + '-resize';\n\n      var _classNameScrollbarCornerResizeB = _classNameScrollbarCornerResize + '-both';\n\n      var _classNameScrollbarCornerResizeH = _classNameScrollbarCornerResize + _strMinusHorizontal;\n\n      var _classNameScrollbarCornerResizeV = _classNameScrollbarCornerResize + _strMinusVertical;\n\n      var _classNameScrollbarHorizontal = _classNameScrollbar + _strMinusHorizontal;\n\n      var _classNameScrollbarVertical = _classNameScrollbar + _strMinusVertical;\n\n      var _classNameDragging = _cassNamesPrefix + 'dragging';\n\n      var _classNameThemeNone = _cassNamesPrefix + 'theme-none';\n\n      var _classNamesDynamicDestroy = [_classNameViewportNativeScrollbarsInvisible, _classNameViewportNativeScrollbarsOverlaid, _classNameScrollbarTrackOff, _classNameScrollbarHandleOff, _classNameScrollbarUnusable, _classNameScrollbarAutoHidden, _classNameScrollbarCornerResize, _classNameScrollbarCornerResizeB, _classNameScrollbarCornerResizeH, _classNameScrollbarCornerResizeV, _classNameDragging].join(_strSpace); //callbacks:\t\n\n\n      var _callbacksInitQeueue = []; //attrs viewport shall inherit from target\t\n\n      var _viewportAttrsFromTarget = [LEXICON.ti]; //options:\t\n\n      var _defaultOptions;\n\n      var _currentOptions;\n\n      var _currentPreparedOptions; //extensions:\t\n\n\n      var _extensions = {};\n      var _extensionsPrivateMethods = 'added removed on contract'; //update\t\n\n      var _lastUpdateTime;\n\n      var _swallowedUpdateHints = {};\n\n      var _swallowedUpdateTimeout;\n\n      var _swallowUpdateLag = 42;\n      var _updateOnLoadEventName = 'load';\n      var _updateOnLoadElms = []; //DOM elements:\t\n\n      var _windowElement;\n\n      var _documentElement;\n\n      var _htmlElement;\n\n      var _bodyElement;\n\n      var _targetElement; //the target element of this OverlayScrollbars object\t\n\n\n      var _hostElement; //the host element of this OverlayScrollbars object -> may be the same as targetElement\t\n\n\n      var _sizeAutoObserverElement; //observes size auto changes\t\n\n\n      var _sizeObserverElement; //observes size and padding changes\t\n\n\n      var _paddingElement; //manages the padding\t\n\n\n      var _viewportElement; //is the viewport of our scrollbar model\t\n\n\n      var _contentElement; //the element which holds the content\t\n\n\n      var _contentArrangeElement; //is needed for correct sizing of the content element (only if native scrollbars are overlays)\t\n\n\n      var _contentGlueElement; //has always the size of the content element\t\n\n\n      var _textareaCoverElement; //only applied if target is a textarea element. Used for correct size calculation and for prevention of uncontrolled scrolling\t\n\n\n      var _scrollbarCornerElement;\n\n      var _scrollbarHorizontalElement;\n\n      var _scrollbarHorizontalTrackElement;\n\n      var _scrollbarHorizontalHandleElement;\n\n      var _scrollbarVerticalElement;\n\n      var _scrollbarVerticalTrackElement;\n\n      var _scrollbarVerticalHandleElement;\n\n      var _windowElementNative;\n\n      var _documentElementNative;\n\n      var _targetElementNative;\n\n      var _hostElementNative;\n\n      var _sizeAutoObserverElementNative;\n\n      var _sizeObserverElementNative;\n\n      var _paddingElementNative;\n\n      var _viewportElementNative;\n\n      var _contentElementNative; //Cache:\t\n\n\n      var _hostSizeCache;\n\n      var _contentScrollSizeCache;\n\n      var _arrangeContentSizeCache;\n\n      var _hasOverflowCache;\n\n      var _hideOverflowCache;\n\n      var _widthAutoCache;\n\n      var _heightAutoCache;\n\n      var _cssBoxSizingCache;\n\n      var _cssPaddingCache;\n\n      var _cssBorderCache;\n\n      var _cssMarginCache;\n\n      var _cssDirectionCache;\n\n      var _cssDirectionDetectedCache;\n\n      var _paddingAbsoluteCache;\n\n      var _clipAlwaysCache;\n\n      var _contentGlueSizeCache;\n\n      var _overflowBehaviorCache;\n\n      var _overflowAmountCache;\n\n      var _ignoreOverlayScrollbarHidingCache;\n\n      var _autoUpdateCache;\n\n      var _sizeAutoCapableCache;\n\n      var _contentElementScrollSizeChangeDetectedCache;\n\n      var _hostElementSizeChangeDetectedCache;\n\n      var _scrollbarsVisibilityCache;\n\n      var _scrollbarsAutoHideCache;\n\n      var _scrollbarsClickScrollingCache;\n\n      var _scrollbarsDragScrollingCache;\n\n      var _resizeCache;\n\n      var _normalizeRTLCache;\n\n      var _classNameCache;\n\n      var _oldClassName;\n\n      var _textareaAutoWrappingCache;\n\n      var _textareaInfoCache;\n\n      var _textareaSizeCache;\n\n      var _textareaDynHeightCache;\n\n      var _textareaDynWidthCache;\n\n      var _bodyMinSizeCache;\n\n      var _updateAutoCache = {}; //MutationObserver:\t\n\n      var _mutationObserverHost;\n\n      var _mutationObserverContent;\n\n      var _mutationObserverHostCallback;\n\n      var _mutationObserverContentCallback;\n\n      var _mutationObserversConnected;\n\n      var _mutationObserverAttrsTextarea = ['wrap', 'cols', 'rows'];\n\n      var _mutationObserverAttrsHost = [LEXICON.i, LEXICON.c, LEXICON.s, 'open'].concat(_viewportAttrsFromTarget); //events:\t\n\n\n      var _destroyEvents = []; //textarea:\t\n\n      var _textareaHasFocus; //scrollbars:\t\n\n\n      var _scrollbarsAutoHideTimeoutId;\n\n      var _scrollbarsAutoHideMoveTimeoutId;\n\n      var _scrollbarsAutoHideDelay;\n\n      var _scrollbarsAutoHideNever;\n\n      var _scrollbarsAutoHideScroll;\n\n      var _scrollbarsAutoHideMove;\n\n      var _scrollbarsAutoHideLeave;\n\n      var _scrollbarsHandleHovered;\n\n      var _scrollbarsHandlesDefineScrollPos; //resize\t\n\n\n      var _resizeNone;\n\n      var _resizeBoth;\n\n      var _resizeHorizontal;\n\n      var _resizeVertical; //==== Event Listener ====//\t\n\n      /**\t\r\n       * Adds or removes a event listener from the given element. \t\r\n       * @param element The element to which the event listener shall be applied or removed.\t\r\n       * @param eventNames The name(s) of the events.\t\r\n       * @param listener The method which shall be called.\t\r\n       * @param remove True if the handler shall be removed, false or undefined if the handler shall be added.\t\r\n       */\n\n\n      function setupResponsiveEventListener(element, eventNames, listener, remove, passive) {\n        var collected = COMPATIBILITY.isA(eventNames) && COMPATIBILITY.isA(listener);\n        var method = remove ? 'removeEventListener' : 'addEventListener';\n        var onOff = remove ? 'off' : 'on';\n        var events = collected ? false : eventNames.split(_strSpace);\n        var i = 0;\n\n        if (collected) {\n          for (; i < eventNames[LEXICON.l]; i++) setupResponsiveEventListener(element, eventNames[i], listener[i], remove);\n        } else {\n          for (; i < events[LEXICON.l]; i++) {\n            if (_supportPassiveEvents) element[0][method](events[i], listener, {\n              passive: passive || false\n            });else element[onOff](events[i], listener);\n          }\n        }\n      }\n\n      function addDestroyEventListener(element, eventNames, listener, passive) {\n        setupResponsiveEventListener(element, eventNames, listener, false, passive);\n\n        _destroyEvents.push(COMPATIBILITY.bind(setupResponsiveEventListener, 0, element, eventNames, listener, true, passive));\n      } //==== Resize Observer ====//\n\n      /**\r\n       * Adds or removes a resize observer from the given element.\r\n       * @param targetElement The element to which the resize observer shall be added or removed.\r\n       * @param onElementResizedCallback The callback which is fired every time the resize observer registers a size change or false / undefined if the resizeObserver shall be removed.\r\n       */\n\n\n      function setupResizeObserver(targetElement, onElementResizedCallback) {\n        if (targetElement) {\n          var resizeObserver = COMPATIBILITY.rO();\n          var strAnimationStartEvent = 'animationstart mozAnimationStart webkitAnimationStart MSAnimationStart';\n          var strChildNodes = 'childNodes';\n          var constScroll = 3333333;\n\n          var callback = function () {\n            targetElement[_strScrollTop](constScroll)[_strScrollLeft](_isRTL ? _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll : constScroll);\n\n            onElementResizedCallback();\n          }; //add resize observer:\n\n\n          if (onElementResizedCallback) {\n            if (_supportResizeObserver) {\n              var element = targetElement.addClass('observed').append(generateDiv(_classNameResizeObserverElement)).contents()[0];\n              var observer = element[_strResizeObserverProperty] = new resizeObserver(callback);\n              observer.observe(element);\n            } else {\n              if (_msieVersion > 9 || !_autoUpdateRecommended) {\n                targetElement.prepend(generateDiv(_classNameResizeObserverElement, generateDiv({\n                  c: _classNameResizeObserverItemElement,\n                  dir: 'ltr'\n                }, generateDiv(_classNameResizeObserverItemElement, generateDiv(_classNameResizeObserverItemFinalElement)) + generateDiv(_classNameResizeObserverItemElement, generateDiv({\n                  c: _classNameResizeObserverItemFinalElement,\n                  style: 'width: 200%; height: 200%'\n                })))));\n                var observerElement = targetElement[0][strChildNodes][0][strChildNodes][0];\n                var shrinkElement = FRAMEWORK(observerElement[strChildNodes][1]);\n                var expandElement = FRAMEWORK(observerElement[strChildNodes][0]);\n                var expandElementChild = FRAMEWORK(expandElement[0][strChildNodes][0]);\n                var widthCache = observerElement[LEXICON.oW];\n                var heightCache = observerElement[LEXICON.oH];\n                var isDirty;\n                var rAFId;\n                var currWidth;\n                var currHeight;\n                var factor = 2;\n                var nativeScrollbarSize = globals.nativeScrollbarSize; //care don't make changes to this object!!!\n\n                var reset = function () {\n                  /*\r\n                   var sizeResetWidth = observerElement[LEXICON.oW] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                   var sizeResetHeight = observerElement[LEXICON.oH] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                   var expandChildCSS = {};\r\n                   expandChildCSS[_strWidth] = sizeResetWidth;\r\n                   expandChildCSS[_strHeight] = sizeResetHeight;\r\n                   expandElementChild.css(expandChildCSS);\r\n                       expandElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                   shrinkElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                   */\n                  expandElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\n\n                  shrinkElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\n                };\n\n                var onResized = function () {\n                  rAFId = 0;\n                  if (!isDirty) return;\n                  widthCache = currWidth;\n                  heightCache = currHeight;\n                  callback();\n                };\n\n                var onScroll = function (event) {\n                  currWidth = observerElement[LEXICON.oW];\n                  currHeight = observerElement[LEXICON.oH];\n                  isDirty = currWidth != widthCache || currHeight != heightCache;\n\n                  if (event && isDirty && !rAFId) {\n                    COMPATIBILITY.cAF()(rAFId);\n                    rAFId = COMPATIBILITY.rAF()(onResized);\n                  } else if (!event) onResized();\n\n                  reset();\n\n                  if (event) {\n                    COMPATIBILITY.prvD(event);\n                    COMPATIBILITY.stpP(event);\n                  }\n\n                  return false;\n                };\n\n                var expandChildCSS = {};\n                var observerElementCSS = {};\n                setTopRightBottomLeft(observerElementCSS, _strEmpty, [-((nativeScrollbarSize.y + 1) * factor), nativeScrollbarSize.x * -factor, nativeScrollbarSize.y * -factor, -((nativeScrollbarSize.x + 1) * factor)]);\n                FRAMEWORK(observerElement).css(observerElementCSS);\n                expandElement.on(_strScroll, onScroll);\n                shrinkElement.on(_strScroll, onScroll);\n                targetElement.on(strAnimationStartEvent, function () {\n                  onScroll(false);\n                }); //lets assume that the divs will never be that large and a constant value is enough\n\n                expandChildCSS[_strWidth] = constScroll;\n                expandChildCSS[_strHeight] = constScroll;\n                expandElementChild.css(expandChildCSS);\n                reset();\n              } else {\n                var attachEvent = _documentElementNative.attachEvent;\n                var isIE = _msieVersion !== undefined;\n\n                if (attachEvent) {\n                  targetElement.prepend(generateDiv(_classNameResizeObserverElement));\n                  findFirst(targetElement, _strDot + _classNameResizeObserverElement)[0].attachEvent('onresize', callback);\n                } else {\n                  var obj = _documentElementNative.createElement(TYPES.o);\n\n                  obj.setAttribute(LEXICON.ti, '-1');\n                  obj.setAttribute(LEXICON.c, _classNameResizeObserverElement);\n\n                  obj.onload = function () {\n                    var wnd = this.contentDocument.defaultView;\n                    wnd.addEventListener('resize', callback);\n                    wnd.document.documentElement.style.display = 'none';\n                  };\n\n                  obj.type = 'text/html';\n                  if (isIE) targetElement.prepend(obj);\n                  obj.data = 'about:blank';\n                  if (!isIE) targetElement.prepend(obj);\n                  targetElement.on(strAnimationStartEvent, callback);\n                }\n              }\n            }\n\n            if (targetElement[0] === _sizeObserverElementNative) {\n              var directionChanged = function () {\n                var dir = _hostElement.css('direction');\n\n                var css = {};\n                var scrollLeftValue = 0;\n                var result = false;\n\n                if (dir !== _cssDirectionDetectedCache) {\n                  if (dir === 'ltr') {\n                    css[_strLeft] = 0;\n                    css[_strRight] = _strAuto;\n                    scrollLeftValue = constScroll;\n                  } else {\n                    css[_strLeft] = _strAuto;\n                    css[_strRight] = 0;\n                    scrollLeftValue = _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll;\n                  } //execution order is important for IE!!!\n\n\n                  _sizeObserverElement.children().eq(0).css(css);\n\n                  _sizeObserverElement[_strScrollLeft](scrollLeftValue)[_strScrollTop](constScroll);\n\n                  _cssDirectionDetectedCache = dir;\n                  result = true;\n                }\n\n                return result;\n              };\n\n              directionChanged();\n              addDestroyEventListener(targetElement, _strScroll, function (event) {\n                if (directionChanged()) update();\n                COMPATIBILITY.prvD(event);\n                COMPATIBILITY.stpP(event);\n                return false;\n              });\n            }\n          } //remove resize observer:\n          else {\n              if (_supportResizeObserver) {\n                var element = targetElement.contents()[0];\n                var resizeObserverObj = element[_strResizeObserverProperty];\n\n                if (resizeObserverObj) {\n                  resizeObserverObj.disconnect();\n                  delete element[_strResizeObserverProperty];\n                }\n              } else {\n                remove(targetElement.children(_strDot + _classNameResizeObserverElement).eq(0));\n              }\n            }\n        }\n      }\n      /**\r\n       * Freezes or unfreezes the given resize observer.\r\n       * @param targetElement The element to which the target resize observer is applied.\r\n       * @param freeze True if the resize observer shall be frozen, false otherwise.\r\n       \r\n      function freezeResizeObserver(targetElement, freeze) {\r\n          if (targetElement !== undefined) {\r\n              if(freeze) {\r\n                  if (_supportResizeObserver) {\r\n                      var element = targetElement.contents()[0];\r\n                      element[_strResizeObserverProperty].unobserve(element);\r\n                  }\r\n                  else {\r\n                      targetElement = targetElement.children(_strDot + _classNameResizeObserverElement).eq(0);\r\n                      var w = targetElement.css(_strWidth);\r\n                      var h = targetElement.css(_strHeight);\r\n                      var css = {};\r\n                      css[_strWidth] = w;\r\n                      css[_strHeight] = h;\r\n                      targetElement.css(css);\r\n                  }\r\n              }\r\n              else {\r\n                  if (_supportResizeObserver) {\r\n                      var element = targetElement.contents()[0];\r\n                      element[_strResizeObserverProperty].observe(element);\r\n                  }\r\n                  else {\r\n                      var css = { };\r\n                      css[_strHeight] = _strEmpty;\r\n                      css[_strWidth] = _strEmpty;\r\n                      targetElement.children(_strDot + _classNameResizeObserverElement).eq(0).css(css);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      */\n      //==== Mutation Observers ====//\n\n      /**\r\n       * Creates MutationObservers for the host and content Element if they are supported.\r\n       */\n\n\n      function createMutationObservers() {\n        if (_supportMutationObserver) {\n          var mutationObserverContentLag = 11;\n          var mutationObserver = COMPATIBILITY.mO();\n          var contentLastUpdate = COMPATIBILITY.now();\n          var mutationTarget;\n          var mutationAttrName;\n          var mutationIsClass;\n          var oldMutationVal;\n          var newClassVal;\n          var hostClassNameRegex;\n          var contentTimeout;\n          var now;\n          var sizeAuto;\n          var action;\n\n          _mutationObserverHostCallback = function (mutations) {\n            var doUpdate = false;\n            var doUpdateForce = false;\n            var mutation;\n            var mutatedAttrs = [];\n\n            if (_initialized && !_sleeping) {\n              each(mutations, function () {\n                mutation = this;\n                mutationTarget = mutation.target;\n                mutationAttrName = mutation.attributeName;\n                mutationIsClass = mutationAttrName === LEXICON.c;\n                oldMutationVal = mutation.oldValue;\n                newClassVal = mutationTarget.className;\n\n                if (_domExists && mutationIsClass && !doUpdateForce) {\n                  // if old class value contains _classNameHostElementForeign and new class value doesn't\n                  if (oldMutationVal.indexOf(_classNameHostElementForeign) > -1 && newClassVal.indexOf(_classNameHostElementForeign) < 0) {\n                    hostClassNameRegex = createHostClassNameRegExp(true);\n                    _hostElementNative.className = newClassVal.split(_strSpace).concat(oldMutationVal.split(_strSpace).filter(function (name) {\n                      return name.match(hostClassNameRegex);\n                    })).join(_strSpace);\n                    doUpdate = doUpdateForce = true;\n                  }\n                }\n\n                if (!doUpdate) {\n                  doUpdate = mutationIsClass ? hostClassNamesChanged(oldMutationVal, newClassVal) : mutationAttrName === LEXICON.s ? oldMutationVal !== mutationTarget[LEXICON.s].cssText : true;\n                }\n\n                mutatedAttrs.push(mutationAttrName);\n              });\n              updateViewportAttrsFromTarget(mutatedAttrs);\n              if (doUpdate) _base.update(doUpdateForce || _strAuto);\n            }\n\n            return doUpdate;\n          };\n\n          _mutationObserverContentCallback = function (mutations) {\n            var doUpdate = false;\n            var mutation;\n\n            if (_initialized && !_sleeping) {\n              each(mutations, function () {\n                mutation = this;\n                doUpdate = isUnknownMutation(mutation);\n                return !doUpdate;\n              });\n\n              if (doUpdate) {\n                now = COMPATIBILITY.now();\n                sizeAuto = _heightAutoCache || _widthAutoCache;\n\n                action = function () {\n                  if (!_destroyed) {\n                    contentLastUpdate = now; //if cols, rows or wrap attr was changed\n\n                    if (_isTextarea) textareaUpdate();\n                    if (sizeAuto) update();else _base.update(_strAuto);\n                  }\n                };\n\n                clearTimeout(contentTimeout);\n                if (mutationObserverContentLag <= 0 || now - contentLastUpdate > mutationObserverContentLag || !sizeAuto) action();else contentTimeout = setTimeout(action, mutationObserverContentLag);\n              }\n            }\n\n            return doUpdate;\n          };\n\n          _mutationObserverHost = new mutationObserver(_mutationObserverHostCallback);\n          _mutationObserverContent = new mutationObserver(_mutationObserverContentCallback);\n        }\n      }\n      /**\r\n       * Connects the MutationObservers if they are supported.\r\n       */\n\n\n      function connectMutationObservers() {\n        if (_supportMutationObserver && !_mutationObserversConnected) {\n          _mutationObserverHost.observe(_hostElementNative, {\n            attributes: true,\n            attributeOldValue: true,\n            attributeFilter: _mutationObserverAttrsHost\n          });\n\n          _mutationObserverContent.observe(_isTextarea ? _targetElementNative : _contentElementNative, {\n            attributes: true,\n            attributeOldValue: true,\n            subtree: !_isTextarea,\n            childList: !_isTextarea,\n            characterData: !_isTextarea,\n            attributeFilter: _isTextarea ? _mutationObserverAttrsTextarea : _mutationObserverAttrsHost\n          });\n\n          _mutationObserversConnected = true;\n        }\n      }\n      /**\r\n       * Disconnects the MutationObservers if they are supported.\r\n       */\n\n\n      function disconnectMutationObservers() {\n        if (_supportMutationObserver && _mutationObserversConnected) {\n          _mutationObserverHost.disconnect();\n\n          _mutationObserverContent.disconnect();\n\n          _mutationObserversConnected = false;\n        }\n      } //==== Events of elements ====//\n\n      /**\r\n       * This method gets called every time the host element gets resized. IMPORTANT: Padding changes are detected too!!\r\n       * It refreshes the hostResizedEventArgs and the hostSizeResizeCache.\r\n       * If there are any size changes, the update method gets called.\r\n       */\n\n\n      function hostOnResized() {\n        if (!_sleeping) {\n          var changed;\n          var hostSize = {\n            w: _sizeObserverElementNative[LEXICON.sW],\n            h: _sizeObserverElementNative[LEXICON.sH]\n          };\n          changed = checkCache(hostSize, _hostElementSizeChangeDetectedCache);\n          _hostElementSizeChangeDetectedCache = hostSize;\n          if (changed) update({\n            _hostSizeChanged: true\n          });\n        }\n      }\n      /**\r\n       * The mouse enter event of the host element. This event is only needed for the autoHide feature.\r\n       */\n\n\n      function hostOnMouseEnter() {\n        if (_scrollbarsAutoHideLeave) refreshScrollbarsAutoHide(true);\n      }\n      /**\r\n       * The mouse leave event of the host element. This event is only needed for the autoHide feature.\r\n       */\n\n\n      function hostOnMouseLeave() {\n        if (_scrollbarsAutoHideLeave && !_bodyElement.hasClass(_classNameDragging)) refreshScrollbarsAutoHide(false);\n      }\n      /**\r\n       * The mouse move event of the host element. This event is only needed for the autoHide \"move\" feature.\r\n       */\n\n\n      function hostOnMouseMove() {\n        if (_scrollbarsAutoHideMove) {\n          refreshScrollbarsAutoHide(true);\n          clearTimeout(_scrollbarsAutoHideMoveTimeoutId);\n          _scrollbarsAutoHideMoveTimeoutId = setTimeout(function () {\n            if (_scrollbarsAutoHideMove && !_destroyed) refreshScrollbarsAutoHide(false);\n          }, 100);\n        }\n      }\n      /**\r\n       * Prevents text from deselection if attached to the document element on the mousedown event of a DOM element.\r\n       * @param event The select start event.\r\n       */\n\n\n      function documentOnSelectStart(event) {\n        COMPATIBILITY.prvD(event);\n        return false;\n      }\n      /**\t\r\n       * A callback which will be called after a element has loaded.\t\r\n       */\n\n\n      function updateOnLoadCallback(event) {\n        var elm = FRAMEWORK(event.target);\n        eachUpdateOnLoad(function (i, updateOnLoadSelector) {\n          if (elm.is(updateOnLoadSelector)) {\n            update({\n              _contentSizeChanged: true\n            });\n          }\n        });\n      }\n      /**\r\n      * Adds or removes mouse & touch events of the host element. (for handling auto-hiding of the scrollbars)\r\n      * @param destroy Indicates whether the events shall be added or removed.\r\n      */\n\n\n      function setupHostMouseTouchEvents(destroy) {\n        if (!destroy) setupHostMouseTouchEvents(true);\n        setupResponsiveEventListener(_hostElement, _strMouseTouchMoveEvent.split(_strSpace)[0], hostOnMouseMove, !_scrollbarsAutoHideMove || destroy, true);\n        setupResponsiveEventListener(_hostElement, [_strMouseEnter, _strMouseLeave], [hostOnMouseEnter, hostOnMouseLeave], !_scrollbarsAutoHideLeave || destroy, true); //if the plugin is initialized and the mouse is over the host element, make the scrollbars visible\n\n        if (!_initialized && !destroy) _hostElement.one('mouseover', hostOnMouseEnter);\n      } //==== Update Detection ====//\n\n      /**\r\n       * Measures the min width and min height of the body element and refreshes the related cache.\r\n       * @returns {boolean} True if the min width or min height has changed, false otherwise.\r\n       */\n\n\n      function bodyMinSizeChanged() {\n        var bodyMinSize = {};\n\n        if (_isBody && _contentArrangeElement) {\n          bodyMinSize.w = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strWidth));\n          bodyMinSize.h = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strHeight));\n          bodyMinSize.c = checkCache(bodyMinSize, _bodyMinSizeCache);\n          bodyMinSize.f = true; //flag for \"measured at least once\"\n        }\n\n        _bodyMinSizeCache = bodyMinSize;\n        return !!bodyMinSize.c;\n      }\n      /**\r\n       * Returns true if the class names really changed (new class without plugin host prefix)\r\n       * @param oldClassNames The old ClassName string or array.\r\n       * @param newClassNames The new ClassName string or array.\r\n       * @returns {boolean} True if the class names has really changed, false otherwise.\r\n       */\n\n\n      function hostClassNamesChanged(oldClassNames, newClassNames) {\n        var currClasses = typeof newClassNames == TYPES.s ? newClassNames.split(_strSpace) : [];\n        var oldClasses = typeof oldClassNames == TYPES.s ? oldClassNames.split(_strSpace) : [];\n        var diff = getArrayDifferences(oldClasses, currClasses); // remove none theme from diff list to prevent update\n\n        var idx = inArray(_classNameThemeNone, diff);\n        var i;\n        var regex;\n        if (idx > -1) diff.splice(idx, 1);\n\n        if (diff[LEXICON.l] > 0) {\n          regex = createHostClassNameRegExp(true, true);\n\n          for (i = 0; i < diff.length; i++) {\n            if (!diff[i].match(regex)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n      /**\r\n       * Returns true if the given mutation is not from a from the plugin generated element. If the target element is a textarea the mutation is always unknown.\r\n       * @param mutation The mutation which shall be checked.\r\n       * @returns {boolean} True if the mutation is from a unknown element, false otherwise.\r\n       */\n\n\n      function isUnknownMutation(mutation) {\n        var attributeName = mutation.attributeName;\n        var mutationTarget = mutation.target;\n        var mutationType = mutation.type;\n        var strClosest = 'closest';\n        if (mutationTarget === _contentElementNative) return attributeName === null;\n\n        if (mutationType === 'attributes' && (attributeName === LEXICON.c || attributeName === LEXICON.s) && !_isTextarea) {\n          //ignore className changes by the plugin\t\n          if (attributeName === LEXICON.c && FRAMEWORK(mutationTarget).hasClass(_classNameHostElement)) return hostClassNamesChanged(mutation.oldValue, mutationTarget.className); //only do it of browser support it natively\t\n\n          if (typeof mutationTarget[strClosest] != TYPES.f) return true;\n          if (mutationTarget[strClosest](_strDot + _classNameResizeObserverElement) !== null || mutationTarget[strClosest](_strDot + _classNameScrollbar) !== null || mutationTarget[strClosest](_strDot + _classNameScrollbarCorner) !== null) return false;\n        }\n\n        return true;\n      }\n      /**\r\n       * Returns true if the content size was changed since the last time this method was called.\r\n       * @returns {boolean} True if the content size was changed, false otherwise.\r\n       */\n\n\n      function updateAutoContentSizeChanged() {\n        if (_sleeping) return false;\n        var contentMeasureElement = getContentMeasureElement();\n        var textareaValueLength = _isTextarea && _widthAutoCache && !_textareaAutoWrappingCache ? _targetElement.val().length : 0;\n        var setCSS = !_mutationObserversConnected && _widthAutoCache && !_isTextarea;\n        var css = {};\n        var float;\n        var bodyMinSizeC;\n        var changed;\n        var contentElementScrollSize;\n\n        if (setCSS) {\n          float = _contentElement.css(_strFloat);\n          css[_strFloat] = _isRTL ? _strRight : _strLeft;\n          css[_strWidth] = _strAuto;\n\n          _contentElement.css(css);\n        }\n\n        contentElementScrollSize = {\n          w: contentMeasureElement[LEXICON.sW] + textareaValueLength,\n          h: contentMeasureElement[LEXICON.sH] + textareaValueLength\n        };\n\n        if (setCSS) {\n          css[_strFloat] = float;\n          css[_strWidth] = _strHundredPercent;\n\n          _contentElement.css(css);\n        }\n\n        bodyMinSizeC = bodyMinSizeChanged();\n        changed = checkCache(contentElementScrollSize, _contentElementScrollSizeChangeDetectedCache);\n        _contentElementScrollSizeChangeDetectedCache = contentElementScrollSize;\n        return changed || bodyMinSizeC;\n      }\n      /**\r\n       * Returns true when a attribute which the MutationObserver would observe has changed.  \r\n       * @returns {boolean} True if one of the attributes which a MutationObserver would observe has changed, false or undefined otherwise.\r\n       */\n\n\n      function meaningfulAttrsChanged() {\n        if (_sleeping || _mutationObserversConnected) return;\n        var elem;\n        var curr;\n        var cache;\n        var changedAttrs = [];\n        var checks = [{\n          _elem: _hostElement,\n          _attrs: _mutationObserverAttrsHost.concat(':visible')\n        }, {\n          _elem: _isTextarea ? _targetElement : undefined,\n          _attrs: _mutationObserverAttrsTextarea\n        }];\n        each(checks, function (index, check) {\n          elem = check._elem;\n\n          if (elem) {\n            each(check._attrs, function (index, attr) {\n              curr = attr.charAt(0) === ':' ? elem.is(attr) : elem.attr(attr);\n              cache = _updateAutoCache[attr];\n\n              if (checkCache(curr, cache)) {\n                changedAttrs.push(attr);\n              }\n\n              _updateAutoCache[attr] = curr;\n            });\n          }\n        });\n        updateViewportAttrsFromTarget(changedAttrs);\n        return changedAttrs[LEXICON.l] > 0;\n      }\n      /**\r\n       * Checks is a CSS Property of a child element is affecting the scroll size of the content.\r\n       * @param propertyName The CSS property name.\r\n       * @returns {boolean} True if the property is affecting the content scroll size, false otherwise.\r\n       */\n\n\n      function isSizeAffectingCSSProperty(propertyName) {\n        if (!_initialized) return true;\n        var flexGrow = 'flex-grow';\n        var flexShrink = 'flex-shrink';\n        var flexBasis = 'flex-basis';\n        var affectingPropsX = [_strWidth, _strMinMinus + _strWidth, _strMaxMinus + _strWidth, _strMarginMinus + _strLeft, _strMarginMinus + _strRight, _strLeft, _strRight, 'font-weight', 'word-spacing', flexGrow, flexShrink, flexBasis];\n        var affectingPropsXContentBox = [_strPaddingMinus + _strLeft, _strPaddingMinus + _strRight, _strBorderMinus + _strLeft + _strWidth, _strBorderMinus + _strRight + _strWidth];\n        var affectingPropsY = [_strHeight, _strMinMinus + _strHeight, _strMaxMinus + _strHeight, _strMarginMinus + _strTop, _strMarginMinus + _strBottom, _strTop, _strBottom, 'line-height', flexGrow, flexShrink, flexBasis];\n        var affectingPropsYContentBox = [_strPaddingMinus + _strTop, _strPaddingMinus + _strBottom, _strBorderMinus + _strTop + _strWidth, _strBorderMinus + _strBottom + _strWidth];\n        var _strS = 's';\n        var _strVS = 'v-s';\n        var checkX = _overflowBehaviorCache.x === _strS || _overflowBehaviorCache.x === _strVS;\n        var checkY = _overflowBehaviorCache.y === _strS || _overflowBehaviorCache.y === _strVS;\n        var sizeIsAffected = false;\n\n        var checkPropertyName = function (arr, name) {\n          for (var i = 0; i < arr[LEXICON.l]; i++) {\n            if (arr[i] === name) return true;\n          }\n\n          return false;\n        };\n\n        if (checkY) {\n          sizeIsAffected = checkPropertyName(affectingPropsY, propertyName);\n          if (!sizeIsAffected && !_isBorderBox) sizeIsAffected = checkPropertyName(affectingPropsYContentBox, propertyName);\n        }\n\n        if (checkX && !sizeIsAffected) {\n          sizeIsAffected = checkPropertyName(affectingPropsX, propertyName);\n          if (!sizeIsAffected && !_isBorderBox) sizeIsAffected = checkPropertyName(affectingPropsXContentBox, propertyName);\n        }\n\n        return sizeIsAffected;\n      } //==== Update ====//\n\n      /**\r\n       * Sets the attribute values of the viewport element to the values from the target element.\r\n       * The value of a attribute is only set if the attribute is whitelisted.\r\n       * @attrs attrs The array of attributes which shall be set or undefined if all whitelisted shall be set.\r\n       */\n\n\n      function updateViewportAttrsFromTarget(attrs) {\n        attrs = attrs || _viewportAttrsFromTarget;\n        each(attrs, function (index, attr) {\n          if (COMPATIBILITY.inA(attr, _viewportAttrsFromTarget) > -1) {\n            var targetAttr = _targetElement.attr(attr);\n\n            if (type(targetAttr) == TYPES.s) {\n              _viewportElement.attr(attr, targetAttr);\n            } else {\n              _viewportElement.removeAttr(attr);\n            }\n          }\n        });\n      }\n      /**\r\n       * Updates the variables and size of the textarea element, and manages the scroll on new line or new character.\r\n       */\n\n\n      function textareaUpdate() {\n        if (!_sleeping) {\n          var wrapAttrOff = !_textareaAutoWrappingCache;\n          var minWidth = _viewportSize.w;\n          var minHeight = _viewportSize.h;\n          var css = {};\n          var doMeasure = _widthAutoCache || wrapAttrOff;\n          var origWidth;\n          var width;\n          var origHeight;\n          var height; //reset min size\n\n          css[_strMinMinus + _strWidth] = _strEmpty;\n          css[_strMinMinus + _strHeight] = _strEmpty; //set width auto\n\n          css[_strWidth] = _strAuto;\n\n          _targetElement.css(css); //measure width\n\n\n          origWidth = _targetElementNative[LEXICON.oW];\n          width = doMeasure ? MATH.max(origWidth, _targetElementNative[LEXICON.sW] - 1) : 1;\n          /*width += (_widthAutoCache ? _marginX + (!_isBorderBox ? wrapAttrOff ? 0 : _paddingX + _borderX : 0) : 0);*/\n          //set measured width\n\n          css[_strWidth] = _widthAutoCache ? _strAuto\n          /*width*/\n          : _strHundredPercent;\n          css[_strMinMinus + _strWidth] = _strHundredPercent; //set height auto\n\n          css[_strHeight] = _strAuto;\n\n          _targetElement.css(css); //measure height\n\n\n          origHeight = _targetElementNative[LEXICON.oH];\n          height = MATH.max(origHeight, _targetElementNative[LEXICON.sH] - 1); //append correct size values\n\n          css[_strWidth] = width;\n          css[_strHeight] = height;\n\n          _textareaCoverElement.css(css); //apply min width / min height to prevent textarea collapsing\n\n\n          css[_strMinMinus + _strWidth] = minWidth\n          /*+ (!_isBorderBox && _widthAutoCache ? _paddingX + _borderX : 0)*/\n          ;\n          css[_strMinMinus + _strHeight] = minHeight\n          /*+ (!_isBorderBox && _heightAutoCache ? _paddingY + _borderY : 0)*/\n          ;\n\n          _targetElement.css(css);\n\n          return {\n            _originalWidth: origWidth,\n            _originalHeight: origHeight,\n            _dynamicWidth: width,\n            _dynamicHeight: height\n          };\n        }\n      }\n      /**\r\n       * Updates the plugin and DOM to the current options.\r\n       * This method should only be called if a update is 100% required.\r\n       * @param updateHints A objects which contains hints for this update:\r\n       * {\r\n       *   _hostSizeChanged : boolean,\r\n       *   _contentSizeChanged : boolean,\r\n       *   _force : boolean,                             == preventSwallowing\r\n       *   _changedOptions : { },                        == preventSwallowing && preventSleep\r\n      *  }\r\n       */\n\n\n      function update(updateHints) {\n        clearTimeout(_swallowedUpdateTimeout);\n        updateHints = updateHints || {};\n        _swallowedUpdateHints._hostSizeChanged |= updateHints._hostSizeChanged;\n        _swallowedUpdateHints._contentSizeChanged |= updateHints._contentSizeChanged;\n        _swallowedUpdateHints._force |= updateHints._force;\n        var now = COMPATIBILITY.now();\n        var hostSizeChanged = !!_swallowedUpdateHints._hostSizeChanged;\n        var contentSizeChanged = !!_swallowedUpdateHints._contentSizeChanged;\n        var force = !!_swallowedUpdateHints._force;\n        var changedOptions = updateHints._changedOptions;\n        var swallow = _swallowUpdateLag > 0 && _initialized && !_destroyed && !force && !changedOptions && now - _lastUpdateTime < _swallowUpdateLag && !_heightAutoCache && !_widthAutoCache;\n        var displayIsHidden;\n        if (swallow) _swallowedUpdateTimeout = setTimeout(update, _swallowUpdateLag); //abort update due to:\n        //destroyed\n        //swallowing\n        //sleeping\n        //host is hidden or has false display\n\n        if (_destroyed || swallow || _sleeping && !changedOptions || _initialized && !force && (displayIsHidden = _hostElement.is(':hidden')) || _hostElement.css('display') === 'inline') return;\n        _lastUpdateTime = now;\n        _swallowedUpdateHints = {}; //if scrollbar styling is possible and native scrollbars aren't overlaid the scrollbar styling will be applied which hides the native scrollbars completely.\n\n        if (_nativeScrollbarStyling && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n          //native scrollbars are hidden, so change the values to zero\n          _nativeScrollbarSize.x = 0;\n          _nativeScrollbarSize.y = 0;\n        } else {\n          //refresh native scrollbar size (in case of zoom)\n          _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\n        } // Scrollbar padding is needed for firefox, because firefox hides scrollbar automatically if the size of the div is too small.\n        // The calculation: [scrollbar size +3 *3]\n        // (+3 because of possible decoration e.g. borders, margins etc., but only if native scrollbar is NOT a overlaid scrollbar)\n        // (*3 because (1)increase / (2)decrease -button and (3)resize handle)\n\n\n        _nativeScrollbarMinSize = {\n          x: (_nativeScrollbarSize.x + (_nativeScrollbarIsOverlaid.x ? 0 : 3)) * 3,\n          y: (_nativeScrollbarSize.y + (_nativeScrollbarIsOverlaid.y ? 0 : 3)) * 3\n        };\n        changedOptions = changedOptions || {}; //freezeResizeObserver(_sizeObserverElement, true);\n        //freezeResizeObserver(_sizeAutoObserverElement, true);\n\n        var checkCacheAutoForce = function () {\n          return checkCache.apply(this, [].slice.call(arguments).concat([force]));\n        }; //save current scroll offset\n\n\n        var currScroll = {\n          x: _viewportElement[_strScrollLeft](),\n          y: _viewportElement[_strScrollTop]()\n        };\n        var currentPreparedOptionsScrollbars = _currentPreparedOptions.scrollbars;\n        var currentPreparedOptionsTextarea = _currentPreparedOptions.textarea; //scrollbars visibility:\n\n        var scrollbarsVisibility = currentPreparedOptionsScrollbars.visibility;\n        var scrollbarsVisibilityChanged = checkCacheAutoForce(scrollbarsVisibility, _scrollbarsVisibilityCache); //scrollbars autoHide:\n\n        var scrollbarsAutoHide = currentPreparedOptionsScrollbars.autoHide;\n        var scrollbarsAutoHideChanged = checkCacheAutoForce(scrollbarsAutoHide, _scrollbarsAutoHideCache); //scrollbars click scrolling\n\n        var scrollbarsClickScrolling = currentPreparedOptionsScrollbars.clickScrolling;\n        var scrollbarsClickScrollingChanged = checkCacheAutoForce(scrollbarsClickScrolling, _scrollbarsClickScrollingCache); //scrollbars drag scrolling\n\n        var scrollbarsDragScrolling = currentPreparedOptionsScrollbars.dragScrolling;\n        var scrollbarsDragScrollingChanged = checkCacheAutoForce(scrollbarsDragScrolling, _scrollbarsDragScrollingCache); //className\n\n        var className = _currentPreparedOptions.className;\n        var classNameChanged = checkCacheAutoForce(className, _classNameCache); //resize\n\n        var resize = _currentPreparedOptions.resize;\n        var resizeChanged = checkCacheAutoForce(resize, _resizeCache) && !_isBody; //body can't be resized since the window itself acts as resize possibility.\n        //paddingAbsolute\n\n        var paddingAbsolute = _currentPreparedOptions.paddingAbsolute;\n        var paddingAbsoluteChanged = checkCacheAutoForce(paddingAbsolute, _paddingAbsoluteCache); //clipAlways\n\n        var clipAlways = _currentPreparedOptions.clipAlways;\n        var clipAlwaysChanged = checkCacheAutoForce(clipAlways, _clipAlwaysCache); //sizeAutoCapable\n\n        var sizeAutoCapable = _currentPreparedOptions.sizeAutoCapable && !_isBody; //body can never be size auto, because it shall be always as big as the viewport.\n\n        var sizeAutoCapableChanged = checkCacheAutoForce(sizeAutoCapable, _sizeAutoCapableCache); //showNativeScrollbars\n\n        var ignoreOverlayScrollbarHiding = _currentPreparedOptions.nativeScrollbarsOverlaid.showNativeScrollbars;\n        var ignoreOverlayScrollbarHidingChanged = checkCacheAutoForce(ignoreOverlayScrollbarHiding, _ignoreOverlayScrollbarHidingCache); //autoUpdate\n\n        var autoUpdate = _currentPreparedOptions.autoUpdate;\n        var autoUpdateChanged = checkCacheAutoForce(autoUpdate, _autoUpdateCache); //overflowBehavior\n\n        var overflowBehavior = _currentPreparedOptions.overflowBehavior;\n        var overflowBehaviorChanged = checkCacheAutoForce(overflowBehavior, _overflowBehaviorCache, force); //dynWidth:\n\n        var textareaDynWidth = currentPreparedOptionsTextarea.dynWidth;\n        var textareaDynWidthChanged = checkCacheAutoForce(_textareaDynWidthCache, textareaDynWidth); //dynHeight:\n\n        var textareaDynHeight = currentPreparedOptionsTextarea.dynHeight;\n        var textareaDynHeightChanged = checkCacheAutoForce(_textareaDynHeightCache, textareaDynHeight); //scrollbars visibility\n\n        _scrollbarsAutoHideNever = scrollbarsAutoHide === 'n';\n        _scrollbarsAutoHideScroll = scrollbarsAutoHide === 's';\n        _scrollbarsAutoHideMove = scrollbarsAutoHide === 'm';\n        _scrollbarsAutoHideLeave = scrollbarsAutoHide === 'l'; //scrollbars autoHideDelay\n\n        _scrollbarsAutoHideDelay = currentPreparedOptionsScrollbars.autoHideDelay; //old className\n\n        _oldClassName = _classNameCache; //resize\n\n        _resizeNone = resize === 'n';\n        _resizeBoth = resize === 'b';\n        _resizeHorizontal = resize === 'h';\n        _resizeVertical = resize === 'v'; //normalizeRTL\n\n        _normalizeRTLCache = _currentPreparedOptions.normalizeRTL; //ignore overlay scrollbar hiding\n\n        ignoreOverlayScrollbarHiding = ignoreOverlayScrollbarHiding && _nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y; //refresh options cache\n\n        _scrollbarsVisibilityCache = scrollbarsVisibility;\n        _scrollbarsAutoHideCache = scrollbarsAutoHide;\n        _scrollbarsClickScrollingCache = scrollbarsClickScrolling;\n        _scrollbarsDragScrollingCache = scrollbarsDragScrolling;\n        _classNameCache = className;\n        _resizeCache = resize;\n        _paddingAbsoluteCache = paddingAbsolute;\n        _clipAlwaysCache = clipAlways;\n        _sizeAutoCapableCache = sizeAutoCapable;\n        _ignoreOverlayScrollbarHidingCache = ignoreOverlayScrollbarHiding;\n        _autoUpdateCache = autoUpdate;\n        _overflowBehaviorCache = extendDeep({}, overflowBehavior);\n        _textareaDynWidthCache = textareaDynWidth;\n        _textareaDynHeightCache = textareaDynHeight;\n        _hasOverflowCache = _hasOverflowCache || {\n          x: false,\n          y: false\n        }; //set correct class name to the host element\n\n        if (classNameChanged) {\n          removeClass(_hostElement, _oldClassName + _strSpace + _classNameThemeNone);\n          addClass(_hostElement, className !== undefined && className !== null && className.length > 0 ? className : _classNameThemeNone);\n        } //set correct auto Update\n\n\n        if (autoUpdateChanged) {\n          if (autoUpdate === true || autoUpdate === null && _autoUpdateRecommended) {\n            disconnectMutationObservers();\n            autoUpdateLoop.add(_base);\n          } else {\n            autoUpdateLoop.remove(_base);\n            connectMutationObservers();\n          }\n        } //activate or deactivate size auto capability\n\n\n        if (sizeAutoCapableChanged) {\n          if (sizeAutoCapable) {\n            if (_contentGlueElement) {\n              _contentGlueElement.show();\n            } else {\n              _contentGlueElement = FRAMEWORK(generateDiv(_classNameContentGlueElement));\n\n              _paddingElement.before(_contentGlueElement);\n            }\n\n            if (_sizeAutoObserverAdded) {\n              _sizeAutoObserverElement.show();\n            } else {\n              _sizeAutoObserverElement = FRAMEWORK(generateDiv(_classNameSizeAutoObserverElement));\n              _sizeAutoObserverElementNative = _sizeAutoObserverElement[0];\n\n              _contentGlueElement.before(_sizeAutoObserverElement);\n\n              var oldSize = {\n                w: -1,\n                h: -1\n              };\n              setupResizeObserver(_sizeAutoObserverElement, function () {\n                var newSize = {\n                  w: _sizeAutoObserverElementNative[LEXICON.oW],\n                  h: _sizeAutoObserverElementNative[LEXICON.oH]\n                };\n\n                if (checkCache(newSize, oldSize)) {\n                  if (_initialized && _heightAutoCache && newSize.h > 0 || _widthAutoCache && newSize.w > 0) {\n                    update();\n                  } else if (_initialized && !_heightAutoCache && newSize.h === 0 || !_widthAutoCache && newSize.w === 0) {\n                    update();\n                  }\n                }\n\n                oldSize = newSize;\n              });\n              _sizeAutoObserverAdded = true; //fix heightAuto detector bug if height is fixed but contentHeight is 0.\n              //the probability this bug will ever happen is very very low, thats why its ok if we use calc which isn't supported in IE8.\n\n              if (_cssCalc !== null) _sizeAutoObserverElement.css(_strHeight, _cssCalc + '(100% + 1px)');\n            }\n          } else {\n            if (_sizeAutoObserverAdded) _sizeAutoObserverElement.hide();\n            if (_contentGlueElement) _contentGlueElement.hide();\n          }\n        } //if force, update all resizeObservers too\n\n\n        if (force) {\n          _sizeObserverElement.find('*').trigger(_strScroll);\n\n          if (_sizeAutoObserverAdded) _sizeAutoObserverElement.find('*').trigger(_strScroll);\n        } //display hidden:\n\n\n        displayIsHidden = displayIsHidden === undefined ? _hostElement.is(':hidden') : displayIsHidden; //textarea AutoWrapping:\n\n        var textareaAutoWrapping = _isTextarea ? _targetElement.attr('wrap') !== 'off' : false;\n        var textareaAutoWrappingChanged = checkCacheAutoForce(textareaAutoWrapping, _textareaAutoWrappingCache); //detect direction:\n\n        var cssDirection = _hostElement.css('direction');\n\n        var cssDirectionChanged = checkCacheAutoForce(cssDirection, _cssDirectionCache); //detect box-sizing:\n\n        var boxSizing = _hostElement.css('box-sizing');\n\n        var boxSizingChanged = checkCacheAutoForce(boxSizing, _cssBoxSizingCache); //detect padding:\n\n        var padding = getTopRightBottomLeftHost(_strPaddingMinus); //width + height auto detecting var:\n\n        var sizeAutoObserverElementBCRect; //exception occurs in IE8 sometimes (unknown exception)\n\n        try {\n          sizeAutoObserverElementBCRect = _sizeAutoObserverAdded ? _sizeAutoObserverElementNative[LEXICON.bCR]() : null;\n        } catch (ex) {\n          return;\n        }\n\n        _isRTL = cssDirection === 'rtl';\n        _isBorderBox = boxSizing === 'border-box';\n        var isRTLLeft = _isRTL ? _strLeft : _strRight;\n        var isRTLRight = _isRTL ? _strRight : _strLeft; //detect width auto:\n\n        var widthAutoResizeDetection = false;\n        var widthAutoObserverDetection = _sizeAutoObserverAdded && _hostElement.css(_strFloat) !== 'none'\n        /*|| _isTextarea */\n        ? MATH.round(sizeAutoObserverElementBCRect.right - sizeAutoObserverElementBCRect.left) === 0 && (!paddingAbsolute ? _hostElementNative[LEXICON.cW] - _paddingX > 0 : true) : false;\n\n        if (sizeAutoCapable && !widthAutoObserverDetection) {\n          var tmpCurrHostWidth = _hostElementNative[LEXICON.oW];\n\n          var tmpCurrContentGlueWidth = _contentGlueElement.css(_strWidth);\n\n          _contentGlueElement.css(_strWidth, _strAuto);\n\n          var tmpNewHostWidth = _hostElementNative[LEXICON.oW];\n\n          _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n\n          widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n\n          if (!widthAutoResizeDetection) {\n            _contentGlueElement.css(_strWidth, tmpCurrHostWidth + 1);\n\n            tmpNewHostWidth = _hostElementNative[LEXICON.oW];\n\n            _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n\n            widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n          }\n        }\n\n        var widthAuto = (widthAutoObserverDetection || widthAutoResizeDetection) && sizeAutoCapable && !displayIsHidden;\n        var widthAutoChanged = checkCacheAutoForce(widthAuto, _widthAutoCache);\n        var wasWidthAuto = !widthAuto && _widthAutoCache; //detect height auto:\n\n        var heightAuto = _sizeAutoObserverAdded && sizeAutoCapable && !displayIsHidden ? MATH.round(sizeAutoObserverElementBCRect.bottom - sizeAutoObserverElementBCRect.top) === 0 :\n        /* && (!paddingAbsolute && (_msieVersion > 9 || !_msieVersion) ? true : true) */\n        false;\n        var heightAutoChanged = checkCacheAutoForce(heightAuto, _heightAutoCache);\n        var wasHeightAuto = !heightAuto && _heightAutoCache; //detect border:\n        //we need the border only if border box and auto size\n\n        var updateBorderX = widthAuto && _isBorderBox || !_isBorderBox;\n        var updateBorderY = heightAuto && _isBorderBox || !_isBorderBox;\n        var border = getTopRightBottomLeftHost(_strBorderMinus, '-' + _strWidth, !updateBorderX, !updateBorderY); //detect margin:\n\n        var margin = getTopRightBottomLeftHost(_strMarginMinus); //vars to apply correct css\n\n        var contentElementCSS = {};\n        var contentGlueElementCSS = {}; //funcs\n\n        var getHostSize = function () {\n          //has to be clientSize because offsetSize respect borders\n          return {\n            w: _hostElementNative[LEXICON.cW],\n            h: _hostElementNative[LEXICON.cH]\n          };\n        };\n\n        var getViewportSize = function () {\n          //viewport size is padding container because it never has padding, margin and a border\n          //determine zoom rounding error -> sometimes scrollWidth/Height is smaller than clientWidth/Height\n          //if this happens add the difference to the viewportSize to compensate the rounding error\n          return {\n            w: _paddingElementNative[LEXICON.oW] + MATH.max(0, _contentElementNative[LEXICON.cW] - _contentElementNative[LEXICON.sW]),\n            h: _paddingElementNative[LEXICON.oH] + MATH.max(0, _contentElementNative[LEXICON.cH] - _contentElementNative[LEXICON.sH])\n          };\n        }; //set info for padding\n\n\n        var paddingAbsoluteX = _paddingX = padding.l + padding.r;\n        var paddingAbsoluteY = _paddingY = padding.t + padding.b;\n        paddingAbsoluteX *= paddingAbsolute ? 1 : 0;\n        paddingAbsoluteY *= paddingAbsolute ? 1 : 0;\n        padding.c = checkCacheAutoForce(padding, _cssPaddingCache); //set info for border\n\n        _borderX = border.l + border.r;\n        _borderY = border.t + border.b;\n        border.c = checkCacheAutoForce(border, _cssBorderCache); //set info for margin\n\n        _marginX = margin.l + margin.r;\n        _marginY = margin.t + margin.b;\n        margin.c = checkCacheAutoForce(margin, _cssMarginCache); //refresh cache\n\n        _textareaAutoWrappingCache = textareaAutoWrapping;\n        _cssDirectionCache = cssDirection;\n        _cssBoxSizingCache = boxSizing;\n        _widthAutoCache = widthAuto;\n        _heightAutoCache = heightAuto;\n        _cssPaddingCache = padding;\n        _cssBorderCache = border;\n        _cssMarginCache = margin; //IEFix direction changed\n\n        if (cssDirectionChanged && _sizeAutoObserverAdded) _sizeAutoObserverElement.css(_strFloat, isRTLRight); //apply padding:\n\n        if (padding.c || cssDirectionChanged || paddingAbsoluteChanged || widthAutoChanged || heightAutoChanged || boxSizingChanged || sizeAutoCapableChanged) {\n          var paddingElementCSS = {};\n          var textareaCSS = {};\n          var paddingValues = [padding.t, padding.r, padding.b, padding.l];\n          setTopRightBottomLeft(contentGlueElementCSS, _strMarginMinus, [-padding.t, -padding.r, -padding.b, -padding.l]);\n\n          if (paddingAbsolute) {\n            setTopRightBottomLeft(paddingElementCSS, _strEmpty, paddingValues);\n            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus);\n          } else {\n            setTopRightBottomLeft(paddingElementCSS, _strEmpty);\n            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus, paddingValues);\n          }\n\n          _paddingElement.css(paddingElementCSS);\n\n          _targetElement.css(textareaCSS);\n        } //viewport size is padding container because it never has padding, margin and a border.\n\n\n        _viewportSize = getViewportSize(); //update Textarea\n\n        var textareaSize = _isTextarea ? textareaUpdate() : false;\n\n        var textareaSizeChanged = _isTextarea && checkCacheAutoForce(textareaSize, _textareaSizeCache);\n\n        var textareaDynOrigSize = _isTextarea && textareaSize ? {\n          w: textareaDynWidth ? textareaSize._dynamicWidth : textareaSize._originalWidth,\n          h: textareaDynHeight ? textareaSize._dynamicHeight : textareaSize._originalHeight\n        } : {};\n        _textareaSizeCache = textareaSize; //fix height auto / width auto in cooperation with current padding & boxSizing behavior:\n\n        if (heightAuto && (heightAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c)) {\n          contentElementCSS[_strHeight] = _strAuto;\n        } else if (heightAutoChanged || paddingAbsoluteChanged) {\n          contentElementCSS[_strHeight] = _strHundredPercent;\n        }\n\n        if (widthAuto && (widthAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c || cssDirectionChanged)) {\n          contentElementCSS[_strWidth] = _strAuto;\n          contentGlueElementCSS[_strMaxMinus + _strWidth] = _strHundredPercent; //IE Fix\n        } else if (widthAutoChanged || paddingAbsoluteChanged) {\n          contentElementCSS[_strWidth] = _strHundredPercent;\n          contentElementCSS[_strFloat] = _strEmpty;\n          contentGlueElementCSS[_strMaxMinus + _strWidth] = _strEmpty; //IE Fix\n        }\n\n        if (widthAuto) {\n          //textareaDynOrigSize.w || _strAuto :: doesnt works because applied margin will shift width\n          contentGlueElementCSS[_strWidth] = _strAuto;\n          contentElementCSS[_strWidth] = VENDORS._cssPropertyValue(_strWidth, 'max-content intrinsic') || _strAuto;\n          contentElementCSS[_strFloat] = isRTLRight;\n        } else {\n          contentGlueElementCSS[_strWidth] = _strEmpty;\n        }\n\n        if (heightAuto) {\n          //textareaDynOrigSize.h || _contentElementNative[LEXICON.cH] :: use for anti scroll jumping\n          contentGlueElementCSS[_strHeight] = textareaDynOrigSize.h || _contentElementNative[LEXICON.cH];\n        } else {\n          contentGlueElementCSS[_strHeight] = _strEmpty;\n        }\n\n        if (sizeAutoCapable) _contentGlueElement.css(contentGlueElementCSS);\n\n        _contentElement.css(contentElementCSS); //CHECKPOINT HERE ~\n\n\n        contentElementCSS = {};\n        contentGlueElementCSS = {}; //if [content(host) client / scroll size, or target element direction, or content(host) max-sizes] changed, or force is true\n\n        if (hostSizeChanged || contentSizeChanged || textareaSizeChanged || cssDirectionChanged || boxSizingChanged || paddingAbsoluteChanged || widthAutoChanged || widthAuto || heightAutoChanged || heightAuto || ignoreOverlayScrollbarHidingChanged || overflowBehaviorChanged || clipAlwaysChanged || resizeChanged || scrollbarsVisibilityChanged || scrollbarsAutoHideChanged || scrollbarsDragScrollingChanged || scrollbarsClickScrollingChanged || textareaDynWidthChanged || textareaDynHeightChanged || textareaAutoWrappingChanged) {\n          var strOverflow = 'overflow';\n          var strOverflowX = strOverflow + '-x';\n          var strOverflowY = strOverflow + '-y';\n          var strHidden = 'hidden';\n          var strVisible = 'visible'; //Reset the viewport (very important for natively overlaid scrollbars and zoom change\n          //don't change the overflow prop as it is very expensive and affects performance !A LOT!\n\n          if (!_nativeScrollbarStyling) {\n            var viewportElementResetCSS = {};\n            var resetXTmp = _hasOverflowCache.y && _hideOverflowCache.ys && !ignoreOverlayScrollbarHiding ? _nativeScrollbarIsOverlaid.y ? _viewportElement.css(isRTLLeft) : -_nativeScrollbarSize.y : 0;\n            var resetBottomTmp = _hasOverflowCache.x && _hideOverflowCache.xs && !ignoreOverlayScrollbarHiding ? _nativeScrollbarIsOverlaid.x ? _viewportElement.css(_strBottom) : -_nativeScrollbarSize.x : 0;\n            setTopRightBottomLeft(viewportElementResetCSS, _strEmpty);\n\n            _viewportElement.css(viewportElementResetCSS);\n          } //measure several sizes:\n\n\n          var contentMeasureElement = getContentMeasureElement(); //in Firefox content element has to have overflow hidden, else element margins aren't calculated properly, this element prevents this bug, but only if scrollbars aren't overlaid\n\n          var contentSize = {\n            //use clientSize because natively overlaidScrollbars add borders\n            w: textareaDynOrigSize.w || contentMeasureElement[LEXICON.cW],\n            h: textareaDynOrigSize.h || contentMeasureElement[LEXICON.cH]\n          };\n          var scrollSize = {\n            w: contentMeasureElement[LEXICON.sW],\n            h: contentMeasureElement[LEXICON.sH]\n          }; //apply the correct viewport style and measure viewport size\n\n          if (!_nativeScrollbarStyling) {\n            viewportElementResetCSS[_strBottom] = wasHeightAuto ? _strEmpty : resetBottomTmp;\n            viewportElementResetCSS[isRTLLeft] = wasWidthAuto ? _strEmpty : resetXTmp;\n\n            _viewportElement.css(viewportElementResetCSS);\n          }\n\n          _viewportSize = getViewportSize(); //measure and correct several sizes\n\n          var hostSize = getHostSize();\n          var hostAbsoluteRectSize = {\n            w: hostSize.w - _marginX - _borderX - (_isBorderBox ? 0 : _paddingX),\n            h: hostSize.h - _marginY - _borderY - (_isBorderBox ? 0 : _paddingY)\n          };\n          var contentGlueSize = {\n            //client/scrollSize + AbsolutePadding -> because padding is only applied to the paddingElement if its absolute, so you have to add it manually\n            //hostSize is clientSize -> so padding should be added manually, right? FALSE! Because content glue is inside hostElement, so we don't have to worry about padding\n            w: MATH.max((widthAuto ? contentSize.w : scrollSize.w) + paddingAbsoluteX, hostAbsoluteRectSize.w),\n            h: MATH.max((heightAuto ? contentSize.h : scrollSize.h) + paddingAbsoluteY, hostAbsoluteRectSize.h)\n          };\n          contentGlueSize.c = checkCacheAutoForce(contentGlueSize, _contentGlueSizeCache);\n          _contentGlueSizeCache = contentGlueSize; //apply correct contentGlue size\n\n          if (sizeAutoCapable) {\n            //size contentGlue correctly to make sure the element has correct size if the sizing switches to auto\n            if (contentGlueSize.c || heightAuto || widthAuto) {\n              contentGlueElementCSS[_strWidth] = contentGlueSize.w;\n              contentGlueElementCSS[_strHeight] = contentGlueSize.h; //textarea-sizes are already calculated correctly at this point\n\n              if (!_isTextarea) {\n                contentSize = {\n                  //use clientSize because natively overlaidScrollbars add borders\n                  w: contentMeasureElement[LEXICON.cW],\n                  h: contentMeasureElement[LEXICON.cH]\n                };\n              }\n            }\n\n            var textareaCoverCSS = {};\n\n            var setContentGlueElementCSSfunction = function (horizontal) {\n              var scrollbarVars = getScrollbarVars(horizontal);\n              var wh = scrollbarVars._w_h;\n              var strWH = scrollbarVars._width_height;\n              var autoSize = horizontal ? widthAuto : heightAuto;\n              var borderSize = horizontal ? _borderX : _borderY;\n              var paddingSize = horizontal ? _paddingX : _paddingY;\n              var marginSize = horizontal ? _marginX : _marginY;\n              var viewportSize = _viewportSize[wh] - borderSize - marginSize - (_isBorderBox ? 0 : paddingSize); //make contentGlue size -1 if element is not auto sized, to make sure that a resize event happens when the element shrinks\n\n              if (!autoSize || !autoSize && border.c) contentGlueElementCSS[strWH] = hostAbsoluteRectSize[wh] - 1; //if size is auto and host is smaller than size as min size, make content glue size -1 to make sure size changes will be detected (this is only needed if padding is 0)\n\n              if (autoSize && contentSize[wh] < viewportSize && (horizontal && _isTextarea ? !textareaAutoWrapping : true)) {\n                if (_isTextarea) textareaCoverCSS[strWH] = parseToZeroOrNumber(_textareaCoverElement.css(strWH)) - 1;\n                contentGlueElementCSS[strWH] -= 1;\n              } //make sure content glue size is at least 1\n\n\n              if (contentSize[wh] > 0) contentGlueElementCSS[strWH] = MATH.max(1, contentGlueElementCSS[strWH]);\n            };\n\n            setContentGlueElementCSSfunction(true);\n            setContentGlueElementCSSfunction(false);\n            if (_isTextarea) _textareaCoverElement.css(textareaCoverCSS);\n\n            _contentGlueElement.css(contentGlueElementCSS);\n          }\n\n          if (widthAuto) contentElementCSS[_strWidth] = _strHundredPercent;\n          if (widthAuto && !_isBorderBox && !_mutationObserversConnected) contentElementCSS[_strFloat] = 'none'; //apply and reset content style\n\n          _contentElement.css(contentElementCSS);\n\n          contentElementCSS = {}; //measure again, but this time all correct sizes:\n\n          var contentScrollSize = {\n            w: contentMeasureElement[LEXICON.sW],\n            h: contentMeasureElement[LEXICON.sH]\n          };\n          contentScrollSize.c = contentSizeChanged = checkCacheAutoForce(contentScrollSize, _contentScrollSizeCache);\n          _contentScrollSizeCache = contentScrollSize; //refresh viewport size after correct measuring\n\n          _viewportSize = getViewportSize();\n          hostSize = getHostSize();\n          hostSizeChanged = checkCacheAutoForce(hostSize, _hostSizeCache);\n          _hostSizeCache = hostSize;\n          var hideOverflowForceTextarea = _isTextarea && (_viewportSize.w === 0 || _viewportSize.h === 0);\n          var previousOverflowAmount = _overflowAmountCache;\n          var overflowBehaviorIsVS = {};\n          var overflowBehaviorIsVH = {};\n          var overflowBehaviorIsS = {};\n          var overflowAmount = {};\n          var hasOverflow = {};\n          var hideOverflow = {};\n          var canScroll = {};\n\n          var viewportRect = _paddingElementNative[LEXICON.bCR]();\n\n          var setOverflowVariables = function (horizontal) {\n            var scrollbarVars = getScrollbarVars(horizontal);\n            var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n            var xyI = scrollbarVarsInverted._x_y;\n            var xy = scrollbarVars._x_y;\n            var wh = scrollbarVars._w_h;\n            var widthHeight = scrollbarVars._width_height;\n            var scrollMax = _strScroll + scrollbarVars._Left_Top + 'Max';\n            var fractionalOverflowAmount = viewportRect[widthHeight] ? MATH.abs(viewportRect[widthHeight] - _viewportSize[wh]) : 0;\n            var checkFractionalOverflowAmount = previousOverflowAmount && previousOverflowAmount[xy] > 0 && _viewportElementNative[scrollMax] === 0;\n            overflowBehaviorIsVS[xy] = overflowBehavior[xy] === 'v-s';\n            overflowBehaviorIsVH[xy] = overflowBehavior[xy] === 'v-h';\n            overflowBehaviorIsS[xy] = overflowBehavior[xy] === 's';\n            overflowAmount[xy] = MATH.max(0, MATH.round((contentScrollSize[wh] - _viewportSize[wh]) * 100) / 100);\n            overflowAmount[xy] *= hideOverflowForceTextarea || checkFractionalOverflowAmount && fractionalOverflowAmount > 0 && fractionalOverflowAmount < 1 ? 0 : 1;\n            hasOverflow[xy] = overflowAmount[xy] > 0; //hideOverflow:\n            //x || y : true === overflow is hidden by \"overflow: scroll\" OR \"overflow: hidden\"\n            //xs || ys : true === overflow is hidden by \"overflow: scroll\"\n\n            hideOverflow[xy] = overflowBehaviorIsVS[xy] || overflowBehaviorIsVH[xy] ? hasOverflow[xyI] && !overflowBehaviorIsVS[xyI] && !overflowBehaviorIsVH[xyI] : hasOverflow[xy];\n            hideOverflow[xy + 's'] = hideOverflow[xy] ? overflowBehaviorIsS[xy] || overflowBehaviorIsVS[xy] : false;\n            canScroll[xy] = hasOverflow[xy] && hideOverflow[xy + 's'];\n          };\n\n          setOverflowVariables(true);\n          setOverflowVariables(false);\n          overflowAmount.c = checkCacheAutoForce(overflowAmount, _overflowAmountCache);\n          _overflowAmountCache = overflowAmount;\n          hasOverflow.c = checkCacheAutoForce(hasOverflow, _hasOverflowCache);\n          _hasOverflowCache = hasOverflow;\n          hideOverflow.c = checkCacheAutoForce(hideOverflow, _hideOverflowCache);\n          _hideOverflowCache = hideOverflow; //if native scrollbar is overlay at x OR y axis, prepare DOM\n\n          if (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) {\n            var borderDesign = 'px solid transparent';\n            var contentArrangeElementCSS = {};\n            var arrangeContent = {};\n            var arrangeChanged = force;\n            var setContentElementCSS;\n\n            if (hasOverflow.x || hasOverflow.y) {\n              arrangeContent.w = _nativeScrollbarIsOverlaid.y && hasOverflow.y ? contentScrollSize.w + _overlayScrollbarDummySize.y : _strEmpty;\n              arrangeContent.h = _nativeScrollbarIsOverlaid.x && hasOverflow.x ? contentScrollSize.h + _overlayScrollbarDummySize.x : _strEmpty;\n              arrangeChanged = checkCacheAutoForce(arrangeContent, _arrangeContentSizeCache);\n              _arrangeContentSizeCache = arrangeContent;\n            }\n\n            if (hasOverflow.c || hideOverflow.c || contentScrollSize.c || cssDirectionChanged || widthAutoChanged || heightAutoChanged || widthAuto || heightAuto || ignoreOverlayScrollbarHidingChanged) {\n              contentElementCSS[_strMarginMinus + isRTLRight] = contentElementCSS[_strBorderMinus + isRTLRight] = _strEmpty;\n\n              setContentElementCSS = function (horizontal) {\n                var scrollbarVars = getScrollbarVars(horizontal);\n                var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n                var xy = scrollbarVars._x_y;\n                var strDirection = horizontal ? _strBottom : isRTLLeft;\n                var invertedAutoSize = horizontal ? heightAuto : widthAuto;\n\n                if (_nativeScrollbarIsOverlaid[xy] && hasOverflow[xy] && hideOverflow[xy + 's']) {\n                  contentElementCSS[_strMarginMinus + strDirection] = invertedAutoSize ? ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize[xy] : _strEmpty;\n                  contentElementCSS[_strBorderMinus + strDirection] = (horizontal ? !invertedAutoSize : true) && !ignoreOverlayScrollbarHiding ? _overlayScrollbarDummySize[xy] + borderDesign : _strEmpty;\n                } else {\n                  arrangeContent[scrollbarVarsInverted._w_h] = contentElementCSS[_strMarginMinus + strDirection] = contentElementCSS[_strBorderMinus + strDirection] = _strEmpty;\n                  arrangeChanged = true;\n                }\n              };\n\n              if (_nativeScrollbarStyling) {\n                addRemoveClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible, !ignoreOverlayScrollbarHiding);\n              } else {\n                setContentElementCSS(true);\n                setContentElementCSS(false);\n              }\n            }\n\n            if (ignoreOverlayScrollbarHiding) {\n              arrangeContent.w = arrangeContent.h = _strEmpty;\n              arrangeChanged = true;\n            }\n\n            if (arrangeChanged && !_nativeScrollbarStyling) {\n              contentArrangeElementCSS[_strWidth] = hideOverflow.y ? arrangeContent.w : _strEmpty;\n              contentArrangeElementCSS[_strHeight] = hideOverflow.x ? arrangeContent.h : _strEmpty;\n\n              if (!_contentArrangeElement) {\n                _contentArrangeElement = FRAMEWORK(generateDiv(_classNameContentArrangeElement));\n\n                _viewportElement.prepend(_contentArrangeElement);\n              }\n\n              _contentArrangeElement.css(contentArrangeElementCSS);\n            }\n\n            _contentElement.css(contentElementCSS);\n          }\n\n          var viewportElementCSS = {};\n          var paddingElementCSS = {};\n          var setViewportCSS;\n\n          if (hostSizeChanged || hasOverflow.c || hideOverflow.c || contentScrollSize.c || overflowBehaviorChanged || boxSizingChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged || clipAlwaysChanged || heightAutoChanged) {\n            viewportElementCSS[isRTLRight] = _strEmpty;\n\n            setViewportCSS = function (horizontal) {\n              var scrollbarVars = getScrollbarVars(horizontal);\n              var scrollbarVarsInverted = getScrollbarVars(!horizontal);\n              var xy = scrollbarVars._x_y;\n              var XY = scrollbarVars._X_Y;\n              var strDirection = horizontal ? _strBottom : isRTLLeft;\n\n              var reset = function () {\n                viewportElementCSS[strDirection] = _strEmpty;\n                _contentBorderSize[scrollbarVarsInverted._w_h] = 0;\n              };\n\n              if (hasOverflow[xy] && hideOverflow[xy + 's']) {\n                viewportElementCSS[strOverflow + XY] = _strScroll;\n\n                if (ignoreOverlayScrollbarHiding || _nativeScrollbarStyling) {\n                  reset();\n                } else {\n                  viewportElementCSS[strDirection] = -(_nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[xy] : _nativeScrollbarSize[xy]);\n                  _contentBorderSize[scrollbarVarsInverted._w_h] = _nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[scrollbarVarsInverted._x_y] : 0;\n                }\n              } else {\n                viewportElementCSS[strOverflow + XY] = _strEmpty;\n                reset();\n              }\n            };\n\n            setViewportCSS(true);\n            setViewportCSS(false); // if the scroll container is too small and if there is any overflow with no overlay scrollbar (and scrollbar styling isn't possible), \n            // make viewport element greater in size (Firefox hide Scrollbars fix)\n            // because firefox starts hiding scrollbars on too small elements\n            // with this behavior the overflow calculation may be incorrect or the scrollbars would appear suddenly\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=292284\n\n            if (!_nativeScrollbarStyling && (_viewportSize.h < _nativeScrollbarMinSize.x || _viewportSize.w < _nativeScrollbarMinSize.y) && (hasOverflow.x && hideOverflow.x && !_nativeScrollbarIsOverlaid.x || hasOverflow.y && hideOverflow.y && !_nativeScrollbarIsOverlaid.y)) {\n              viewportElementCSS[_strPaddingMinus + _strTop] = _nativeScrollbarMinSize.x;\n              viewportElementCSS[_strMarginMinus + _strTop] = -_nativeScrollbarMinSize.x;\n              viewportElementCSS[_strPaddingMinus + isRTLRight] = _nativeScrollbarMinSize.y;\n              viewportElementCSS[_strMarginMinus + isRTLRight] = -_nativeScrollbarMinSize.y;\n            } else {\n              viewportElementCSS[_strPaddingMinus + _strTop] = viewportElementCSS[_strMarginMinus + _strTop] = viewportElementCSS[_strPaddingMinus + isRTLRight] = viewportElementCSS[_strMarginMinus + isRTLRight] = _strEmpty;\n            }\n\n            viewportElementCSS[_strPaddingMinus + isRTLLeft] = viewportElementCSS[_strMarginMinus + isRTLLeft] = _strEmpty; //if there is any overflow (x OR y axis) and this overflow shall be hidden, make overflow hidden, else overflow visible\n\n            if (hasOverflow.x && hideOverflow.x || hasOverflow.y && hideOverflow.y || hideOverflowForceTextarea) {\n              //only hide if is Textarea\n              if (_isTextarea && hideOverflowForceTextarea) {\n                paddingElementCSS[strOverflowX] = paddingElementCSS[strOverflowY] = strHidden;\n              }\n            } else {\n              if (!clipAlways || overflowBehaviorIsVH.x || overflowBehaviorIsVS.x || overflowBehaviorIsVH.y || overflowBehaviorIsVS.y) {\n                //only un-hide if Textarea\n                if (_isTextarea) {\n                  paddingElementCSS[strOverflowX] = paddingElementCSS[strOverflowY] = _strEmpty;\n                }\n\n                viewportElementCSS[strOverflowX] = viewportElementCSS[strOverflowY] = strVisible;\n              }\n            }\n\n            _paddingElement.css(paddingElementCSS);\n\n            _viewportElement.css(viewportElementCSS);\n\n            viewportElementCSS = {}; //force soft redraw in webkit because without the scrollbars will may appear because DOM wont be redrawn under special conditions\n\n            if ((hasOverflow.c || boxSizingChanged || widthAutoChanged || heightAutoChanged) && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n              var elementStyle = _contentElementNative[LEXICON.s];\n              var dump;\n              elementStyle.webkitTransform = 'scale(1)';\n              elementStyle.display = 'run-in';\n              dump = _contentElementNative[LEXICON.oH];\n              elementStyle.display = _strEmpty; //|| dump; //use dump to prevent it from deletion if minify\n\n              elementStyle.webkitTransform = _strEmpty;\n            }\n            /*\r\n            //force hard redraw in webkit if native overlaid scrollbars shall appear\r\n            if (ignoreOverlayScrollbarHidingChanged && ignoreOverlayScrollbarHiding) {\r\n                _hostElement.hide();\r\n                var dump = _hostElementNative[LEXICON.oH];\r\n                _hostElement.show();\r\n            }\r\n            */\n\n          } //change to direction RTL and width auto Bugfix in Webkit\n          //without this fix, the DOM still thinks the scrollbar is LTR and thus the content is shifted to the left\n\n\n          contentElementCSS = {};\n\n          if (cssDirectionChanged || widthAutoChanged || heightAutoChanged) {\n            if (_isRTL && widthAuto) {\n              var floatTmp = _contentElement.css(_strFloat);\n\n              var posLeftWithoutFloat = MATH.round(_contentElement.css(_strFloat, _strEmpty).css(_strLeft, _strEmpty).position().left);\n\n              _contentElement.css(_strFloat, floatTmp);\n\n              var posLeftWithFloat = MATH.round(_contentElement.position().left);\n              if (posLeftWithoutFloat !== posLeftWithFloat) contentElementCSS[_strLeft] = posLeftWithoutFloat;\n            } else {\n              contentElementCSS[_strLeft] = _strEmpty;\n            }\n          }\n\n          _contentElement.css(contentElementCSS); //handle scroll position\n\n\n          if (_isTextarea && contentSizeChanged) {\n            var textareaInfo = getTextareaInfo();\n\n            if (textareaInfo) {\n              var textareaRowsChanged = _textareaInfoCache === undefined ? true : textareaInfo._rows !== _textareaInfoCache._rows;\n              var cursorRow = textareaInfo._cursorRow;\n              var cursorCol = textareaInfo._cursorColumn;\n              var widestRow = textareaInfo._widestRow;\n              var lastRow = textareaInfo._rows;\n              var lastCol = textareaInfo._columns;\n              var cursorPos = textareaInfo._cursorPosition;\n              var cursorMax = textareaInfo._cursorMax;\n              var cursorIsLastPosition = cursorPos >= cursorMax && _textareaHasFocus;\n              var textareaScrollAmount = {\n                x: !textareaAutoWrapping && cursorCol === lastCol && cursorRow === widestRow ? _overflowAmountCache.x : -1,\n                y: (textareaAutoWrapping ? cursorIsLastPosition || textareaRowsChanged && (previousOverflowAmount ? currScroll.y === previousOverflowAmount.y : false) : (cursorIsLastPosition || textareaRowsChanged) && cursorRow === lastRow) ? _overflowAmountCache.y : -1\n              };\n              currScroll.x = textareaScrollAmount.x > -1 ? _isRTL && _normalizeRTLCache && _rtlScrollBehavior.i ? 0 : textareaScrollAmount.x : currScroll.x; //if inverted, scroll to 0 -> normalized this means to max scroll offset.\n\n              currScroll.y = textareaScrollAmount.y > -1 ? textareaScrollAmount.y : currScroll.y;\n            }\n\n            _textareaInfoCache = textareaInfo;\n          }\n\n          if (_isRTL && _rtlScrollBehavior.i && _nativeScrollbarIsOverlaid.y && hasOverflow.x && _normalizeRTLCache) currScroll.x += _contentBorderSize.w || 0;\n          if (widthAuto) _hostElement[_strScrollLeft](0);\n          if (heightAuto) _hostElement[_strScrollTop](0);\n\n          _viewportElement[_strScrollLeft](currScroll.x)[_strScrollTop](currScroll.y); //scrollbars management:\n\n\n          var scrollbarsVisibilityVisible = scrollbarsVisibility === 'v';\n          var scrollbarsVisibilityHidden = scrollbarsVisibility === 'h';\n          var scrollbarsVisibilityAuto = scrollbarsVisibility === 'a';\n\n          var refreshScrollbarsVisibility = function (showX, showY) {\n            showY = showY === undefined ? showX : showY;\n            refreshScrollbarAppearance(true, showX, canScroll.x);\n            refreshScrollbarAppearance(false, showY, canScroll.y);\n          }; //manage class name which indicates scrollable overflow\n\n\n          addRemoveClass(_hostElement, _classNameHostOverflow, hideOverflow.x || hideOverflow.y);\n          addRemoveClass(_hostElement, _classNameHostOverflowX, hideOverflow.x);\n          addRemoveClass(_hostElement, _classNameHostOverflowY, hideOverflow.y); //add or remove rtl class name for styling purposes\n\n          if (cssDirectionChanged) {\n            addRemoveClass(_hostElement, _classNameHostRTL, _isRTL);\n          } //manage the resize feature (CSS3 resize \"polyfill\" for this plugin)\n\n\n          if (_isBody) addClass(_hostElement, _classNameHostResizeDisabled);\n\n          if (resizeChanged) {\n            addRemoveClass(_hostElement, _classNameHostResizeDisabled, _resizeNone);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResize, !_resizeNone);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeB, _resizeBoth);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeH, _resizeHorizontal);\n            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeV, _resizeVertical);\n          } //manage the scrollbars general visibility + the scrollbar interactivity (unusable class name)\n\n\n          if (scrollbarsVisibilityChanged || overflowBehaviorChanged || hideOverflow.c || hasOverflow.c || ignoreOverlayScrollbarHidingChanged) {\n            if (ignoreOverlayScrollbarHiding) {\n              if (ignoreOverlayScrollbarHidingChanged) {\n                removeClass(_hostElement, _classNameHostScrolling);\n\n                if (ignoreOverlayScrollbarHiding) {\n                  refreshScrollbarsVisibility(false);\n                }\n              }\n            } else if (scrollbarsVisibilityAuto) {\n              refreshScrollbarsVisibility(canScroll.x, canScroll.y);\n            } else if (scrollbarsVisibilityVisible) {\n              refreshScrollbarsVisibility(true);\n            } else if (scrollbarsVisibilityHidden) {\n              refreshScrollbarsVisibility(false);\n            }\n          } //manage the scrollbars auto hide feature (auto hide them after specific actions)\n\n\n          if (scrollbarsAutoHideChanged || ignoreOverlayScrollbarHidingChanged) {\n            setupHostMouseTouchEvents(!_scrollbarsAutoHideLeave && !_scrollbarsAutoHideMove);\n            refreshScrollbarsAutoHide(_scrollbarsAutoHideNever, !_scrollbarsAutoHideNever);\n          } //manage scrollbars handle length & offset - don't remove!\n\n\n          if (hostSizeChanged || overflowAmount.c || heightAutoChanged || widthAutoChanged || resizeChanged || boxSizingChanged || paddingAbsoluteChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged) {\n            refreshScrollbarHandleLength(true);\n            refreshScrollbarHandleOffset(true);\n            refreshScrollbarHandleLength(false);\n            refreshScrollbarHandleOffset(false);\n          } //manage interactivity\n\n\n          if (scrollbarsClickScrollingChanged) refreshScrollbarsInteractive(true, scrollbarsClickScrolling);\n          if (scrollbarsDragScrollingChanged) refreshScrollbarsInteractive(false, scrollbarsDragScrolling); //callbacks:\n\n          dispatchCallback('onDirectionChanged', {\n            isRTL: _isRTL,\n            dir: cssDirection\n          }, cssDirectionChanged);\n          dispatchCallback('onHostSizeChanged', {\n            width: _hostSizeCache.w,\n            height: _hostSizeCache.h\n          }, hostSizeChanged);\n          dispatchCallback('onContentSizeChanged', {\n            width: _contentScrollSizeCache.w,\n            height: _contentScrollSizeCache.h\n          }, contentSizeChanged);\n          dispatchCallback('onOverflowChanged', {\n            x: hasOverflow.x,\n            y: hasOverflow.y,\n            xScrollable: hideOverflow.xs,\n            yScrollable: hideOverflow.ys,\n            clipped: hideOverflow.x || hideOverflow.y\n          }, hasOverflow.c || hideOverflow.c);\n          dispatchCallback('onOverflowAmountChanged', {\n            x: overflowAmount.x,\n            y: overflowAmount.y\n          }, overflowAmount.c);\n        } //fix body min size\n\n\n        if (_isBody && _bodyMinSizeCache && (_hasOverflowCache.c || _bodyMinSizeCache.c)) {\n          //its possible that no min size was measured until now, because the content arrange element was just added now, in this case, measure now the min size.\n          if (!_bodyMinSizeCache.f) bodyMinSizeChanged();\n          if (_nativeScrollbarIsOverlaid.y && _hasOverflowCache.x) _contentElement.css(_strMinMinus + _strWidth, _bodyMinSizeCache.w + _overlayScrollbarDummySize.y);\n          if (_nativeScrollbarIsOverlaid.x && _hasOverflowCache.y) _contentElement.css(_strMinMinus + _strHeight, _bodyMinSizeCache.h + _overlayScrollbarDummySize.x);\n          _bodyMinSizeCache.c = false;\n        }\n\n        if (_initialized && changedOptions.updateOnLoad) {\n          updateElementsOnLoad();\n        } //freezeResizeObserver(_sizeObserverElement, false);\n        //freezeResizeObserver(_sizeAutoObserverElement, false);\n\n\n        dispatchCallback('onUpdated', {\n          forced: force\n        });\n      }\n      /**\r\n       * Updates the found elements of which the load event shall be handled.\r\n       */\n\n\n      function updateElementsOnLoad() {\n        if (!_isTextarea) {\n          eachUpdateOnLoad(function (i, updateOnLoadSelector) {\n            _contentElement.find(updateOnLoadSelector).each(function (i, el) {\n              // if element doesn't have a updateOnLoadCallback applied\n              if (COMPATIBILITY.inA(el, _updateOnLoadElms) < 0) {\n                _updateOnLoadElms.push(el);\n\n                FRAMEWORK(el).off(_updateOnLoadEventName, updateOnLoadCallback).on(_updateOnLoadEventName, updateOnLoadCallback);\n              }\n            });\n          });\n        }\n      } //==== Options ====//\n\n      /**\r\n       * Sets new options but doesn't call the update method.\r\n       * @param newOptions The object which contains the new options.\r\n       * @returns {*} A object which contains the changed options.\r\n       */\n\n\n      function setOptions(newOptions) {\n        var validatedOpts = _pluginsOptions._validate(newOptions, _pluginsOptions._template, true, _currentOptions);\n\n        _currentOptions = extendDeep({}, _currentOptions, validatedOpts._default);\n        _currentPreparedOptions = extendDeep({}, _currentPreparedOptions, validatedOpts._prepared);\n        return validatedOpts._prepared;\n      } //==== Structure ====//\n\n      /**\r\n       * Builds or destroys the wrapper and helper DOM elements.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n      /**\r\n       * Builds or destroys the wrapper and helper DOM elements.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupStructureDOM(destroy) {\n        var strParent = 'parent';\n        var classNameResizeObserverHost = 'os-resize-observer-host';\n        var classNameTextareaElementFull = _classNameTextareaElement + _strSpace + _classNameTextInherit;\n        var textareaClass = _isTextarea ? _strSpace + _classNameTextInherit : _strEmpty;\n        var adoptAttrs = _currentPreparedOptions.textarea.inheritedAttrs;\n        var adoptAttrsMap = {};\n\n        var applyAdoptedAttrs = function () {\n          var applyAdoptedAttrsElm = destroy ? _targetElement : _hostElement;\n          each(adoptAttrsMap, function (key, value) {\n            if (type(value) == TYPES.s) {\n              if (key == LEXICON.c) applyAdoptedAttrsElm.addClass(value);else applyAdoptedAttrsElm.attr(key, value);\n            }\n          });\n        };\n\n        var hostElementClassNames = [_classNameHostElement, _classNameHostElementForeign, _classNameHostTextareaElement, _classNameHostResizeDisabled, _classNameHostRTL, _classNameHostScrollbarHorizontalHidden, _classNameHostScrollbarVerticalHidden, _classNameHostTransition, _classNameHostScrolling, _classNameHostOverflow, _classNameHostOverflowX, _classNameHostOverflowY, _classNameThemeNone, _classNameTextareaElement, _classNameTextInherit, _classNameCache].join(_strSpace);\n        var hostElementCSS = {}; //get host element as first element, because that's the most upper element and required for the other elements\n\n        _hostElement = _hostElement || (_isTextarea ? _domExists ? _targetElement[strParent]()[strParent]()[strParent]()[strParent]() : FRAMEWORK(generateDiv(_classNameHostTextareaElement)) : _targetElement);\n        _contentElement = _contentElement || selectOrGenerateDivByClass(_classNameContentElement + textareaClass);\n        _viewportElement = _viewportElement || selectOrGenerateDivByClass(_classNameViewportElement + textareaClass);\n        _paddingElement = _paddingElement || selectOrGenerateDivByClass(_classNamePaddingElement + textareaClass);\n        _sizeObserverElement = _sizeObserverElement || selectOrGenerateDivByClass(classNameResizeObserverHost);\n        _textareaCoverElement = _textareaCoverElement || (_isTextarea ? selectOrGenerateDivByClass(_classNameTextareaCoverElement) : undefined); //add this class to workaround class changing issues with UI frameworks especially Vue\n\n        if (_domExists) addClass(_hostElement, _classNameHostElementForeign); //on destroy, remove all generated class names from the host element before collecting the adopted attributes \n        //to prevent adopting generated class names\n\n        if (destroy) removeClass(_hostElement, hostElementClassNames); //collect all adopted attributes\n\n        adoptAttrs = type(adoptAttrs) == TYPES.s ? adoptAttrs.split(_strSpace) : adoptAttrs;\n\n        if (COMPATIBILITY.isA(adoptAttrs) && _isTextarea) {\n          each(adoptAttrs, function (i, v) {\n            if (type(v) == TYPES.s) {\n              adoptAttrsMap[v] = destroy ? _hostElement.attr(v) : _targetElement.attr(v);\n            }\n          });\n        }\n\n        if (!destroy) {\n          if (_isTextarea) {\n            if (!_currentPreparedOptions.sizeAutoCapable) {\n              hostElementCSS[_strWidth] = _targetElement.css(_strWidth);\n              hostElementCSS[_strHeight] = _targetElement.css(_strHeight);\n            }\n\n            if (!_domExists) _targetElement.addClass(_classNameTextInherit).wrap(_hostElement); //jQuery clones elements in wrap functions, so we have to select them again\n\n            _hostElement = _targetElement[strParent]().css(hostElementCSS);\n          }\n\n          if (!_domExists) {\n            //add the correct class to the target element\n            addClass(_targetElement, _isTextarea ? classNameTextareaElementFull : _classNameHostElement); //wrap the content into the generated elements to create the required DOM\n\n            _hostElement.wrapInner(_contentElement).wrapInner(_viewportElement).wrapInner(_paddingElement).prepend(_sizeObserverElement); //jQuery clones elements in wrap functions, so we have to select them again\n\n\n            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\n            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\n            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\n\n            if (_isTextarea) {\n              _contentElement.prepend(_textareaCoverElement);\n\n              applyAdoptedAttrs();\n            }\n          }\n\n          if (_nativeScrollbarStyling) addClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible);\n          if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y) addClass(_viewportElement, _classNameViewportNativeScrollbarsOverlaid);\n          if (_isBody) addClass(_htmlElement, _classNameHTMLElement);\n          _sizeObserverElementNative = _sizeObserverElement[0];\n          _hostElementNative = _hostElement[0];\n          _paddingElementNative = _paddingElement[0];\n          _viewportElementNative = _viewportElement[0];\n          _contentElementNative = _contentElement[0];\n          updateViewportAttrsFromTarget();\n        } else {\n          if (_domExists && _initialized) {\n            //clear size observer\n            _sizeObserverElement.children().remove(); //remove the style property and classes from already generated elements\n\n\n            each([_paddingElement, _viewportElement, _contentElement, _textareaCoverElement], function (i, elm) {\n              if (elm) {\n                removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n              }\n            }); //add classes to the host element which was removed previously to match the expected DOM\n\n            addClass(_hostElement, _isTextarea ? _classNameHostTextareaElement : _classNameHostElement);\n          } else {\n            //remove size observer\n            remove(_sizeObserverElement); //unwrap the content to restore DOM\n\n            _contentElement.contents().unwrap().unwrap().unwrap();\n\n            if (_isTextarea) {\n              _targetElement.unwrap();\n\n              remove(_hostElement);\n              remove(_textareaCoverElement);\n              applyAdoptedAttrs();\n            }\n          }\n\n          if (_isTextarea) _targetElement.removeAttr(LEXICON.s);\n          if (_isBody) removeClass(_htmlElement, _classNameHTMLElement);\n        }\n      }\n      /**\r\n       * Adds or removes all wrapper elements interactivity events.\r\n       * @param destroy Indicates whether the Events shall be added or removed.\r\n       */\n\n\n      function setupStructureEvents() {\n        var textareaKeyDownRestrictedKeyCodes = [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, //F1 to F12\n        33, 34, //page up, page down\n        37, 38, 39, 40, //left, up, right, down arrows\n        16, 17, 18, 19, 20, 144 //Shift, Ctrl, Alt, Pause, CapsLock, NumLock\n        ];\n        var textareaKeyDownKeyCodesList = [];\n        var textareaUpdateIntervalID;\n        var scrollStopTimeoutId;\n        var scrollStopDelay = 175;\n        var strFocus = 'focus';\n\n        function updateTextarea(doClearInterval) {\n          textareaUpdate();\n\n          _base.update(_strAuto);\n\n          if (doClearInterval && _autoUpdateRecommended) clearInterval(textareaUpdateIntervalID);\n        }\n\n        function textareaOnScroll(event) {\n          _targetElement[_strScrollLeft](_rtlScrollBehavior.i && _normalizeRTLCache ? 9999999 : 0);\n\n          _targetElement[_strScrollTop](0);\n\n          COMPATIBILITY.prvD(event);\n          COMPATIBILITY.stpP(event);\n          return false;\n        }\n\n        function textareaOnDrop(event) {\n          setTimeout(function () {\n            if (!_destroyed) updateTextarea();\n          }, 50);\n        }\n\n        function textareaOnFocus() {\n          _textareaHasFocus = true;\n          addClass(_hostElement, strFocus);\n        }\n\n        function textareaOnFocusout() {\n          _textareaHasFocus = false;\n          textareaKeyDownKeyCodesList = [];\n          removeClass(_hostElement, strFocus);\n          updateTextarea(true);\n        }\n\n        function textareaOnKeyDown(event) {\n          var keyCode = event.keyCode;\n\n          if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\n            if (!textareaKeyDownKeyCodesList[LEXICON.l]) {\n              updateTextarea();\n              textareaUpdateIntervalID = setInterval(updateTextarea, 1000 / 60);\n            }\n\n            if (inArray(keyCode, textareaKeyDownKeyCodesList) < 0) textareaKeyDownKeyCodesList.push(keyCode);\n          }\n        }\n\n        function textareaOnKeyUp(event) {\n          var keyCode = event.keyCode;\n          var index = inArray(keyCode, textareaKeyDownKeyCodesList);\n\n          if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\n            if (index > -1) textareaKeyDownKeyCodesList.splice(index, 1);\n            if (!textareaKeyDownKeyCodesList[LEXICON.l]) updateTextarea(true);\n          }\n        }\n\n        function contentOnTransitionEnd(event) {\n          if (_autoUpdateCache === true) return;\n          event = event.originalEvent || event;\n          if (isSizeAffectingCSSProperty(event.propertyName)) _base.update(_strAuto);\n        }\n\n        function viewportOnScroll(event) {\n          if (!_sleeping) {\n            if (scrollStopTimeoutId !== undefined) clearTimeout(scrollStopTimeoutId);else {\n              if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(true);\n              if (!nativeOverlayScrollbarsAreActive()) addClass(_hostElement, _classNameHostScrolling);\n              dispatchCallback('onScrollStart', event);\n            } //if a scrollbars handle gets dragged, the mousemove event is responsible for refreshing the handle offset\n            //because if CSS scroll-snap is used, the handle offset gets only refreshed on every snap point\n            //this looks laggy & clunky, it looks much better if the offset refreshes with the mousemove\n\n            if (!_scrollbarsHandlesDefineScrollPos) {\n              refreshScrollbarHandleOffset(true);\n              refreshScrollbarHandleOffset(false);\n            }\n\n            dispatchCallback('onScroll', event);\n            scrollStopTimeoutId = setTimeout(function () {\n              if (!_destroyed) {\n                //OnScrollStop:\n                clearTimeout(scrollStopTimeoutId);\n                scrollStopTimeoutId = undefined;\n                if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n                if (!nativeOverlayScrollbarsAreActive()) removeClass(_hostElement, _classNameHostScrolling);\n                dispatchCallback('onScrollStop', event);\n              }\n            }, scrollStopDelay);\n          }\n        }\n\n        if (_isTextarea) {\n          if (_msieVersion > 9 || !_autoUpdateRecommended) {\n            addDestroyEventListener(_targetElement, 'input', updateTextarea);\n          } else {\n            addDestroyEventListener(_targetElement, [_strKeyDownEvent, _strKeyUpEvent], [textareaOnKeyDown, textareaOnKeyUp]);\n          }\n\n          addDestroyEventListener(_targetElement, [_strScroll, 'drop', strFocus, strFocus + 'out'], [textareaOnScroll, textareaOnDrop, textareaOnFocus, textareaOnFocusout]);\n        } else {\n          addDestroyEventListener(_contentElement, _strTransitionEndEvent, contentOnTransitionEnd);\n        }\n\n        addDestroyEventListener(_viewportElement, _strScroll, viewportOnScroll, true);\n      } //==== Scrollbars ====//\n\n      /**\r\n       * Builds or destroys all scrollbar DOM elements (scrollbar, track, handle)\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupScrollbarsDOM(destroy) {\n        var selectOrGenerateScrollbarDOM = function (isHorizontal) {\n          var scrollbarClassName = isHorizontal ? _classNameScrollbarHorizontal : _classNameScrollbarVertical;\n          var scrollbar = selectOrGenerateDivByClass(_classNameScrollbar + _strSpace + scrollbarClassName, true);\n          var track = selectOrGenerateDivByClass(_classNameScrollbarTrack, scrollbar);\n          var handle = selectOrGenerateDivByClass(_classNameScrollbarHandle, scrollbar);\n\n          if (!_domExists && !destroy) {\n            scrollbar.append(track);\n            track.append(handle);\n          }\n\n          return {\n            _scrollbar: scrollbar,\n            _track: track,\n            _handle: handle\n          };\n        };\n\n        function resetScrollbarDOM(isHorizontal) {\n          var scrollbarVars = getScrollbarVars(isHorizontal);\n          var scrollbar = scrollbarVars._scrollbar;\n          var track = scrollbarVars._track;\n          var handle = scrollbarVars._handle;\n\n          if (_domExists && _initialized) {\n            each([scrollbar, track, handle], function (i, elm) {\n              removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n            });\n          } else {\n            remove(scrollbar || selectOrGenerateScrollbarDOM(isHorizontal)._scrollbar);\n          }\n        }\n\n        var horizontalElements;\n        var verticalElements;\n\n        if (!destroy) {\n          horizontalElements = selectOrGenerateScrollbarDOM(true);\n          verticalElements = selectOrGenerateScrollbarDOM();\n          _scrollbarHorizontalElement = horizontalElements._scrollbar;\n          _scrollbarHorizontalTrackElement = horizontalElements._track;\n          _scrollbarHorizontalHandleElement = horizontalElements._handle;\n          _scrollbarVerticalElement = verticalElements._scrollbar;\n          _scrollbarVerticalTrackElement = verticalElements._track;\n          _scrollbarVerticalHandleElement = verticalElements._handle;\n\n          if (!_domExists) {\n            _paddingElement.after(_scrollbarVerticalElement);\n\n            _paddingElement.after(_scrollbarHorizontalElement);\n          }\n        } else {\n          resetScrollbarDOM(true);\n          resetScrollbarDOM();\n        }\n      }\n      /**\r\n       * Initializes all scrollbar interactivity events. (track and handle dragging, clicking, scrolling)\r\n       * @param isHorizontal True if the target scrollbar is the horizontal scrollbar, false if the target scrollbar is the vertical scrollbar.\r\n       */\n\n\n      function setupScrollbarEvents(isHorizontal) {\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var insideIFrame = _windowElementNative.top !== _windowElementNative;\n        var xy = scrollbarVars._x_y;\n        var XY = scrollbarVars._X_Y;\n        var scroll = _strScroll + scrollbarVars._Left_Top;\n        var strActive = 'active';\n        var strSnapHandle = 'snapHandle';\n        var scrollDurationFactor = 1;\n        var increaseDecreaseScrollAmountKeyCodes = [16, 17]; //shift, ctrl\n\n        var trackTimeout;\n        var mouseDownScroll;\n        var mouseDownOffset;\n        var mouseDownInvertedScale;\n\n        function getPointerPosition(event) {\n          return _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\n        }\n\n        function getPreparedScrollbarsOption(name) {\n          return _currentPreparedOptions.scrollbars[name];\n        }\n\n        function increaseTrackScrollAmount() {\n          scrollDurationFactor = 0.5;\n        }\n\n        function decreaseTrackScrollAmount() {\n          scrollDurationFactor = 1;\n        }\n\n        function documentKeyDown(event) {\n          if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1) increaseTrackScrollAmount();\n        }\n\n        function documentKeyUp(event) {\n          if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1) decreaseTrackScrollAmount();\n        }\n\n        function onMouseTouchDownContinue(event) {\n          var originalEvent = event.originalEvent || event;\n          var isTouchEvent = originalEvent.touches !== undefined;\n          return _sleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || isTouchEvent && !getPreparedScrollbarsOption('touchSupport') ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n        }\n\n        function documentDragMove(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var trackLength = scrollbarVarsInfo._trackLength;\n            var handleLength = scrollbarVarsInfo._handleLength;\n            var scrollRange = scrollbarVarsInfo._maxScroll;\n            var scrollRaw = (getPointerPosition(event) - mouseDownOffset) * mouseDownInvertedScale;\n            var scrollDeltaPercent = scrollRaw / (trackLength - handleLength);\n            var scrollDelta = scrollRange * scrollDeltaPercent;\n            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\n            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i) scrollDelta *= -1;\n\n            _viewportElement[scroll](MATH.round(mouseDownScroll + scrollDelta));\n\n            if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, mouseDownScroll + scrollDelta);\n            if (!_supportPassiveEvents) COMPATIBILITY.prvD(event);\n          } else documentMouseTouchUp(event);\n        }\n\n        function documentMouseTouchUp(event) {\n          event = event || event.originalEvent;\n          setupResponsiveEventListener(_documentElement, [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent], [documentDragMove, documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart], true);\n          if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, true);\n          _scrollbarsHandlesDefineScrollPos = false;\n          removeClass(_bodyElement, _classNameDragging);\n          removeClass(scrollbarVars._handle, strActive);\n          removeClass(scrollbarVars._track, strActive);\n          removeClass(scrollbarVars._scrollbar, strActive);\n          mouseDownScroll = undefined;\n          mouseDownOffset = undefined;\n          mouseDownInvertedScale = 1;\n          decreaseTrackScrollAmount();\n\n          if (trackTimeout !== undefined) {\n            _base.scrollStop();\n\n            clearTimeout(trackTimeout);\n            trackTimeout = undefined;\n          }\n\n          if (event) {\n            var rect = _hostElementNative[LEXICON.bCR]();\n\n            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom; //if mouse is outside host element\n\n            if (!mouseInsideHost) hostOnMouseLeave();\n            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n          }\n        }\n\n        function onHandleMouseTouchDown(event) {\n          if (onMouseTouchDownContinue(event)) onHandleMouseTouchDownAction(event);\n        }\n\n        function onHandleMouseTouchDownAction(event) {\n          mouseDownScroll = _viewportElement[scroll]();\n          mouseDownScroll = isNaN(mouseDownScroll) ? 0 : mouseDownScroll;\n          if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL) mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\n          mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n          mouseDownOffset = getPointerPosition(event);\n          _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\n          addClass(_bodyElement, _classNameDragging);\n          addClass(scrollbarVars._handle, strActive);\n          addClass(scrollbarVars._scrollbar, strActive);\n          setupResponsiveEventListener(_documentElement, [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strSelectStartEvent], [documentDragMove, documentMouseTouchUp, documentOnSelectStart]);\n          if (_msieVersion || !_documentMixed) COMPATIBILITY.prvD(event);\n          COMPATIBILITY.stpP(event);\n        }\n\n        function onTrackMouseTouchDown(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var scrollDistance = MATH.round(_viewportSize[scrollbarVars._w_h]);\n\n            var trackOffset = scrollbarVars._track.offset()[scrollbarVars._left_top];\n\n            var ctrlKey = event.ctrlKey;\n            var instantScroll = event.shiftKey;\n            var instantScrollTransition = instantScroll && ctrlKey;\n            var isFirstIteration = true;\n            var easing = 'linear';\n            var decreaseScroll;\n            var finishedCondition;\n\n            var scrollActionFinsished = function (transition) {\n              if (_scrollbarsHandlesDefineScrollPos) refreshScrollbarHandleOffset(isHorizontal, transition);\n            };\n\n            var scrollActionInstantFinished = function () {\n              scrollActionFinsished();\n              onHandleMouseTouchDownAction(event);\n            };\n\n            var scrollAction = function () {\n              if (!_destroyed) {\n                var mouseOffset = (mouseDownOffset - trackOffset) * mouseDownInvertedScale;\n                var handleOffset = scrollbarVarsInfo._handleOffset;\n                var trackLength = scrollbarVarsInfo._trackLength;\n                var handleLength = scrollbarVarsInfo._handleLength;\n                var scrollRange = scrollbarVarsInfo._maxScroll;\n                var currScroll = scrollbarVarsInfo._currentScroll;\n                var scrollDuration = 270 * scrollDurationFactor;\n                var timeoutDelay = isFirstIteration ? MATH.max(400, scrollDuration) : scrollDuration;\n                var instantScrollPosition = scrollRange * ((mouseOffset - handleLength / 2) / (trackLength - handleLength)); // 100% * positionPercent\n\n                var rtlIsNormal = _isRTL && isHorizontal && (!_rtlScrollBehavior.i && !_rtlScrollBehavior.n || _normalizeRTLCache);\n                var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\n                var scrollObj = {};\n                var animationObj = {\n                  easing: easing,\n                  step: function (now) {\n                    if (_scrollbarsHandlesDefineScrollPos) {\n                      _viewportElement[scroll](now); //https://github.com/jquery/jquery/issues/4340\n\n\n                      refreshScrollbarHandleOffset(isHorizontal, now);\n                    }\n                  }\n                };\n                instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\n                instantScrollPosition = _isRTL && isHorizontal && !_rtlScrollBehavior.i ? scrollRange - instantScrollPosition : instantScrollPosition; //_base.scrollStop();\n\n                if (instantScroll) {\n                  _viewportElement[scroll](instantScrollPosition); //scroll instantly to new position\n\n\n                  if (instantScrollTransition) {\n                    //get the scroll position after instant scroll (in case CSS Snap Points are used) to get the correct snapped scroll position\n                    //and the animation stops at the correct point\n                    instantScrollPosition = _viewportElement[scroll](); //scroll back to the position before instant scrolling so animation can be performed\n\n                    _viewportElement[scroll](currScroll);\n\n                    instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.i ? scrollRange - instantScrollPosition : instantScrollPosition;\n                    instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.n ? -instantScrollPosition : instantScrollPosition;\n                    scrollObj[xy] = instantScrollPosition;\n\n                    _base.scroll(scrollObj, extendDeep(animationObj, {\n                      duration: 130,\n                      complete: scrollActionInstantFinished\n                    }));\n                  } else scrollActionInstantFinished();\n                } else {\n                  decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\n                  finishedCondition = rtlIsNormal ? decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset : decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset;\n\n                  if (finishedCondition) {\n                    clearTimeout(trackTimeout);\n\n                    _base.scrollStop();\n\n                    trackTimeout = undefined;\n                    scrollActionFinsished(true);\n                  } else {\n                    trackTimeout = setTimeout(scrollAction, timeoutDelay);\n                    scrollObj[xy] = (decreaseScroll ? '-=' : '+=') + scrollDistance;\n\n                    _base.scroll(scrollObj, extendDeep(animationObj, {\n                      duration: scrollDuration\n                    }));\n                  }\n\n                  isFirstIteration = false;\n                }\n              }\n            };\n\n            if (ctrlKey) increaseTrackScrollAmount();\n            mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n            mouseDownOffset = COMPATIBILITY.page(event)[xy];\n            _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\n            addClass(_bodyElement, _classNameDragging);\n            addClass(scrollbarVars._track, strActive);\n            addClass(scrollbarVars._scrollbar, strActive);\n            setupResponsiveEventListener(_documentElement, [_strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent], [documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart]);\n            scrollAction();\n            COMPATIBILITY.prvD(event);\n            COMPATIBILITY.stpP(event);\n          }\n        }\n\n        function onTrackMouseTouchEnter(event) {\n          //make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\" or \"move\".\n          _scrollbarsHandleHovered = true;\n          if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(true);\n        }\n\n        function onTrackMouseTouchLeave(event) {\n          _scrollbarsHandleHovered = false;\n          if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) refreshScrollbarsAutoHide(false);\n        }\n\n        function onScrollbarMouseTouchDown(event) {\n          COMPATIBILITY.stpP(event);\n        }\n\n        addDestroyEventListener(scrollbarVars._handle, _strMouseTouchDownEvent, onHandleMouseTouchDown);\n        addDestroyEventListener(scrollbarVars._track, [_strMouseTouchDownEvent, _strMouseEnter, _strMouseLeave], [onTrackMouseTouchDown, onTrackMouseTouchEnter, onTrackMouseTouchLeave]);\n        addDestroyEventListener(scrollbarVars._scrollbar, _strMouseTouchDownEvent, onScrollbarMouseTouchDown);\n\n        if (_supportTransition) {\n          addDestroyEventListener(scrollbarVars._scrollbar, _strTransitionEndEvent, function (event) {\n            if (event.target !== scrollbarVars._scrollbar[0]) return;\n            refreshScrollbarHandleLength(isHorizontal);\n            refreshScrollbarHandleOffset(isHorizontal);\n          });\n        }\n      }\n      /**\r\n       * Shows or hides the given scrollbar and applied a class name which indicates if the scrollbar is scrollable or not.\r\n       * @param isHorizontal True if the horizontal scrollbar is the target, false if the vertical scrollbar is the target.\r\n       * @param shallBeVisible True if the scrollbar shall be shown, false if hidden.\r\n       * @param canScroll True if the scrollbar is scrollable, false otherwise.\r\n       */\n\n\n      function refreshScrollbarAppearance(isHorizontal, shallBeVisible, canScroll) {\n        var scrollbarHiddenClassName = isHorizontal ? _classNameHostScrollbarHorizontalHidden : _classNameHostScrollbarVerticalHidden;\n        var scrollbarElement = isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement;\n        addRemoveClass(_hostElement, scrollbarHiddenClassName, !shallBeVisible);\n        addRemoveClass(scrollbarElement, _classNameScrollbarUnusable, !canScroll);\n      }\n      /**\r\n       * Autoshows / autohides both scrollbars with.\r\n       * @param shallBeVisible True if the scrollbars shall be autoshown (only the case if they are hidden by a autohide), false if the shall be auto hidden.\r\n       * @param delayfree True if the scrollbars shall be hidden without a delay, false or undefined otherwise.\r\n       */\n\n\n      function refreshScrollbarsAutoHide(shallBeVisible, delayfree) {\n        clearTimeout(_scrollbarsAutoHideTimeoutId);\n\n        if (shallBeVisible) {\n          //if(_hasOverflowCache.x && _hideOverflowCache.xs)\n          removeClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden); //if(_hasOverflowCache.y && _hideOverflowCache.ys)\n\n          removeClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n        } else {\n          var anyActive;\n          var strActive = 'active';\n\n          var hide = function () {\n            if (!_scrollbarsHandleHovered && !_destroyed) {\n              anyActive = _scrollbarHorizontalHandleElement.hasClass(strActive) || _scrollbarVerticalHandleElement.hasClass(strActive);\n              if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave)) addClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\n              if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave)) addClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n            }\n          };\n\n          if (_scrollbarsAutoHideDelay > 0 && delayfree !== true) _scrollbarsAutoHideTimeoutId = setTimeout(hide, _scrollbarsAutoHideDelay);else hide();\n        }\n      }\n      /**\r\n       * Refreshes the handle length of the given scrollbar.\r\n       * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n       */\n\n\n      function refreshScrollbarHandleLength(isHorizontal) {\n        var handleCSS = {};\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var digit = 1000000; //get and apply intended handle length\n\n        var handleRatio = MATH.min(1, (_hostSizeCache[scrollbarVars._w_h] - (_paddingAbsoluteCache ? isHorizontal ? _paddingX : _paddingY : 0)) / _contentScrollSizeCache[scrollbarVars._w_h]);\n        handleCSS[scrollbarVars._width_height] = MATH.floor(handleRatio * 100 * digit) / digit + '%'; //the last * digit / digit is for flooring to the 4th digit\n\n        if (!nativeOverlayScrollbarsAreActive()) scrollbarVars._handle.css(handleCSS); //measure the handle length to respect min & max length\n\n        scrollbarVarsInfo._handleLength = scrollbarVars._handle[0]['offset' + scrollbarVars._Width_Height];\n        scrollbarVarsInfo._handleLengthRatio = handleRatio;\n      }\n      /**\r\n       * Refreshes the handle offset of the given scrollbar.\r\n       * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n       * @param scrollOrTransition The scroll position of the given scrollbar axis to which the handle shall be moved or a boolean which indicates whether a transition shall be applied. If undefined or boolean if the current scroll-offset is taken. (if isHorizontal ? scrollLeft : scrollTop)\r\n       */\n\n\n      function refreshScrollbarHandleOffset(isHorizontal, scrollOrTransition) {\n        var transition = type(scrollOrTransition) == TYPES.b;\n        var transitionDuration = 250;\n        var isRTLisHorizontal = _isRTL && isHorizontal;\n        var scrollbarVars = getScrollbarVars(isHorizontal);\n        var scrollbarVarsInfo = scrollbarVars._info;\n        var strTranslateBrace = 'translate(';\n\n        var strTransform = VENDORS._cssProperty('transform');\n\n        var strTransition = VENDORS._cssProperty('transition');\n\n        var nativeScroll = isHorizontal ? _viewportElement[_strScrollLeft]() : _viewportElement[_strScrollTop]();\n        var currentScroll = scrollOrTransition === undefined || transition ? nativeScroll : scrollOrTransition; //measure the handle length to respect min & max length\n\n        var handleLength = scrollbarVarsInfo._handleLength;\n        var trackLength = scrollbarVars._track[0]['offset' + scrollbarVars._Width_Height];\n        var handleTrackDiff = trackLength - handleLength;\n        var handleCSS = {};\n        var transformOffset;\n        var translateValue; //DONT use the variable '_contentScrollSizeCache[scrollbarVars._w_h]' instead of '_viewportElement[0]['scroll' + scrollbarVars._Width_Height]'\n        // because its a bit behind during the small delay when content size updates\n        //(delay = mutationObserverContentLag, if its 0 then this var could be used)\n\n        var maxScroll = (_viewportElementNative[_strScroll + scrollbarVars._Width_Height] - _viewportElementNative['client' + scrollbarVars._Width_Height]) * (_rtlScrollBehavior.n && isRTLisHorizontal ? -1 : 1); //* -1 if rtl scroll max is negative\n\n        var getScrollRatio = function (base) {\n          return isNaN(base / maxScroll) ? 0 : MATH.max(0, MATH.min(1, base / maxScroll));\n        };\n\n        var getHandleOffset = function (scrollRatio) {\n          var offset = handleTrackDiff * scrollRatio;\n          offset = isNaN(offset) ? 0 : offset;\n          offset = isRTLisHorizontal && !_rtlScrollBehavior.i ? trackLength - handleLength - offset : offset;\n          offset = MATH.max(0, offset);\n          return offset;\n        };\n\n        var scrollRatio = getScrollRatio(nativeScroll);\n        var unsnappedScrollRatio = getScrollRatio(currentScroll);\n        var handleOffset = getHandleOffset(unsnappedScrollRatio);\n        var snappedHandleOffset = getHandleOffset(scrollRatio);\n        scrollbarVarsInfo._maxScroll = maxScroll;\n        scrollbarVarsInfo._currentScroll = nativeScroll;\n        scrollbarVarsInfo._currentScrollRatio = scrollRatio;\n\n        if (_supportTransform) {\n          transformOffset = isRTLisHorizontal ? -(trackLength - handleLength - handleOffset) : handleOffset; //in px\n          //transformOffset = (transformOffset / trackLength * 100) * (trackLength / handleLength); //in %\n\n          translateValue = isHorizontal ? strTranslateBrace + transformOffset + 'px, 0)' : strTranslateBrace + '0, ' + transformOffset + 'px)';\n          handleCSS[strTransform] = translateValue; //apply or clear up transition\n\n          if (_supportTransition) handleCSS[strTransition] = transition && MATH.abs(handleOffset - scrollbarVarsInfo._handleOffset) > 1 ? getCSSTransitionString(scrollbarVars._handle) + ', ' + (strTransform + _strSpace + transitionDuration + 'ms') : _strEmpty;\n        } else handleCSS[scrollbarVars._left_top] = handleOffset; //only apply css if offset has changed and overflow exists.\n\n\n        if (!nativeOverlayScrollbarsAreActive()) {\n          scrollbarVars._handle.css(handleCSS); //clear up transition\n\n\n          if (_supportTransform && _supportTransition && transition) {\n            scrollbarVars._handle.one(_strTransitionEndEvent, function () {\n              if (!_destroyed) scrollbarVars._handle.css(strTransition, _strEmpty);\n            });\n          }\n        }\n\n        scrollbarVarsInfo._handleOffset = handleOffset;\n        scrollbarVarsInfo._snappedHandleOffset = snappedHandleOffset;\n        scrollbarVarsInfo._trackLength = trackLength;\n      }\n      /**\r\n       * Refreshes the interactivity of the given scrollbar element.\r\n       * @param isTrack True if the track element is the target, false if the handle element is the target.\r\n       * @param value True for interactivity false for no interactivity.\r\n       */\n\n\n      function refreshScrollbarsInteractive(isTrack, value) {\n        var action = value ? 'removeClass' : 'addClass';\n        var element1 = isTrack ? _scrollbarHorizontalTrackElement : _scrollbarHorizontalHandleElement;\n        var element2 = isTrack ? _scrollbarVerticalTrackElement : _scrollbarVerticalHandleElement;\n        var className = isTrack ? _classNameScrollbarTrackOff : _classNameScrollbarHandleOff;\n        element1[action](className);\n        element2[action](className);\n      }\n      /**\r\n       * Returns a object which is used for fast access for specific variables.\r\n       * @param isHorizontal True if the horizontal scrollbar vars shall be accessed, false if the vertical scrollbar vars shall be accessed.\r\n       * @returns {{wh: string, WH: string, lt: string, _wh: string, _lt: string, t: *, h: *, c: {}, s: *}}\r\n       */\n\n\n      function getScrollbarVars(isHorizontal) {\n        return {\n          _width_height: isHorizontal ? _strWidth : _strHeight,\n          _Width_Height: isHorizontal ? 'Width' : 'Height',\n          _left_top: isHorizontal ? _strLeft : _strTop,\n          _Left_Top: isHorizontal ? 'Left' : 'Top',\n          _x_y: isHorizontal ? _strX : _strY,\n          _X_Y: isHorizontal ? 'X' : 'Y',\n          _w_h: isHorizontal ? 'w' : 'h',\n          _l_t: isHorizontal ? 'l' : 't',\n          _track: isHorizontal ? _scrollbarHorizontalTrackElement : _scrollbarVerticalTrackElement,\n          _handle: isHorizontal ? _scrollbarHorizontalHandleElement : _scrollbarVerticalHandleElement,\n          _scrollbar: isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement,\n          _info: isHorizontal ? _scrollHorizontalInfo : _scrollVerticalInfo\n        };\n      } //==== Scrollbar Corner ====//\n\n      /**\r\n       * Builds or destroys the scrollbar corner DOM element.\r\n       * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n       */\n\n\n      function setupScrollbarCornerDOM(destroy) {\n        _scrollbarCornerElement = _scrollbarCornerElement || selectOrGenerateDivByClass(_classNameScrollbarCorner, true);\n\n        if (!destroy) {\n          if (!_domExists) {\n            _hostElement.append(_scrollbarCornerElement);\n          }\n        } else {\n          if (_domExists && _initialized) {\n            removeClass(_scrollbarCornerElement.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\n          } else {\n            remove(_scrollbarCornerElement);\n          }\n        }\n      }\n      /**\r\n       * Initializes all scrollbar corner interactivity events.\r\n       */\n\n\n      function setupScrollbarCornerEvents() {\n        var insideIFrame = _windowElementNative.top !== _windowElementNative;\n        var mouseDownPosition = {};\n        var mouseDownSize = {};\n        var mouseDownInvertedScale = {};\n        var reconnectMutationObserver;\n\n        function documentDragMove(event) {\n          if (onMouseTouchDownContinue(event)) {\n            var pageOffset = getCoordinates(event);\n            var hostElementCSS = {};\n            if (_resizeHorizontal || _resizeBoth) hostElementCSS[_strWidth] = mouseDownSize.w + (pageOffset.x - mouseDownPosition.x) * mouseDownInvertedScale.x;\n            if (_resizeVertical || _resizeBoth) hostElementCSS[_strHeight] = mouseDownSize.h + (pageOffset.y - mouseDownPosition.y) * mouseDownInvertedScale.y;\n\n            _hostElement.css(hostElementCSS);\n\n            COMPATIBILITY.stpP(event);\n          } else {\n            documentMouseTouchUp(event);\n          }\n        }\n\n        function documentMouseTouchUp(event) {\n          var eventIsTrusted = event !== undefined;\n          setupResponsiveEventListener(_documentElement, [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent], [documentOnSelectStart, documentDragMove, documentMouseTouchUp], true);\n          removeClass(_bodyElement, _classNameDragging);\n          if (_scrollbarCornerElement.releaseCapture) _scrollbarCornerElement.releaseCapture();\n\n          if (eventIsTrusted) {\n            if (reconnectMutationObserver) connectMutationObservers();\n\n            _base.update(_strAuto);\n          }\n\n          reconnectMutationObserver = false;\n        }\n\n        function onMouseTouchDownContinue(event) {\n          var originalEvent = event.originalEvent || event;\n          var isTouchEvent = originalEvent.touches !== undefined;\n          return _sleeping || _destroyed ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n        }\n\n        function getCoordinates(event) {\n          return _msieVersion && insideIFrame ? {\n            x: event.screenX,\n            y: event.screenY\n          } : COMPATIBILITY.page(event);\n        }\n\n        addDestroyEventListener(_scrollbarCornerElement, _strMouseTouchDownEvent, function (event) {\n          if (onMouseTouchDownContinue(event) && !_resizeNone) {\n            if (_mutationObserversConnected) {\n              reconnectMutationObserver = true;\n              disconnectMutationObservers();\n            }\n\n            mouseDownPosition = getCoordinates(event);\n            mouseDownSize.w = _hostElementNative[LEXICON.oW] - (!_isBorderBox ? _paddingX : 0);\n            mouseDownSize.h = _hostElementNative[LEXICON.oH] - (!_isBorderBox ? _paddingY : 0);\n            mouseDownInvertedScale = getHostElementInvertedScale();\n            setupResponsiveEventListener(_documentElement, [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent], [documentOnSelectStart, documentDragMove, documentMouseTouchUp]);\n            addClass(_bodyElement, _classNameDragging);\n            if (_scrollbarCornerElement.setCapture) _scrollbarCornerElement.setCapture();\n            COMPATIBILITY.prvD(event);\n            COMPATIBILITY.stpP(event);\n          }\n        });\n      } //==== Utils ====//\n\n      /**\r\n       * Calls the callback with the given name. The Context of this callback is always _base (this).\r\n       * @param name The name of the target which shall be called.\r\n       * @param args The args with which the callback shall be called.\r\n       * @param dependent Boolean which decides whether the callback shall be fired, undefined is like a \"true\" value.\r\n       */\n\n\n      function dispatchCallback(name, args, dependent) {\n        if (dependent === false) return;\n\n        if (_initialized) {\n          var callback = _currentPreparedOptions.callbacks[name];\n          var extensionOnName = name;\n          var ext;\n          if (extensionOnName.substr(0, 2) === 'on') extensionOnName = extensionOnName.substr(2, 1).toLowerCase() + extensionOnName.substr(3);\n          if (type(callback) == TYPES.f) callback.call(_base, args);\n          each(_extensions, function () {\n            ext = this;\n            if (type(ext.on) == TYPES.f) ext.on(extensionOnName, args);\n          });\n        } else if (!_destroyed) _callbacksInitQeueue.push({\n          n: name,\n          a: args\n        });\n      }\n      /**\r\n       * Sets the \"top, right, bottom, left\" properties, with a given prefix, of the given css object.\r\n       * @param targetCSSObject The css object to which the values shall be applied.\r\n       * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n       * @param values A array of values which shall be applied to the \"top, right, bottom, left\" -properties. The array order is [top, right, bottom, left].\r\n       * If this argument is undefined the value '' (empty string) will be applied to all properties.\r\n       */\n\n\n      function setTopRightBottomLeft(targetCSSObject, prefix, values) {\n        prefix = prefix || _strEmpty;\n        values = values || [_strEmpty, _strEmpty, _strEmpty, _strEmpty];\n        targetCSSObject[prefix + _strTop] = values[0];\n        targetCSSObject[prefix + _strRight] = values[1];\n        targetCSSObject[prefix + _strBottom] = values[2];\n        targetCSSObject[prefix + _strLeft] = values[3];\n      }\n      /**\r\n       * Gets the \"top, right, bottom, left\" CSS properties of the CSS property with the given prefix from the host element.\r\n       * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n       * @param suffix The suffix of the \"top, right, bottom, left\" css properties. (example: 'border-' is a valid prefix with '-width' is a valid suffix)\r\n       * @param zeroX True if the x axis shall be 0.\r\n       * @param zeroY True if the y axis shall be 0.\r\n       * @returns {{}} The object which contains the numbers of the read CSS properties.\r\n       */\n\n\n      function getTopRightBottomLeftHost(prefix, suffix, zeroX, zeroY) {\n        suffix = suffix || _strEmpty;\n        prefix = prefix || _strEmpty;\n        return {\n          t: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strTop + suffix)),\n          r: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strRight + suffix)),\n          b: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strBottom + suffix)),\n          l: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strLeft + suffix))\n        };\n      }\n      /**\r\n       * Returns the computed CSS transition string from the given element.\r\n       * @param element The element from which the transition string shall be returned.\r\n       * @returns {string} The CSS transition string from the given element.\r\n       */\n\n\n      function getCSSTransitionString(element) {\n        var transitionStr = VENDORS._cssProperty('transition');\n\n        var assembledValue = element.css(transitionStr);\n        if (assembledValue) return assembledValue;\n        var regExpString = '\\\\s*(' + '([^,(]+(\\\\(.+?\\\\))?)+' + ')[\\\\s,]*';\n        var regExpMain = new RegExp(regExpString);\n        var regExpValidate = new RegExp('^(' + regExpString + ')+$');\n        var properties = 'property duration timing-function delay'.split(' ');\n        var result = [];\n        var strResult;\n        var valueArray;\n        var i = 0;\n        var j;\n\n        var splitCssStyleByComma = function (str) {\n          strResult = [];\n          if (!str.match(regExpValidate)) return str;\n\n          while (str.match(regExpMain)) {\n            strResult.push(RegExp.$1);\n            str = str.replace(regExpMain, _strEmpty);\n          }\n\n          return strResult;\n        };\n\n        for (; i < properties[LEXICON.l]; i++) {\n          valueArray = splitCssStyleByComma(element.css(transitionStr + '-' + properties[i]));\n\n          for (j = 0; j < valueArray[LEXICON.l]; j++) result[j] = (result[j] ? result[j] + _strSpace : _strEmpty) + valueArray[j];\n        }\n\n        return result.join(', ');\n      }\n      /**\r\n       * Generates a Regular Expression which matches with a string which starts with 'os-host'.\r\n       * @param {boolean} withCurrClassNameOption The Regular Expression also matches if the string is the current ClassName option (multiple values splitted by space possible).\r\n       * @param {boolean} withOldClassNameOption The Regular Expression also matches if the string is the old ClassName option (multiple values splitted by space possible).\r\n       */\n\n\n      function createHostClassNameRegExp(withCurrClassNameOption, withOldClassNameOption) {\n        var i;\n        var split;\n        var appendix;\n\n        var appendClasses = function (classes, condition) {\n          appendix = '';\n\n          if (condition && typeof classes == TYPES.s) {\n            split = classes.split(_strSpace);\n\n            for (i = 0; i < split[LEXICON.l]; i++) appendix += '|' + split[i] + '$'; // split[i].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') for escaping regex characters\n\n          }\n\n          return appendix;\n        };\n\n        return new RegExp('(^' + _classNameHostElement + '([-_].+|)$)' + appendClasses(_classNameCache, withCurrClassNameOption) + appendClasses(_oldClassName, withOldClassNameOption), 'g');\n      }\n      /**\r\n       * Calculates the host-elements inverted scale. (invertedScale = 1 / scale)\r\n       * @returns {{x: number, y: number}} The scale of the host-element.\r\n       */\n\n\n      function getHostElementInvertedScale() {\n        var rect = _paddingElementNative[LEXICON.bCR]();\n\n        return {\n          x: _supportTransform ? 1 / (MATH.round(rect.width) / _paddingElementNative[LEXICON.oW]) || 1 : 1,\n          y: _supportTransform ? 1 / (MATH.round(rect.height) / _paddingElementNative[LEXICON.oH]) || 1 : 1\n        };\n      }\n      /**\r\n       * Checks whether the given object is a HTMLElement.\r\n       * @param o The object which shall be checked.\r\n       * @returns {boolean} True the given object is a HTMLElement, false otherwise.\r\n       */\n\n\n      function isHTMLElement(o) {\n        var strOwnerDocument = 'ownerDocument';\n        var strHTMLElement = 'HTMLElement';\n        var wnd = o && o[strOwnerDocument] ? o[strOwnerDocument].parentWindow || window : window;\n        return typeof wnd[strHTMLElement] == TYPES.o ? o instanceof wnd[strHTMLElement] : //DOM2\n        o && typeof o == TYPES.o && o !== null && o.nodeType === 1 && typeof o.nodeName == TYPES.s;\n      }\n      /**\r\n       * Compares 2 arrays and returns the differences between them as a array.\r\n       * @param a1 The first array which shall be compared.\r\n       * @param a2 The second array which shall be compared.\r\n       * @returns {Array} The differences between the two arrays.\r\n       */\n\n\n      function getArrayDifferences(a1, a2) {\n        var a = [];\n        var diff = [];\n        var i;\n        var k;\n\n        for (i = 0; i < a1.length; i++) a[a1[i]] = true;\n\n        for (i = 0; i < a2.length; i++) {\n          if (a[a2[i]]) delete a[a2[i]];else a[a2[i]] = true;\n        }\n\n        for (k in a) diff.push(k);\n\n        return diff;\n      }\n      /**\r\n       * Returns Zero or the number to which the value can be parsed.\r\n       * @param value The value which shall be parsed.\r\n       * @param toFloat Indicates whether the number shall be parsed to a float.\r\n       */\n\n\n      function parseToZeroOrNumber(value, toFloat) {\n        var num = toFloat ? parseFloat(value) : parseInt(value, 10);\n        return isNaN(num) ? 0 : num;\n      }\n      /**\r\n       * Gets several information of the textarea and returns them as a object or undefined if the browser doesn't support it.\r\n       * @returns {{cursorRow: Number, cursorCol, rows: Number, cols: number, wRow: number, pos: number, max : number}} or undefined if not supported.\r\n       */\n\n\n      function getTextareaInfo() {\n        //read needed values\n        var textareaCursorPosition = _targetElementNative.selectionStart;\n        if (textareaCursorPosition === undefined) return;\n\n        var textareaValue = _targetElement.val();\n\n        var textareaLength = textareaValue[LEXICON.l];\n        var textareaRowSplit = textareaValue.split('\\n');\n        var textareaLastRow = textareaRowSplit[LEXICON.l];\n        var textareaCurrentCursorRowSplit = textareaValue.substr(0, textareaCursorPosition).split('\\n');\n        var widestRow = 0;\n        var textareaLastCol = 0;\n        var cursorRow = textareaCurrentCursorRowSplit[LEXICON.l];\n        var cursorCol = textareaCurrentCursorRowSplit[textareaCurrentCursorRowSplit[LEXICON.l] - 1][LEXICON.l];\n        var rowCols;\n        var i; //get widest Row and the last column of the textarea\n\n        for (i = 0; i < textareaRowSplit[LEXICON.l]; i++) {\n          rowCols = textareaRowSplit[i][LEXICON.l];\n\n          if (rowCols > textareaLastCol) {\n            widestRow = i + 1;\n            textareaLastCol = rowCols;\n          }\n        }\n\n        return {\n          _cursorRow: cursorRow,\n          //cursorRow\n          _cursorColumn: cursorCol,\n          //cursorCol\n          _rows: textareaLastRow,\n          //rows\n          _columns: textareaLastCol,\n          //cols\n          _widestRow: widestRow,\n          //wRow\n          _cursorPosition: textareaCursorPosition,\n          //pos\n          _cursorMax: textareaLength //max\n\n        };\n      }\n      /**\r\n       * Determines whether native overlay scrollbars are active.\r\n       * @returns {boolean} True if native overlay scrollbars are active, false otherwise.\r\n       */\n\n\n      function nativeOverlayScrollbarsAreActive() {\n        return _ignoreOverlayScrollbarHidingCache && _nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y;\n      }\n      /**\r\n       * Gets the element which is used to measure the content size.\r\n       * @returns {*} TextareaCover if target element is textarea else the ContentElement.\r\n       */\n\n\n      function getContentMeasureElement() {\n        return _isTextarea ? _textareaCoverElement[0] : _contentElementNative;\n      }\n      /**\r\n       * Generates a string which represents a HTML div with the given classes or attributes.\r\n       * @param classesOrAttrs The class of the div as string or a object which represents the attributes of the div. (The class attribute can also be written as \"className\".)\r\n       * @param content The content of the div as string.\r\n       * @returns {string} The concated string which represents a HTML div and its content.\r\n       */\n\n\n      function generateDiv(classesOrAttrs, content) {\n        return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ? 'class=\"' + classesOrAttrs + '\"' : function () {\n          var key;\n          var attrs = _strEmpty;\n\n          if (FRAMEWORK.isPlainObject(classesOrAttrs)) {\n            for (key in classesOrAttrs) attrs += (key === 'c' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\n          }\n\n          return attrs;\n        }() : _strEmpty) + '>' + (content || _strEmpty) + '</div>';\n      }\n      /**\r\n       * Selects or generates a div with the given class attribute.\r\n       * @param className The class names (divided by spaces) of the div which shall be selected or generated.\r\n       * @param selectParentOrOnlyChildren The parent element from which of the element shall be selected. (if undefined or boolean its hostElement)\r\n       * If its a boolean it decides whether only the children of the host element shall be selected.\r\n       * @returns {*} The generated or selected element.\r\n       */\n\n\n      function selectOrGenerateDivByClass(className, selectParentOrOnlyChildren) {\n        var onlyChildren = type(selectParentOrOnlyChildren) == TYPES.b;\n        var selectParent = onlyChildren ? _hostElement : selectParentOrOnlyChildren || _hostElement;\n        return _domExists && !selectParent[LEXICON.l] ? null : _domExists ? selectParent[onlyChildren ? 'children' : 'find'](_strDot + className.replace(/\\s/g, _strDot)).eq(0) : FRAMEWORK(generateDiv(className));\n      }\n      /**\r\n       * Gets the value of the given property from the given object.\r\n       * @param obj The object from which the property value shall be got.\r\n       * @param path The property of which the value shall be got.\r\n       * @returns {*} Returns the value of the searched property or undefined of the property wasn't found.\r\n       */\n\n\n      function getObjectPropVal(obj, path) {\n        var splits = path.split(_strDot);\n        var i = 0;\n        var val;\n\n        for (; i < splits.length; i++) {\n          if (!obj[LEXICON.hOP](splits[i])) return;\n          val = obj[splits[i]];\n          if (i < splits.length && type(val) == TYPES.o) obj = val;\n        }\n\n        return val;\n      }\n      /**\r\n       * Sets the value of the given property from the given object.\r\n       * @param obj The object from which the property value shall be set.\r\n       * @param path The property of which the value shall be set.\r\n       * @param val The value of the property which shall be set.\r\n       */\n\n\n      function setObjectPropVal(obj, path, val) {\n        var splits = path.split(_strDot);\n        var splitsLength = splits.length;\n        var i = 0;\n        var extendObj = {};\n        var extendObjRoot = extendObj;\n\n        for (; i < splitsLength; i++) extendObj = extendObj[splits[i]] = i + 1 < splitsLength ? {} : val;\n\n        FRAMEWORK.extend(obj, extendObjRoot, true);\n      }\n      /**\t\r\n       * Runs a action for each selector inside the updateOnLoad option.\t\r\n       * @param {Function} action The action for each updateOnLoad selector, the arguments the function takes is the index and the value (the selector).\t\r\n       */\n\n\n      function eachUpdateOnLoad(action) {\n        var updateOnLoad = _currentPreparedOptions.updateOnLoad;\n        updateOnLoad = type(updateOnLoad) == TYPES.s ? updateOnLoad.split(_strSpace) : updateOnLoad;\n\n        if (COMPATIBILITY.isA(updateOnLoad) && !_destroyed) {\n          each(updateOnLoad, action);\n        }\n      } //==== Utils Cache ====//\n\n      /**\r\n       * Compares two values or objects and returns true if they aren't equal.\r\n       * @param current The first value or object which shall be compared.\r\n       * @param cache The second value or object which shall be compared.\r\n       * @param force If true the returned value is always true.\r\n       * @returns {boolean} True if both values or objects aren't equal or force is true, false otherwise.\r\n       */\n\n\n      function checkCache(current, cache, force) {\n        if (force) return force;\n\n        if (type(current) == TYPES.o && type(cache) == TYPES.o) {\n          for (var prop in current) {\n            if (prop !== 'c') {\n              if (current[LEXICON.hOP](prop) && cache[LEXICON.hOP](prop)) {\n                if (checkCache(current[prop], cache[prop])) return true;\n              } else {\n                return true;\n              }\n            }\n          }\n        } else {\n          return current !== cache;\n        }\n\n        return false;\n      } //==== Shortcuts ====//\n\n      /**\r\n       * jQuery extend method shortcut with a appended \"true\" as first argument.\r\n       */\n\n\n      function extendDeep() {\n        return FRAMEWORK.extend.apply(this, [true].concat([].slice.call(arguments)));\n      }\n      /**\r\n       * jQuery addClass method shortcut.\r\n       */\n\n\n      function addClass(el, classes) {\n        return _frameworkProto.addClass.call(el, classes);\n      }\n      /**\r\n       * jQuery removeClass method shortcut.\r\n       */\n\n\n      function removeClass(el, classes) {\n        return _frameworkProto.removeClass.call(el, classes);\n      }\n      /**\r\n       * Adds or removes the given classes dependent on the boolean value. True for add, false for remove.\r\n       */\n\n\n      function addRemoveClass(el, classes, doAdd) {\n        return doAdd ? addClass(el, classes) : removeClass(el, classes);\n      }\n      /**\r\n       * jQuery remove method shortcut.\r\n       */\n\n\n      function remove(el) {\n        return _frameworkProto.remove.call(el);\n      }\n      /**\r\n       * Finds the first child element with the given selector of the given element.\r\n       * @param el The root element from which the selector shall be valid.\r\n       * @param selector The selector of the searched element.\r\n       * @returns {*} The first element which is a child of the given element and matches the givens selector.\r\n       */\n\n\n      function findFirst(el, selector) {\n        return _frameworkProto.find.call(el, selector).eq(0);\n      } //==== API ====//\n\n      /**\r\n       * Puts the instance to sleep. It wont respond to any changes in the DOM and won't update. Scrollbar Interactivity is also disabled as well as the resize handle.\r\n       * This behavior can be reset by calling the update method.\r\n       */\n\n\n      _base.sleep = function () {\n        _sleeping = true;\n      };\n      /**\r\n       * Updates the plugin and DOM to the current options.\r\n       * This method should only be called if a update is 100% required.\r\n       * @param force True if every property shall be updated and the cache shall be ignored.\r\n       * !INTERNAL USAGE! : force can be a string \"auto\", \"sync\" or \"zoom\" too\r\n       * if \"auto\" then before a real update the content size and host element attributes gets checked, and if they changed only then the update method will be called.\r\n       * if \"sync\" then the async update process (MutationObserver or UpdateLoop) gets synchronized and a corresponding update takes place if one was needed due to pending changes.\r\n       * if \"zoom\" then a update takes place where it's assumed that content and host size changed\r\n       * @returns {boolean|undefined} \r\n       * If force is \"sync\" then a boolean is returned which indicates whether a update was needed due to pending changes.\r\n       * If force is \"auto\" then a boolean is returned whether a update was needed due to attribute or size changes.\r\n       * undefined otherwise.\r\n       */\n\n\n      _base.update = function (force) {\n        if (_destroyed) return;\n        var attrsChanged;\n        var contentSizeC;\n        var isString = type(force) == TYPES.s;\n        var doUpdateAuto;\n        var mutHost;\n        var mutContent;\n\n        if (isString) {\n          if (force === _strAuto) {\n            attrsChanged = meaningfulAttrsChanged();\n            contentSizeC = updateAutoContentSizeChanged();\n            doUpdateAuto = attrsChanged || contentSizeC;\n\n            if (doUpdateAuto) {\n              update({\n                _contentSizeChanged: contentSizeC,\n                _changedOptions: _initialized ? undefined : _currentPreparedOptions\n              });\n            }\n          } else if (force === _strSync) {\n            if (_mutationObserversConnected) {\n              mutHost = _mutationObserverHostCallback(_mutationObserverHost.takeRecords());\n              mutContent = _mutationObserverContentCallback(_mutationObserverContent.takeRecords());\n            } else {\n              mutHost = _base.update(_strAuto);\n            }\n          } else if (force === 'zoom') {\n            update({\n              _hostSizeChanged: true,\n              _contentSizeChanged: true\n            });\n          }\n        } else {\n          force = _sleeping || force;\n          _sleeping = false;\n          if (!_base.update(_strSync) || force) update({\n            _force: force\n          });\n        }\n\n        updateElementsOnLoad();\n        return doUpdateAuto || mutHost || mutContent;\n      };\n      /**\r\n       Gets or sets the current options. The update method will be called automatically if new options were set.\r\n       * @param newOptions If new options are given, then the new options will be set, if new options aren't given (undefined or a not a plain object) then the current options will be returned.\r\n       * @param value If new options is a property path string, then this value will be used to set the option to which the property path string leads.\r\n       * @returns {*}\r\n       */\n\n\n      _base.options = function (newOptions, value) {\n        var option = {};\n        var changedOps; //return current options if newOptions are undefined or empty\n\n        if (FRAMEWORK.isEmptyObject(newOptions) || !FRAMEWORK.isPlainObject(newOptions)) {\n          if (type(newOptions) == TYPES.s) {\n            if (arguments.length > 1) {\n              setObjectPropVal(option, newOptions, value);\n              changedOps = setOptions(option);\n            } else return getObjectPropVal(_currentOptions, newOptions);\n          } else return _currentOptions;\n        } else {\n          changedOps = setOptions(newOptions);\n        }\n\n        if (!FRAMEWORK.isEmptyObject(changedOps)) {\n          update({\n            _changedOptions: changedOps\n          });\n        }\n      };\n      /**\r\n       * Restore the DOM, disconnects all observers, remove all resize observers and put the instance to sleep.\r\n       */\n\n\n      _base.destroy = function () {\n        if (_destroyed) return; //remove this instance from auto update loop\n\n        autoUpdateLoop.remove(_base); //disconnect all mutation observers\n\n        disconnectMutationObservers(); //remove all resize observers\n\n        setupResizeObserver(_sizeObserverElement);\n        setupResizeObserver(_sizeAutoObserverElement); //remove all extensions\n\n        for (var extName in _extensions) _base.removeExt(extName); //remove all 'destroy' events\n\n\n        while (_destroyEvents[LEXICON.l] > 0) _destroyEvents.pop()(); //remove all events from host element\n\n\n        setupHostMouseTouchEvents(true); //remove all helper / detection elements\n\n        if (_contentGlueElement) remove(_contentGlueElement);\n        if (_contentArrangeElement) remove(_contentArrangeElement);\n        if (_sizeAutoObserverAdded) remove(_sizeAutoObserverElement); //remove all generated DOM\n\n        setupScrollbarsDOM(true);\n        setupScrollbarCornerDOM(true);\n        setupStructureDOM(true); //remove all generated image load events\n\n        for (var i = 0; i < _updateOnLoadElms[LEXICON.l]; i++) FRAMEWORK(_updateOnLoadElms[i]).off(_updateOnLoadEventName, updateOnLoadCallback);\n\n        _updateOnLoadElms = undefined;\n        _destroyed = true;\n        _sleeping = true; //remove this instance from the instances list\n\n        INSTANCES(pluginTargetElement, 0);\n        dispatchCallback('onDestroyed'); //remove all properties and methods\n        //for (var property in _base)\n        //    delete _base[property];\n        //_base = undefined;\n      };\n      /**\r\n       * Scrolls to a given position or element.\r\n       * @param coordinates\r\n       * 1. Can be \"coordinates\" which looks like:\r\n       *    { x : ?, y : ? } OR          Object with x and y properties\r\n       *    { left : ?, top : ? } OR     Object with left and top properties\r\n       *    { l : ?, t : ? } OR          Object with l and t properties\r\n       *    [ ?, ? ] OR                  Array where the first two element are the coordinates (first is x, second is y)\r\n       *    ?                            A single value which stays for both axis\r\n       *    A value can be a number, a string or a calculation.\r\n       *\r\n       *    Operators:\r\n       *    [NONE]  The current scroll will be overwritten by the value.\r\n       *    '+='    The value will be added to the current scroll offset\r\n       *    '-='    The value will be subtracted from the current scroll offset\r\n       *    '*='    The current scroll wil be multiplicated by the value.\r\n       *    '/='    The current scroll wil be divided by the value.\r\n       *\r\n       *    Units:\r\n       *    [NONE]  The value is the final scroll amount.                   final = (value * 1)\r\n       *    'px'    Same as none\r\n       *    '%'     The value is dependent on the current scroll value.     final = ((currentScrollValue / 100) * value)\r\n       *    'vw'    The value is multiplicated by the viewport width.       final = (value * viewportWidth)\r\n       *    'vh'    The value is multiplicated by the viewport height.      final = (value * viewportHeight)\r\n       *\r\n       *    example final values:\r\n       *    200, '200px', '50%', '1vw', '1vh', '+=200', '/=1vw', '*=2px', '-=5vh', '+=33%', '+= 50% - 2px', '-= 1vw - 50%'\r\n       *\r\n       * 2. Can be a HTML or jQuery element:\r\n       *    The final scroll offset is the offset (without margin) of the given HTML / jQuery element.\r\n       *\r\n       * 3. Can be a object with a HTML or jQuery element with additional settings:\r\n       *    {\r\n       *      el : [HTMLElement, jQuery element],             MUST be specified, else this object isn't valid.\r\n       *      scroll : [string, array, object],               Default value is 'always'.\r\n       *      block : [string, array, object],                Default value is 'begin'.\r\n       *      margin : [number, boolean, array, object]       Default value is false.\r\n       *    }\r\n       *\r\n       *    Possible scroll settings are:\r\n       *    'always'      Scrolls always.\r\n       *    'ifneeded'    Scrolls only if the element isnt fully in view.\r\n       *    'never'       Scrolls never.\r\n       *\r\n       *    Possible block settings are:\r\n       *    'begin'   Both axis shall be docked to the \"begin\" edge. - The element will be docked to the top and left edge of the viewport.\r\n       *    'end'     Both axis shall be docked to the \"end\" edge. - The element will be docked to the bottom and right edge of the viewport. (If direction is RTL to the bottom and left edge.)\r\n       *    'center'  Both axis shall be docked to \"center\". - The element will be centered in the viewport.\r\n       *    'nearest' The element will be docked to the nearest edge(s).\r\n       *\r\n       *    Possible margin settings are: -- The actual margin of the element wont be affect, this option affects only the final scroll offset.\r\n       *    [BOOLEAN]                                         If true the css margin of the element will be used, if false no margin will be used.\r\n       *    [NUMBER]                                          The margin will be used for all edges.\r\n       *\r\n       * @param duration The duration of the scroll animation, OR a jQuery animation configuration object.\r\n       * @param easing The animation easing.\r\n       * @param complete The animation complete callback.\r\n       * @returns {{\r\n       *   position: {x: number, y: number},\r\n       *   ratio: {x: number, y: number},\r\n       *   max: {x: number, y: number},\r\n       *   handleOffset: {x: number, y: number},\r\n       *   handleLength: {x: number, y: number},\r\n       *   handleLengthRatio: {x: number, y: number}, t\r\n       *   rackLength: {x: number, y: number},\r\n       *   isRTL: boolean,\r\n       *   isRTLNormalized: boolean\r\n       *  }}\r\n       */\n\n\n      _base.scroll = function (coordinates, duration, easing, complete) {\n        if (arguments.length === 0 || coordinates === undefined) {\n          var infoX = _scrollHorizontalInfo;\n          var infoY = _scrollVerticalInfo;\n          var normalizeInvert = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.i;\n          var normalizeNegate = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.n;\n          var scrollX = infoX._currentScroll;\n          var scrollXRatio = infoX._currentScrollRatio;\n          var maxScrollX = infoX._maxScroll;\n          scrollXRatio = normalizeInvert ? 1 - scrollXRatio : scrollXRatio;\n          scrollX = normalizeInvert ? maxScrollX - scrollX : scrollX;\n          scrollX *= normalizeNegate ? -1 : 1;\n          maxScrollX *= normalizeNegate ? -1 : 1;\n          return {\n            position: {\n              x: scrollX,\n              y: infoY._currentScroll\n            },\n            ratio: {\n              x: scrollXRatio,\n              y: infoY._currentScrollRatio\n            },\n            max: {\n              x: maxScrollX,\n              y: infoY._maxScroll\n            },\n            handleOffset: {\n              x: infoX._handleOffset,\n              y: infoY._handleOffset\n            },\n            handleLength: {\n              x: infoX._handleLength,\n              y: infoY._handleLength\n            },\n            handleLengthRatio: {\n              x: infoX._handleLengthRatio,\n              y: infoY._handleLengthRatio\n            },\n            trackLength: {\n              x: infoX._trackLength,\n              y: infoY._trackLength\n            },\n            snappedHandleOffset: {\n              x: infoX._snappedHandleOffset,\n              y: infoY._snappedHandleOffset\n            },\n            isRTL: _isRTL,\n            isRTLNormalized: _normalizeRTLCache\n          };\n        }\n\n        _base.update(_strSync);\n\n        var normalizeRTL = _normalizeRTLCache;\n        var coordinatesXAxisProps = [_strX, _strLeft, 'l'];\n        var coordinatesYAxisProps = [_strY, _strTop, 't'];\n        var coordinatesOperators = ['+=', '-=', '*=', '/='];\n        var durationIsObject = type(duration) == TYPES.o;\n        var completeCallback = durationIsObject ? duration.complete : complete;\n        var i;\n        var finalScroll = {};\n        var specialEasing = {};\n        var doScrollLeft;\n        var doScrollTop;\n        var animationOptions;\n        var strEnd = 'end';\n        var strBegin = 'begin';\n        var strCenter = 'center';\n        var strNearest = 'nearest';\n        var strAlways = 'always';\n        var strNever = 'never';\n        var strIfNeeded = 'ifneeded';\n        var strLength = LEXICON.l;\n        var settingsAxis;\n        var settingsScroll;\n        var settingsBlock;\n        var settingsMargin;\n        var finalElement;\n        var elementObjSettingsAxisValues = [_strX, _strY, 'xy', 'yx'];\n        var elementObjSettingsBlockValues = [strBegin, strEnd, strCenter, strNearest];\n        var elementObjSettingsScrollValues = [strAlways, strNever, strIfNeeded];\n        var coordinatesIsElementObj = coordinates[LEXICON.hOP]('el');\n        var possibleElement = coordinatesIsElementObj ? coordinates.el : coordinates;\n        var possibleElementIsJQuery = possibleElement instanceof FRAMEWORK || JQUERY ? possibleElement instanceof JQUERY : false;\n        var possibleElementIsHTMLElement = possibleElementIsJQuery ? false : isHTMLElement(possibleElement);\n\n        var updateScrollbarInfos = function () {\n          if (doScrollLeft) refreshScrollbarHandleOffset(true);\n          if (doScrollTop) refreshScrollbarHandleOffset(false);\n        };\n\n        var proxyCompleteCallback = type(completeCallback) != TYPES.f ? undefined : function () {\n          updateScrollbarInfos();\n          completeCallback();\n        };\n\n        function checkSettingsStringValue(currValue, allowedValues) {\n          for (i = 0; i < allowedValues[strLength]; i++) {\n            if (currValue === allowedValues[i]) return true;\n          }\n\n          return false;\n        }\n\n        function getRawScroll(isX, coordinates) {\n          var coordinateProps = isX ? coordinatesXAxisProps : coordinatesYAxisProps;\n          coordinates = type(coordinates) == TYPES.s || type(coordinates) == TYPES.n ? [coordinates, coordinates] : coordinates;\n          if (COMPATIBILITY.isA(coordinates)) return isX ? coordinates[0] : coordinates[1];else if (type(coordinates) == TYPES.o) {\n            //decides RTL normalization \"hack\" with .n\n            //normalizeRTL = type(coordinates.n) == TYPES.b ? coordinates.n : normalizeRTL; \n            for (i = 0; i < coordinateProps[strLength]; i++) if (coordinateProps[i] in coordinates) return coordinates[coordinateProps[i]];\n          }\n        }\n\n        function getFinalScroll(isX, rawScroll) {\n          var isString = type(rawScroll) == TYPES.s;\n          var operator;\n          var amount;\n          var scrollInfo = isX ? _scrollHorizontalInfo : _scrollVerticalInfo;\n          var currScroll = scrollInfo._currentScroll;\n          var maxScroll = scrollInfo._maxScroll;\n          var mult = ' * ';\n          var finalValue;\n          var isRTLisX = _isRTL && isX;\n          var normalizeShortcuts = isRTLisX && _rtlScrollBehavior.n && !normalizeRTL;\n          var strReplace = 'replace';\n          var evalFunc = eval;\n          var possibleOperator;\n\n          if (isString) {\n            //check operator\n            if (rawScroll[strLength] > 2) {\n              possibleOperator = rawScroll.substr(0, 2);\n              if (inArray(possibleOperator, coordinatesOperators) > -1) operator = possibleOperator;\n            } //calculate units and shortcuts\n\n\n            rawScroll = operator ? rawScroll.substr(2) : rawScroll;\n            rawScroll = rawScroll[strReplace](/min/g, 0) //'min' = 0%\n            [strReplace](/</g, 0) //'<'   = 0%\n            [strReplace](/max/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent) //'max' = 100%\n            [strReplace](/>/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent) //'>'   = 100%\n            [strReplace](/px/g, _strEmpty)[strReplace](/%/g, mult + maxScroll * (isRTLisX && _rtlScrollBehavior.n ? -1 : 1) / 100.0)[strReplace](/vw/g, mult + _viewportSize.w)[strReplace](/vh/g, mult + _viewportSize.h);\n            amount = parseToZeroOrNumber(isNaN(rawScroll) ? parseToZeroOrNumber(evalFunc(rawScroll), true).toFixed() : rawScroll);\n          } else {\n            amount = rawScroll;\n          }\n\n          if (amount !== undefined && !isNaN(amount) && type(amount) == TYPES.n) {\n            var normalizeIsRTLisX = normalizeRTL && isRTLisX;\n            var operatorCurrScroll = currScroll * (normalizeIsRTLisX && _rtlScrollBehavior.n ? -1 : 1);\n            var invert = normalizeIsRTLisX && _rtlScrollBehavior.i;\n            var negate = normalizeIsRTLisX && _rtlScrollBehavior.n;\n            operatorCurrScroll = invert ? maxScroll - operatorCurrScroll : operatorCurrScroll;\n\n            switch (operator) {\n              case '+=':\n                finalValue = operatorCurrScroll + amount;\n                break;\n\n              case '-=':\n                finalValue = operatorCurrScroll - amount;\n                break;\n\n              case '*=':\n                finalValue = operatorCurrScroll * amount;\n                break;\n\n              case '/=':\n                finalValue = operatorCurrScroll / amount;\n                break;\n\n              default:\n                finalValue = amount;\n                break;\n            }\n\n            finalValue = invert ? maxScroll - finalValue : finalValue;\n            finalValue *= negate ? -1 : 1;\n            finalValue = isRTLisX && _rtlScrollBehavior.n ? MATH.min(0, MATH.max(maxScroll, finalValue)) : MATH.max(0, MATH.min(maxScroll, finalValue));\n          }\n\n          return finalValue === currScroll ? undefined : finalValue;\n        }\n\n        function getPerAxisValue(value, valueInternalType, defaultValue, allowedValues) {\n          var resultDefault = [defaultValue, defaultValue];\n          var valueType = type(value);\n          var valueArrLength;\n          var valueArrItem; //value can be [ string, or array of two strings ]\n\n          if (valueType == valueInternalType) {\n            value = [value, value];\n          } else if (valueType == TYPES.a) {\n            valueArrLength = value[strLength];\n            if (valueArrLength > 2 || valueArrLength < 1) value = resultDefault;else {\n              if (valueArrLength === 1) value[1] = defaultValue;\n\n              for (i = 0; i < valueArrLength; i++) {\n                valueArrItem = value[i];\n\n                if (type(valueArrItem) != valueInternalType || !checkSettingsStringValue(valueArrItem, allowedValues)) {\n                  value = resultDefault;\n                  break;\n                }\n              }\n            }\n          } else if (valueType == TYPES.o) value = [value[_strX] || defaultValue, value[_strY] || defaultValue];else value = resultDefault;\n\n          return {\n            x: value[0],\n            y: value[1]\n          };\n        }\n\n        function generateMargin(marginTopRightBottomLeftArray) {\n          var result = [];\n          var currValue;\n          var currValueType;\n          var valueDirections = [_strTop, _strRight, _strBottom, _strLeft];\n\n          for (i = 0; i < marginTopRightBottomLeftArray[strLength]; i++) {\n            if (i === valueDirections[strLength]) break;\n            currValue = marginTopRightBottomLeftArray[i];\n            currValueType = type(currValue);\n            if (currValueType == TYPES.b) result.push(currValue ? parseToZeroOrNumber(finalElement.css(_strMarginMinus + valueDirections[i])) : 0);else result.push(currValueType == TYPES.n ? currValue : 0);\n          }\n\n          return result;\n        }\n\n        if (possibleElementIsJQuery || possibleElementIsHTMLElement) {\n          //get settings\n          var margin = coordinatesIsElementObj ? coordinates.margin : 0;\n          var axis = coordinatesIsElementObj ? coordinates.axis : 0;\n          var scroll = coordinatesIsElementObj ? coordinates.scroll : 0;\n          var block = coordinatesIsElementObj ? coordinates.block : 0;\n          var marginDefault = [0, 0, 0, 0];\n          var marginType = type(margin);\n          var marginLength;\n          finalElement = possibleElementIsJQuery ? possibleElement : FRAMEWORK(possibleElement);\n\n          if (finalElement[strLength] > 0) {\n            //margin can be [ boolean, number, array of 2, array of 4, object ]\n            if (marginType == TYPES.n || marginType == TYPES.b) margin = generateMargin([margin, margin, margin, margin]);else if (marginType == TYPES.a) {\n              marginLength = margin[strLength];\n              if (marginLength === 2) margin = generateMargin([margin[0], margin[1], margin[0], margin[1]]);else if (marginLength >= 4) margin = generateMargin(margin);else margin = marginDefault;\n            } else if (marginType == TYPES.o) margin = generateMargin([margin[_strTop], margin[_strRight], margin[_strBottom], margin[_strLeft]]);else margin = marginDefault; //block = type(block) === TYPES.b ? block ? [ strNearest, strBegin ] : [ strNearest, strEnd ] : block;\n\n            settingsAxis = checkSettingsStringValue(axis, elementObjSettingsAxisValues) ? axis : 'xy';\n            settingsScroll = getPerAxisValue(scroll, TYPES.s, strAlways, elementObjSettingsScrollValues);\n            settingsBlock = getPerAxisValue(block, TYPES.s, strBegin, elementObjSettingsBlockValues);\n            settingsMargin = margin;\n            var viewportScroll = {\n              l: _scrollHorizontalInfo._currentScroll,\n              t: _scrollVerticalInfo._currentScroll\n            }; // use padding element instead of viewport element because padding element has never padding, margin or position applied.\n\n            var viewportOffset = _paddingElement.offset(); //get coordinates\n\n\n            var elementOffset = finalElement.offset();\n            var doNotScroll = {\n              x: settingsScroll.x == strNever || settingsAxis == _strY,\n              y: settingsScroll.y == strNever || settingsAxis == _strX\n            };\n            elementOffset[_strTop] -= settingsMargin[0];\n            elementOffset[_strLeft] -= settingsMargin[3];\n            var elementScrollCoordinates = {\n              x: MATH.round(elementOffset[_strLeft] - viewportOffset[_strLeft] + viewportScroll.l),\n              y: MATH.round(elementOffset[_strTop] - viewportOffset[_strTop] + viewportScroll.t)\n            };\n\n            if (_isRTL) {\n              if (!_rtlScrollBehavior.n && !_rtlScrollBehavior.i) elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + viewportScroll.l);\n              if (_rtlScrollBehavior.n && normalizeRTL) elementScrollCoordinates.x *= -1;\n              if (_rtlScrollBehavior.i && normalizeRTL) elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + (_scrollHorizontalInfo._maxScroll - viewportScroll.l));\n            } //measuring is required\n\n\n            if (settingsBlock.x != strBegin || settingsBlock.y != strBegin || settingsScroll.x == strIfNeeded || settingsScroll.y == strIfNeeded || _isRTL) {\n              var measuringElm = finalElement[0];\n              var rawElementSize = _supportTransform ? measuringElm[LEXICON.bCR]() : {\n                width: measuringElm[LEXICON.oW],\n                height: measuringElm[LEXICON.oH]\n              };\n              var elementSize = {\n                w: rawElementSize[_strWidth] + settingsMargin[3] + settingsMargin[1],\n                h: rawElementSize[_strHeight] + settingsMargin[0] + settingsMargin[2]\n              };\n\n              var finalizeBlock = function (isX) {\n                var vars = getScrollbarVars(isX);\n                var wh = vars._w_h;\n                var lt = vars._left_top;\n                var xy = vars._x_y;\n                var blockIsEnd = settingsBlock[xy] == (isX ? _isRTL ? strBegin : strEnd : strEnd);\n                var blockIsCenter = settingsBlock[xy] == strCenter;\n                var blockIsNearest = settingsBlock[xy] == strNearest;\n                var scrollNever = settingsScroll[xy] == strNever;\n                var scrollIfNeeded = settingsScroll[xy] == strIfNeeded;\n                var vpSize = _viewportSize[wh];\n                var vpOffset = viewportOffset[lt];\n                var elSize = elementSize[wh];\n                var elOffset = elementOffset[lt];\n                var divide = blockIsCenter ? 2 : 1;\n                var elementCenterOffset = elOffset + elSize / 2;\n                var viewportCenterOffset = vpOffset + vpSize / 2;\n                var isInView = elSize <= vpSize && elOffset >= vpOffset && elOffset + elSize <= vpOffset + vpSize;\n                if (scrollNever) doNotScroll[xy] = true;else if (!doNotScroll[xy]) {\n                  if (blockIsNearest || scrollIfNeeded) {\n                    doNotScroll[xy] = scrollIfNeeded ? isInView : false;\n                    blockIsEnd = elSize < vpSize ? elementCenterOffset > viewportCenterOffset : elementCenterOffset < viewportCenterOffset;\n                  }\n\n                  elementScrollCoordinates[xy] -= blockIsEnd || blockIsCenter ? (vpSize / divide - elSize / divide) * (isX && _isRTL && normalizeRTL ? -1 : 1) : 0;\n                }\n              };\n\n              finalizeBlock(true);\n              finalizeBlock(false);\n            }\n\n            if (doNotScroll.y) delete elementScrollCoordinates.y;\n            if (doNotScroll.x) delete elementScrollCoordinates.x;\n            coordinates = elementScrollCoordinates;\n          }\n        }\n\n        finalScroll[_strScrollLeft] = getFinalScroll(true, getRawScroll(true, coordinates));\n        finalScroll[_strScrollTop] = getFinalScroll(false, getRawScroll(false, coordinates));\n        doScrollLeft = finalScroll[_strScrollLeft] !== undefined;\n        doScrollTop = finalScroll[_strScrollTop] !== undefined;\n\n        if ((doScrollLeft || doScrollTop) && (duration > 0 || durationIsObject)) {\n          if (durationIsObject) {\n            duration.complete = proxyCompleteCallback;\n\n            _viewportElement.animate(finalScroll, duration);\n          } else {\n            animationOptions = {\n              duration: duration,\n              complete: proxyCompleteCallback\n            };\n\n            if (COMPATIBILITY.isA(easing) || FRAMEWORK.isPlainObject(easing)) {\n              specialEasing[_strScrollLeft] = easing[0] || easing.x;\n              specialEasing[_strScrollTop] = easing[1] || easing.y;\n              animationOptions.specialEasing = specialEasing;\n            } else {\n              animationOptions.easing = easing;\n            }\n\n            _viewportElement.animate(finalScroll, animationOptions);\n          }\n        } else {\n          if (doScrollLeft) _viewportElement[_strScrollLeft](finalScroll[_strScrollLeft]);\n          if (doScrollTop) _viewportElement[_strScrollTop](finalScroll[_strScrollTop]);\n          updateScrollbarInfos();\n        }\n      };\n      /**\r\n       * Stops all scroll animations.\r\n       * @returns {*} The current OverlayScrollbars instance (for chaining).\r\n       */\n\n\n      _base.scrollStop = function (param1, param2, param3) {\n        _viewportElement.stop(param1, param2, param3);\n\n        return _base;\n      };\n      /**\r\n       * Returns all relevant elements.\r\n       * @param elementName The name of the element which shall be returned.\r\n       * @returns {{target: *, host: *, padding: *, viewport: *, content: *, scrollbarHorizontal: {scrollbar: *, track: *, handle: *}, scrollbarVertical: {scrollbar: *, track: *, handle: *}, scrollbarCorner: *} | *}\r\n       */\n\n\n      _base.getElements = function (elementName) {\n        var obj = {\n          target: _targetElementNative,\n          host: _hostElementNative,\n          padding: _paddingElementNative,\n          viewport: _viewportElementNative,\n          content: _contentElementNative,\n          scrollbarHorizontal: {\n            scrollbar: _scrollbarHorizontalElement[0],\n            track: _scrollbarHorizontalTrackElement[0],\n            handle: _scrollbarHorizontalHandleElement[0]\n          },\n          scrollbarVertical: {\n            scrollbar: _scrollbarVerticalElement[0],\n            track: _scrollbarVerticalTrackElement[0],\n            handle: _scrollbarVerticalHandleElement[0]\n          },\n          scrollbarCorner: _scrollbarCornerElement[0]\n        };\n        return type(elementName) == TYPES.s ? getObjectPropVal(obj, elementName) : obj;\n      };\n      /**\r\n       * Returns a object which describes the current state of this instance.\r\n       * @param stateProperty A specific property from the state object which shall be returned.\r\n       * @returns {{widthAuto, heightAuto, overflowAmount, hideOverflow, hasOverflow, contentScrollSize, viewportSize, hostSize, autoUpdate} | *}\r\n       */\n\n\n      _base.getState = function (stateProperty) {\n        function prepare(obj) {\n          if (!FRAMEWORK.isPlainObject(obj)) return obj;\n          var extended = extendDeep({}, obj);\n\n          var changePropertyName = function (from, to) {\n            if (extended[LEXICON.hOP](from)) {\n              extended[to] = extended[from];\n              delete extended[from];\n            }\n          };\n\n          changePropertyName('w', _strWidth); //change w to width\n\n          changePropertyName('h', _strHeight); //change h to height\n\n          delete extended.c; //delete c (the 'changed' prop)\n\n          return extended;\n        }\n\n        ;\n        var obj = {\n          destroyed: !!prepare(_destroyed),\n          sleeping: !!prepare(_sleeping),\n          autoUpdate: prepare(!_mutationObserversConnected),\n          widthAuto: prepare(_widthAutoCache),\n          heightAuto: prepare(_heightAutoCache),\n          padding: prepare(_cssPaddingCache),\n          overflowAmount: prepare(_overflowAmountCache),\n          hideOverflow: prepare(_hideOverflowCache),\n          hasOverflow: prepare(_hasOverflowCache),\n          contentScrollSize: prepare(_contentScrollSizeCache),\n          viewportSize: prepare(_viewportSize),\n          hostSize: prepare(_hostSizeCache),\n          documentMixed: prepare(_documentMixed)\n        };\n        return type(stateProperty) == TYPES.s ? getObjectPropVal(obj, stateProperty) : obj;\n      };\n      /**\r\n       * Gets all or specific extension instance.\r\n       * @param extName The name of the extension from which the instance shall be got.\r\n       * @returns {{}} The instance of the extension with the given name or undefined if the instance couldn't be found.\r\n       */\n\n\n      _base.ext = function (extName) {\n        var result;\n\n        var privateMethods = _extensionsPrivateMethods.split(' ');\n\n        var i = 0;\n\n        if (type(extName) == TYPES.s) {\n          if (_extensions[LEXICON.hOP](extName)) {\n            result = extendDeep({}, _extensions[extName]);\n\n            for (; i < privateMethods.length; i++) delete result[privateMethods[i]];\n          }\n        } else {\n          result = {};\n\n          for (i in _extensions) result[i] = extendDeep({}, _base.ext(i));\n        }\n\n        return result;\n      };\n      /**\r\n       * Adds a extension to this instance.\r\n       * @param extName The name of the extension which shall be added.\r\n       * @param extensionOptions The extension options which shall be used.\r\n       * @returns {{}} The instance of the added extension or undefined if the extension couldn't be added properly.\r\n       */\n\n\n      _base.addExt = function (extName, extensionOptions) {\n        var registeredExtensionObj = _plugin.extension(extName);\n\n        var instance;\n        var instanceAdded;\n        var instanceContract;\n        var contractResult;\n        var contractFulfilled = true;\n\n        if (registeredExtensionObj) {\n          if (!_extensions[LEXICON.hOP](extName)) {\n            instance = registeredExtensionObj.extensionFactory.call(_base, extendDeep({}, registeredExtensionObj.defaultOptions), FRAMEWORK, COMPATIBILITY);\n\n            if (instance) {\n              instanceContract = instance.contract;\n\n              if (type(instanceContract) == TYPES.f) {\n                contractResult = instanceContract(window);\n                contractFulfilled = type(contractResult) == TYPES.b ? contractResult : contractFulfilled;\n              }\n\n              if (contractFulfilled) {\n                _extensions[extName] = instance;\n                instanceAdded = instance.added;\n                if (type(instanceAdded) == TYPES.f) instanceAdded(extensionOptions);\n                return _base.ext(extName);\n              }\n            }\n          } else return _base.ext(extName);\n        } else console.warn(\"A extension with the name \\\"\" + extName + \"\\\" isn't registered.\");\n      };\n      /**\r\n       * Removes a extension from this instance.\r\n       * @param extName The name of the extension which shall be removed.\r\n       * @returns {boolean} True if the extension was removed, false otherwise e.g. if the extension wasn't added before.\r\n       */\n\n\n      _base.removeExt = function (extName) {\n        var instance = _extensions[extName];\n        var instanceRemoved;\n\n        if (instance) {\n          delete _extensions[extName];\n          instanceRemoved = instance.removed;\n          if (type(instanceRemoved) == TYPES.f) instanceRemoved();\n          return true;\n        }\n\n        return false;\n      };\n      /**\r\n       * Constructs the plugin.\r\n       * @param targetElement The element to which the plugin shall be applied.\r\n       * @param options The initial options of the plugin.\r\n       * @param extensions The extension(s) which shall be added right after the initialization.\r\n       * @returns {boolean} True if the plugin was successfully initialized, false otherwise.\r\n       */\n\n\n      function construct(targetElement, options, extensions) {\n        _defaultOptions = globals.defaultOptions;\n        _nativeScrollbarStyling = globals.nativeScrollbarStyling;\n        _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\n        _nativeScrollbarIsOverlaid = extendDeep({}, globals.nativeScrollbarIsOverlaid);\n        _overlayScrollbarDummySize = extendDeep({}, globals.overlayScrollbarDummySize);\n        _rtlScrollBehavior = extendDeep({}, globals.rtlScrollBehavior); //parse & set options but don't update\n\n        setOptions(extendDeep({}, _defaultOptions, options));\n        _cssCalc = globals.cssCalc;\n        _msieVersion = globals.msie;\n        _autoUpdateRecommended = globals.autoUpdateRecommended;\n        _supportTransition = globals.supportTransition;\n        _supportTransform = globals.supportTransform;\n        _supportPassiveEvents = globals.supportPassiveEvents;\n        _supportResizeObserver = globals.supportResizeObserver;\n        _supportMutationObserver = globals.supportMutationObserver;\n        _restrictedMeasuring = globals.restrictedMeasuring;\n        _documentElement = FRAMEWORK(targetElement.ownerDocument);\n        _documentElementNative = _documentElement[0];\n        _windowElement = FRAMEWORK(_documentElementNative.defaultView || _documentElementNative.parentWindow);\n        _windowElementNative = _windowElement[0];\n        _htmlElement = findFirst(_documentElement, 'html');\n        _bodyElement = findFirst(_htmlElement, 'body');\n        _targetElement = FRAMEWORK(targetElement);\n        _targetElementNative = _targetElement[0];\n        _isTextarea = _targetElement.is('textarea');\n        _isBody = _targetElement.is('body');\n        _documentMixed = _documentElementNative !== document;\n        /* On a div Element The if checks only whether:\r\n         * - the targetElement has the class \"os-host\"\r\n         * - the targetElement has a a child with the class \"os-padding\"\r\n         * \r\n         * If that's the case, its assumed the DOM has already the following structure:\r\n         * (The \".os-host\" element is the targetElement)\r\n         *\r\n         *  <div class=\"os-host\">\r\n         *      <div class=\"os-resize-observer-host\"></div>\r\n         *      <div class=\"os-padding\">\r\n         *          <div class=\"os-viewport\">\r\n         *              <div class=\"os-content\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar-corner\"></div>\r\n         *  </div>\r\n         *\r\n         * =====================================================================================\r\n         * \r\n         * On a Textarea Element The if checks only whether:\r\n         * - the targetElement has the class \"os-textarea\" \r\n         * - the targetElement is inside a element with the class \"os-content\" \r\n         * \r\n         * If that's the case, its assumed the DOM has already the following structure:\r\n         * (The \".os-textarea\" (textarea) element is the targetElement)\r\n         *\r\n         *  <div class=\"os-host-textarea\">\r\n         *      <div class=\"os-resize-observer-host\"></div>\r\n         *      <div class=\"os-padding os-text-inherit\">\r\n         *          <div class=\"os-viewport os-text-inherit\">\r\n         *              <div class=\"os-content os-text-inherit\">\r\n         *                  <div class=\"os-textarea-cover\"></div>\r\n         *                  <textarea class=\"os-textarea os-text-inherit\"></textarea>\r\n         *              </div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n         *          <div class=\"os-scrollbar-track\">\r\n         *              <div class=\"os-scrollbar-handle\"></div>\r\n         *          </div>\r\n         *      </div>\r\n         *      <div class=\"os-scrollbar-corner\"></div>\r\n         *  </div>\r\n         */\n\n        _domExists = _isTextarea ? _targetElement.hasClass(_classNameTextareaElement) && _targetElement.parent().hasClass(_classNameContentElement) : _targetElement.hasClass(_classNameHostElement) && _targetElement.children(_strDot + _classNamePaddingElement)[LEXICON.l];\n        var initBodyScroll;\n        var bodyMouseTouchDownListener; //check if the plugin hasn't to be initialized\n\n        if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y && !_currentPreparedOptions.nativeScrollbarsOverlaid.initialize) {\n          dispatchCallback('onInitializationWithdrawn');\n\n          if (_domExists) {\n            setupStructureDOM(true);\n            setupScrollbarsDOM(true);\n            setupScrollbarCornerDOM(true);\n          }\n\n          _destroyed = true;\n          _sleeping = true;\n          return _base;\n        }\n\n        if (_isBody) {\n          initBodyScroll = {};\n          initBodyScroll.l = MATH.max(_targetElement[_strScrollLeft](), _htmlElement[_strScrollLeft](), _windowElement[_strScrollLeft]());\n          initBodyScroll.t = MATH.max(_targetElement[_strScrollTop](), _htmlElement[_strScrollTop](), _windowElement[_strScrollTop]());\n\n          bodyMouseTouchDownListener = function () {\n            _viewportElement.removeAttr(LEXICON.ti);\n\n            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, true, true);\n          };\n        } //build OverlayScrollbars DOM\n\n\n        setupStructureDOM();\n        setupScrollbarsDOM();\n        setupScrollbarCornerDOM(); //create OverlayScrollbars events\n\n        setupStructureEvents();\n        setupScrollbarEvents(true);\n        setupScrollbarEvents(false);\n        setupScrollbarCornerEvents(); //create mutation observers\n\n        createMutationObservers(); //build resize observer for the host element\n\n        setupResizeObserver(_sizeObserverElement, hostOnResized);\n\n        if (_isBody) {\n          //apply the body scroll to handle it right in the update method\n          _viewportElement[_strScrollLeft](initBodyScroll.l)[_strScrollTop](initBodyScroll.t); //set the focus on the viewport element so you dont have to click on the page to use keyboard keys (up / down / space) for scrolling\n\n\n          if (document.activeElement == targetElement && _viewportElementNative.focus) {\n            //set a tabindex to make the viewportElement focusable\n            _viewportElement.attr(LEXICON.ti, '-1');\n\n            _viewportElementNative.focus();\n            /* the tabindex has to be removed due to;\r\n             * If you set the tabindex attribute on an <div>, then its child content cannot be scrolled with the arrow keys unless you set tabindex on the content, too\r\n             * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\r\n             */\n\n\n            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, false, true);\n          }\n        } //update for the first time & initialize cache\n\n\n        _base.update(_strAuto); //the plugin is initialized now!\n\n\n        _initialized = true;\n        dispatchCallback('onInitialized'); //call all callbacks which would fire before the initialized was complete\n\n        each(_callbacksInitQeueue, function (index, value) {\n          dispatchCallback(value.n, value.a);\n        });\n        _callbacksInitQeueue = []; //add extensions\n\n        if (type(extensions) == TYPES.s) extensions = [extensions];\n        if (COMPATIBILITY.isA(extensions)) each(extensions, function (index, value) {\n          _base.addExt(value);\n        });else if (FRAMEWORK.isPlainObject(extensions)) each(extensions, function (key, value) {\n          _base.addExt(key, value);\n        }); //add the transition class for transitions AFTER the first update & AFTER the applied extensions (for preventing unwanted transitions)\n\n        setTimeout(function () {\n          if (_supportTransition && !_destroyed) addClass(_hostElement, _classNameHostTransition);\n        }, 333);\n        return _base;\n      }\n\n      if (_plugin.valid(construct(pluginTargetElement, options, extensions))) {\n        INSTANCES(pluginTargetElement, _base);\n      }\n\n      return _base;\n    }\n    /**\r\n     * Initializes a new OverlayScrollbarsInstance object or changes options if already initialized or returns the current instance.\r\n     * @param pluginTargetElements The elements to which the Plugin shall be initialized.\r\n     * @param options The custom options with which the plugin shall be initialized.\r\n     * @param extensions The extension(s) which shall be added right after initialization.\r\n     * @returns {*}\r\n     */\n\n\n    _plugin = window[PLUGINNAME] = function (pluginTargetElements, options, extensions) {\n      if (arguments[LEXICON.l] === 0) return this;\n      var arr = [];\n      var optsIsPlainObj = FRAMEWORK.isPlainObject(options);\n      var inst;\n      var result; //pluginTargetElements is null or undefined\n\n      if (!pluginTargetElements) return optsIsPlainObj || !options ? result : arr;\n      /*\r\n         pluginTargetElements will be converted to:\r\n         1. A jQueryElement Array\r\n         2. A HTMLElement Array\r\n         3. A Array with a single HTML Element\r\n         so pluginTargetElements is always a array.\r\n      */\n\n      pluginTargetElements = pluginTargetElements[LEXICON.l] != undefined ? pluginTargetElements : [pluginTargetElements[0] || pluginTargetElements];\n      initOverlayScrollbarsStatics();\n\n      if (pluginTargetElements[LEXICON.l] > 0) {\n        if (optsIsPlainObj) {\n          FRAMEWORK.each(pluginTargetElements, function (i, v) {\n            inst = v;\n            if (inst !== undefined) arr.push(OverlayScrollbarsInstance(inst, options, extensions, _pluginsGlobals, _pluginsAutoUpdateLoop));\n          });\n        } else {\n          FRAMEWORK.each(pluginTargetElements, function (i, v) {\n            inst = INSTANCES(v);\n            if (options === '!' && _plugin.valid(inst) || COMPATIBILITY.type(options) == TYPES.f && options(v, inst)) arr.push(inst);else if (options === undefined) arr.push(inst);\n          });\n        }\n\n        result = arr[LEXICON.l] === 1 ? arr[0] : arr;\n      }\n\n      return result;\n    };\n    /**\r\n     * Returns a object which contains global information about the plugin and each instance of it.\r\n     * The returned object is just a copy, that means that changes to the returned object won't have any effect to the original object.\r\n     */\n\n\n    _plugin.globals = function () {\n      initOverlayScrollbarsStatics();\n      var globals = FRAMEWORK.extend(true, {}, _pluginsGlobals);\n      delete globals['msie'];\n      return globals;\n    };\n    /**\r\n     * Gets or Sets the default options for each new plugin initialization.\r\n     * @param newDefaultOptions The object with which the default options shall be extended.\r\n     */\n\n\n    _plugin.defaultOptions = function (newDefaultOptions) {\n      initOverlayScrollbarsStatics();\n      var currDefaultOptions = _pluginsGlobals.defaultOptions;\n      if (newDefaultOptions === undefined) return FRAMEWORK.extend(true, {}, currDefaultOptions); //set the new default options\n\n      _pluginsGlobals.defaultOptions = FRAMEWORK.extend(true, {}, currDefaultOptions, _pluginsOptions._validate(newDefaultOptions, _pluginsOptions._template, true, currDefaultOptions)._default);\n    };\n    /**\r\n     * Checks whether the passed instance is a non-destroyed OverlayScrollbars instance.\r\n     * @param osInstance The potential OverlayScrollbars instance which shall be checked.\r\n     * @returns {boolean} True if the passed value is a non-destroyed OverlayScrollbars instance, false otherwise.\r\n     */\n\n\n    _plugin.valid = function (osInstance) {\n      return osInstance instanceof _plugin && !osInstance.getState().destroyed;\n    };\n    /**\r\n     * Registers, Unregisters or returns a extension.\r\n     * Register: Pass the name and the extension. (defaultOptions is optional)\r\n     * Unregister: Pass the name and anything except a function as extension parameter.\r\n     * Get extension: Pass the name of the extension which shall be got.\r\n     * Get all extensions: Pass no arguments.\r\n     * @param extensionName The name of the extension which shall be registered, unregistered or returned.\r\n     * @param extension A function which generates the instance of the extension or anything other to remove a already registered extension.\r\n     * @param defaultOptions The default options which shall be used for the registered extension.\r\n     */\n\n\n    _plugin.extension = function (extensionName, extension, defaultOptions) {\n      var extNameTypeString = COMPATIBILITY.type(extensionName) == TYPES.s;\n      var argLen = arguments[LEXICON.l];\n      var i = 0;\n\n      if (argLen < 1 || !extNameTypeString) {\n        //return a copy of all extension objects\n        return FRAMEWORK.extend(true, {\n          length: _pluginsExtensions[LEXICON.l]\n        }, _pluginsExtensions);\n      } else if (extNameTypeString) {\n        if (COMPATIBILITY.type(extension) == TYPES.f) {\n          //register extension\n          _pluginsExtensions.push({\n            name: extensionName,\n            extensionFactory: extension,\n            defaultOptions: defaultOptions\n          });\n        } else {\n          for (; i < _pluginsExtensions[LEXICON.l]; i++) {\n            if (_pluginsExtensions[i].name === extensionName) {\n              if (argLen > 1) _pluginsExtensions.splice(i, 1); //remove extension\n              else return FRAMEWORK.extend(true, {}, _pluginsExtensions[i]); //return extension with the given name\n            }\n          }\n        }\n      }\n    };\n\n    return _plugin;\n  }();\n\n  if (JQUERY && JQUERY.fn) {\n    /**\r\n     * The jQuery initialization interface.\r\n     * @param options The initial options for the construction of the plugin. To initialize the plugin, this option has to be a object! If it isn't a object, the instance(s) are returned and the plugin wont be initialized.\r\n     * @param extensions The extension(s) which shall be added right after initialization.\r\n     * @returns {*} After initialization it returns the jQuery element array, else it returns the instance(s) of the elements which are selected.\r\n     */\n    JQUERY.fn.overlayScrollbars = function (options, extensions) {\n      var _elements = this;\n\n      if (JQUERY.isPlainObject(options)) {\n        JQUERY.each(_elements, function () {\n          PLUGIN(this, options, extensions);\n        });\n        return _elements;\n      } else return PLUGIN(_elements, options);\n    };\n  }\n\n  return PLUGIN;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3ZlcmxheXNjcm9sbGJhcnMvanMvT3ZlcmxheVNjcm9sbGJhcnMuanM/ZGJlNSJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZGVmaW5lIiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJQTFVHSU5OQU1FIiwiVFlQRVMiLCJvIiwiZiIsImEiLCJzIiwiYiIsIm4iLCJ1IiwieiIsIkxFWElDT04iLCJjIiwiaSIsImwiLCJwIiwidGkiLCJvSCIsImNIIiwic0giLCJvVyIsImNXIiwic1ciLCJoT1AiLCJiQ1IiLCJWRU5ET1JTIiwianNDYWNoZSIsImNzc0NhY2hlIiwiY3NzUHJlZml4ZXMiLCJqc1ByZWZpeGVzIiwiZmlyc3RMZXR0ZXJUb1VwcGVyIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIl9jc3NQcmVmaXhlcyIsIl9qc1ByZWZpeGVzIiwiX2Nzc1Byb3BlcnR5IiwibmFtZSIsInJlc3VsdCIsInVwcGVyY2FzZWROYW1lIiwiZWxtU3R5bGUiLCJjcmVhdGVFbGVtZW50IiwicmVzdWx0UG9zc2liaWxpdGllcyIsInYiLCJjdXJyVmVuZG9yV2l0aG91dERhc2hlcyIsImxlbmd0aCIsInJlcGxhY2UiLCJfY3NzUHJvcGVydHlWYWx1ZSIsInByb3BlcnR5IiwidmFsdWVzIiwic3VmZml4IiwiZHVtbXlTdHlsZSIsInBvc3NibGVWYWx1ZXMiLCJzcGxpdCIsInByZXBhcmVkU3VmZml4IiwicHJvcCIsImNzc1RleHQiLCJfanNBUEkiLCJpc0ludGVyZmFjZSIsImZhbGxiYWNrIiwidG9Mb3dlckNhc2UiLCJDT01QQVRJQklMSVRZIiwid2luZG93U2l6ZSIsIngiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsImlubmVySGVpZ2h0IiwiYmluZCIsImZ1bmMiLCJ0aGlzT2JqIiwicHJvdG8iLCJhQXJncyIsIkFycmF5IiwiY2FsbCIsImFyZ3VtZW50cyIsImZOT1AiLCJmQm91bmQiLCJhcHBseSIsImNvbmNhdCIsIndXIiwid0giLCJtTyIsInJPIiwickFGIiwic2V0VGltZW91dCIsImNBRiIsImlkIiwiY2xlYXJUaW1lb3V0Iiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJzdHBQIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwcnZEIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxhYmxlIiwicmV0dXJuVmFsdWUiLCJwYWdlIiwib3JpZ2luYWxFdmVudCIsInN0clBhZ2UiLCJzdHJDbGllbnQiLCJzdHJYIiwic3RyWSIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJldmVudERvYyIsIm93bmVyRG9jdW1lbnQiLCJkb2MiLCJ0b3VjaGVzIiwidG91Y2giLCJ5Iiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJtQnRuIiwiYnV0dG9uIiwid2hpY2giLCJpbkEiLCJpdGVtIiwiYXJyIiwiZSIsImlzQSIsImRlZiIsImlzQXJyYXkiLCJ0eXBlIiwib2JqIiwiT2JqZWN0IiwidG9TdHJpbmciLCJNQVRIIiwiTWF0aCIsIkpRVUVSWSIsImpRdWVyeSIsIkVBU0lORyIsIl9lYXNpbmdzTWF0aCIsIlBJIiwiY29zIiwic2luIiwidyIsInBvdyIsInQiLCJzcXJ0IiwiYXNpbiIsImFicyIsInN3aW5nIiwiZCIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJGUkFNRVdPUksiLCJfcm5vdGh0bWx3aGl0ZSIsIl9zdHJTcGFjZSIsIl9zdHJFbXB0eSIsIl9zdHJTY3JvbGxMZWZ0IiwiX3N0clNjcm9sbFRvcCIsIl9hbmltYXRpb25zIiwiX3R5cGUiLCJfY3NzTnVtYmVyIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImV4dGVuZCIsInNyYyIsImNvcHlJc0FycmF5IiwiY29weSIsIm9wdGlvbnMiLCJjbG9uZSIsImRlZXAiLCJGYWtlalF1ZXJ5IiwiaXNQbGFpbk9iamVjdCIsImluQXJyYXkiLCJmcm9tSW5kZXgiLCJpc0Z1bmN0aW9uIiwiaXNFbXB0eU9iamVjdCIsImtleSIsImhhc093blByb3BlcnR5IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJlYWNoIiwiY2FsbGJhY2siLCJpc0FycmF5TGlrZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJ2YWx1ZSIsInRva2VucyIsIm1hdGNoIiwiam9pbiIsIm1hdGNoZXMiLCJlbGVtIiwic2VsZWN0b3IiLCJub2RlTGlzdCIsInBhcmVudE5vZGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiZWwiLCJzdHJhdGVneSIsImNoaWxkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibm9kZVR5cGUiLCJzZXRDU1NWYWwiLCJ2YWwiLCJwYXJzZUNTU1ZhbCIsInN0YXJ0TmV4dEFuaW1hdGlvbkluUSIsImFuaW1PYmoiLCJyZW1vdmVGcm9tUSIsImluZGV4IiwibmV4dEFuaW0iLCJxIiwic3BsaWNlIiwiYW5pbWF0ZSIsInByb3BzIiwiZHVyYXRpb24iLCJlYXNpbmciLCJjb21wbGV0ZSIsInNldEFuaW1hdGlvblZhbHVlIiwiZ3VhcmFudGVlZE5leHQiLCJoYXNPcHRpb25zIiwiZnJvbSIsInRvIiwic3RhcnQiLCJwcm9ncmVzcyIsInN0ZXAiLCJzcGVjaWFsRWFzaW5nIiwicHVzaCIsImNzcyIsInRpbWVOb3ciLCJlbmQiLCJwZXJjZW50IiwiZnJvbVZhbCIsInRvVmFsIiwiZWFzZWRWYWwiLCJ0aW1lU3RhcnQiLCJmcmFtZSIsImVsYXBzZWQiLCJxUG9zIiwicU9iaiIsInN0b3AiLCJtYXgiLCJwYXJzZUZsb2F0IiwicG9zIiwic3BlYWNpYWxFYXNpbmciLCJzdGFydFRpbWUiLCJjbGVhclEiLCJqdW1wVG9FbmQiLCJlbGVtZW50SXNWaXNpYmxlIiwiZ2V0Q2xpZW50UmVjdHMiLCJiYXNlIiwiZWxlbWVudHMiLCJlbG1zIiwiaW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJzZWxmIiwib24iLCJldmVudE5hbWUiLCJoYW5kbGVyIiwiZXZlbnROYW1lTGVuZ3RoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiYXR0YWNoRXZlbnQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25lIiwib25lRXZlbnROYW1lIiwib25lSGFuZGxlciIsInRyaWdnZXIiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJmaXJlRXZlbnQiLCJhcHBlbmQiLCJwcmVwZW5kIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInVud3JhcCIsInBhcmVudHMiLCJwYXJlbnQiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwid3JhcEFsbCIsIndyYXBwZXJIVE1MIiwibm9kZXMiLCJ3cmFwcGVyIiwiZGVlcGVzdCIsInByZXZpb3VzU2libGluZyIsImNoaWxkTm9kZXMiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwid3JhcElubmVyIiwiY29udGVudHMiLCJ3cmFwIiwic3R5bGVzIiwiY3B0U3R5bGUiLCJnZXRDcHRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaGFzQ2xhc3MiLCJjbGFzc05hbWUiLCJjbGFzc05hbWVQcmVwYXJlZCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaW5kZXhPZiIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1ciIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwic3VwcG9ydENsYXNzTGlzdCIsImVsbUNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwiaGlkZSIsImRpc3BsYXkiLCJzaG93IiwiYXR0ciIsImF0dHJOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0ciIsInJlbW92ZUF0dHJpYnV0ZSIsIm9mZnNldCIsInJlY3QiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwidG9wIiwibGVmdCIsInBvc2l0aW9uIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZmluZCIsImNoIiwiaXMiLCJjaGlsZHMiLCJqdW1wIiwiSU5TVEFOQ0VTIiwiX3RhcmdldHMiLCJfaW5zdGFuY2VQcm9wZXJ0eVN0cmluZyIsImluc3RhbmNlIiwiYXJnTGVuIiwiUExVR0lOIiwiX3BsdWdpbiIsIl9wbHVnaW5zR2xvYmFscyIsIl9wbHVnaW5zQXV0b1VwZGF0ZUxvb3AiLCJfcGx1Z2luc0V4dGVuc2lvbnMiLCJfcGx1Z2luc09wdGlvbnMiLCJwb3NzaWJsZVRlbXBsYXRlVHlwZXMiLCJyZXN0cmljdGVkU3RyaW5nc1NwbGl0IiwicmVzdHJpY3RlZFN0cmluZ3NQb3NzaWJpbGl0aWVzU3BsaXQiLCJjbGFzc05hbWVBbGxvd2VkVmFsdWVzIiwibnVtYmVyQWxsb3dlZFZhbHVlcyIsImJvb2xlYW5OdWxsQWxsb3dlZFZhbHVlcyIsImJvb2xlYW5UcnVlVGVtcGxhdGUiLCJib29sZWFuRmFsc2VUZW1wbGF0ZSIsImNhbGxiYWNrVGVtcGxhdGUiLCJ1cGRhdGVPbkxvYWRUZW1wbGF0ZSIsImluaGVyaXRlZEF0dHJzVGVtcGxhdGUiLCJyZXNpemVBbGxvd2VkVmFsdWVzIiwib3ZlcmZsb3dCZWhhdmlvckFsbG93ZWRWYWx1ZXMiLCJzY3JvbGxiYXJzVmlzaWJpbGl0eUFsbG93ZWRWYWx1ZXMiLCJzY3JvbGxiYXJzQXV0b0hpZGVBbGxvd2VkVmFsdWVzIiwib3B0aW9uc0RlZmF1bHRzQW5kVGVtcGxhdGUiLCJyZXNpemUiLCJzaXplQXV0b0NhcGFibGUiLCJjbGlwQWx3YXlzIiwibm9ybWFsaXplUlRMIiwicGFkZGluZ0Fic29sdXRlIiwiYXV0b1VwZGF0ZSIsImF1dG9VcGRhdGVJbnRlcnZhbCIsInVwZGF0ZU9uTG9hZCIsIm5hdGl2ZVNjcm9sbGJhcnNPdmVybGFpZCIsInNob3dOYXRpdmVTY3JvbGxiYXJzIiwiaW5pdGlhbGl6ZSIsIm92ZXJmbG93QmVoYXZpb3IiLCJzY3JvbGxiYXJzIiwidmlzaWJpbGl0eSIsImF1dG9IaWRlIiwiYXV0b0hpZGVEZWxheSIsImRyYWdTY3JvbGxpbmciLCJjbGlja1Njcm9sbGluZyIsInRvdWNoU3VwcG9ydCIsInNuYXBIYW5kbGUiLCJ0ZXh0YXJlYSIsImR5bldpZHRoIiwiZHluSGVpZ2h0IiwiaW5oZXJpdGVkQXR0cnMiLCJjYWxsYmFja3MiLCJvbkluaXRpYWxpemVkIiwib25Jbml0aWFsaXphdGlvbldpdGhkcmF3biIsIm9uRGVzdHJveWVkIiwib25TY3JvbGxTdGFydCIsIm9uU2Nyb2xsIiwib25TY3JvbGxTdG9wIiwib25PdmVyZmxvd0NoYW5nZWQiLCJvbk92ZXJmbG93QW1vdW50Q2hhbmdlZCIsIm9uRGlyZWN0aW9uQ2hhbmdlZCIsIm9uQ29udGVudFNpemVDaGFuZ2VkIiwib25Ib3N0U2l6ZUNoYW5nZWQiLCJvblVwZGF0ZWQiLCJjb252ZXJ0IiwidGVtcGxhdGUiLCJyZWN1cnNpdmUiLCJ2YWxUeXBlIiwiX2RlZmF1bHRzIiwiX3RlbXBsYXRlIiwiX3ZhbGlkYXRlIiwid3JpdGVFcnJvcnMiLCJkaWZmT2JqIiwidmFsaWRhdGVkT3B0aW9ucyIsInZhbGlkYXRlZE9wdGlvbnNQcmVwYXJlZCIsIm9iamVjdENvcHkiLCJpc0VtcHR5T2JqIiwiY2hlY2tPYmplY3RQcm9wcyIsImRhdGEiLCJkaWZmRGF0YSIsInByZXZQcm9wTmFtZSIsImlzVmFsaWQiLCJpc0RpZmYiLCJ0ZW1wbGF0ZVZhbHVlIiwidGVtcGxhdGVWYWx1ZVR5cGUiLCJ0ZW1wbGF0ZUlzQ29tcGxleCIsInRlbXBsYXRlVHlwZXMiLCJkYXRhRGlmZlZhbHVlIiwiZGF0YVZhbHVlIiwiZGF0YVZhbHVlVHlwZSIsInByb3BQcmVmaXgiLCJlcnJvciIsImVycm9yUG9zc2libGVUeXBlcyIsImVycm9yUmVzdHJpY3RlZFN0cmluZ3MiLCJyZXN0cmljdGVkU3RyaW5nVmFsdWVzU3BsaXQiLCJyZXN0cmljdGVkU3RyaW5nVmFsdWVzUG9zc2liaWxpdGllc1NwbGl0IiwiaXNSZXN0cmljdGVkVmFsdWUiLCJtYWluUG9zc2liaWxpdHkiLCJjdXJyVHlwZSIsImoiLCJjb25zb2xlIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJfZGVmYXVsdCIsIl9wcmVwYXJlZCIsImluaXRPdmVybGF5U2Nyb2xsYmFyc1N0YXRpY3MiLCJPdmVybGF5U2Nyb2xsYmFyc0dsb2JhbHMiLCJPdmVybGF5U2Nyb2xsYmFyc0F1dG9VcGRhdGVMb29wIiwiZGVmYXVsdE9wdGlvbnMiLCJfYmFzZSIsInN0ck92ZXJmbG93Iiwic3RySGlkZGVuIiwic3RyU2Nyb2xsIiwiYm9keUVsZW1lbnQiLCJzY3JvbGxiYXJEdW1teUVsZW1lbnQiLCJzY3JvbGxiYXJEdW1teUVsZW1lbnQwIiwiZHVtbXlDb250YWluZXJDaGlsZCIsIm5hdGl2ZVNjcm9sbGJhclNpemUiLCJjYWxjTmF0aXZlU2Nyb2xsYmFyU2l6ZSIsIm5hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQiLCJtc2llIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdHJJbmRleE9mIiwic3RyU3ViU3RyaW5nIiwidHJpZGVudCIsImVkZ2UiLCJydiIsInBhcnNlSW50RnVuYyIsInBhcnNlSW50IiwiYXV0b1VwZGF0ZUxvb3AiLCJhdXRvVXBkYXRlUmVjb21tZW5kZWQiLCJuYXRpdmVTY3JvbGxiYXJTdHlsaW5nIiwiZXgiLCJvdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplIiwiY3NzQ2FsYyIsInJlc3RyaWN0ZWRNZWFzdXJpbmciLCJzY3JvbGxTaXplIiwiaCIsInNjcm9sbFNpemUyIiwicnRsU2Nyb2xsQmVoYXZpb3IiLCJkdW1teUNvbnRhaW5lck9mZnNldCIsImR1bW15Q29udGFpbmVyQ2hpbGRPZmZzZXQiLCJkdW1teUNvbnRhaW5lckNoaWxkT2Zmc2V0QWZ0ZXJTY3JvbGwiLCJzdXBwb3J0VHJhbnNmb3JtIiwic3VwcG9ydFRyYW5zaXRpb24iLCJzdXBwb3J0UGFzc2l2ZUV2ZW50cyIsInN1cHBvcnRzUGFzc2l2ZSIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic3VwcG9ydFJlc2l6ZU9ic2VydmVyIiwic3VwcG9ydE11dGF0aW9uT2JzZXJ2ZXIiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsIndpbmRvd0RwciIsImdldFdpbmRvd0RQUiIsIm9uUmVzaXplIiwibmV3VyIsIm5ld0giLCJkZWx0YVciLCJkZWx0YUgiLCJkZWx0YVdSYXRpbyIsInJvdW5kIiwiZGVsdGFIUmF0aW8iLCJhYnNEZWx0YVciLCJhYnNEZWx0YUgiLCJhYnNEZWx0YVdSYXRpbyIsImFic0RlbHRhSFJhdGlvIiwibmV3RFBSIiwiZGVsdGFJc0JpZ2dlciIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlSXNCaWdnZXJUaGFuT25lIiwiZHByQ2hhbmdlZCIsImlzWm9vbSIsIm9sZFNjcm9sbGJhclNpemUiLCJuZXdTY3JvbGxiYXJTaXplIiwidXBkYXRlIiwidmFsT25lIiwidmFsVHdvIiwiYWJzVmFsT25lIiwiYWJzVmFsVHdvIiwiZERQSSIsInNjcmVlbiIsImRldmljZVhEUEkiLCJzRFBJIiwibG9naWNhbFhEUEkiLCJkZXZpY2VQaXhlbFJhdGlvIiwibWVhc3VyZUVsZW1lbnQiLCJnbG9iYWxzIiwiX2luQXJyYXkiLCJfZ2V0Tm93IiwiX3N0ckF1dG9VcGRhdGUiLCJfc3RyQXV0b1VwZGF0ZUludGVydmFsIiwiX3N0ckxlbmd0aCIsIl9sb29waW5nSW5zdGFuY2VzIiwiX2xvb3BpbmdJbnN0YW5jZXNJbnRlcnZhbENhY2hlIiwiX2xvb3BJc0FjdGl2ZSIsIl9sb29wSW50ZXJ2YWxEZWZhdWx0IiwiX2xvb3BJbnRlcnZhbCIsIl9sb29wVGltZU9sZCIsIl9sb29wSUQiLCJsb29wIiwidGltZU5ldyIsInRpbWVEZWx0YSIsImxvd2VzdEludGVydmFsIiwiaW5zdGFuY2VPcHRpb25zIiwiaW5zdGFuY2VBdXRvVXBkYXRlQWxsb3dlZCIsImluc3RhbmNlQXV0b1VwZGF0ZUludGVydmFsIiwibWluIiwiT3ZlcmxheVNjcm9sbGJhcnNJbnN0YW5jZSIsInBsdWdpblRhcmdldEVsZW1lbnQiLCJleHRlbnNpb25zIiwiX2ZyYW1ld29ya1Byb3RvIiwiaXNIVE1MRWxlbWVudCIsImluc3QiLCJfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZCIsIl9vdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplIiwiX3J0bFNjcm9sbEJlaGF2aW9yIiwiX2F1dG9VcGRhdGVSZWNvbW1lbmRlZCIsIl9tc2llVmVyc2lvbiIsIl9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nIiwiX2Nzc0NhbGMiLCJfbmF0aXZlU2Nyb2xsYmFyU2l6ZSIsIl9zdXBwb3J0VHJhbnNpdGlvbiIsIl9zdXBwb3J0VHJhbnNmb3JtIiwiX3N1cHBvcnRQYXNzaXZlRXZlbnRzIiwiX3N1cHBvcnRSZXNpemVPYnNlcnZlciIsIl9zdXBwb3J0TXV0YXRpb25PYnNlcnZlciIsIl9yZXN0cmljdGVkTWVhc3VyaW5nIiwiX2luaXRpYWxpemVkIiwiX2Rlc3Ryb3llZCIsIl9pc1RleHRhcmVhIiwiX2lzQm9keSIsIl9kb2N1bWVudE1peGVkIiwiX2RvbUV4aXN0cyIsIl9pc0JvcmRlckJveCIsIl9zaXplQXV0b09ic2VydmVyQWRkZWQiLCJfcGFkZGluZ1giLCJfcGFkZGluZ1kiLCJfYm9yZGVyWCIsIl9ib3JkZXJZIiwiX21hcmdpblgiLCJfbWFyZ2luWSIsIl9pc1JUTCIsIl9zbGVlcGluZyIsIl9jb250ZW50Qm9yZGVyU2l6ZSIsIl9zY3JvbGxIb3Jpem9udGFsSW5mbyIsIl9zY3JvbGxWZXJ0aWNhbEluZm8iLCJfdmlld3BvcnRTaXplIiwiX25hdGl2ZVNjcm9sbGJhck1pblNpemUiLCJfc3RyTWludXNIaWRkZW4iLCJfc3RyTWFyZ2luTWludXMiLCJfc3RyUGFkZGluZ01pbnVzIiwiX3N0ckJvcmRlck1pbnVzIiwiX3N0clRvcCIsIl9zdHJSaWdodCIsIl9zdHJCb3R0b20iLCJfc3RyTGVmdCIsIl9zdHJNaW5NaW51cyIsIl9zdHJNYXhNaW51cyIsIl9zdHJXaWR0aCIsIl9zdHJIZWlnaHQiLCJfc3RyRmxvYXQiLCJfc3RyQXV0byIsIl9zdHJTeW5jIiwiX3N0clNjcm9sbCIsIl9zdHJIdW5kcmVkUGVyY2VudCIsIl9zdHJYIiwiX3N0clkiLCJfc3RyRG90IiwiX3N0clNjcm9sbGJhciIsIl9zdHJNaW51c0hvcml6b250YWwiLCJfc3RyTWludXNWZXJ0aWNhbCIsIl9zdHJNb3VzZVRvdWNoRG93bkV2ZW50IiwiX3N0ck1vdXNlVG91Y2hVcEV2ZW50IiwiX3N0ck1vdXNlVG91Y2hNb3ZlRXZlbnQiLCJfc3RyTW91c2VFbnRlciIsIl9zdHJNb3VzZUxlYXZlIiwiX3N0cktleURvd25FdmVudCIsIl9zdHJLZXlVcEV2ZW50IiwiX3N0clNlbGVjdFN0YXJ0RXZlbnQiLCJfc3RyVHJhbnNpdGlvbkVuZEV2ZW50IiwiX3N0clJlc2l6ZU9ic2VydmVyUHJvcGVydHkiLCJfY2Fzc05hbWVzUHJlZml4IiwiX2NsYXNzTmFtZUhUTUxFbGVtZW50IiwiX2NsYXNzTmFtZUhvc3RFbGVtZW50IiwiX2NsYXNzTmFtZUhvc3RFbGVtZW50Rm9yZWlnbiIsIl9jbGFzc05hbWVIb3N0VGV4dGFyZWFFbGVtZW50IiwiX2NsYXNzTmFtZUhvc3RTY3JvbGxiYXJIb3Jpem9udGFsSGlkZGVuIiwiX2NsYXNzTmFtZUhvc3RTY3JvbGxiYXJWZXJ0aWNhbEhpZGRlbiIsIl9jbGFzc05hbWVIb3N0VHJhbnNpdGlvbiIsIl9jbGFzc05hbWVIb3N0UlRMIiwiX2NsYXNzTmFtZUhvc3RSZXNpemVEaXNhYmxlZCIsIl9jbGFzc05hbWVIb3N0U2Nyb2xsaW5nIiwiX2NsYXNzTmFtZUhvc3RPdmVyZmxvdyIsIl9jbGFzc05hbWVIb3N0T3ZlcmZsb3dYIiwiX2NsYXNzTmFtZUhvc3RPdmVyZmxvd1kiLCJfY2xhc3NOYW1lVGV4dGFyZWFFbGVtZW50IiwiX2NsYXNzTmFtZVRleHRhcmVhQ292ZXJFbGVtZW50IiwiX2NsYXNzTmFtZVBhZGRpbmdFbGVtZW50IiwiX2NsYXNzTmFtZVZpZXdwb3J0RWxlbWVudCIsIl9jbGFzc05hbWVWaWV3cG9ydE5hdGl2ZVNjcm9sbGJhcnNJbnZpc2libGUiLCJfY2xhc3NOYW1lVmlld3BvcnROYXRpdmVTY3JvbGxiYXJzT3ZlcmxhaWQiLCJfY2xhc3NOYW1lQ29udGVudEVsZW1lbnQiLCJfY2xhc3NOYW1lQ29udGVudEFycmFuZ2VFbGVtZW50IiwiX2NsYXNzTmFtZUNvbnRlbnRHbHVlRWxlbWVudCIsIl9jbGFzc05hbWVTaXplQXV0b09ic2VydmVyRWxlbWVudCIsIl9jbGFzc05hbWVSZXNpemVPYnNlcnZlckVsZW1lbnQiLCJfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJJdGVtRWxlbWVudCIsIl9jbGFzc05hbWVSZXNpemVPYnNlcnZlckl0ZW1GaW5hbEVsZW1lbnQiLCJfY2xhc3NOYW1lVGV4dEluaGVyaXQiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyIiwiX2NsYXNzTmFtZVNjcm9sbGJhclRyYWNrIiwiX2NsYXNzTmFtZVNjcm9sbGJhclRyYWNrT2ZmIiwiX2NsYXNzTmFtZVNjcm9sbGJhckhhbmRsZSIsIl9jbGFzc05hbWVTY3JvbGxiYXJIYW5kbGVPZmYiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyVW51c2FibGUiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyQXV0b0hpZGRlbiIsIl9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXIiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplIiwiX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lclJlc2l6ZUIiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplSCIsIl9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVWIiwiX2NsYXNzTmFtZVNjcm9sbGJhckhvcml6b250YWwiLCJfY2xhc3NOYW1lU2Nyb2xsYmFyVmVydGljYWwiLCJfY2xhc3NOYW1lRHJhZ2dpbmciLCJfY2xhc3NOYW1lVGhlbWVOb25lIiwiX2NsYXNzTmFtZXNEeW5hbWljRGVzdHJveSIsIl9jYWxsYmFja3NJbml0UWV1ZXVlIiwiX3ZpZXdwb3J0QXR0cnNGcm9tVGFyZ2V0IiwiX2RlZmF1bHRPcHRpb25zIiwiX2N1cnJlbnRPcHRpb25zIiwiX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMiLCJfZXh0ZW5zaW9ucyIsIl9leHRlbnNpb25zUHJpdmF0ZU1ldGhvZHMiLCJfbGFzdFVwZGF0ZVRpbWUiLCJfc3dhbGxvd2VkVXBkYXRlSGludHMiLCJfc3dhbGxvd2VkVXBkYXRlVGltZW91dCIsIl9zd2FsbG93VXBkYXRlTGFnIiwiX3VwZGF0ZU9uTG9hZEV2ZW50TmFtZSIsIl91cGRhdGVPbkxvYWRFbG1zIiwiX3dpbmRvd0VsZW1lbnQiLCJfZG9jdW1lbnRFbGVtZW50IiwiX2h0bWxFbGVtZW50IiwiX2JvZHlFbGVtZW50IiwiX3RhcmdldEVsZW1lbnQiLCJfaG9zdEVsZW1lbnQiLCJfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnQiLCJfc2l6ZU9ic2VydmVyRWxlbWVudCIsIl9wYWRkaW5nRWxlbWVudCIsIl92aWV3cG9ydEVsZW1lbnQiLCJfY29udGVudEVsZW1lbnQiLCJfY29udGVudEFycmFuZ2VFbGVtZW50IiwiX2NvbnRlbnRHbHVlRWxlbWVudCIsIl90ZXh0YXJlYUNvdmVyRWxlbWVudCIsIl9zY3JvbGxiYXJDb3JuZXJFbGVtZW50IiwiX3Njcm9sbGJhckhvcml6b250YWxFbGVtZW50IiwiX3Njcm9sbGJhckhvcml6b250YWxUcmFja0VsZW1lbnQiLCJfc2Nyb2xsYmFySG9yaXpvbnRhbEhhbmRsZUVsZW1lbnQiLCJfc2Nyb2xsYmFyVmVydGljYWxFbGVtZW50IiwiX3Njcm9sbGJhclZlcnRpY2FsVHJhY2tFbGVtZW50IiwiX3Njcm9sbGJhclZlcnRpY2FsSGFuZGxlRWxlbWVudCIsIl93aW5kb3dFbGVtZW50TmF0aXZlIiwiX2RvY3VtZW50RWxlbWVudE5hdGl2ZSIsIl90YXJnZXRFbGVtZW50TmF0aXZlIiwiX2hvc3RFbGVtZW50TmF0aXZlIiwiX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50TmF0aXZlIiwiX3NpemVPYnNlcnZlckVsZW1lbnROYXRpdmUiLCJfcGFkZGluZ0VsZW1lbnROYXRpdmUiLCJfdmlld3BvcnRFbGVtZW50TmF0aXZlIiwiX2NvbnRlbnRFbGVtZW50TmF0aXZlIiwiX2hvc3RTaXplQ2FjaGUiLCJfY29udGVudFNjcm9sbFNpemVDYWNoZSIsIl9hcnJhbmdlQ29udGVudFNpemVDYWNoZSIsIl9oYXNPdmVyZmxvd0NhY2hlIiwiX2hpZGVPdmVyZmxvd0NhY2hlIiwiX3dpZHRoQXV0b0NhY2hlIiwiX2hlaWdodEF1dG9DYWNoZSIsIl9jc3NCb3hTaXppbmdDYWNoZSIsIl9jc3NQYWRkaW5nQ2FjaGUiLCJfY3NzQm9yZGVyQ2FjaGUiLCJfY3NzTWFyZ2luQ2FjaGUiLCJfY3NzRGlyZWN0aW9uQ2FjaGUiLCJfY3NzRGlyZWN0aW9uRGV0ZWN0ZWRDYWNoZSIsIl9wYWRkaW5nQWJzb2x1dGVDYWNoZSIsIl9jbGlwQWx3YXlzQ2FjaGUiLCJfY29udGVudEdsdWVTaXplQ2FjaGUiLCJfb3ZlcmZsb3dCZWhhdmlvckNhY2hlIiwiX292ZXJmbG93QW1vdW50Q2FjaGUiLCJfaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZ0NhY2hlIiwiX2F1dG9VcGRhdGVDYWNoZSIsIl9zaXplQXV0b0NhcGFibGVDYWNoZSIsIl9jb250ZW50RWxlbWVudFNjcm9sbFNpemVDaGFuZ2VEZXRlY3RlZENhY2hlIiwiX2hvc3RFbGVtZW50U2l6ZUNoYW5nZURldGVjdGVkQ2FjaGUiLCJfc2Nyb2xsYmFyc1Zpc2liaWxpdHlDYWNoZSIsIl9zY3JvbGxiYXJzQXV0b0hpZGVDYWNoZSIsIl9zY3JvbGxiYXJzQ2xpY2tTY3JvbGxpbmdDYWNoZSIsIl9zY3JvbGxiYXJzRHJhZ1Njcm9sbGluZ0NhY2hlIiwiX3Jlc2l6ZUNhY2hlIiwiX25vcm1hbGl6ZVJUTENhY2hlIiwiX2NsYXNzTmFtZUNhY2hlIiwiX29sZENsYXNzTmFtZSIsIl90ZXh0YXJlYUF1dG9XcmFwcGluZ0NhY2hlIiwiX3RleHRhcmVhSW5mb0NhY2hlIiwiX3RleHRhcmVhU2l6ZUNhY2hlIiwiX3RleHRhcmVhRHluSGVpZ2h0Q2FjaGUiLCJfdGV4dGFyZWFEeW5XaWR0aENhY2hlIiwiX2JvZHlNaW5TaXplQ2FjaGUiLCJfdXBkYXRlQXV0b0NhY2hlIiwiX211dGF0aW9uT2JzZXJ2ZXJIb3N0IiwiX211dGF0aW9uT2JzZXJ2ZXJDb250ZW50IiwiX211dGF0aW9uT2JzZXJ2ZXJIb3N0Q2FsbGJhY2siLCJfbXV0YXRpb25PYnNlcnZlckNvbnRlbnRDYWxsYmFjayIsIl9tdXRhdGlvbk9ic2VydmVyc0Nvbm5lY3RlZCIsIl9tdXRhdGlvbk9ic2VydmVyQXR0cnNUZXh0YXJlYSIsIl9tdXRhdGlvbk9ic2VydmVyQXR0cnNIb3N0IiwiX2Rlc3Ryb3lFdmVudHMiLCJfdGV4dGFyZWFIYXNGb2N1cyIsIl9zY3JvbGxiYXJzQXV0b0hpZGVUaW1lb3V0SWQiLCJfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZVRpbWVvdXRJZCIsIl9zY3JvbGxiYXJzQXV0b0hpZGVEZWxheSIsIl9zY3JvbGxiYXJzQXV0b0hpZGVOZXZlciIsIl9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwiLCJfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSIsIl9zY3JvbGxiYXJzQXV0b0hpZGVMZWF2ZSIsIl9zY3JvbGxiYXJzSGFuZGxlSG92ZXJlZCIsIl9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcyIsIl9yZXNpemVOb25lIiwiX3Jlc2l6ZUJvdGgiLCJfcmVzaXplSG9yaXpvbnRhbCIsIl9yZXNpemVWZXJ0aWNhbCIsInNldHVwUmVzcG9uc2l2ZUV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwiZXZlbnROYW1lcyIsImxpc3RlbmVyIiwicGFzc2l2ZSIsImNvbGxlY3RlZCIsIm1ldGhvZCIsIm9uT2ZmIiwiZXZlbnRzIiwiYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIiLCJzZXR1cFJlc2l6ZU9ic2VydmVyIiwidGFyZ2V0RWxlbWVudCIsIm9uRWxlbWVudFJlc2l6ZWRDYWxsYmFjayIsInJlc2l6ZU9ic2VydmVyIiwic3RyQW5pbWF0aW9uU3RhcnRFdmVudCIsInN0ckNoaWxkTm9kZXMiLCJjb25zdFNjcm9sbCIsImdlbmVyYXRlRGl2Iiwib2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlyIiwic3R5bGUiLCJvYnNlcnZlckVsZW1lbnQiLCJzaHJpbmtFbGVtZW50IiwiZXhwYW5kRWxlbWVudCIsImV4cGFuZEVsZW1lbnRDaGlsZCIsIndpZHRoQ2FjaGUiLCJoZWlnaHRDYWNoZSIsImlzRGlydHkiLCJyQUZJZCIsImN1cnJXaWR0aCIsImN1cnJIZWlnaHQiLCJmYWN0b3IiLCJyZXNldCIsIm9uUmVzaXplZCIsImV4cGFuZENoaWxkQ1NTIiwib2JzZXJ2ZXJFbGVtZW50Q1NTIiwic2V0VG9wUmlnaHRCb3R0b21MZWZ0IiwiaXNJRSIsImZpbmRGaXJzdCIsIm9ubG9hZCIsInduZCIsImNvbnRlbnREb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZGlyZWN0aW9uQ2hhbmdlZCIsInNjcm9sbExlZnRWYWx1ZSIsInJlc2l6ZU9ic2VydmVyT2JqIiwiZGlzY29ubmVjdCIsImNyZWF0ZU11dGF0aW9uT2JzZXJ2ZXJzIiwibXV0YXRpb25PYnNlcnZlckNvbnRlbnRMYWciLCJtdXRhdGlvbk9ic2VydmVyIiwiY29udGVudExhc3RVcGRhdGUiLCJtdXRhdGlvblRhcmdldCIsIm11dGF0aW9uQXR0ck5hbWUiLCJtdXRhdGlvbklzQ2xhc3MiLCJvbGRNdXRhdGlvblZhbCIsIm5ld0NsYXNzVmFsIiwiaG9zdENsYXNzTmFtZVJlZ2V4IiwiY29udGVudFRpbWVvdXQiLCJzaXplQXV0byIsImFjdGlvbiIsIm11dGF0aW9ucyIsImRvVXBkYXRlIiwiZG9VcGRhdGVGb3JjZSIsIm11dGF0aW9uIiwibXV0YXRlZEF0dHJzIiwiYXR0cmlidXRlTmFtZSIsIm9sZFZhbHVlIiwiY3JlYXRlSG9zdENsYXNzTmFtZVJlZ0V4cCIsImZpbHRlciIsImhvc3RDbGFzc05hbWVzQ2hhbmdlZCIsInVwZGF0ZVZpZXdwb3J0QXR0cnNGcm9tVGFyZ2V0IiwiaXNVbmtub3duTXV0YXRpb24iLCJ0ZXh0YXJlYVVwZGF0ZSIsImNvbm5lY3RNdXRhdGlvbk9ic2VydmVycyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVPbGRWYWx1ZSIsImF0dHJpYnV0ZUZpbHRlciIsInN1YnRyZWUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwiZGlzY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXJzIiwiaG9zdE9uUmVzaXplZCIsImNoYW5nZWQiLCJob3N0U2l6ZSIsImNoZWNrQ2FjaGUiLCJfaG9zdFNpemVDaGFuZ2VkIiwiaG9zdE9uTW91c2VFbnRlciIsInJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUiLCJob3N0T25Nb3VzZUxlYXZlIiwiaG9zdE9uTW91c2VNb3ZlIiwiZG9jdW1lbnRPblNlbGVjdFN0YXJ0IiwidXBkYXRlT25Mb2FkQ2FsbGJhY2siLCJlbG0iLCJlYWNoVXBkYXRlT25Mb2FkIiwidXBkYXRlT25Mb2FkU2VsZWN0b3IiLCJfY29udGVudFNpemVDaGFuZ2VkIiwic2V0dXBIb3N0TW91c2VUb3VjaEV2ZW50cyIsImRlc3Ryb3kiLCJib2R5TWluU2l6ZUNoYW5nZWQiLCJib2R5TWluU2l6ZSIsInBhcnNlVG9aZXJvT3JOdW1iZXIiLCJvbGRDbGFzc05hbWVzIiwibmV3Q2xhc3NOYW1lcyIsImN1cnJDbGFzc2VzIiwib2xkQ2xhc3NlcyIsImRpZmYiLCJnZXRBcnJheURpZmZlcmVuY2VzIiwiaWR4IiwicmVnZXgiLCJtdXRhdGlvblR5cGUiLCJzdHJDbG9zZXN0IiwidXBkYXRlQXV0b0NvbnRlbnRTaXplQ2hhbmdlZCIsImNvbnRlbnRNZWFzdXJlRWxlbWVudCIsImdldENvbnRlbnRNZWFzdXJlRWxlbWVudCIsInRleHRhcmVhVmFsdWVMZW5ndGgiLCJzZXRDU1MiLCJmbG9hdCIsImJvZHlNaW5TaXplQyIsImNvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZSIsIm1lYW5pbmdmdWxBdHRyc0NoYW5nZWQiLCJjdXJyIiwiY2FjaGUiLCJjaGFuZ2VkQXR0cnMiLCJjaGVja3MiLCJfZWxlbSIsIl9hdHRycyIsImNoZWNrIiwiaXNTaXplQWZmZWN0aW5nQ1NTUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJmbGV4QmFzaXMiLCJhZmZlY3RpbmdQcm9wc1giLCJhZmZlY3RpbmdQcm9wc1hDb250ZW50Qm94IiwiYWZmZWN0aW5nUHJvcHNZIiwiYWZmZWN0aW5nUHJvcHNZQ29udGVudEJveCIsIl9zdHJTIiwiX3N0clZTIiwiY2hlY2tYIiwiY2hlY2tZIiwic2l6ZUlzQWZmZWN0ZWQiLCJjaGVja1Byb3BlcnR5TmFtZSIsImF0dHJzIiwidGFyZ2V0QXR0ciIsIndyYXBBdHRyT2ZmIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJkb01lYXN1cmUiLCJvcmlnV2lkdGgiLCJ3aWR0aCIsIm9yaWdIZWlnaHQiLCJoZWlnaHQiLCJfb3JpZ2luYWxXaWR0aCIsIl9vcmlnaW5hbEhlaWdodCIsIl9keW5hbWljV2lkdGgiLCJfZHluYW1pY0hlaWdodCIsInVwZGF0ZUhpbnRzIiwiX2ZvcmNlIiwiaG9zdFNpemVDaGFuZ2VkIiwiY29udGVudFNpemVDaGFuZ2VkIiwiZm9yY2UiLCJjaGFuZ2VkT3B0aW9ucyIsIl9jaGFuZ2VkT3B0aW9ucyIsInN3YWxsb3ciLCJkaXNwbGF5SXNIaWRkZW4iLCJleHRlbmREZWVwIiwiY2hlY2tDYWNoZUF1dG9Gb3JjZSIsImN1cnJTY3JvbGwiLCJjdXJyZW50UHJlcGFyZWRPcHRpb25zU2Nyb2xsYmFycyIsImN1cnJlbnRQcmVwYXJlZE9wdGlvbnNUZXh0YXJlYSIsInNjcm9sbGJhcnNWaXNpYmlsaXR5Iiwic2Nyb2xsYmFyc1Zpc2liaWxpdHlDaGFuZ2VkIiwic2Nyb2xsYmFyc0F1dG9IaWRlIiwic2Nyb2xsYmFyc0F1dG9IaWRlQ2hhbmdlZCIsInNjcm9sbGJhcnNDbGlja1Njcm9sbGluZyIsInNjcm9sbGJhcnNDbGlja1Njcm9sbGluZ0NoYW5nZWQiLCJzY3JvbGxiYXJzRHJhZ1Njcm9sbGluZyIsInNjcm9sbGJhcnNEcmFnU2Nyb2xsaW5nQ2hhbmdlZCIsImNsYXNzTmFtZUNoYW5nZWQiLCJyZXNpemVDaGFuZ2VkIiwicGFkZGluZ0Fic29sdXRlQ2hhbmdlZCIsImNsaXBBbHdheXNDaGFuZ2VkIiwic2l6ZUF1dG9DYXBhYmxlQ2hhbmdlZCIsImlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmciLCJpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nQ2hhbmdlZCIsImF1dG9VcGRhdGVDaGFuZ2VkIiwib3ZlcmZsb3dCZWhhdmlvckNoYW5nZWQiLCJ0ZXh0YXJlYUR5bldpZHRoIiwidGV4dGFyZWFEeW5XaWR0aENoYW5nZWQiLCJ0ZXh0YXJlYUR5bkhlaWdodCIsInRleHRhcmVhRHluSGVpZ2h0Q2hhbmdlZCIsIm9sZFNpemUiLCJuZXdTaXplIiwidGV4dGFyZWFBdXRvV3JhcHBpbmciLCJ0ZXh0YXJlYUF1dG9XcmFwcGluZ0NoYW5nZWQiLCJjc3NEaXJlY3Rpb24iLCJjc3NEaXJlY3Rpb25DaGFuZ2VkIiwiYm94U2l6aW5nIiwiYm94U2l6aW5nQ2hhbmdlZCIsInBhZGRpbmciLCJnZXRUb3BSaWdodEJvdHRvbUxlZnRIb3N0Iiwic2l6ZUF1dG9PYnNlcnZlckVsZW1lbnRCQ1JlY3QiLCJpc1JUTExlZnQiLCJpc1JUTFJpZ2h0Iiwid2lkdGhBdXRvUmVzaXplRGV0ZWN0aW9uIiwid2lkdGhBdXRvT2JzZXJ2ZXJEZXRlY3Rpb24iLCJyaWdodCIsInRtcEN1cnJIb3N0V2lkdGgiLCJ0bXBDdXJyQ29udGVudEdsdWVXaWR0aCIsInRtcE5ld0hvc3RXaWR0aCIsIndpZHRoQXV0byIsIndpZHRoQXV0b0NoYW5nZWQiLCJ3YXNXaWR0aEF1dG8iLCJoZWlnaHRBdXRvIiwiYm90dG9tIiwiaGVpZ2h0QXV0b0NoYW5nZWQiLCJ3YXNIZWlnaHRBdXRvIiwidXBkYXRlQm9yZGVyWCIsInVwZGF0ZUJvcmRlclkiLCJib3JkZXIiLCJtYXJnaW4iLCJjb250ZW50RWxlbWVudENTUyIsImNvbnRlbnRHbHVlRWxlbWVudENTUyIsImdldEhvc3RTaXplIiwiZ2V0Vmlld3BvcnRTaXplIiwicGFkZGluZ0Fic29sdXRlWCIsInIiLCJwYWRkaW5nQWJzb2x1dGVZIiwicGFkZGluZ0VsZW1lbnRDU1MiLCJ0ZXh0YXJlYUNTUyIsInBhZGRpbmdWYWx1ZXMiLCJ0ZXh0YXJlYVNpemUiLCJ0ZXh0YXJlYVNpemVDaGFuZ2VkIiwidGV4dGFyZWFEeW5PcmlnU2l6ZSIsInN0ck92ZXJmbG93WCIsInN0ck92ZXJmbG93WSIsInN0clZpc2libGUiLCJ2aWV3cG9ydEVsZW1lbnRSZXNldENTUyIsInJlc2V0WFRtcCIsInlzIiwicmVzZXRCb3R0b21UbXAiLCJ4cyIsImNvbnRlbnRTaXplIiwiaG9zdEFic29sdXRlUmVjdFNpemUiLCJjb250ZW50R2x1ZVNpemUiLCJ0ZXh0YXJlYUNvdmVyQ1NTIiwic2V0Q29udGVudEdsdWVFbGVtZW50Q1NTZnVuY3Rpb24iLCJob3Jpem9udGFsIiwic2Nyb2xsYmFyVmFycyIsImdldFNjcm9sbGJhclZhcnMiLCJ3aCIsIl93X2giLCJzdHJXSCIsIl93aWR0aF9oZWlnaHQiLCJhdXRvU2l6ZSIsImJvcmRlclNpemUiLCJwYWRkaW5nU2l6ZSIsIm1hcmdpblNpemUiLCJ2aWV3cG9ydFNpemUiLCJjb250ZW50U2Nyb2xsU2l6ZSIsImhpZGVPdmVyZmxvd0ZvcmNlVGV4dGFyZWEiLCJwcmV2aW91c092ZXJmbG93QW1vdW50Iiwib3ZlcmZsb3dCZWhhdmlvcklzVlMiLCJvdmVyZmxvd0JlaGF2aW9ySXNWSCIsIm92ZXJmbG93QmVoYXZpb3JJc1MiLCJvdmVyZmxvd0Ftb3VudCIsImhhc092ZXJmbG93IiwiaGlkZU92ZXJmbG93IiwiY2FuU2Nyb2xsIiwidmlld3BvcnRSZWN0Iiwic2V0T3ZlcmZsb3dWYXJpYWJsZXMiLCJzY3JvbGxiYXJWYXJzSW52ZXJ0ZWQiLCJ4eUkiLCJfeF95IiwieHkiLCJ3aWR0aEhlaWdodCIsInNjcm9sbE1heCIsIl9MZWZ0X1RvcCIsImZyYWN0aW9uYWxPdmVyZmxvd0Ftb3VudCIsImNoZWNrRnJhY3Rpb25hbE92ZXJmbG93QW1vdW50IiwiYm9yZGVyRGVzaWduIiwiY29udGVudEFycmFuZ2VFbGVtZW50Q1NTIiwiYXJyYW5nZUNvbnRlbnQiLCJhcnJhbmdlQ2hhbmdlZCIsInNldENvbnRlbnRFbGVtZW50Q1NTIiwic3RyRGlyZWN0aW9uIiwiaW52ZXJ0ZWRBdXRvU2l6ZSIsImFkZFJlbW92ZUNsYXNzIiwidmlld3BvcnRFbGVtZW50Q1NTIiwic2V0Vmlld3BvcnRDU1MiLCJYWSIsIl9YX1kiLCJlbGVtZW50U3R5bGUiLCJkdW1wIiwid2Via2l0VHJhbnNmb3JtIiwiZmxvYXRUbXAiLCJwb3NMZWZ0V2l0aG91dEZsb2F0IiwicG9zTGVmdFdpdGhGbG9hdCIsInRleHRhcmVhSW5mbyIsImdldFRleHRhcmVhSW5mbyIsInRleHRhcmVhUm93c0NoYW5nZWQiLCJfcm93cyIsImN1cnNvclJvdyIsIl9jdXJzb3JSb3ciLCJjdXJzb3JDb2wiLCJfY3Vyc29yQ29sdW1uIiwid2lkZXN0Um93IiwiX3dpZGVzdFJvdyIsImxhc3RSb3ciLCJsYXN0Q29sIiwiX2NvbHVtbnMiLCJjdXJzb3JQb3MiLCJfY3Vyc29yUG9zaXRpb24iLCJjdXJzb3JNYXgiLCJfY3Vyc29yTWF4IiwiY3Vyc29ySXNMYXN0UG9zaXRpb24iLCJ0ZXh0YXJlYVNjcm9sbEFtb3VudCIsInNjcm9sbGJhcnNWaXNpYmlsaXR5VmlzaWJsZSIsInNjcm9sbGJhcnNWaXNpYmlsaXR5SGlkZGVuIiwic2Nyb2xsYmFyc1Zpc2liaWxpdHlBdXRvIiwicmVmcmVzaFNjcm9sbGJhcnNWaXNpYmlsaXR5Iiwic2hvd1giLCJzaG93WSIsInJlZnJlc2hTY3JvbGxiYXJBcHBlYXJhbmNlIiwicmVmcmVzaFNjcm9sbGJhckhhbmRsZUxlbmd0aCIsInJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQiLCJyZWZyZXNoU2Nyb2xsYmFyc0ludGVyYWN0aXZlIiwiZGlzcGF0Y2hDYWxsYmFjayIsImlzUlRMIiwieFNjcm9sbGFibGUiLCJ5U2Nyb2xsYWJsZSIsImNsaXBwZWQiLCJ1cGRhdGVFbGVtZW50c09uTG9hZCIsImZvcmNlZCIsInNldE9wdGlvbnMiLCJuZXdPcHRpb25zIiwidmFsaWRhdGVkT3B0cyIsInNldHVwU3RydWN0dXJlRE9NIiwic3RyUGFyZW50IiwiY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJIb3N0IiwiY2xhc3NOYW1lVGV4dGFyZWFFbGVtZW50RnVsbCIsInRleHRhcmVhQ2xhc3MiLCJhZG9wdEF0dHJzIiwiYWRvcHRBdHRyc01hcCIsImFwcGx5QWRvcHRlZEF0dHJzIiwiYXBwbHlBZG9wdGVkQXR0cnNFbG0iLCJob3N0RWxlbWVudENsYXNzTmFtZXMiLCJob3N0RWxlbWVudENTUyIsInNlbGVjdE9yR2VuZXJhdGVEaXZCeUNsYXNzIiwic2V0dXBTdHJ1Y3R1cmVFdmVudHMiLCJ0ZXh0YXJlYUtleURvd25SZXN0cmljdGVkS2V5Q29kZXMiLCJ0ZXh0YXJlYUtleURvd25LZXlDb2Rlc0xpc3QiLCJ0ZXh0YXJlYVVwZGF0ZUludGVydmFsSUQiLCJzY3JvbGxTdG9wVGltZW91dElkIiwic2Nyb2xsU3RvcERlbGF5Iiwic3RyRm9jdXMiLCJ1cGRhdGVUZXh0YXJlYSIsImRvQ2xlYXJJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0ZXh0YXJlYU9uU2Nyb2xsIiwidGV4dGFyZWFPbkRyb3AiLCJ0ZXh0YXJlYU9uRm9jdXMiLCJ0ZXh0YXJlYU9uRm9jdXNvdXQiLCJ0ZXh0YXJlYU9uS2V5RG93biIsImtleUNvZGUiLCJzZXRJbnRlcnZhbCIsInRleHRhcmVhT25LZXlVcCIsImNvbnRlbnRPblRyYW5zaXRpb25FbmQiLCJ2aWV3cG9ydE9uU2Nyb2xsIiwibmF0aXZlT3ZlcmxheVNjcm9sbGJhcnNBcmVBY3RpdmUiLCJzZXR1cFNjcm9sbGJhcnNET00iLCJzZWxlY3RPckdlbmVyYXRlU2Nyb2xsYmFyRE9NIiwiaXNIb3Jpem9udGFsIiwic2Nyb2xsYmFyQ2xhc3NOYW1lIiwic2Nyb2xsYmFyIiwidHJhY2siLCJoYW5kbGUiLCJfc2Nyb2xsYmFyIiwiX3RyYWNrIiwiX2hhbmRsZSIsInJlc2V0U2Nyb2xsYmFyRE9NIiwiaG9yaXpvbnRhbEVsZW1lbnRzIiwidmVydGljYWxFbGVtZW50cyIsInNldHVwU2Nyb2xsYmFyRXZlbnRzIiwic2Nyb2xsYmFyVmFyc0luZm8iLCJfaW5mbyIsImluc2lkZUlGcmFtZSIsInNjcm9sbCIsInN0ckFjdGl2ZSIsInN0clNuYXBIYW5kbGUiLCJzY3JvbGxEdXJhdGlvbkZhY3RvciIsImluY3JlYXNlRGVjcmVhc2VTY3JvbGxBbW91bnRLZXlDb2RlcyIsInRyYWNrVGltZW91dCIsIm1vdXNlRG93blNjcm9sbCIsIm1vdXNlRG93bk9mZnNldCIsIm1vdXNlRG93bkludmVydGVkU2NhbGUiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJnZXRQcmVwYXJlZFNjcm9sbGJhcnNPcHRpb24iLCJpbmNyZWFzZVRyYWNrU2Nyb2xsQW1vdW50IiwiZGVjcmVhc2VUcmFja1Njcm9sbEFtb3VudCIsImRvY3VtZW50S2V5RG93biIsImRvY3VtZW50S2V5VXAiLCJvbk1vdXNlVG91Y2hEb3duQ29udGludWUiLCJpc1RvdWNoRXZlbnQiLCJkb2N1bWVudERyYWdNb3ZlIiwidHJhY2tMZW5ndGgiLCJfdHJhY2tMZW5ndGgiLCJoYW5kbGVMZW5ndGgiLCJfaGFuZGxlTGVuZ3RoIiwic2Nyb2xsUmFuZ2UiLCJfbWF4U2Nyb2xsIiwic2Nyb2xsUmF3Iiwic2Nyb2xsRGVsdGFQZXJjZW50Iiwic2Nyb2xsRGVsdGEiLCJpc0Zpbml0ZSIsImRvY3VtZW50TW91c2VUb3VjaFVwIiwic2Nyb2xsU3RvcCIsIm1vdXNlSW5zaWRlSG9zdCIsImNsaWVudFgiLCJjbGllbnRZIiwib25IYW5kbGVNb3VzZVRvdWNoRG93biIsIm9uSGFuZGxlTW91c2VUb3VjaERvd25BY3Rpb24iLCJpc05hTiIsImdldEhvc3RFbGVtZW50SW52ZXJ0ZWRTY2FsZSIsIm9uVHJhY2tNb3VzZVRvdWNoRG93biIsInNjcm9sbERpc3RhbmNlIiwidHJhY2tPZmZzZXQiLCJfbGVmdF90b3AiLCJjdHJsS2V5IiwiaW5zdGFudFNjcm9sbCIsInNoaWZ0S2V5IiwiaW5zdGFudFNjcm9sbFRyYW5zaXRpb24iLCJpc0ZpcnN0SXRlcmF0aW9uIiwiZGVjcmVhc2VTY3JvbGwiLCJmaW5pc2hlZENvbmRpdGlvbiIsInNjcm9sbEFjdGlvbkZpbnNpc2hlZCIsInRyYW5zaXRpb24iLCJzY3JvbGxBY3Rpb25JbnN0YW50RmluaXNoZWQiLCJzY3JvbGxBY3Rpb24iLCJtb3VzZU9mZnNldCIsImhhbmRsZU9mZnNldCIsIl9oYW5kbGVPZmZzZXQiLCJfY3VycmVudFNjcm9sbCIsInNjcm9sbER1cmF0aW9uIiwidGltZW91dERlbGF5IiwiaW5zdGFudFNjcm9sbFBvc2l0aW9uIiwicnRsSXNOb3JtYWwiLCJkZWNyZWFzZVNjcm9sbENvbmRpdGlvbiIsInNjcm9sbE9iaiIsImFuaW1hdGlvbk9iaiIsIm9uVHJhY2tNb3VzZVRvdWNoRW50ZXIiLCJvblRyYWNrTW91c2VUb3VjaExlYXZlIiwib25TY3JvbGxiYXJNb3VzZVRvdWNoRG93biIsInNoYWxsQmVWaXNpYmxlIiwic2Nyb2xsYmFySGlkZGVuQ2xhc3NOYW1lIiwic2Nyb2xsYmFyRWxlbWVudCIsImRlbGF5ZnJlZSIsImFueUFjdGl2ZSIsImhhbmRsZUNTUyIsImRpZ2l0IiwiaGFuZGxlUmF0aW8iLCJmbG9vciIsIl9XaWR0aF9IZWlnaHQiLCJfaGFuZGxlTGVuZ3RoUmF0aW8iLCJzY3JvbGxPclRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJpc1JUTGlzSG9yaXpvbnRhbCIsInN0clRyYW5zbGF0ZUJyYWNlIiwic3RyVHJhbnNmb3JtIiwic3RyVHJhbnNpdGlvbiIsIm5hdGl2ZVNjcm9sbCIsImN1cnJlbnRTY3JvbGwiLCJoYW5kbGVUcmFja0RpZmYiLCJ0cmFuc2Zvcm1PZmZzZXQiLCJ0cmFuc2xhdGVWYWx1ZSIsIm1heFNjcm9sbCIsImdldFNjcm9sbFJhdGlvIiwiZ2V0SGFuZGxlT2Zmc2V0Iiwic2Nyb2xsUmF0aW8iLCJ1bnNuYXBwZWRTY3JvbGxSYXRpbyIsInNuYXBwZWRIYW5kbGVPZmZzZXQiLCJfY3VycmVudFNjcm9sbFJhdGlvIiwiZ2V0Q1NTVHJhbnNpdGlvblN0cmluZyIsIl9zbmFwcGVkSGFuZGxlT2Zmc2V0IiwiaXNUcmFjayIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJfbF90Iiwic2V0dXBTY3JvbGxiYXJDb3JuZXJET00iLCJzZXR1cFNjcm9sbGJhckNvcm5lckV2ZW50cyIsIm1vdXNlRG93blBvc2l0aW9uIiwibW91c2VEb3duU2l6ZSIsInJlY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXIiLCJwYWdlT2Zmc2V0IiwiZ2V0Q29vcmRpbmF0ZXMiLCJldmVudElzVHJ1c3RlZCIsInJlbGVhc2VDYXB0dXJlIiwic2NyZWVuWCIsInNjcmVlblkiLCJzZXRDYXB0dXJlIiwiYXJncyIsImRlcGVuZGVudCIsImV4dGVuc2lvbk9uTmFtZSIsImV4dCIsInN1YnN0ciIsInRhcmdldENTU09iamVjdCIsInByZWZpeCIsInplcm9YIiwiemVyb1kiLCJ0cmFuc2l0aW9uU3RyIiwiYXNzZW1ibGVkVmFsdWUiLCJyZWdFeHBTdHJpbmciLCJyZWdFeHBNYWluIiwiUmVnRXhwIiwicmVnRXhwVmFsaWRhdGUiLCJwcm9wZXJ0aWVzIiwic3RyUmVzdWx0IiwidmFsdWVBcnJheSIsInNwbGl0Q3NzU3R5bGVCeUNvbW1hIiwiJDEiLCJ3aXRoQ3VyckNsYXNzTmFtZU9wdGlvbiIsIndpdGhPbGRDbGFzc05hbWVPcHRpb24iLCJhcHBlbmRpeCIsImFwcGVuZENsYXNzZXMiLCJjb25kaXRpb24iLCJzdHJPd25lckRvY3VtZW50Iiwic3RySFRNTEVsZW1lbnQiLCJwYXJlbnRXaW5kb3ciLCJub2RlTmFtZSIsImExIiwiYTIiLCJrIiwidG9GbG9hdCIsIm51bSIsInRleHRhcmVhQ3Vyc29yUG9zaXRpb24iLCJzZWxlY3Rpb25TdGFydCIsInRleHRhcmVhVmFsdWUiLCJ0ZXh0YXJlYUxlbmd0aCIsInRleHRhcmVhUm93U3BsaXQiLCJ0ZXh0YXJlYUxhc3RSb3ciLCJ0ZXh0YXJlYUN1cnJlbnRDdXJzb3JSb3dTcGxpdCIsInRleHRhcmVhTGFzdENvbCIsInJvd0NvbHMiLCJjbGFzc2VzT3JBdHRycyIsImNvbnRlbnQiLCJzZWxlY3RQYXJlbnRPck9ubHlDaGlsZHJlbiIsIm9ubHlDaGlsZHJlbiIsInNlbGVjdFBhcmVudCIsImdldE9iamVjdFByb3BWYWwiLCJwYXRoIiwic3BsaXRzIiwic2V0T2JqZWN0UHJvcFZhbCIsInNwbGl0c0xlbmd0aCIsImV4dGVuZE9iaiIsImV4dGVuZE9ialJvb3QiLCJjdXJyZW50IiwiZG9BZGQiLCJzbGVlcCIsImF0dHJzQ2hhbmdlZCIsImNvbnRlbnRTaXplQyIsImlzU3RyaW5nIiwiZG9VcGRhdGVBdXRvIiwibXV0SG9zdCIsIm11dENvbnRlbnQiLCJ0YWtlUmVjb3JkcyIsIm9wdGlvbiIsImNoYW5nZWRPcHMiLCJleHROYW1lIiwicmVtb3ZlRXh0IiwicG9wIiwiY29vcmRpbmF0ZXMiLCJpbmZvWCIsImluZm9ZIiwibm9ybWFsaXplSW52ZXJ0Iiwibm9ybWFsaXplTmVnYXRlIiwic2Nyb2xsWCIsInNjcm9sbFhSYXRpbyIsIm1heFNjcm9sbFgiLCJyYXRpbyIsImhhbmRsZUxlbmd0aFJhdGlvIiwiaXNSVExOb3JtYWxpemVkIiwiY29vcmRpbmF0ZXNYQXhpc1Byb3BzIiwiY29vcmRpbmF0ZXNZQXhpc1Byb3BzIiwiY29vcmRpbmF0ZXNPcGVyYXRvcnMiLCJkdXJhdGlvbklzT2JqZWN0IiwiY29tcGxldGVDYWxsYmFjayIsImZpbmFsU2Nyb2xsIiwiZG9TY3JvbGxMZWZ0IiwiZG9TY3JvbGxUb3AiLCJhbmltYXRpb25PcHRpb25zIiwic3RyRW5kIiwic3RyQmVnaW4iLCJzdHJDZW50ZXIiLCJzdHJOZWFyZXN0Iiwic3RyQWx3YXlzIiwic3RyTmV2ZXIiLCJzdHJJZk5lZWRlZCIsInN0ckxlbmd0aCIsInNldHRpbmdzQXhpcyIsInNldHRpbmdzU2Nyb2xsIiwic2V0dGluZ3NCbG9jayIsInNldHRpbmdzTWFyZ2luIiwiZmluYWxFbGVtZW50IiwiZWxlbWVudE9ialNldHRpbmdzQXhpc1ZhbHVlcyIsImVsZW1lbnRPYmpTZXR0aW5nc0Jsb2NrVmFsdWVzIiwiZWxlbWVudE9ialNldHRpbmdzU2Nyb2xsVmFsdWVzIiwiY29vcmRpbmF0ZXNJc0VsZW1lbnRPYmoiLCJwb3NzaWJsZUVsZW1lbnQiLCJwb3NzaWJsZUVsZW1lbnRJc0pRdWVyeSIsInBvc3NpYmxlRWxlbWVudElzSFRNTEVsZW1lbnQiLCJ1cGRhdGVTY3JvbGxiYXJJbmZvcyIsInByb3h5Q29tcGxldGVDYWxsYmFjayIsImNoZWNrU2V0dGluZ3NTdHJpbmdWYWx1ZSIsImN1cnJWYWx1ZSIsImFsbG93ZWRWYWx1ZXMiLCJnZXRSYXdTY3JvbGwiLCJpc1giLCJjb29yZGluYXRlUHJvcHMiLCJnZXRGaW5hbFNjcm9sbCIsInJhd1Njcm9sbCIsIm9wZXJhdG9yIiwiYW1vdW50Iiwic2Nyb2xsSW5mbyIsIm11bHQiLCJpc1JUTGlzWCIsIm5vcm1hbGl6ZVNob3J0Y3V0cyIsInN0clJlcGxhY2UiLCJldmFsRnVuYyIsImV2YWwiLCJwb3NzaWJsZU9wZXJhdG9yIiwidG9GaXhlZCIsIm5vcm1hbGl6ZUlzUlRMaXNYIiwib3BlcmF0b3JDdXJyU2Nyb2xsIiwiaW52ZXJ0IiwibmVnYXRlIiwiZ2V0UGVyQXhpc1ZhbHVlIiwidmFsdWVJbnRlcm5hbFR5cGUiLCJkZWZhdWx0VmFsdWUiLCJyZXN1bHREZWZhdWx0IiwidmFsdWVUeXBlIiwidmFsdWVBcnJMZW5ndGgiLCJ2YWx1ZUFyckl0ZW0iLCJnZW5lcmF0ZU1hcmdpbiIsIm1hcmdpblRvcFJpZ2h0Qm90dG9tTGVmdEFycmF5IiwiY3VyclZhbHVlVHlwZSIsInZhbHVlRGlyZWN0aW9ucyIsImF4aXMiLCJibG9jayIsIm1hcmdpbkRlZmF1bHQiLCJtYXJnaW5UeXBlIiwibWFyZ2luTGVuZ3RoIiwidmlld3BvcnRTY3JvbGwiLCJ2aWV3cG9ydE9mZnNldCIsImVsZW1lbnRPZmZzZXQiLCJkb05vdFNjcm9sbCIsImVsZW1lbnRTY3JvbGxDb29yZGluYXRlcyIsIm1lYXN1cmluZ0VsbSIsInJhd0VsZW1lbnRTaXplIiwiZWxlbWVudFNpemUiLCJmaW5hbGl6ZUJsb2NrIiwidmFycyIsImx0IiwiYmxvY2tJc0VuZCIsImJsb2NrSXNDZW50ZXIiLCJibG9ja0lzTmVhcmVzdCIsInNjcm9sbE5ldmVyIiwic2Nyb2xsSWZOZWVkZWQiLCJ2cFNpemUiLCJ2cE9mZnNldCIsImVsU2l6ZSIsImVsT2Zmc2V0IiwiZGl2aWRlIiwiZWxlbWVudENlbnRlck9mZnNldCIsInZpZXdwb3J0Q2VudGVyT2Zmc2V0IiwiaXNJblZpZXciLCJwYXJhbTEiLCJwYXJhbTIiLCJwYXJhbTMiLCJnZXRFbGVtZW50cyIsImVsZW1lbnROYW1lIiwiaG9zdCIsInZpZXdwb3J0Iiwic2Nyb2xsYmFySG9yaXpvbnRhbCIsInNjcm9sbGJhclZlcnRpY2FsIiwic2Nyb2xsYmFyQ29ybmVyIiwiZ2V0U3RhdGUiLCJzdGF0ZVByb3BlcnR5IiwicHJlcGFyZSIsImV4dGVuZGVkIiwiY2hhbmdlUHJvcGVydHlOYW1lIiwiZGVzdHJveWVkIiwic2xlZXBpbmciLCJkb2N1bWVudE1peGVkIiwicHJpdmF0ZU1ldGhvZHMiLCJhZGRFeHQiLCJleHRlbnNpb25PcHRpb25zIiwicmVnaXN0ZXJlZEV4dGVuc2lvbk9iaiIsImV4dGVuc2lvbiIsImluc3RhbmNlQWRkZWQiLCJpbnN0YW5jZUNvbnRyYWN0IiwiY29udHJhY3RSZXN1bHQiLCJjb250cmFjdEZ1bGZpbGxlZCIsImV4dGVuc2lvbkZhY3RvcnkiLCJjb250cmFjdCIsImFkZGVkIiwiaW5zdGFuY2VSZW1vdmVkIiwicmVtb3ZlZCIsImNvbnN0cnVjdCIsImluaXRCb2R5U2Nyb2xsIiwiYm9keU1vdXNlVG91Y2hEb3duTGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiZm9jdXMiLCJ2YWxpZCIsInBsdWdpblRhcmdldEVsZW1lbnRzIiwib3B0c0lzUGxhaW5PYmoiLCJuZXdEZWZhdWx0T3B0aW9ucyIsImN1cnJEZWZhdWx0T3B0aW9ucyIsIm9zSW5zdGFuY2UiLCJleHRlbnNpb25OYW1lIiwiZXh0TmFtZVR5cGVTdHJpbmciLCJmbiIsIm92ZXJsYXlTY3JvbGxiYXJzIiwiX2VsZW1lbnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBYUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEIsTUFBSSxJQUFKLEVBQ0lDLG1DQUFPLFlBQVk7QUFBRSxXQUFPRCxPQUFPLENBQUNELE1BQUQsRUFBU0EsTUFBTSxDQUFDRyxRQUFoQixFQUEwQkMsU0FBMUIsQ0FBZDtBQUFxRCxHQUFwRTtBQUFBLG9HQUFOLENBREosS0FFSyxFQUdEO0FBQ1AsQ0FQQSxFQU9DLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NBLE1BQWhDLEdBQXlDLElBUDFDLEVBUUcsVUFBVUEsTUFBVixFQUFrQkYsUUFBbEIsRUFBNEJDLFNBQTVCLEVBQXVDO0FBQ25DOztBQUNBLE1BQUlF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QixDQUFOO0FBQW9DLFNBQXpFO0FBQ0EsZUFBTzY2QixTQUFQO0FBQ0gsT0FIRCxNQUtJLE9BQU83bkMsTUFBTSxDQUFDNm5DLFNBQUQsRUFBWWp6QyxPQUFaLENBQWI7QUFDUCxLQVJEO0FBU0g7O0FBQ0QsU0FBT29MLE1BQVA7QUFDSCxDQTU5TUosQ0FBRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9vdmVybGF5c2Nyb2xsYmFycy9qcy9PdmVybGF5U2Nyb2xsYmFycy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBPdmVybGF5U2Nyb2xsYmFyc1xyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vS2luZ1NvcmEvT3ZlcmxheVNjcm9sbGJhcnNcclxuICpcclxuICogVmVyc2lvbjogMS4xMi4wXHJcbiAqXHJcbiAqIENvcHlyaWdodCBLaW5nU29yYSB8IFJlbmUgSGFhcy5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL0tpbmdTb3JhXHJcbiAqXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICogRGF0ZTogMDUuMDQuMjAyMFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxyXG4gICAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7IHJldHVybiBmYWN0b3J5KGdsb2JhbCwgZ2xvYmFsLmRvY3VtZW50LCB1bmRlZmluZWQpOyB9KTtcclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGdsb2JhbCwgZ2xvYmFsLmRvY3VtZW50LCB1bmRlZmluZWQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsLCBnbG9iYWwuZG9jdW1lbnQsIHVuZGVmaW5lZCk7XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxyXG4gICAgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG4gICAgICAgICd1c2Ugc3RyaWN0JztcclxuICAgICAgICB2YXIgUExVR0lOTkFNRSA9ICdPdmVybGF5U2Nyb2xsYmFycyc7XHJcbiAgICAgICAgdmFyIFRZUEVTID0ge1xyXG4gICAgICAgICAgICBvOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgZjogJ2Z1bmN0aW9uJyxcclxuICAgICAgICAgICAgYTogJ2FycmF5JyxcclxuICAgICAgICAgICAgczogJ3N0cmluZycsXHJcbiAgICAgICAgICAgIGI6ICdib29sZWFuJyxcclxuICAgICAgICAgICAgbjogJ251bWJlcicsXHJcbiAgICAgICAgICAgIHU6ICd1bmRlZmluZWQnLFxyXG4gICAgICAgICAgICB6OiAnbnVsbCdcclxuICAgICAgICAgICAgLy9kIDogJ2RhdGUnLFxyXG4gICAgICAgICAgICAvL2UgOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAvL3IgOiAncmVnZXhwJyxcclxuICAgICAgICAgICAgLy95IDogJ3N5bWJvbCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBMRVhJQ09OID0ge1xyXG4gICAgICAgICAgICBjOiAnY2xhc3MnLFxyXG4gICAgICAgICAgICBzOiAnc3R5bGUnLFxyXG4gICAgICAgICAgICBpOiAnaWQnLFxyXG4gICAgICAgICAgICBsOiAnbGVuZ3RoJyxcclxuICAgICAgICAgICAgcDogJ3Byb3RvdHlwZScsXHJcbiAgICAgICAgICAgIHRpOiAndGFiaW5kZXgnLFxyXG4gICAgICAgICAgICBvSDogJ29mZnNldEhlaWdodCcsXHJcbiAgICAgICAgICAgIGNIOiAnY2xpZW50SGVpZ2h0JyxcclxuICAgICAgICAgICAgc0g6ICdzY3JvbGxIZWlnaHQnLFxyXG4gICAgICAgICAgICBvVzogJ29mZnNldFdpZHRoJyxcclxuICAgICAgICAgICAgY1c6ICdjbGllbnRXaWR0aCcsXHJcbiAgICAgICAgICAgIHNXOiAnc2Nyb2xsV2lkdGgnLFxyXG4gICAgICAgICAgICBoT1A6ICdoYXNPd25Qcm9wZXJ0eScsXHJcbiAgICAgICAgICAgIGJDUjogJ2dldEJvdW5kaW5nQ2xpZW50UmVjdCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBWRU5ET1JTID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L1ZlbmRvcl9QcmVmaXhcclxuICAgICAgICAgICAgdmFyIGpzQ2FjaGUgPSB7fTtcclxuICAgICAgICAgICAgdmFyIGNzc0NhY2hlID0ge307XHJcbiAgICAgICAgICAgIHZhciBjc3NQcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnLW8tJywgJy1tcy0nXTtcclxuICAgICAgICAgICAgdmFyIGpzUHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNUyddO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmaXJzdExldHRlclRvVXBwZXIoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgX2Nzc1ByZWZpeGVzOiBjc3NQcmVmaXhlcyxcclxuICAgICAgICAgICAgICAgIF9qc1ByZWZpeGVzOiBqc1ByZWZpeGVzLFxyXG4gICAgICAgICAgICAgICAgX2Nzc1Byb3BlcnR5OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjc3NDYWNoZVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzc0NhY2hlW0xFWElDT04uaE9QXShuYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwcGVyY2FzZWROYW1lID0gZmlyc3RMZXR0ZXJUb1VwcGVyKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbG1TdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpW0xFWElDT04uc107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdFBvc3NpYmlsaXRpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyVmVuZG9yV2l0aG91dERhc2hlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBjc3NQcmVmaXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyVmVuZG9yV2l0aG91dERhc2hlcyA9IGNzc1ByZWZpeGVzW2ldLnJlcGxhY2UoLy0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQb3NzaWJpbGl0aWVzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgLy90cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NQcmVmaXhlc1tpXSArIG5hbWUsIC8vLXdlYmtpdC10cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyVmVuZG9yV2l0aG91dERhc2hlcyArIHVwcGVyY2FzZWROYW1lLCAvL3dlYmtpdFRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TGV0dGVyVG9VcHBlcihjdXJyVmVuZG9yV2l0aG91dERhc2hlcykgKyB1cHBlcmNhc2VkTmFtZSAvL1dlYmtpdFRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2ID0gMDsgdiA8IHJlc3VsdFBvc3NpYmlsaXRpZXNbTEVYSUNPTi5sXTsgdisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxtU3R5bGVbcmVzdWx0UG9zc2liaWxpdGllc1t2XV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdFBvc3NpYmlsaXRpZXNbdl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNzc0NhY2hlW25hbWVdID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgX2Nzc1Byb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWVzLCBzdWZmaXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHByb3BlcnR5ICsgJyAnICsgdmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjc3NDYWNoZVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzc0NhY2hlW0xFWElDT04uaE9QXShuYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1bW15U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVtMRVhJQ09OLnNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NzYmxlVmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXBhcmVkU3VmZml4ID0gc3VmZml4IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IHBvc3NibGVWYWx1ZXNbTEVYSUNPTi5sXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyB2IDwgVkVORE9SUy5fY3NzUHJlZml4ZXNbTEVYSUNPTi5sXTsgdisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wID0gdiA8IDAgPyBwb3NzYmxlVmFsdWVzW2ldIDogVkVORE9SUy5fY3NzUHJlZml4ZXNbdl0gKyBwb3NzYmxlVmFsdWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtbXlTdHlsZS5jc3NUZXh0ID0gcHJvcGVydHkgKyAnOicgKyBwcm9wICsgcHJlcGFyZWRTdWZmaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHVtbXlTdHlsZVtMRVhJQ09OLmxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcHJvcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3NzQ2FjaGVbbmFtZV0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBfanNBUEk6IGZ1bmN0aW9uIChuYW1lLCBpc0ludGVyZmFjZSwgZmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGpzQ2FjaGVbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghanNDYWNoZVtMRVhJQ09OLmhPUF0obmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2luZG93W25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGpzUHJlZml4ZXNbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHdpbmRvd1soaXNJbnRlcmZhY2UgPyBqc1ByZWZpeGVzW2ldIDoganNQcmVmaXhlc1tpXS50b0xvd2VyQ2FzZSgpKSArIGZpcnN0TGV0dGVyVG9VcHBlcihuYW1lKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzQ2FjaGVbbmFtZV0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgfHwgZmFsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSgpO1xyXG4gICAgICAgIHZhciBDT01QQVRJQklMSVRZID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gd2luZG93U2l6ZSh4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geCA/IHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtMRVhJQ09OLmNXXSB8fCBkb2N1bWVudC5ib2R5W0xFWElDT04uY1ddIDogd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtMRVhJQ09OLmNIXSB8fCBkb2N1bWVudC5ib2R5W0xFWElDT04uY0hdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJpbmQoZnVuYywgdGhpc09iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9IFRZUEVTLmYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIkNhbid0IGJpbmQgZnVuY3Rpb24hXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBwcm90byA9IExFWElDT04ucDtcclxuICAgICAgICAgICAgICAgIHZhciBhQXJncyA9IEFycmF5W3Byb3RvXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZk5PUCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgICAgICAgICAgICAgIHZhciBmQm91bmQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBmTk9QID8gdGhpcyA6IHRoaXNPYmosIGFBcmdzLmNvbmNhdChBcnJheVtwcm90b10uc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7IH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZ1bmNbcHJvdG9dKVxyXG4gICAgICAgICAgICAgICAgICAgIGZOT1BbcHJvdG9dID0gZnVuY1twcm90b107IC8vIEZ1bmN0aW9uLnByb3RvdHlwZSBkb2Vzbid0IGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIGZCb3VuZFtwcm90b10gPSBuZXcgZk5PUCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmQm91bmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgd2luZG93IHdpZHRoLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge051bWJlcnxudW1iZXJ9IFRoZSBjdXJyZW50IHdpbmRvdyB3aWR0aCBpbiBwaXhlbC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgd1c6IGJpbmQod2luZG93U2l6ZSwgMCwgdHJ1ZSksXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHdpbmRvdyBoZWlnaHQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfG51bWJlcn0gVGhlIGN1cnJlbnQgd2luZG93IGhlaWdodCBpbiBwaXhlbC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgd0g6IGJpbmQod2luZG93U2l6ZSwgMCksXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBNdXRhdGlvbk9ic2VydmVyIE9iamVjdCBvciB1bmRlZmluZWQgaWYgbm90IHN1cHBvcnRlZC5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtNdXRhdGlvbk9ic2VydmVyfCp8dW5kZWZpbmVkfSBUaGUgTXV0YXRpb25zT2JzZXJ2ZXIgT2JqZWN0IG9yIHVuZGVmaW5lZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgbU86IGJpbmQoVkVORE9SUy5fanNBUEksIDAsICdNdXRhdGlvbk9ic2VydmVyJywgdHJ1ZSksXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBSZXNpemVPYnNlcnZlciBPYmplY3Qgb3IgdW5kZWZpbmVkIGlmIG5vdCBzdXBwb3J0ZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7TXV0YXRpb25PYnNlcnZlcnwqfHVuZGVmaW5lZH0gVGhlIFJlc2l6ZU9ic2VydmVyIE9iamVjdCBvciB1bmRlZmluZWQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHJPOiBiaW5kKFZFTkRPUlMuX2pzQVBJLCAwLCAnUmVzaXplT2JzZXJ2ZXInLCB0cnVlKSxcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIFJlcXVlc3RBbmltYXRpb25GcmFtZSBtZXRob2Qgb3IgaXQncyBjb3JyZXNwb25kaW5nIHBvbHlmaWxsLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMgeyp8RnVuY3Rpb259IFRoZSBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbWV0aG9kIG9yIGl0J3MgY29ycmVzcG9uZGluZyBwb2x5ZmlsbC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgckFGOiBiaW5kKFZFTkRPUlMuX2pzQVBJLCAwLCAncmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgZmFsc2UsIGZ1bmN0aW9uIChmdW5jKSB7IHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmdW5jLCAxMDAwIC8gNjApOyB9KSxcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIENhbmNlbEFuaW1hdGlvbkZyYW1lIG1ldGhvZCBvciBpdCdzIGNvcnJlc3BvbmRpbmcgcG9seWZpbGwuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7KnxGdW5jdGlvbn0gVGhlIENhbmNlbEFuaW1hdGlvbkZyYW1lIG1ldGhvZCBvciBpdCdzIGNvcnJlc3BvbmRpbmcgcG9seWZpbGwuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGNBRjogYmluZChWRU5ET1JTLl9qc0FQSSwgMCwgJ2NhbmNlbEFuaW1hdGlvbkZyYW1lJywgZmFsc2UsIGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gd2luZG93LmNsZWFyVGltZW91dChpZCk7IH0pLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogR2V0cyB0aGUgY3VycmVudCB0aW1lLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVGhlIGN1cnJlbnQgdGltZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgbm93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERhdGUubm93ICYmIERhdGUubm93KCkgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogU3RvcHMgdGhlIHByb3BhZ2F0aW9uIG9mIHRoZSBnaXZlbiBldmVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgb2Ygd2hpY2ggdGhlIHByb3BhZ2F0aW9uIHNoYWxsIGJlIHN0b3BlZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgc3RwUDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiBvZiB0aGUgZ2l2ZW4gZXZlbnQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IG9mIHdoaWNoIHRoZSBkZWZhdWx0IGFjdGlvbiBzaGFsbCBiZSBwcmV2ZW50ZWQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHBydkQ6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCAmJiBldmVudC5jYW5jZWxhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBwYWdlWCBhbmQgcGFnZVkgdmFsdWVzIG9mIHRoZSBnaXZlbiBtb3VzZSBldmVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQgb2Ygd2hpY2ggdGhlIHBhZ2VYIGFuZCBwYWdlWCBzaGFsbCBiZSBnb3QuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7e3g6IG51bWJlciwgeTogbnVtYmVyfX0geCA9IHBhZ2VYIHZhbHVlLCB5ID0gcGFnZVkgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHBhZ2U6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0clBhZ2UgPSAncGFnZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ckNsaWVudCA9ICdjbGllbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJYID0gJ1gnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJZID0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnREb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gZXZlbnREb2MuYm9keTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0b3VjaCBldmVudCByZXR1cm4gcmV0dXJuIHBhZ2VYL1kgb2YgaXRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB0b3VjaFtzdHJQYWdlICsgc3RyWF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB0b3VjaFtzdHJQYWdlICsgc3RyWV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbm90IG5hdGl2ZSBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50W3N0clBhZ2UgKyBzdHJYXSAmJiBldmVudFtzdHJDbGllbnQgKyBzdHJYXSAmJiBldmVudFtzdHJDbGllbnQgKyBzdHJYXSAhPSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogZXZlbnRbc3RyQ2xpZW50ICsgc3RyWF0gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCkgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBldmVudFtzdHJDbGllbnQgKyBzdHJZXSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRvYyAmJiBkb2Muc2Nyb2xsVG9wIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgfHwgMCkgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkb2MgJiYgZG9jLmNsaWVudFRvcCB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wIHx8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogZXZlbnRbc3RyUGFnZSArIHN0clhdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBldmVudFtzdHJQYWdlICsgc3RyWV1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGNsaWNrZWQgbW91c2UgYnV0dG9uIG9mIHRoZSBnaXZlbiBtb3VzZSBldmVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQgb2Ygd2hpY2ggdGhlIGNsaWNrZWQgYnV0dG9uIHNoYWwgYmUgZ290LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiB0aGUgY2xpY2tlZCBtb3VzZSBidXR0b24uICgwIDogbm9uZSB8IDEgOiBsZWZ0QnV0dG9uIHwgMiA6IG1pZGRsZUJ1dHRvbiB8IDMgOiByaWdodEJ1dHRvbilcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgbUJ0bjogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGJ1dHRvbiAmIDEgPyAxIDogKGJ1dHRvbiAmIDIgPyAzIDogKGJ1dHRvbiAmIDQgPyAyIDogMCkpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBhIGl0ZW0gaXMgaW4gdGhlIGdpdmVuIGFycmF5IGFuZCByZXR1cm5zIGl0cyBpbmRleC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIG9mIHdoaWNoIHRoZSBwb3NpdGlvbiBpbiB0aGUgYXJyYXkgc2hhbGwgYmUgZGV0ZXJtaW5lZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBhcnIgVGhlIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVGhlIHplcm8gYmFzZWQgaW5kZXggb2YgdGhlIGl0ZW0gb3IgLTEgaWYgdGhlIGl0ZW0gaXNuJ3QgaW4gdGhlIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBpbkE6IGZ1bmN0aW9uIChpdGVtLCBhcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycltMRVhJQ09OLmxdOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU29tZXRpZW1zIGluIElFIGEgXCJTQ1JJUFQ3MFwiIFBlcm1pc3Npb24gZGVuaWVkIGVycm9yIG9jY3VycyBpZiBIVE1MIGVsZW1lbnRzIGluIGEgaUZyYW1lIGFyZSBjb21wYXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXSA9PT0gaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBhcnJheS5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBhcnIgVGhlIHBvdGVudGlhbCBhcnJheS5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGFycmF5LCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlzQTogZnVuY3Rpb24gKGFycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWYgPSBBcnJheS5pc0FycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWYgPyBkZWYoYXJyKSA6IHRoaXMudHlwZShhcnIpID09IFRZUEVTLmE7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogRGV0ZXJtaW5lIHRoZSBpbnRlcm5hbCBKYXZhU2NyaXB0IFtbQ2xhc3NdXSBvZiB0aGUgZ2l2ZW4gb2JqZWN0LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IG9mIHdoaWNoIHRoZSB0eXBlIHNoYWxsIGJlIGRldGVybWluZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdHlwZSBvZiB0aGUgZ2l2ZW4gb2JqZWN0LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqICsgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiA9PT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iaiArICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RbTEVYSUNPTi5wXS50b1N0cmluZy5jYWxsKG9iaikucmVwbGFjZSgvXlxcW29iamVjdCAoLispXFxdJC8sICckMScpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBiaW5kOiBiaW5kXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSB2ZW5kb3ItcHJlZml4ZWQgQ1NTIHByb3BlcnR5IGJ5IHRoZSBnaXZlbiBuYW1lLlxyXG4gICAgICAgICAgICAgICAgICogRm9yIGV4YW1wbGUgdGhlIGdpdmVuIG5hbWUgaXMgXCJ0cmFuc2Zvcm1cIiBhbmQgeW91J3JlIHVzaW5nIGEgb2xkIEZpcmVmb3ggYnJvd3NlciB0aGVuIHRoZSByZXR1cm5lZCB2YWx1ZSB3b3VsZCBiZSBcIi1tb3otdHJhbnNmb3JtXCIuXHJcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IG5lZWQgYSB2ZW5kb3ItcHJlZml4LCB0aGVuIHRoZSByZXR1cm5lZCBzdHJpbmcgaXMgdGhlIGdpdmVuIG5hbWUuXHJcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGdpdmVuIHByb3BlcnR5IG5hbWUgYXQgYWxsIChub3QgZXZlbiB3aXRoIGEgdmVuZG9yLXByZWZpeCkgdGhlIHJldHVybmVkIHZhbHVlIGlzIG51bGwuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gcHJvcE5hbWUgVGhlIHVucHJlZml4ZWQgQ1NTIHByb3BlcnR5IG5hbWUuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRoZSB2ZW5kb3ItcHJlZml4ZWQgQ1NTIHByb3BlcnR5IG9yIG51bGwgaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBnaXZlbiBDU1MgcHJvcGVydHkuXHJcblxyXG4gICAgICAgICAgICAgICAgY3NzUHJvcDogZnVuY3Rpb24ocHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVkVORE9SUy5fY3NzUHJvcGVydHkocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKCk7XHJcblxyXG5cclxuICAgICAgICB2YXIgTUFUSCA9IE1hdGg7XHJcbiAgICAgICAgdmFyIEpRVUVSWSA9IHdpbmRvdy5qUXVlcnk7XHJcbiAgICAgICAgdmFyIEVBU0lORyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfZWFzaW5nc01hdGggPSB7XHJcbiAgICAgICAgICAgICAgICBwOiBNQVRILlBJLFxyXG4gICAgICAgICAgICAgICAgYzogTUFUSC5jb3MsXHJcbiAgICAgICAgICAgICAgICBzOiBNQVRILnNpbixcclxuICAgICAgICAgICAgICAgIHc6IE1BVEgucG93LFxyXG4gICAgICAgICAgICAgICAgdDogTUFUSC5zcXJ0LFxyXG4gICAgICAgICAgICAgICAgbjogTUFUSC5hc2luLFxyXG4gICAgICAgICAgICAgICAgYTogTUFUSC5hYnMsXHJcbiAgICAgICAgICAgICAgICBvOiAxLjcwMTU4XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgeCA6IGN1cnJlbnQgcGVyY2VudCAoMCAtIDEpLFxyXG4gICAgICAgICAgICAgdCA6IGN1cnJlbnQgdGltZSAoZHVyYXRpb24gKiBwZXJjZW50KSxcclxuICAgICAgICAgICAgIGIgOiBzdGFydCB2YWx1ZSAoZnJvbSksXHJcbiAgICAgICAgICAgICBjIDogZW5kIHZhbHVlICh0byksXHJcbiAgICAgICAgICAgICBkIDogZHVyYXRpb25cclxuXHJcbiAgICAgICAgICAgICBlYXNpbmdOYW1lIDogZnVuY3Rpb24oeCwgdCwgYiwgYywgZCkgeyByZXR1cm4gZWFzZWRWYWx1ZTsgfVxyXG4gICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzd2luZzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC41IC0gX2Vhc2luZ3NNYXRoLmMoeCAqIF9lYXNpbmdzTWF0aC5wKSAvIDI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRRdWFkOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtYyAqICh0IC89IGQpICogKHQgLSAyKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0IC89IGQgLyAyKSA8IDEpID8gYyAvIDIgKiB0ICogdCArIGIgOiAtYyAvIDIgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbkN1YmljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZU91dEN1YmljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICsgMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHQgLz0gZCAvIDIpIDwgMSkgPyBjIC8gMiAqIHQgKiB0ICogdCArIGIgOiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMikgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJblF1YXJ0OiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRRdWFydDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHQgLz0gZCAvIDIpIDwgMSkgPyBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKyBiIDogLWMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMikgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJblF1aW50OiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5PdXRRdWludDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0IC89IGQgLyAyKSA8IDEpID8gYyAvIDIgKiB0ICogdCAqIHQgKiB0ICogdCArIGIgOiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluU2luZTogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgKiBfZWFzaW5nc01hdGguYyh0IC8gZCAqIChfZWFzaW5nc01hdGgucCAvIDIpKSArIGMgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRTaW5lOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogX2Vhc2luZ3NNYXRoLnModCAvIGQgKiAoX2Vhc2luZ3NNYXRoLnAgLyAyKSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1jIC8gMiAqIChfZWFzaW5nc01hdGguYyhfZWFzaW5nc01hdGgucCAqIHQgLyBkKSAtIDEpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5FeHBvOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodCA9PSAwKSA/IGIgOiBjICogX2Vhc2luZ3NNYXRoLncoMiwgMTAgKiAodCAvIGQgLSAxKSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRFeHBvOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodCA9PSBkKSA/IGIgKyBjIDogYyAqICgtX2Vhc2luZ3NNYXRoLncoMiwgLTEwICogdCAvIGQpICsgMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gMCkgcmV0dXJuIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gZCkgcmV0dXJuIGIgKyBjO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gYyAvIDIgKiBfZWFzaW5nc01hdGgudygyLCAxMCAqICh0IC0gMSkpICsgYjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAoLV9lYXNpbmdzTWF0aC53KDIsIC0xMCAqIC0tdCkgKyAyKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluQ2lyYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgKiAoX2Vhc2luZ3NNYXRoLnQoMSAtICh0IC89IGQpICogdCkgLSAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZU91dENpcmM6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiBfZWFzaW5nc01hdGgudCgxIC0gKHQgPSB0IC8gZCAtIDEpICogdCkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dENpcmM6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodCAvPSBkIC8gMikgPCAxKSA/IC1jIC8gMiAqIChfZWFzaW5nc01hdGgudCgxIC0gdCAqIHQpIC0gMSkgKyBiIDogYyAvIDIgKiAoX2Vhc2luZ3NNYXRoLnQoMSAtICh0IC09IDIpICogdCkgKyAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluRWxhc3RpYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9lYXNpbmdzTWF0aC5vOyB2YXIgcCA9IDA7IHZhciBhID0gYztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PSAwKSByZXR1cm4gYjsgaWYgKCh0IC89IGQpID09IDEpIHJldHVybiBiICsgYzsgaWYgKCFwKSBwID0gZCAqIC4zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhIDwgX2Vhc2luZ3NNYXRoLmEoYykpIHsgYSA9IGM7IHMgPSBwIC8gNDsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcyA9IHAgLyAoMiAqIF9lYXNpbmdzTWF0aC5wKSAqIF9lYXNpbmdzTWF0aC5uKGMgLyBhKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLShhICogX2Vhc2luZ3NNYXRoLncoMiwgMTAgKiAodCAtPSAxKSkgKiBfZWFzaW5nc01hdGgucygodCAqIGQgLSBzKSAqICgyICogX2Vhc2luZ3NNYXRoLnApIC8gcCkpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0RWxhc3RpYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9lYXNpbmdzTWF0aC5vOyB2YXIgcCA9IDA7IHZhciBhID0gYztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PSAwKSByZXR1cm4gYjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgLz0gZCkgPT0gMSkgcmV0dXJuIGIgKyBjO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcCkgcCA9IGQgKiAuMztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYSA8IF9lYXNpbmdzTWF0aC5hKGMpKSB7IGEgPSBjOyBzID0gcCAvIDQ7IH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHMgPSBwIC8gKDIgKiBfZWFzaW5nc01hdGgucCkgKiBfZWFzaW5nc01hdGgubihjIC8gYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKiBfZWFzaW5nc01hdGgudygyLCAtMTAgKiB0KSAqIF9lYXNpbmdzTWF0aC5zKCh0ICogZCAtIHMpICogKDIgKiBfZWFzaW5nc01hdGgucCkgLyBwKSArIGMgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBfZWFzaW5nc01hdGgubzsgdmFyIHAgPSAwOyB2YXIgYSA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gMCkgcmV0dXJuIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA9PSAyKSByZXR1cm4gYiArIGM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwKSBwID0gZCAqICguMyAqIDEuNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPCBfZWFzaW5nc01hdGguYShjKSkgeyBhID0gYzsgcyA9IHAgLyA0OyB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzID0gcCAvICgyICogX2Vhc2luZ3NNYXRoLnApICogX2Vhc2luZ3NNYXRoLm4oYyAvIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0IDwgMSkgcmV0dXJuIC0uNSAqIChhICogX2Vhc2luZ3NNYXRoLncoMiwgMTAgKiAodCAtPSAxKSkgKiBfZWFzaW5nc01hdGgucygodCAqIGQgLSBzKSAqICgyICogX2Vhc2luZ3NNYXRoLnApIC8gcCkpICsgYjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAqIF9lYXNpbmdzTWF0aC53KDIsIC0xMCAqICh0IC09IDEpKSAqIF9lYXNpbmdzTWF0aC5zKCh0ICogZCAtIHMpICogKDIgKiBfZWFzaW5nc01hdGgucCkgLyBwKSAqIC41ICsgYyArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluQmFjazogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gcyB8fCBfZWFzaW5nc01hdGgubztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqICgocyArIDEpICogdCAtIHMpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0QmFjazogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gcyB8fCBfZWFzaW5nc01hdGgubztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluT3V0QmFjazogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gcyB8fCBfZWFzaW5nc01hdGgubztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0IC89IGQgLyAyKSA8IDEpID8gYyAvIDIgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpICsgYiA6IGMgLyAyICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5Cb3VuY2U6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgLSB0aGlzLmVhc2VPdXRCb3VuY2UoeCwgZCAtIHQsIDAsIGMsIGQpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0Qm91bmNlOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gNy41NjI1O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAvPSBkKSA8ICgxIC8gMi43NSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAobyAqIHQgKiB0KSArIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0IDwgKDIgLyAyLjc1KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqIChvICogKHQgLT0gKDEuNSAvIDIuNzUpKSAqIHQgKyAuNzUpICsgYjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPCAoMi41IC8gMi43NSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAobyAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIC45Mzc1KSArIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAobyAqICh0IC09ICgyLjYyNSAvIDIuNzUpKSAqIHQgKyAuOTg0Mzc1KSArIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEJvdW5jZTogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQgPCBkIC8gMikgPyB0aGlzLmVhc2VJbkJvdW5jZSh4LCB0ICogMiwgMCwgYywgZCkgKiAuNSArIGIgOiB0aGlzLmVhc2VPdXRCb3VuY2UoeCwgdCAqIDIgLSBkLCAwLCBjLCBkKSAqIC41ICsgYyAqIC41ICsgYjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogVEVSTVMgT0YgVVNFIC0gRUFTSU5HIEVRVUFUSU9OU1xyXG4gICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICogT3BlbiBzb3VyY2UgdW5kZXIgdGhlIEJTRCBMaWNlbnNlLiBcclxuICAgICAgICAgICAgICogXHJcbiAgICAgICAgICAgICAqIENvcHlyaWdodCDDgsKpIDIwMDEgUm9iZXJ0IFBlbm5lclxyXG4gICAgICAgICAgICAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgXHJcbiAgICAgICAgICAgICAqIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuICAgICAgICAgICAgICogXHJcbiAgICAgICAgICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIFxyXG4gICAgICAgICAgICAgKiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiAgICAgICAgICAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IFxyXG4gICAgICAgICAgICAgKiBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBcclxuICAgICAgICAgICAgICogcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG4gICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgYXV0aG9yIG5vciB0aGUgbmFtZXMgb2YgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2UgXHJcbiAgICAgICAgICAgICAqIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbiAgICAgICAgICAgICAqIFxyXG4gICAgICAgICAgICAgKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIFxyXG4gICAgICAgICAgICAgKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcclxuICAgICAgICAgICAgICogTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiAgICAgICAgICAgICAqICBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsXHJcbiAgICAgICAgICAgICAqICBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEVcclxuICAgICAgICAgICAgICogIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBcclxuICAgICAgICAgICAgICogQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcclxuICAgICAgICAgICAgICogIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIFxyXG4gICAgICAgICAgICAgKiBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuIFxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICB9KSgpO1xyXG4gICAgICAgIHZhciBGUkFNRVdPUksgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3Jub3RodG1sd2hpdGUgPSAoL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nKTtcclxuICAgICAgICAgICAgdmFyIF9zdHJTcGFjZSA9ICcgJztcclxuICAgICAgICAgICAgdmFyIF9zdHJFbXB0eSA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgX3N0clNjcm9sbExlZnQgPSAnc2Nyb2xsTGVmdCc7XHJcbiAgICAgICAgICAgIHZhciBfc3RyU2Nyb2xsVG9wID0gJ3Njcm9sbFRvcCc7XHJcbiAgICAgICAgICAgIHZhciBfYW5pbWF0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgX3R5cGUgPSBDT01QQVRJQklMSVRZLnR5cGU7XHJcbiAgICAgICAgICAgIHZhciBfY3NzTnVtYmVyID0ge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5Db3VudDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZmxleEdyb3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBmbGV4U2hyaW5rOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb3JkZXI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvcnBoYW5zOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkb3dzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgem9vbTogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZXh0ZW5kKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNyYywgY29weUlzQXJyYXksIGNvcHksIG5hbWUsIG9wdGlvbnMsIGNsb25lLCB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gYXJndW1lbnRzW0xFWElDT04ubF0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVlcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChfdHlwZSh0YXJnZXQpID09IFRZUEVTLmIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWVwID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXHJcbiAgICAgICAgICAgICAgICBpZiAoX3R5cGUodGFyZ2V0KSAhPSBUWVBFUy5vICYmICFfdHlwZSh0YXJnZXQpID09IFRZUEVTLmYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBleHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBGYWtlalF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgICAgIC0taTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgob3B0aW9ucyA9IGFyZ3VtZW50c1tpXSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobmFtZSBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gb3B0aW9uc1tuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IENPTVBBVElCSUxJVFkuaXNBKGNvcHkpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weUlzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzQXJyYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgQ09NUEFUSUJJTElUWS5pc0Eoc3JjKSA/IHNyYyA6IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29weSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gY29weTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluQXJyYXkoaXRlbSwgYXJyLCBmcm9tSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXggfHwgMDsgaSA8IGFycltMRVhJQ09OLmxdOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXSA9PT0gaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3R5cGUob2JqKSA9PSBUWVBFUy5mO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmopIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gb2JqKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcclxuICAgICAgICAgICAgICAgIGlmICghb2JqIHx8IF90eXBlKG9iaikgIT0gVFlQRVMubylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGtleTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm90byA9IExFWElDT04ucDtcclxuICAgICAgICAgICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdFtwcm90b10uaGFzT3duUHJvcGVydHk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3JbcHJvdG9dICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLmNvbnN0cnVjdG9yW3Byb3RvXSwgJ2lzUHJvdG90eXBlT2YnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfdHlwZShrZXkpID09IFRZUEVTLnUgfHwgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBlYWNoKG9iaiwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgb2JqW0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSAhIW9iaiAmJiBbTEVYSUNPTi5sXSBpbiBvYmogJiYgb2JqW0xFWElDT04ubF07XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IF90eXBlKG9iaik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbih0KSA/IGZhbHNlIDogKHQgPT0gVFlQRVMuYSB8fCBsZW5ndGggPT09IDAgfHwgX3R5cGUobGVuZ3RoKSA9PSBUWVBFUy5uICYmIGxlbmd0aCA+IDAgJiYgKGxlbmd0aCAtIDEpIGluIG9iaik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaChfcm5vdGh0bWx3aGl0ZSkgfHwgW107XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5zLmpvaW4oX3N0clNwYWNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gbWF0Y2hlcyhlbGVtLCBzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVMaXN0ID0gKGVsZW0ucGFyZW50Tm9kZSB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikgfHwgW107XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IG5vZGVMaXN0W0xFWElDT04ubF07XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZUxpc3RbaV0gPT0gZWxlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRBZGphY2VudEVsZW1lbnQoZWwsIHN0cmF0ZWd5LCBjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENPTVBBVElCSUxJVFkuaXNBKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRBZGphY2VudEVsZW1lbnQoZWwsIHN0cmF0ZWd5LCBjaGlsZFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdHlwZShjaGlsZCkgPT0gVFlQRVMucylcclxuICAgICAgICAgICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoc3RyYXRlZ3ksIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEVsZW1lbnQoc3RyYXRlZ3ksIGNoaWxkLm5vZGVUeXBlID8gY2hpbGQgOiBjaGlsZFswXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldENTU1ZhbChlbCwgcHJvcCwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbFtMRVhJQ09OLnNdW3Byb3BdICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsW0xFWElDT04uc11bcHJvcF0gPSBwYXJzZUNTU1ZhbChwcm9wLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQ1NTVmFsKHByb3AsIHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfY3NzTnVtYmVyW3Byb3AudG9Mb3dlckNhc2UoKV0gJiYgX3R5cGUodmFsKSA9PSBUWVBFUy5uKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCArPSAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnROZXh0QW5pbWF0aW9uSW5RKGFuaW1PYmosIHJlbW92ZUZyb21RKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEFuaW07XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlRnJvbVEgIT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1PYmoucS5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbU9iai5xW0xFWElDT04ubF0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEFuaW0gPSBhbmltT2JqLnFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShhbmltT2JqLmVsLCBuZXh0QW5pbS5wcm9wcywgbmV4dEFuaW0uZHVyYXRpb24sIG5leHRBbmltLmVhc2luZywgbmV4dEFuaW0uY29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpbkFycmF5KGFuaW1PYmosIF9hbmltYXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uVmFsdWUoZWwsIHByb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gX3N0clNjcm9sbExlZnQgfHwgcHJvcCA9PT0gX3N0clNjcm9sbFRvcClcclxuICAgICAgICAgICAgICAgICAgICBlbFtwcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldENTU1ZhbChlbCwgcHJvcCwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhbmltYXRlKGVsLCBwcm9wcywgb3B0aW9ucywgZWFzaW5nLCBjb21wbGV0ZSwgZ3VhcmFudGVlZE5leHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoYXNPcHRpb25zID0gaXNQbGFpbk9iamVjdChvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHZhciBmcm9tID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5pbU9iajtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFydDtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcztcclxuICAgICAgICAgICAgICAgIHZhciBzdGVwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwZWNpYWxFYXNpbmc7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IG9wdGlvbnMucHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IG9wdGlvbnMuc3RlcDtcclxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsRWFzaW5nID0gb3B0aW9ucy5zcGVjaWFsRWFzaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gb3B0aW9ucy5jb21wbGV0ZTtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBvcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgc3BlY2lhbEVhc2luZyA9IHNwZWNpYWxFYXNpbmcgfHwge307XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDQwMDtcclxuICAgICAgICAgICAgICAgIGVhc2luZyA9IGVhc2luZyB8fCAnc3dpbmcnO1xyXG4gICAgICAgICAgICAgICAgZ3VhcmFudGVlZE5leHQgPSBndWFyYW50ZWVkTmV4dCB8fCBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IF9hbmltYXRpb25zW0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfYW5pbWF0aW9uc1tpXS5lbCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbU9iaiA9IF9hbmltYXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFhbmltT2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbU9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX2FuaW1hdGlvbnMucHVzaChhbmltT2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IF9zdHJTY3JvbGxMZWZ0IHx8IGtleSA9PT0gX3N0clNjcm9sbFRvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVtrZXldID0gZWxba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21ba2V5XSA9IEZha2VqUXVlcnkoZWwpLmNzcyhrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGZyb20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbVtrZXldICE9PSBwcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9ba2V5XSA9IHByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0VtcHR5T2JqZWN0KHRvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lTm93O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21WYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvVmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlYXNlZFZhbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZVN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxhcHNlZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcVBvcyA9IGd1YXJhbnRlZWROZXh0ID8gMCA6IGluQXJyYXkocU9iaiwgYW5pbU9iai5xKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcU9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHRvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogaGFzT3B0aW9ucyA/IG9wdGlvbnMgOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHFQb3MgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHFQb3MgPSBhbmltT2JqLnFbTEVYSUNPTi5sXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbU9iai5xLnB1c2gocU9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocVBvcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lU3RhcnQgPSBDT01QQVRJQklMSVRZLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZU5vdyA9IENPTVBBVElCSUxJVFkubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxhcHNlZCA9ICh0aW1lTm93IC0gdGltZVN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBxT2JqLnN0b3AgfHwgZWxhcHNlZCA+PSBkdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gMSAtICgoTUFUSC5tYXgoMCwgdGltZVN0YXJ0ICsgZHVyYXRpb24gLSB0aW1lTm93KSAvIGR1cmF0aW9uKSB8fCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gdG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbCA9IHBhcnNlRmxvYXQoZnJvbVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWwgPSBwYXJzZUZsb2F0KHRvW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlZFZhbCA9ICh0b1ZhbCAtIGZyb21WYWwpICogRUFTSU5HW3NwZWNpYWxFYXNpbmdba2V5XSB8fCBlYXNpbmddKHBlcmNlbnQsIHBlcmNlbnQgKiBkdXJhdGlvbiwgMCwgMSwgZHVyYXRpb24pICsgZnJvbVZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QW5pbWF0aW9uVmFsdWUoZWwsIGtleSwgZWFzZWRWYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihzdGVwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcChlYXNlZFZhbCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW06IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZnJvbVZhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3c6IGVhc2VkVmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdG9WYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwZXJjZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWFjaWFsRWFzaW5nOiBzcGVjaWFsRWFzaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogc3RlcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOiB0aW1lU3RhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9ncmVzcykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzKHt9LCBwZXJjZW50LCBNQVRILm1heCgwLCBkdXJhdGlvbiAtIGVsYXBzZWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE5leHRBbmltYXRpb25JblEoYW5pbU9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbXBsZXRlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcU9iai5mcmFtZSA9IENPTVBBVElCSUxJVFkuckFGKCkoZnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFPYmouZnJhbWUgPSBDT01QQVRJQklMSVRZLnJBRigpKGZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHRvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEFuaW1hdGlvblZhbHVlKGVsLCBrZXksIHRvW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROZXh0QW5pbWF0aW9uSW5RKGFuaW1PYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZ3VhcmFudGVlZE5leHQpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnROZXh0QW5pbWF0aW9uSW5RKGFuaW1PYmopO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdG9wKGVsLCBjbGVhclEsIGp1bXBUb0VuZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1PYmo7XHJcbiAgICAgICAgICAgICAgICB2YXIgcU9iajtcclxuICAgICAgICAgICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IF9hbmltYXRpb25zW0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1PYmogPSBfYW5pbWF0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbU9iai5lbCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1PYmoucVtMRVhJQ09OLmxdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcU9iaiA9IGFuaW1PYmoucVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFPYmouc3RvcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLmNBRigpKHFPYmouZnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbU9iai5xLnNwbGljZSgwLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanVtcFRvRW5kKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHFPYmoucHJvcHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEFuaW1hdGlvblZhbHVlKGVsLCBrZXksIHFPYmoucHJvcHNba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFyUSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltT2JqLnEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE5leHRBbmltYXRpb25JblEoYW5pbU9iaiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZWxlbWVudElzVmlzaWJsZShlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKGVsW0xFWElDT04ub1ddIHx8IGVsW0xFWElDT04ub0hdIHx8IGVsLmdldENsaWVudFJlY3RzKClbTEVYSUNPTi5sXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEZha2VqUXVlcnkoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbTEVYSUNPTi5sXSA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYmFzZSA9IG5ldyBGYWtlalF1ZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBzZWxlY3RvcjtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBlbG1zO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfdHlwZShzZWxlY3RvcikgPT0gVFlQRVMucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gJzwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHNlbGVjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbG1zID0gZWwuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbG1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGVsbXNbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsbXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdHlwZShlbGVtZW50cykgIT0gVFlQRVMucyAmJiAoIWlzQXJyYXlMaWtlKGVsZW1lbnRzKSB8fCBlbGVtZW50cyA9PT0gd2luZG93IHx8IGVsZW1lbnRzID09PSBlbGVtZW50cy5zZWxmKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHNbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlW2ldID0gZWxlbWVudHNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VbTEVYSUNPTi5sXSA9IGVsZW1lbnRzW0xFWElDT04ubF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2U7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBGYWtlalF1ZXJ5W0xFWElDT04ucF0gPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9FVkVOVFM6XHJcblxyXG4gICAgICAgICAgICAgICAgb246IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSAoZXZlbnROYW1lIHx8IF9zdHJFbXB0eSkubWF0Y2goX3Jub3RodG1sd2hpdGUpIHx8IFtfc3RyRW1wdHldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lTGVuZ3RoID0gZXZlbnROYW1lW0xFWElDT04ubF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGV2ZW50TmFtZUxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZVtpXSwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlbC5kZXRhY2hFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgZXZlbnROYW1lTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWVbaV0sIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gKGV2ZW50TmFtZSB8fCBfc3RyRW1wdHkpLm1hdGNoKF9ybm90aHRtbHdoaXRlKSB8fCBbX3N0ckVtcHR5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50TmFtZUxlbmd0aCA9IGV2ZW50TmFtZVtMRVhJQ09OLmxdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBldmVudE5hbWVMZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWVbaV0sIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZWwuZGV0YWNoRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGV2ZW50TmFtZUxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lW2ldLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIG9uZTogZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IChldmVudE5hbWUgfHwgX3N0ckVtcHR5KS5tYXRjaChfcm5vdGh0bWx3aGl0ZSkgfHwgW19zdHJFbXB0eV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IEZha2VqUXVlcnkodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZha2VqUXVlcnkuZWFjaChldmVudE5hbWUsIGZ1bmN0aW9uIChpLCBvbmVFdmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbmVIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwub2ZmKG9uZUV2ZW50TmFtZSwgb25lSGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwub24ob25lRXZlbnROYW1lLCBvbmVIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5maXJlRXZlbnQoJ29uJyArIGV2ZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgLy9ET00gTk9ERSBJTlNFUlRJTkcgLyBSRU1PVklORzpcclxuXHJcbiAgICAgICAgICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBpbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcywgJ2JlZm9yZWVuZCcsIGNoaWxkKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHByZXBlbmQ6IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBpbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcywgJ2FmdGVyYmVnaW4nLCBjaGlsZCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBpbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcywgJ2JlZm9yZWJlZ2luJywgY2hpbGQpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBpbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcywgJ2FmdGVyZW5kJywgY2hpbGQpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gZWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbkFycmF5KHBhcmVudCwgcGFyZW50cykgPT09IC0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFyZW50c1tMRVhJQ09OLmxdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBwYXJlbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWwuZmlyc3RDaGlsZCwgZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHdyYXBBbGw6IGZ1bmN0aW9uICh3cmFwcGVySFRNTCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBGYWtlalF1ZXJ5KHdyYXBwZXJIVE1MKVswXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVlcGVzdCA9IHdyYXBwZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGVzWzBdLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IG5vZGVzWzBdLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZGVlcGVzdC5jaGlsZE5vZGVzW0xFWElDT04ubF0gPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWVwZXN0ID0gZGVlcGVzdC5jaGlsZE5vZGVzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBub2Rlc1tMRVhJQ09OLmxdIC0gaTsgZGVlcGVzdC5maXJzdENoaWxkID09PSBub2Rlc1swXSAmJiBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZXBlc3QuYXBwZW5kQ2hpbGQobm9kZXNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBwcmV2aW91c1NpYmxpbmcgPyBwcmV2aW91c1NpYmxpbmcubmV4dFNpYmxpbmcgOiBwYXJlbnQuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIG5leHRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHdyYXBJbm5lcjogZnVuY3Rpb24gKHdyYXBwZXJIVE1MKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IEZha2VqUXVlcnkodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50cyA9IGVsLmNvbnRlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudHNbTEVYSUNPTi5sXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzLndyYXBBbGwod3JhcHBlckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5hcHBlbmQod3JhcHBlckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB3cmFwOiBmdW5jdGlvbiAod3JhcHBlckhUTUwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgRmFrZWpRdWVyeSh0aGlzKS53cmFwQWxsKHdyYXBwZXJIVE1MKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvL0RPTSBOT0RFIE1BTklQVUxBVElPTiAvIElORk9STUFUSU9OOlxyXG5cclxuICAgICAgICAgICAgICAgIGNzczogZnVuY3Rpb24gKHN0eWxlcywgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNwdFN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRDcHRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdHlwZShzdHlsZXMpID09IFRZUEVTLnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHRoaXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHRTdHlsZSA9IGdldENwdFN0eWxlID8gZ2V0Q3B0U3R5bGUoZWwsIG51bGwpIDogZWwuY3VycmVudFN0eWxlW3N0eWxlc107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9odHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTcgY2FuIGJlIG51bGwgc29tZXRpbWVzIGlmIGlmcmFtZSB3aXRoIGRpc3BsYXk6IG5vbmUgKGZpcmVmb3ggb25seSEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q3B0U3R5bGUgPyBjcHRTdHlsZSAhPSBudWxsID8gY3B0U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZXMpIDogZWxbTEVYSUNPTi5zXVtzdHlsZXNdIDogY3B0U3R5bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDU1NWYWwodGhpcywgc3R5bGVzLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gc3R5bGVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENTU1ZhbCh0aGlzLCBrZXksIHN0eWxlc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtLCBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lUHJlcGFyZWQgPSBfc3RyU3BhY2UgKyBjbGFzc05hbWUgKyBfc3RyU3BhY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTGlzdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChlbGVtID0gdGhpc1tpKytdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QgPSBlbGVtLmNsYXNzTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlbGVtLm5vZGVUeXBlID09PSAxICYmIChfc3RyU3BhY2UgKyBzdHJpcEFuZENvbGxhcHNlKGVsZW0uY2xhc3NOYW1lICsgX3N0ckVtcHR5KSArIF9zdHJTcGFjZSkuaW5kZXhPZihjbGFzc05hbWVQcmVwYXJlZCkgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc2VzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGF6ejtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VwcG9ydENsYXNzTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxtQ2xhc3NMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzTmFtZS5tYXRjaChfcm5vdGh0bWx3aGl0ZSkgfHwgW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGVsZW0gPSB0aGlzW2krK10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbG1DbGFzc0xpc3QgPSBlbGVtLmNsYXNzTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0Q2xhc3NMaXN0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydENsYXNzTGlzdCA9IGVsbUNsYXNzTGlzdCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0Q2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjbGF6eiA9IGNsYXNzZXNbdisrXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsbUNsYXNzTGlzdC5hZGQoY2xhenopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgPSBlbGVtLmNsYXNzTmFtZSArIF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmIChfc3RyU3BhY2UgKyBzdHJpcEFuZENvbGxhcHNlKGN1clZhbHVlKSArIF9zdHJTcGFjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjbGF6eiA9IGNsYXNzZXNbdisrXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyLmluZGV4T2YoX3N0clNwYWNlICsgY2xhenogKyBfc3RyU3BhY2UpIDwgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXIgKz0gY2xhenogKyBfc3RyU3BhY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZShjdXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xheno7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1cHBvcnRDbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsbUNsYXNzTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc05hbWUubWF0Y2goX3Jub3RodG1sd2hpdGUpIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChlbGVtID0gdGhpc1tpKytdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtQ2xhc3NMaXN0ID0gZWxlbS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydENsYXNzTGlzdCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRDbGFzc0xpc3QgPSBlbG1DbGFzc0xpc3QgIT09IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydENsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoY2xhenogPSBjbGFzc2VzW3YrK10pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbG1DbGFzc0xpc3QucmVtb3ZlKGNsYXp6KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clZhbHVlID0gZWxlbS5jbGFzc05hbWUgKyBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoX3N0clNwYWNlICsgc3RyaXBBbmRDb2xsYXBzZShjdXJWYWx1ZSkgKyBfc3RyU3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoY2xhenogPSBjbGFzc2VzW3YrK10pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGN1ci5pbmRleE9mKF9zdHJTcGFjZSArIGNsYXp6ICsgX3N0clNwYWNlKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKF9zdHJTcGFjZSArIGNsYXp6ICsgX3N0clNwYWNlLCBfc3RyU3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoY3VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1clZhbHVlICE9PSBmaW5hbFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdGhpc1tMRVhJQ09OLnNdLmRpc3BsYXkgPSAnbm9uZSc7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IHRoaXNbTEVYSUNPTi5zXS5kaXNwbGF5ID0gJ2Jsb2NrJzsgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGF0dHI6IGZ1bmN0aW9uIChhdHRyTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChlbCA9IHRoaXNbaSsrXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIChhdHRyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZWxbTEVYSUNPTi5iQ1JdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W19zdHJTY3JvbGxMZWZ0XTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtfc3RyU2Nyb2xsVG9wXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgc2Nyb2xsVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyBzY3JvbGxMZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogZWwub2Zmc2V0VG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBlbC5vZmZzZXRMZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsTGVmdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWwgPSB0aGlzW2krK10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxbX3N0clNjcm9sbExlZnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbFtfc3RyU2Nyb2xsTGVmdF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWwgPSB0aGlzW2krK10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxbX3N0clNjcm9sbFRvcF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsW19zdHJTY3JvbGxUb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB2YWw6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvL0RPTSBUUkFWRVJTQUwgLyBGSUxURVJJTkc6XHJcblxyXG4gICAgICAgICAgICAgICAgZmlyc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcSgwKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgbGFzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKC0xKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgZXE6IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWtlalF1ZXJ5KHRoaXNbaW5kZXggPj0gMCA/IGluZGV4IDogdGhpc1tMRVhJQ09OLmxdICsgaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgZmluZDogZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoID0gZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaFtMRVhJQ09OLmxdOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFrZWpRdWVyeShjaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaFtMRVhJQ09OLmxdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gY2hbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGVsLm1hdGNoZXMgJiYgZWwubWF0Y2hlcyhzZWxlY3RvcikpIHx8IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFrZWpRdWVyeShjaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHBhcmVudDogZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yID8gRmFrZWpRdWVyeShwYXJlbnQpLmlzKHNlbGVjdG9yKSA6IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFrZWpRdWVyeShwYXJlbnRzKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgaXM6IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXNbTEVYSUNPTi5sXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gdGhpc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnOnZpc2libGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRJc1Zpc2libGUoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICc6aGlkZGVuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZWxlbWVudElzVmlzaWJsZShlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZWwubWF0Y2hlcyAmJiBlbC5tYXRjaGVzKHNlbGVjdG9yKSkgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgY29udGVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHMgPSB0aGlzLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHNbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaChjaGlsZHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFrZWpRdWVyeShjb250ZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGVhY2g6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlYWNoKHRoaXMsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vQU5JTUFUSU9OOlxyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uIChwcm9wcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgYW5pbWF0ZSh0aGlzLCBwcm9wcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gKGNsZWFyUSwganVtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBzdG9wKHRoaXMsIGNsZWFyUSwganVtcCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZXh0ZW5kKEZha2VqUXVlcnksIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZDogZXh0ZW5kLFxyXG4gICAgICAgICAgICAgICAgaW5BcnJheTogaW5BcnJheSxcclxuICAgICAgICAgICAgICAgIGlzRW1wdHlPYmplY3Q6IGlzRW1wdHlPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgZWFjaDogZWFjaFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBGYWtlalF1ZXJ5O1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICAgICAgdmFyIElOU1RBTkNFUyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgX2luc3RhbmNlUHJvcGVydHlTdHJpbmcgPSAnX19vdmVybGF5U2Nyb2xsYmFyc19fJztcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBSZWdpc3RlciwgdW5yZWdpc3RlciBvciBnZXQgYSBjZXJ0YWluIChvciBhbGwpIGluc3RhbmNlcy5cclxuICAgICAgICAgICAgICogUmVnaXN0ZXI6IFBhc3MgdGhlIHRhcmdldCBhbmQgdGhlIGluc3RhbmNlLlxyXG4gICAgICAgICAgICAgKiBVbnJlZ2lzdGVyOiBQYXNzIHRoZSB0YXJnZXQgYW5kIG51bGwuXHJcbiAgICAgICAgICAgICAqIEdldCBJbnN0YW5jZTogUGFzcyB0aGUgdGFyZ2V0IGZyb20gd2hpY2ggdGhlIGluc3RhbmNlIHNoYWxsIGJlIGdvdC5cclxuICAgICAgICAgICAgICogR2V0IFRhcmdldHM6IFBhc3Mgbm8gYXJndW1lbnRzLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGluc3RhbmNlIHNoYWxsIGJlIHJlZ2lzdGVyZWQgLyBmcm9tIHdoaWNoIHRoZSBpbnN0YW5jZSBzaGFsbCBiZSB1bnJlZ2lzdGVyZWQgLyB0aGUgaW5zdGFuY2Ugc2hhbGwgYmUgZ290XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBpbnN0YW5jZSBUaGUgaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfHZvaWR9IFJldHVybnMgdGhlIGluc3RhbmNlIGZyb20gdGhlIGdpdmVuIHRhcmdldC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ0xlbiA9IGFyZ3VtZW50c1tMRVhJQ09OLmxdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ0xlbiA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBhbGwgdGFyZ2V0c1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGFyZ2V0cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JlZ2lzdGVyIGluc3RhbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtfaW5zdGFuY2VQcm9wZXJ0eVN0cmluZ10gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RhcmdldHMucHVzaCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gQ09NUEFUSUJJTElUWS5pbkEodGFyZ2V0LCBfdGFyZ2V0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnTGVuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdW5yZWdpc3RlciBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbX2luc3RhbmNlUHJvcGVydHlTdHJpbmddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBpbnN0YW5jZSBmcm9tIHRhcmdldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGFyZ2V0c1tpbmRleF1bX2luc3RhbmNlUHJvcGVydHlTdHJpbmddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkoKTtcclxuICAgICAgICB2YXIgUExVR0lOID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9wbHVnaW47XHJcbiAgICAgICAgICAgIHZhciBfcGx1Z2luc0dsb2JhbHM7XHJcbiAgICAgICAgICAgIHZhciBfcGx1Z2luc0F1dG9VcGRhdGVMb29wO1xyXG4gICAgICAgICAgICB2YXIgX3BsdWdpbnNFeHRlbnNpb25zID0gW107XHJcbiAgICAgICAgICAgIHZhciBfcGx1Z2luc09wdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBDT01QQVRJQklMSVRZLnR5cGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zc2libGVUZW1wbGF0ZVR5cGVzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIFRZUEVTLmIsIC8vYm9vbGVhblxyXG4gICAgICAgICAgICAgICAgICAgIFRZUEVTLm4sIC8vbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgVFlQRVMucywgLy9zdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICBUWVBFUy5hLCAvL2FycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgVFlQRVMubywgLy9vYmplY3RcclxuICAgICAgICAgICAgICAgICAgICBUWVBFUy5mLCAvL2Z1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgVFlQRVMueiAgLy9udWxsXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3RyaWN0ZWRTdHJpbmdzU3BsaXQgPSAnICc7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdHJpY3RlZFN0cmluZ3NQb3NzaWJpbGl0aWVzU3BsaXQgPSAnOic7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lQWxsb3dlZFZhbHVlcyA9IFtUWVBFUy56LCBUWVBFUy5zXTtcclxuICAgICAgICAgICAgICAgIHZhciBudW1iZXJBbGxvd2VkVmFsdWVzID0gVFlQRVMubjtcclxuICAgICAgICAgICAgICAgIHZhciBib29sZWFuTnVsbEFsbG93ZWRWYWx1ZXMgPSBbVFlQRVMueiwgVFlQRVMuYl07XHJcbiAgICAgICAgICAgICAgICB2YXIgYm9vbGVhblRydWVUZW1wbGF0ZSA9IFt0cnVlLCBUWVBFUy5iXTtcclxuICAgICAgICAgICAgICAgIHZhciBib29sZWFuRmFsc2VUZW1wbGF0ZSA9IFtmYWxzZSwgVFlQRVMuYl07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2tUZW1wbGF0ZSA9IFtudWxsLCBbVFlQRVMueiwgVFlQRVMuZl1dO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZU9uTG9hZFRlbXBsYXRlID0gW1snaW1nJ10sIFtUWVBFUy5zLCBUWVBFUy5hLCBUWVBFUy56XV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQXR0cnNUZW1wbGF0ZSA9IFtbJ3N0eWxlJywgJ2NsYXNzJ10sIFtUWVBFUy5zLCBUWVBFUy5hLCBUWVBFUy56XV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzaXplQWxsb3dlZFZhbHVlcyA9ICduOm5vbmUgYjpib3RoIGg6aG9yaXpvbnRhbCB2OnZlcnRpY2FsJztcclxuICAgICAgICAgICAgICAgIHZhciBvdmVyZmxvd0JlaGF2aW9yQWxsb3dlZFZhbHVlcyA9ICd2LWg6dmlzaWJsZS1oaWRkZW4gdi1zOnZpc2libGUtc2Nyb2xsIHM6c2Nyb2xsIGg6aGlkZGVuJztcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJzVmlzaWJpbGl0eUFsbG93ZWRWYWx1ZXMgPSAndjp2aXNpYmxlIGg6aGlkZGVuIGE6YXV0byc7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc0F1dG9IaWRlQWxsb3dlZFZhbHVlcyA9ICduOm5ldmVyIHM6c2Nyb2xsIGw6bGVhdmUgbTptb3ZlJztcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zRGVmYXVsdHNBbmRUZW1wbGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFsnb3MtdGhlbWUtZGFyaycsIGNsYXNzTmFtZUFsbG93ZWRWYWx1ZXNdLCAgICAgICAgICAgICAgICAvL251bGwgfHwgc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBbJ25vbmUnLCByZXNpemVBbGxvd2VkVmFsdWVzXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub25lIHx8IGJvdGggIHx8IGhvcml6b250YWwgfHwgdmVydGljYWwgfHwgbiB8fCBiIHx8IGggfHwgdlxyXG4gICAgICAgICAgICAgICAgICAgIHNpemVBdXRvQ2FwYWJsZTogYm9vbGVhblRydWVUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBBbHdheXM6IGJvb2xlYW5UcnVlVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJUTDogYm9vbGVhblRydWVUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdBYnNvbHV0ZTogYm9vbGVhbkZhbHNlVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9VcGRhdGU6IFtudWxsLCBib29sZWFuTnVsbEFsbG93ZWRWYWx1ZXNdLCAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZSB8fCBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b1VwZGF0ZUludGVydmFsOiBbMzMsIG51bWJlckFsbG93ZWRWYWx1ZXNdLCAgICAgICAgICAgICAgICAgICAgICAgLy9udW1iZXJcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVPbkxvYWQ6IHVwZGF0ZU9uTG9hZFRlbXBsYXRlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3N0cmluZyB8fCBhcnJheSB8fCBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlU2Nyb2xsYmFyc092ZXJsYWlkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dOYXRpdmVTY3JvbGxiYXJzOiBib29sZWFuRmFsc2VUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgLy90cnVlIHx8IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGJvb2xlYW5UcnVlVGVtcGxhdGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90cnVlIHx8IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0JlaGF2aW9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFsnc2Nyb2xsJywgb3ZlcmZsb3dCZWhhdmlvckFsbG93ZWRWYWx1ZXNdLCAgICAgICAgICAgICAgICAgICAgLy92aXNpYmxlLWhpZGRlbiAgfHwgdmlzaWJsZS1zY3JvbGwgfHwgaGlkZGVuIHx8IHNjcm9sbCB8fCB2LWggfHwgdi1zIHx8IGggfHwgc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBbJ3Njcm9sbCcsIG92ZXJmbG93QmVoYXZpb3JBbGxvd2VkVmFsdWVzXSAgICAgICAgICAgICAgICAgICAgIC8vdmlzaWJsZS1oaWRkZW4gIHx8IHZpc2libGUtc2Nyb2xsIHx8IGhpZGRlbiB8fCBzY3JvbGwgfHwgdi1oIHx8IHYtcyB8fCBoIHx8IHNcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogWydhdXRvJywgc2Nyb2xsYmFyc1Zpc2liaWxpdHlBbGxvd2VkVmFsdWVzXSwgICAgICAgICAvL3Zpc2libGUgfHwgaGlkZGVuIHx8IGF1dG8gfHwgdiB8fCBoIHx8IGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hpZGU6IFsnbmV2ZXInLCBzY3JvbGxiYXJzQXV0b0hpZGVBbGxvd2VkVmFsdWVzXSwgICAgICAgICAgICAvL25ldmVyIHx8IHNjcm9sbCB8fCBsZWF2ZSB8fCBtb3ZlIHx8IG4gfHwgcyB8fCBsIHx8IG1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hpZGVEZWxheTogWzgwMCwgbnVtYmVyQWxsb3dlZFZhbHVlc10sICAgICAgICAgICAgICAgICAgICAgICAvL251bWJlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnU2Nyb2xsaW5nOiBib29sZWFuVHJ1ZVRlbXBsYXRlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja1Njcm9sbGluZzogYm9vbGVhbkZhbHNlVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaFN1cHBvcnQ6IGJvb2xlYW5UcnVlVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbmFwSGFuZGxlOiBib29sZWFuRmFsc2VUZW1wbGF0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSB8fCBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHluV2lkdGg6IGJvb2xlYW5GYWxzZVRlbXBsYXRlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RydWUgfHwgZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHluSGVpZ2h0OiBib29sZWFuRmFsc2VUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RydWUgfHwgZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGVkQXR0cnM6IGluaGVyaXRlZEF0dHJzVGVtcGxhdGUgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3N0cmluZyB8fCBhcnJheSB8fCBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Jbml0aWFsaXplZDogY2FsbGJhY2tUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Jbml0aWFsaXphdGlvbldpdGhkcmF3bjogY2FsbGJhY2tUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25EZXN0cm95ZWQ6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY3JvbGxTdGFydDogY2FsbGJhY2tUZW1wbGF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY3JvbGw6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY3JvbGxTdG9wOiBjYWxsYmFja1RlbXBsYXRlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25PdmVyZmxvd0NoYW5nZWQ6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25PdmVyZmxvd0Ftb3VudENoYW5nZWQ6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25EaXJlY3Rpb25DaGFuZ2VkOiBjYWxsYmFja1RlbXBsYXRlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db250ZW50U2l6ZUNoYW5nZWQ6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Ib3N0U2l6ZUNoYW5nZWQ6IGNhbGxiYWNrVGVtcGxhdGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25VcGRhdGVkOiBjYWxsYmFja1RlbXBsYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL251bGwgfHwgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnZlcnQgPSBmdW5jdGlvbiAodGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjdXJzaXZlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9ialtMRVhJQ09OLmhPUF0oa2V5KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG9ialtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsVHlwZSA9IHR5cGUodmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxUeXBlID09IFRZUEVTLmEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWxbdGVtcGxhdGUgPyAxIDogMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWxUeXBlID09IFRZUEVTLm8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSByZWN1cnNpdmUodmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY3Vyc2l2ZShGUkFNRVdPUksuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zRGVmYXVsdHNBbmRUZW1wbGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIF9kZWZhdWx0czogY29udmVydCgpLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBfdGVtcGxhdGU6IGNvbnZlcnQodHJ1ZSksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAqIFZhbGlkYXRlcyB0aGUgcGFzc2VkIG9iamVjdCBieSB0aGUgcGFzc2VkIHRlbXBsYXRlLlxyXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCB3aGljaCBzaGFsbCBiZSB2YWxpZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSB3aGljaCBkZWZpbmVzIHRoZSBhbGxvd2VkIHZhbHVlcyBhbmQgdHlwZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHdyaXRlRXJyb3JzIFRydWUgaWYgZXJyb3JzIHNoYWxsIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS5cclxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZGlmZk9iaiBJZiBhIG9iamVjdCBpcyBwYXNzZWQgdGhlbiBvbmx5IHZhbGlkIGRpZmZlcmVuY2VzIHRvIHRoaXMgb2JqZWN0IHdpbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge3t9fSBBIG9iamVjdCB3aGljaCBjb250YWlucyB0d28gb2JqZWN0cyBjYWxsZWQgXCJkZWZhdWx0XCIgYW5kIFwicHJlcGFyZWRcIiB3aGljaCBjb250YWlucyBvbmx5IHRoZSB2YWxpZCBwcm9wZXJ0aWVzIG9mIHRoZSBwYXNzZWQgb3JpZ2luYWwgb2JqZWN0IGFuZCBkaXNjYXJkcyBub3QgZGlmZmVyZW50IHZhbHVlcyBjb21wYXJlZCB0byB0aGUgcGFzc2VkIGRpZmZPYmouXHJcbiAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlOiBmdW5jdGlvbiAob2JqLCB0ZW1wbGF0ZSwgd3JpdGVFcnJvcnMsIGRpZmZPYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRlZE9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRlZE9wdGlvbnNQcmVwYXJlZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0Q29weSA9IEZSQU1FV09SSy5leHRlbmQodHJ1ZSwge30sIG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbkFycmF5ID0gRlJBTUVXT1JLLmluQXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0VtcHR5T2JqID0gRlJBTUVXT1JLLmlzRW1wdHlPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja09iamVjdFByb3BzID0gZnVuY3Rpb24gKGRhdGEsIHRlbXBsYXRlLCBkaWZmRGF0YSwgdmFsaWRhdGVkT3B0aW9ucywgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkLCBwcmV2UHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gdGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGVbTEVYSUNPTi5oT1BdKHByb3ApICYmIGRhdGFbTEVYSUNPTi5oT1BdKHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0RpZmYgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlVmFsdWUgPSB0ZW1wbGF0ZVtwcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlVmFsdWVUeXBlID0gdHlwZSh0ZW1wbGF0ZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlSXNDb21wbGV4ID0gdGVtcGxhdGVWYWx1ZVR5cGUgPT0gVFlQRVMubztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlVHlwZXMgPSAhQ09NUEFUSUJJTElUWS5pc0EodGVtcGxhdGVWYWx1ZSkgPyBbdGVtcGxhdGVWYWx1ZV0gOiB0ZW1wbGF0ZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YURpZmZWYWx1ZSA9IGRpZmZEYXRhW3Byb3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtwcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFWYWx1ZVR5cGUgPSB0eXBlKGRhdGFWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wUHJlZml4ID0gcHJldlByb3BOYW1lID8gcHJldlByb3BOYW1lICsgJy4nIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IFwiVGhlIG9wdGlvbiBcXFwiXCIgKyBwcm9wUHJlZml4ICsgcHJvcCArIFwiXFxcIiB3YXNuJ3Qgc2V0LCBiZWNhdXNlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvclBvc3NpYmxlVHlwZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUmVzdHJpY3RlZFN0cmluZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3RyaWN0ZWRTdHJpbmdWYWx1ZXNTcGxpdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3RyaWN0ZWRTdHJpbmdWYWx1ZXNQb3NzaWJpbGl0aWVzU3BsaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1Jlc3RyaWN0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1haW5Qb3NzaWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YURpZmZWYWx1ZSA9IGRhdGFEaWZmVmFsdWUgPT09IHVuZGVmaW5lZCA/IHt9IDogZGF0YURpZmZWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlIHRlbXBsYXRlIGhhcyBhIG9iamVjdCBhcyB2YWx1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgb3B0aW9ucyBhcmUgY29tcGxleCAodmVyc2NoYWNodGVsdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlSXNDb21wbGV4ICYmIGRhdGFWYWx1ZVR5cGUgPT0gVFlQRVMubykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkT3B0aW9uc1twcm9wXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkW3Byb3BdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja09iamVjdFByb3BzKGRhdGFWYWx1ZSwgdGVtcGxhdGVWYWx1ZSwgZGF0YURpZmZWYWx1ZSwgdmFsaWRhdGVkT3B0aW9uc1twcm9wXSwgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkW3Byb3BdLCBwcm9wUHJlZml4ICsgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGUkFNRVdPUksuZWFjaChbZGF0YSwgdmFsaWRhdGVkT3B0aW9ucywgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkXSwgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5T2JqKHZhbHVlW3Byb3BdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVbcHJvcF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRlbXBsYXRlSXNDb21wbGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGVtcGxhdGVUeXBlc1tMRVhJQ09OLmxdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyVHlwZSA9IHRlbXBsYXRlVHlwZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVWYWx1ZVR5cGUgPSB0eXBlKGN1cnJUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGN1cnJ0eXBlIGlzIHN0cmluZyBhbmQgc3RhcnRzIHdpdGggcmVzdHJpY3RlZFN0cmluZ1ByZWZpeCBhbmQgZW5kIHdpdGggcmVzdHJpY3RlZFN0cmluZ1N1ZmZpeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVzdHJpY3RlZFZhbHVlID0gdGVtcGxhdGVWYWx1ZVR5cGUgPT0gVFlQRVMucyAmJiBpbkFycmF5KGN1cnJUeXBlLCBwb3NzaWJsZVRlbXBsYXRlVHlwZXMpID09PSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZXN0cmljdGVkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JQb3NzaWJsZVR5cGVzLnB1c2goVFlQRVMucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NwbGl0IGl0IGludG8gYSBhcnJheSB3aGljaCBjb250YWlucyBhbGwgcG9zc2libGUgdmFsdWVzIGZvciBleGFtcGxlOiBbXCJ5Onllc1wiLCBcIm46bm9cIiwgXCJtOm1heWJlXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RyaWN0ZWRTdHJpbmdWYWx1ZXNTcGxpdCA9IGN1cnJUeXBlLnNwbGl0KHJlc3RyaWN0ZWRTdHJpbmdzU3BsaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclJlc3RyaWN0ZWRTdHJpbmdzID0gZXJyb3JSZXN0cmljdGVkU3RyaW5ncy5jb25jYXQocmVzdHJpY3RlZFN0cmluZ1ZhbHVlc1NwbGl0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2ID0gMDsgdiA8IHJlc3RyaWN0ZWRTdHJpbmdWYWx1ZXNTcGxpdFtMRVhJQ09OLmxdOyB2KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc3BsaXQgdGhlIHBvc3NpYmxlIHZhbHVlcyBpbnRvIHRoZWlyIHBvc3NpYmlsaXRlaXMgZm9yIGV4YW1wbGU6IFtcInlcIiwgXCJ5ZXNcIl0gLT4gdGhlIGZpcnN0IGlzIGFsd2F5cyB0aGUgbWFpblBvc3NpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0cmljdGVkU3RyaW5nVmFsdWVzUG9zc2liaWxpdGllc1NwbGl0ID0gcmVzdHJpY3RlZFN0cmluZ1ZhbHVlc1NwbGl0W3ZdLnNwbGl0KHJlc3RyaWN0ZWRTdHJpbmdzUG9zc2liaWxpdGllc1NwbGl0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Qb3NzaWJpbGl0eSA9IHJlc3RyaWN0ZWRTdHJpbmdWYWx1ZXNQb3NzaWJpbGl0aWVzU3BsaXRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdHJpY3RlZFN0cmluZ1ZhbHVlc1Bvc3NpYmlsaXRpZXNTcGxpdFtMRVhJQ09OLmxdOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGFueSBwb3NzaWJpbGl0eSBtYXRjaGVzIHdpdGggdGhlIGRhdGFWYWx1ZSwgaXRzIHZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFWYWx1ZSA9PT0gcmVzdHJpY3RlZFN0cmluZ1ZhbHVlc1Bvc3NpYmlsaXRpZXNTcGxpdFtqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUG9zc2libGVUeXBlcy5wdXNoKGN1cnJUeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhVmFsdWVUeXBlID09PSBjdXJyVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlmZiA9IGRhdGFWYWx1ZSAhPT0gZGF0YURpZmZWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGlmZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkT3B0aW9uc1twcm9wXSA9IGRhdGFWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVzdHJpY3RlZFZhbHVlID8gaW5BcnJheShkYXRhRGlmZlZhbHVlLCByZXN0cmljdGVkU3RyaW5nVmFsdWVzUG9zc2liaWxpdGllc1NwbGl0KSA8IDAgOiBpc0RpZmYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZE9wdGlvbnNQcmVwYXJlZFtwcm9wXSA9IGlzUmVzdHJpY3RlZFZhbHVlID8gbWFpblBvc3NpYmlsaXR5IDogZGF0YVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod3JpdGVFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IgKyBcIiBpdCBkb2Vzbid0IGFjY2VwdCB0aGUgdHlwZSBbIFwiICsgZGF0YVZhbHVlVHlwZS50b1VwcGVyQ2FzZSgpICsgXCIgXSB3aXRoIHRoZSB2YWx1ZSBvZiBcXFwiXCIgKyBkYXRhVmFsdWUgKyBcIlxcXCIuXFxyXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFjY2VwdGVkIHR5cGVzIGFyZTogWyBcIiArIGVycm9yUG9zc2libGVUeXBlcy5qb2luKCcsICcpLnRvVXBwZXJDYXNlKCkgKyBcIiBdLlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yUmVzdHJpY3RlZFN0cmluZ3NbbGVuZ3RoXSA+IDAgPyBcIlxcclxcblZhbGlkIHN0cmluZ3MgYXJlOiBbIFwiICsgZXJyb3JSZXN0cmljdGVkU3RyaW5ncy5qb2luKCcsICcpLnNwbGl0KHJlc3RyaWN0ZWRTdHJpbmdzUG9zc2liaWxpdGllc1NwbGl0KS5qb2luKCcsICcpICsgXCIgXS5cIiA6ICcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtwcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tPYmplY3RQcm9wcyhvYmplY3RDb3B5LCB0ZW1wbGF0ZSwgZGlmZk9iaiB8fCB7fSwgdmFsaWRhdGVkT3B0aW9ucywgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIHZhbHVlcyB3aGljaCBhcmVuJ3Qgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZSB0byB0aGUgZmluaXNoZWQgdmFsaWRhdGVkIG9iamVjdCB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyBkaXNjYXJkZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2VlcEZvcmVpZ25Qcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRlJBTUVXT1JLLmV4dGVuZCh0cnVlLCB2YWxpZGF0ZWRPcHRpb25zLCBvYmplY3RDb3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZSQU1FV09SSy5leHRlbmQodHJ1ZSwgdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkLCBvYmplY3RDb3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0VtcHR5T2JqKG9iamVjdENvcHkpICYmIHdyaXRlRXJyb3JzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIGRpc2NhcmRlZCBkdWUgdG8gaW52YWxpZGl0eTpcXHJcXG4nICsgd2luZG93LkpTT04uc3RyaW5naWZ5KG9iamVjdENvcHksIG51bGwsIDIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVmYXVsdDogdmFsaWRhdGVkT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wcmVwYXJlZDogdmFsaWRhdGVkT3B0aW9uc1ByZXBhcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEluaXRpYWxpemVzIHRoZSBvYmplY3Qgd2hpY2ggY29udGFpbnMgZ2xvYmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwbHVnaW4gYW5kIGVhY2ggaW5zdGFuY2Ugb2YgaXQuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbml0T3ZlcmxheVNjcm9sbGJhcnNTdGF0aWNzKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfcGx1Z2luc0dsb2JhbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgX3BsdWdpbnNHbG9iYWxzID0gbmV3IE92ZXJsYXlTY3JvbGxiYXJzR2xvYmFscyhfcGx1Z2luc09wdGlvbnMuX2RlZmF1bHRzKTtcclxuICAgICAgICAgICAgICAgIGlmICghX3BsdWdpbnNBdXRvVXBkYXRlTG9vcClcclxuICAgICAgICAgICAgICAgICAgICBfcGx1Z2luc0F1dG9VcGRhdGVMb29wID0gbmV3IE92ZXJsYXlTY3JvbGxiYXJzQXV0b1VwZGF0ZUxvb3AoX3BsdWdpbnNHbG9iYWxzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFRoZSBnbG9iYWwgb2JqZWN0IGZvciB0aGUgT3ZlcmxheVNjcm9sbGJhcnMgb2JqZWN0cy4gSXQgY29udGFpbnMgcmVzb3VyY2VzIHdoaWNoIGV2ZXJ5IE92ZXJsYXlTY3JvbGxiYXJzIG9iamVjdCBuZWVkcy4gVGhpcyBvYmplY3QgaXMgaW5pdGlhbGl6ZWQgb25seSBvbmNlOiBpZiB0aGUgZmlyc3QgT3ZlcmxheVNjcm9sbGJhcnMgb2JqZWN0IGdldHMgaW5pdGlhbGl6ZWQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBkZWZhdWx0T3B0aW9uc1xyXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE92ZXJsYXlTY3JvbGxiYXJzR2xvYmFscyhkZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9iYXNlID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHZhciBzdHJPdmVyZmxvdyA9ICdvdmVyZmxvdyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RySGlkZGVuID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyU2Nyb2xsID0gJ3Njcm9sbCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsZW1lbnQgPSBGUkFNRVdPUksoJ2JvZHknKTtcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJEdW1teUVsZW1lbnQgPSBGUkFNRVdPUksoJzxkaXYgaWQ9XCJvcy1kdW1teS1zY3JvbGxiYXItc2l6ZVwiPjxkaXY+PC9kaXY+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyRHVtbXlFbGVtZW50MCA9IHNjcm9sbGJhckR1bW15RWxlbWVudFswXTtcclxuICAgICAgICAgICAgICAgIHZhciBkdW1teUNvbnRhaW5lckNoaWxkID0gRlJBTUVXT1JLKHNjcm9sbGJhckR1bW15RWxlbWVudC5jaGlsZHJlbignZGl2JykuZXEoMCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJvZHlFbGVtZW50LmFwcGVuZChzY3JvbGxiYXJEdW1teUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsYmFyRHVtbXlFbGVtZW50LmhpZGUoKS5zaG93KCk7IC8vZml4IElFOCBidWcgKGluY29ycmVjdCBtZWFzdXJpbmcpXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVNjcm9sbGJhclNpemUgPSBjYWxjTmF0aXZlU2Nyb2xsYmFyU2l6ZShzY3JvbGxiYXJEdW1teUVsZW1lbnQwKTtcclxuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IG5hdGl2ZVNjcm9sbGJhclNpemUueCA9PT0gMCxcclxuICAgICAgICAgICAgICAgICAgICB5OiBuYXRpdmVTY3JvbGxiYXJTaXplLnkgPT09IDBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgbXNpZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ckluZGV4T2YgPSAnaW5kZXhPZic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0clN1YlN0cmluZyA9ICdzdWJzdHJpbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtc2llID0gdWFbc3RySW5kZXhPZl0oJ01TSUUgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWRlbnQgPSB1YVtzdHJJbmRleE9mXSgnVHJpZGVudC8nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IHVhW3N0ckluZGV4T2ZdKCdFZGdlLycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydiA9IHVhW3N0ckluZGV4T2ZdKCdydjonKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZUludEZ1bmMgPSBwYXJzZUludDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgMTAgb3Igb2xkZXIgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zaWUgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwYXJzZUludEZ1bmModWFbc3RyU3ViU3RyaW5nXShtc2llICsgNSwgdWFbc3RySW5kZXhPZl0oJy4nLCBtc2llKSksIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgMTEgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHJpZGVudCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnNlSW50RnVuYyh1YVtzdHJTdWJTdHJpbmddKHJ2ICsgMywgdWFbc3RySW5kZXhPZl0oJy4nLCBydikpLCAxMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVkZ2UgKElFIDEyKykgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZWRnZSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnNlSW50RnVuYyh1YVtzdHJTdWJTdHJpbmddKGVkZ2UgKyA1LCB1YVtzdHJJbmRleE9mXSgnLicsIGVkZ2UpKSwgMTApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlciBicm93c2VyXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgRlJBTUVXT1JLLmV4dGVuZChfYmFzZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICBtc2llOiBtc2llLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9VcGRhdGVMb29wOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBhdXRvVXBkYXRlUmVjb21tZW5kZWQ6ICFDT01QQVRJQklMSVRZLm1PKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlU2Nyb2xsYmFyU2l6ZTogbmF0aXZlU2Nyb2xsYmFyU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkOiBuYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZVNjcm9sbGJhclN0eWxpbmc6IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyRHVtbXlFbGVtZW50LmFkZENsYXNzKCdvcy12aWV3cG9ydC1uYXRpdmUtc2Nyb2xsYmFycy1pbnZpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChzY3JvbGxiYXJEdW1teUVsZW1lbnQuY3NzKCdzY3JvbGxiYXItd2lkdGgnKSA9PT0gJ25vbmUnICYmIChtc2llID4gOSB8fCAhbXNpZSkpIHx8IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGJhckR1bW15RWxlbWVudDAsICc6Oi13ZWJraXQtc2Nyb2xsYmFyJykuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7IH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZml4IG9wZXJhIGJ1Zzogc2Nyb2xsYmFyIHN0eWxlcyB3aWxsIG9ubHkgYXBwZWFyIGlmIG92ZXJmbG93IHZhbHVlIGlzIHNjcm9sbCBvciBhdXRvIGR1cmluZyB0aGUgYWN0aXZhdGlvbiBvZiB0aGUgc3R5bGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYW5kIHNldCBvdmVyZmxvdyB0byBzY3JvbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zY3JvbGxiYXJEdW1teUVsZW1lbnQuY3NzKHN0ck92ZXJmbG93LCBzdHJIaWRkZW4pLmhpZGUoKS5jc3Moc3RyT3ZlcmZsb3csIHN0clNjcm9sbCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiAoc2Nyb2xsYmFyRHVtbXlFbGVtZW50MFtMRVhJQ09OLm9IXSAtIHNjcm9sbGJhckR1bW15RWxlbWVudDBbTEVYSUNPTi5jSF0pID09PSAwICYmIChzY3JvbGxiYXJEdW1teUVsZW1lbnQwW0xFWElDT04ub1ddIC0gc2Nyb2xsYmFyRHVtbXlFbGVtZW50MFtMRVhJQ09OLmNXXSkgPT09IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZTogeyB4OiAzMCwgeTogMzAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjc3NDYWxjOiBWRU5ET1JTLl9jc3NQcm9wZXJ0eVZhbHVlKCd3aWR0aCcsICdjYWxjJywgJygxcHgpJykgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByZXN0cmljdGVkTWVhc3VyaW5nOiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2h0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzkzMDVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSAxLjExLjAgYWx3YXlzIGZhbHNlIC0+IGZpeGVkIHZpYSBDU1MgKGhvcGVmdWxseSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyRHVtbXlFbGVtZW50LmNzcyhzdHJPdmVyZmxvdywgc3RySGlkZGVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBzY3JvbGxiYXJEdW1teUVsZW1lbnQwW0xFWElDT04uc1ddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogc2Nyb2xsYmFyRHVtbXlFbGVtZW50MFtMRVhJQ09OLnNIXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJEdW1teUVsZW1lbnQuY3NzKHN0ck92ZXJmbG93LCAndmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsU2l6ZTIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBzY3JvbGxiYXJEdW1teUVsZW1lbnQwW0xFWElDT04uc1ddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogc2Nyb2xsYmFyRHVtbXlFbGVtZW50MFtMRVhJQ09OLnNIXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHNjcm9sbFNpemUudyAtIHNjcm9sbFNpemUyLncpICE9PSAwIHx8IChzY3JvbGxTaXplLmggLSBzY3JvbGxTaXplMi5oKSAhPT0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9KSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJ0bFNjcm9sbEJlaGF2aW9yOiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJEdW1teUVsZW1lbnQuY3NzKHsgJ292ZXJmbG93LXknOiBzdHJIaWRkZW4sICdvdmVyZmxvdy14Jzogc3RyU2Nyb2xsLCAnZGlyZWN0aW9uJzogJ3J0bCcgfSkuc2Nyb2xsTGVmdCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1bW15Q29udGFpbmVyT2Zmc2V0ID0gc2Nyb2xsYmFyRHVtbXlFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHVtbXlDb250YWluZXJDaGlsZE9mZnNldCA9IGR1bW15Q29udGFpbmVyQ2hpbGQub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL0tpbmdTb3JhL092ZXJsYXlTY3JvbGxiYXJzL2lzc3Vlcy8xODdcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyRHVtbXlFbGVtZW50LnNjcm9sbExlZnQoLTk5OSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1teUNvbnRhaW5lckNoaWxkT2Zmc2V0QWZ0ZXJTY3JvbGwgPSBkdW1teUNvbnRhaW5lckNoaWxkLm9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vcmlnaW4gZGlyZWN0aW9uID0gZGV0ZXJtaW5lcyBpZiB0aGUgemVybyBzY3JvbGwgcG9zaXRpb24gaXMgb24gdGhlIGxlZnQgb3IgcmlnaHQgc2lkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8naScgbWVhbnMgJ2ludmVydCcgKGkgPT09IHRydWUgbWVhbnMgdGhhdCB0aGUgYXhpcyBtdXN0IGJlIGludmVydGVkIHRvIGJlIGNvcnJlY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RydWUgPSBvbiB0aGUgbGVmdCBzaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZhbHNlID0gb24gdGhlIHJpZ2h0IHNpZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGk6IGR1bW15Q29udGFpbmVyT2Zmc2V0LmxlZnQgPT09IGR1bW15Q29udGFpbmVyQ2hpbGRPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVnYXRpdmUgPSBkZXRlcm1pbmVzIGlmIHRoZSBtYXhpbXVtIHNjcm9sbCBpcyBwb3NpdGl2ZSBvciBuZWdhdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8nbicgbWVhbnMgJ25lZ2F0ZScgKG4gPT09IHRydWUgbWVhbnMgdGhhdCB0aGUgYXhpcyBtdXN0IGJlIG5lZ2F0ZWQgdG8gYmUgY29ycmVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ1ZSA9IG5lZ2F0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZhbHNlID0gcG9zaXRpdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG46IGR1bW15Q29udGFpbmVyQ2hpbGRPZmZzZXQubGVmdCAhPT0gZHVtbXlDb250YWluZXJDaGlsZE9mZnNldEFmdGVyU2Nyb2xsLmxlZnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRUcmFuc2Zvcm06ICEhVkVORE9SUy5fY3NzUHJvcGVydHkoJ3RyYW5zZm9ybScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRUcmFuc2l0aW9uOiAhIVZFTkRPUlMuX2Nzc1Byb3BlcnR5KCd0cmFuc2l0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydFBhc3NpdmVFdmVudHM6IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydFJlc2l6ZU9ic2VydmVyOiAhIUNPTVBBVElCSUxJVFkuck8oKSxcclxuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0TXV0YXRpb25PYnNlcnZlcjogISFDT01QQVRJQklMSVRZLm1PKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbGJhckR1bW15RWxlbWVudC5yZW1vdmVBdHRyKExFWElDT04ucykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9DYXRjaCB6b29tIGV2ZW50OlxyXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIG5hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQueSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWJzID0gTUFUSC5hYnM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gQ09NUEFUSUJJTElUWS53VygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSBDT01QQVRJQklMSVRZLndIKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd0RwciA9IGdldFdpbmRvd0RQUigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKElOU1RBTkNFUygpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdXID0gQ09NUEFUSUJJTElUWS53VygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0ggPSBDT01QQVRJQklMSVRZLndIKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFXID0gbmV3VyAtIHdpbmRvd1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhSCA9IG5ld0ggLSB3aW5kb3dIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhVyA9PT0gMCAmJiBkZWx0YUggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YVdSYXRpbyA9IE1BVEgucm91bmQobmV3VyAvICh3aW5kb3dXaWR0aCAvIDEwMC4wKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFIUmF0aW8gPSBNQVRILnJvdW5kKG5ld0ggLyAod2luZG93SGVpZ2h0IC8gMTAwLjApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYnNEZWx0YVcgPSBhYnMoZGVsdGFXKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYnNEZWx0YUggPSBhYnMoZGVsdGFIKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYnNEZWx0YVdSYXRpbyA9IGFicyhkZWx0YVdSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJzRGVsdGFIUmF0aW8gPSBhYnMoZGVsdGFIUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RQUiA9IGdldFdpbmRvd0RQUigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YUlzQmlnZ2VyID0gYWJzRGVsdGFXID4gMiAmJiBhYnNEZWx0YUggPiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAhZGlmZmVyZW5jZUlzQmlnZ2VyVGhhbk9uZShhYnNEZWx0YVdSYXRpbywgYWJzRGVsdGFIUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRwckNoYW5nZWQgPSBuZXdEUFIgIT09IHdpbmRvd0RwciAmJiB3aW5kb3dEcHIgPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzWm9vbSA9IGRlbHRhSXNCaWdnZXIgJiYgZGlmZmVyZW5jZSAmJiBkcHJDaGFuZ2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNjcm9sbGJhclNpemUgPSBfYmFzZS5uYXRpdmVTY3JvbGxiYXJTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Njcm9sbGJhclNpemU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlFbGVtZW50LmFwcGVuZChzY3JvbGxiYXJEdW1teUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njcm9sbGJhclNpemUgPSBfYmFzZS5uYXRpdmVTY3JvbGxiYXJTaXplID0gY2FsY05hdGl2ZVNjcm9sbGJhclNpemUoc2Nyb2xsYmFyRHVtbXlFbGVtZW50WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJEdW1teUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFNjcm9sbGJhclNpemUueCAhPT0gbmV3U2Nyb2xsYmFyU2l6ZS54IHx8IG9sZFNjcm9sbGJhclNpemUueSAhPT0gbmV3U2Nyb2xsYmFyU2l6ZS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZSQU1FV09SSy5lYWNoKElOU1RBTkNFUygpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSU5TVEFOQ0VTKHRoaXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RBTkNFUyh0aGlzKS51cGRhdGUoJ3pvb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1dpZHRoID0gbmV3VztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0hlaWdodCA9IG5ld0g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dEcHIgPSBuZXdEUFI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkaWZmZXJlbmNlSXNCaWdnZXJUaGFuT25lKHZhbE9uZSwgdmFsVHdvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYnNWYWxPbmUgPSBhYnModmFsT25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFic1ZhbFR3byA9IGFicyh2YWxUd28pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShhYnNWYWxPbmUgPT09IGFic1ZhbFR3byB8fCBhYnNWYWxPbmUgKyAxID09PSBhYnNWYWxUd28gfHwgYWJzVmFsT25lIC0gMSA9PT0gYWJzVmFsVHdvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFdpbmRvd0RQUigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGREUEkgPSB3aW5kb3cuc2NyZWVuLmRldmljZVhEUEkgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNEUEkgPSB3aW5kb3cuc2NyZWVuLmxvZ2ljYWxYRFBJIHx8IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAoZERQSSAvIHNEUEkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgRlJBTUVXT1JLKHdpbmRvdykub24oJ3Jlc2l6ZScsIG9uUmVzaXplKTtcclxuICAgICAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY05hdGl2ZVNjcm9sbGJhclNpemUobWVhc3VyZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBtZWFzdXJlRWxlbWVudFtMRVhJQ09OLm9IXSAtIG1lYXN1cmVFbGVtZW50W0xFWElDT04uY0hdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBtZWFzdXJlRWxlbWVudFtMRVhJQ09OLm9XXSAtIG1lYXN1cmVFbGVtZW50W0xFWElDT04uY1ddXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFRoZSBvYmplY3Qgd2hpY2ggbWFuYWdlcyB0aGUgYXV0byB1cGRhdGUgbG9vcCBmb3IgYWxsIE92ZXJsYXlTY3JvbGxiYXJzIG9iamVjdHMuIFRoaXMgb2JqZWN0IGlzIGluaXRpYWxpemVkIG9ubHkgb25jZTogaWYgdGhlIGZpcnN0IE92ZXJsYXlTY3JvbGxiYXJzIG9iamVjdCBnZXRzIGluaXRpYWxpemVkLlxyXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE92ZXJsYXlTY3JvbGxiYXJzQXV0b1VwZGF0ZUxvb3AoZ2xvYmFscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9iYXNlID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHZhciBfaW5BcnJheSA9IEZSQU1FV09SSy5pbkFycmF5O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9nZXROb3cgPSBDT01QQVRJQklMSVRZLm5vdztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyQXV0b1VwZGF0ZSA9ICdhdXRvVXBkYXRlJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyQXV0b1VwZGF0ZUludGVydmFsID0gX3N0ckF1dG9VcGRhdGUgKyAnSW50ZXJ2YWwnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJMZW5ndGggPSBMRVhJQ09OLmw7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BpbmdJbnN0YW5jZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBfbG9vcGluZ0luc3RhbmNlc0ludGVydmFsQ2FjaGUgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBfbG9vcElzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BJbnRlcnZhbERlZmF1bHQgPSAzMztcclxuICAgICAgICAgICAgICAgIHZhciBfbG9vcEludGVydmFsID0gX2xvb3BJbnRlcnZhbERlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BUaW1lT2xkID0gX2dldE5vdygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9sb29wSUQ7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVGhlIGF1dG8gdXBkYXRlIGxvb3Agd2hpY2ggd2lsbCBydW4gZXZlcnkgNTAgbWlsbGlzZWNvbmRzIG9yIGxlc3MgaWYgdGhlIHVwZGF0ZSBpbnRlcnZhbCBvZiBhIGluc3RhbmNlIGlzIGxvd2VyIHRoYW4gNTAgbWlsbGlzZWNvbmRzLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2xvb3BpbmdJbnN0YW5jZXNbX3N0ckxlbmd0aF0gPiAwICYmIF9sb29wSXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BJRCA9IENPTVBBVElCSUxJVFkuckFGKCkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVOZXcgPSBfZ2V0Tm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lRGVsdGEgPSB0aW1lTmV3IC0gX2xvb3BUaW1lT2xkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG93ZXN0SW50ZXJ2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlT3B0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlQXV0b1VwZGF0ZUFsbG93ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUF1dG9VcGRhdGVJbnRlcnZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lRGVsdGEgPiBfbG9vcEludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9vcFRpbWVPbGQgPSB0aW1lTmV3IC0gKHRpbWVEZWx0YSAlIF9sb29wSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXN0SW50ZXJ2YWwgPSBfbG9vcEludGVydmFsRGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2xvb3BpbmdJbnN0YW5jZXNbX3N0ckxlbmd0aF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gX2xvb3BpbmdJbnN0YW5jZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VPcHRpb25zID0gaW5zdGFuY2Uub3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUF1dG9VcGRhdGVBbGxvd2VkID0gaW5zdGFuY2VPcHRpb25zW19zdHJBdXRvVXBkYXRlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VBdXRvVXBkYXRlSW50ZXJ2YWwgPSBNQVRILm1heCgxLCBpbnN0YW5jZU9wdGlvbnNbX3N0ckF1dG9VcGRhdGVJbnRlcnZhbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBfZ2V0Tm93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGluc3RhbmNlQXV0b1VwZGF0ZUFsbG93ZWQgPT09IHRydWUgfHwgaW5zdGFuY2VBdXRvVXBkYXRlQWxsb3dlZCA9PT0gbnVsbCkgJiYgKG5vdyAtIF9sb29waW5nSW5zdGFuY2VzSW50ZXJ2YWxDYWNoZVtpXSkgPiBpbnN0YW5jZUF1dG9VcGRhdGVJbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCdhdXRvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9vcGluZ0luc3RhbmNlc0ludGVydmFsQ2FjaGVbaV0gPSBuZXcgRGF0ZShub3cgKz0gaW5zdGFuY2VBdXRvVXBkYXRlSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlc3RJbnRlcnZhbCA9IE1BVEgubWF4KDEsIE1BVEgubWluKGxvd2VzdEludGVydmFsLCBpbnN0YW5jZUF1dG9VcGRhdGVJbnRlcnZhbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wSW50ZXJ2YWwgPSBsb3dlc3RJbnRlcnZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wSW50ZXJ2YWwgPSBfbG9vcEludGVydmFsRGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQWRkIE92ZXJsYXlTY3JvbGxiYXJzIGluc3RhbmNlIHRvIHRoZSBhdXRvIHVwZGF0ZSBsb29wLiBPbmx5IHN1Y2Nlc3NmdWwgaWYgdGhlIGluc3RhbmNlIGlzbid0IGFscmVhZHkgYWRkZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gaW5zdGFuY2UgVGhlIGluc3RhbmNlIHdoaWNoIHNoYWxsIGJlIHVwZGF0ZWQgaW4gYSBsb29wIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLmFkZCA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShpbnN0YW5jZSwgX2xvb3BpbmdJbnN0YW5jZXMpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcGluZ0luc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BpbmdJbnN0YW5jZXNJbnRlcnZhbENhY2hlLnB1c2goX2dldE5vdygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9sb29waW5nSW5zdGFuY2VzW19zdHJMZW5ndGhdID4gMCAmJiAhX2xvb3BJc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BJc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxzLmF1dG9VcGRhdGVMb29wID0gX2xvb3BJc0FjdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZW1vdmUgT3ZlcmxheVNjcm9sbGJhcnMgaW5zdGFuY2UgZnJvbSB0aGUgYXV0byB1cGRhdGUgbG9vcC4gT25seSBzdWNjZXNzZnVsIGlmIHRoZSBpbnN0YW5jZSB3YXMgYWRkZWQgYmVmb3JlLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGluc3RhbmNlIFRoZSBpbnN0YW5jZSB3aGljaCBzaGFsbCBiZSB1cGRhdGVkIGluIGEgbG9vcCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS5yZW1vdmUgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfaW5BcnJheShpbnN0YW5jZSwgX2xvb3BpbmdJbnN0YW5jZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGZyb20gbG9vcGluZ0luc3RhbmNlcyBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29waW5nSW5zdGFuY2VzSW50ZXJ2YWxDYWNoZS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcGluZ0luc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0IHVwZGF0ZSBsb29wIGJlaGF2aW9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbG9vcGluZ0luc3RhbmNlc1tfc3RyTGVuZ3RoXSA9PT0gMCAmJiBfbG9vcElzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9vcElzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxzLmF1dG9VcGRhdGVMb29wID0gX2xvb3BJc0FjdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbG9vcElEICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLmNBRigpKF9sb29wSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wSUQgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIG9iamVjdCB3aGljaCBtYW5hZ2VzIHRoZSBzY3JvbGxiYXJzIHZpc2liaWxpdHkgb2YgdGhlIHRhcmdldCBlbGVtZW50LlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gcGx1Z2luVGFyZ2V0RWxlbWVudCBUaGUgZWxlbWVudCBmcm9tIHdoaWNoIHRoZSBzY3JvbGxiYXJzIHNoYWxsIGJlIGhpZGRlbi5cclxuICAgICAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGN1c3RvbSBvcHRpb25zLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyBUaGUgY3VzdG9tIGV4dGVuc2lvbnMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBnbG9iYWxzXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBhdXRvVXBkYXRlTG9vcFxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBPdmVybGF5U2Nyb2xsYmFyc0luc3RhbmNlKHBsdWdpblRhcmdldEVsZW1lbnQsIG9wdGlvbnMsIGV4dGVuc2lvbnMsIGdsb2JhbHMsIGF1dG9VcGRhdGVMb29wKSB7XHJcbiAgICAgICAgICAgICAgICAvL3Nob3J0Y3V0c1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBDT01QQVRJQklMSVRZLnR5cGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5BcnJheSA9IEZSQU1FV09SSy5pbkFycmF5O1xyXG4gICAgICAgICAgICAgICAgdmFyIGVhY2ggPSBGUkFNRVdPUksuZWFjaDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL21ha2UgY29ycmVjdCBpbnN0YW5jZW9mXHJcbiAgICAgICAgICAgICAgICB2YXIgX2Jhc2UgPSBuZXcgX3BsdWdpbigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9mcmFtZXdvcmtQcm90byA9IEZSQU1FV09SS1tMRVhJQ09OLnBdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaWYgcGFzc2VkIGVsZW1lbnQgaXMgbm8gSFRNTCBlbGVtZW50OiBza2lwIGFuZCByZXR1cm5cclxuICAgICAgICAgICAgICAgIGlmICghaXNIVE1MRWxlbWVudChwbHVnaW5UYXJnZXRFbGVtZW50KSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiBwYXNzZWQgZWxlbWVudCBpcyBhbHJlYWR5IGluaXRpYWxpemVkOiBzZXQgcGFzc2VkIG9wdGlvbnMgaWYgdGhlcmUgYXJlIGFueSBhbmQgcmV0dXJuIGl0cyBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgaWYgKElOU1RBTkNFUyhwbHVnaW5UYXJnZXRFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0ID0gSU5TVEFOQ0VTKHBsdWdpblRhcmdldEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3Qub3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5zdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbHM6XHJcbiAgICAgICAgICAgICAgICB2YXIgX25hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3J0bFNjcm9sbEJlaGF2aW9yO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hdXRvVXBkYXRlUmVjb21tZW5kZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX21zaWVWZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jc3NDYWxjO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9uYXRpdmVTY3JvbGxiYXJTaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdXBwb3J0VHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgIHZhciBfc3VwcG9ydFRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIHZhciBfc3VwcG9ydFBhc3NpdmVFdmVudHM7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N1cHBvcnRSZXNpemVPYnNlcnZlcjtcclxuICAgICAgICAgICAgICAgIHZhciBfc3VwcG9ydE11dGF0aW9uT2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Jlc3RyaWN0ZWRNZWFzdXJpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9nZW5lcmFsIHJlYWRvbmx5OlxyXG4gICAgICAgICAgICAgICAgdmFyIF9pbml0aWFsaXplZDtcclxuICAgICAgICAgICAgICAgIHZhciBfZGVzdHJveWVkO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9pc1RleHRhcmVhO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9pc0JvZHk7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2RvY3VtZW50TWl4ZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2RvbUV4aXN0cztcclxuXHJcbiAgICAgICAgICAgICAgICAvL2dlbmVyYWw6XHJcbiAgICAgICAgICAgICAgICB2YXIgX2lzQm9yZGVyQm94O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zaXplQXV0b09ic2VydmVyQWRkZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3BhZGRpbmdYO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9wYWRkaW5nWTtcclxuICAgICAgICAgICAgICAgIHZhciBfYm9yZGVyWDtcclxuICAgICAgICAgICAgICAgIHZhciBfYm9yZGVyWTtcclxuICAgICAgICAgICAgICAgIHZhciBfbWFyZ2luWDtcclxuICAgICAgICAgICAgICAgIHZhciBfbWFyZ2luWTtcclxuICAgICAgICAgICAgICAgIHZhciBfaXNSVEw7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3NsZWVwaW5nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50Qm9yZGVyU2l6ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxIb3Jpem9udGFsSW5mbyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxWZXJ0aWNhbEluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBfdmlld3BvcnRTaXplID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIgX25hdGl2ZVNjcm9sbGJhck1pblNpemUgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL25hbWluZzpcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJNaW51c0hpZGRlbiA9ICctaGlkZGVuJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyTWFyZ2luTWludXMgPSAnbWFyZ2luLSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0clBhZGRpbmdNaW51cyA9ICdwYWRkaW5nLSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ckJvcmRlck1pbnVzID0gJ2JvcmRlci0nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJUb3AgPSAndG9wJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyUmlnaHQgPSAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJCb3R0b20gPSAnYm90dG9tJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyTGVmdCA9ICdsZWZ0JztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyTWluTWludXMgPSAnbWluLSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ck1heE1pbnVzID0gJ21heC0nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJXaWR0aCA9ICd3aWR0aCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ckhlaWdodCA9ICdoZWlnaHQnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJGbG9hdCA9ICdmbG9hdCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ckVtcHR5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ckF1dG8gPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0clN5bmMgPSAnc3luYyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0clNjcm9sbCA9ICdzY3JvbGwnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJIdW5kcmVkUGVyY2VudCA9ICcxMDAlJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyWCA9ICd4JztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyWSA9ICd5JztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyRG90ID0gJy4nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJTcGFjZSA9ICcgJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyU2Nyb2xsYmFyID0gJ3Njcm9sbGJhcic7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ck1pbnVzSG9yaXpvbnRhbCA9ICctaG9yaXpvbnRhbCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ck1pbnVzVmVydGljYWwgPSAnLXZlcnRpY2FsJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyU2Nyb2xsTGVmdCA9IF9zdHJTY3JvbGwgKyAnTGVmdCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0clNjcm9sbFRvcCA9IF9zdHJTY3JvbGwgKyAnVG9wJztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyTW91c2VUb3VjaERvd25FdmVudCA9ICdtb3VzZWRvd24gdG91Y2hzdGFydCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0ck1vdXNlVG91Y2hVcEV2ZW50ID0gJ21vdXNldXAgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJNb3VzZVRvdWNoTW92ZUV2ZW50ID0gJ21vdXNlbW92ZSB0b3VjaG1vdmUnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJNb3VzZUVudGVyID0gJ21vdXNlZW50ZXInO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJNb3VzZUxlYXZlID0gJ21vdXNlbGVhdmUnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJLZXlEb3duRXZlbnQgPSAna2V5ZG93bic7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0cktleVVwRXZlbnQgPSAna2V5dXAnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zdHJTZWxlY3RTdGFydEV2ZW50ID0gJ3NlbGVjdHN0YXJ0JztcclxuICAgICAgICAgICAgICAgIHZhciBfc3RyVHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0clJlc2l6ZU9ic2VydmVyUHJvcGVydHkgPSAnX19vdmVybGF5U2Nyb2xsYmFyc1JPX18nO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xhc3MgbmFtZXM6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfY2Fzc05hbWVzUHJlZml4ID0gJ29zLSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUhUTUxFbGVtZW50ID0gX2Nhc3NOYW1lc1ByZWZpeCArICdodG1sJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ2hvc3QnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0RWxlbWVudEZvcmVpZ24gPSBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgKyAnLWZvcmVpZ24nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0VGV4dGFyZWFFbGVtZW50ID0gX2NsYXNzTmFtZUhvc3RFbGVtZW50ICsgJy10ZXh0YXJlYSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUhvc3RTY3JvbGxiYXJIb3Jpem9udGFsSGlkZGVuID0gX2NsYXNzTmFtZUhvc3RFbGVtZW50ICsgJy0nICsgX3N0clNjcm9sbGJhciArIF9zdHJNaW51c0hvcml6b250YWwgKyBfc3RyTWludXNIaWRkZW47XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUhvc3RTY3JvbGxiYXJWZXJ0aWNhbEhpZGRlbiA9IF9jbGFzc05hbWVIb3N0RWxlbWVudCArICctJyArIF9zdHJTY3JvbGxiYXIgKyBfc3RyTWludXNWZXJ0aWNhbCArIF9zdHJNaW51c0hpZGRlbjtcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lSG9zdFRyYW5zaXRpb24gPSBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgKyAnLXRyYW5zaXRpb24nO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0UlRMID0gX2NsYXNzTmFtZUhvc3RFbGVtZW50ICsgJy1ydGwnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0UmVzaXplRGlzYWJsZWQgPSBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgKyAnLXJlc2l6ZS1kaXNhYmxlZCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUhvc3RTY3JvbGxpbmcgPSBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgKyAnLXNjcm9sbGluZyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUhvc3RPdmVyZmxvdyA9IF9jbGFzc05hbWVIb3N0RWxlbWVudCArICctb3ZlcmZsb3cnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3cgPSBfY2xhc3NOYW1lSG9zdEVsZW1lbnQgKyAnLW92ZXJmbG93JztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lSG9zdE92ZXJmbG93WCA9IF9jbGFzc05hbWVIb3N0T3ZlcmZsb3cgKyAnLXgnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3dZID0gX2NsYXNzTmFtZUhvc3RPdmVyZmxvdyArICcteSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVRleHRhcmVhRWxlbWVudCA9IF9jYXNzTmFtZXNQcmVmaXggKyAndGV4dGFyZWEnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVUZXh0YXJlYUNvdmVyRWxlbWVudCA9IF9jbGFzc05hbWVUZXh0YXJlYUVsZW1lbnQgKyAnLWNvdmVyJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lUGFkZGluZ0VsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ3BhZGRpbmcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVWaWV3cG9ydEVsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ3ZpZXdwb3J0JztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lVmlld3BvcnROYXRpdmVTY3JvbGxiYXJzSW52aXNpYmxlID0gX2NsYXNzTmFtZVZpZXdwb3J0RWxlbWVudCArICctbmF0aXZlLXNjcm9sbGJhcnMtaW52aXNpYmxlJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lVmlld3BvcnROYXRpdmVTY3JvbGxiYXJzT3ZlcmxhaWQgPSBfY2xhc3NOYW1lVmlld3BvcnRFbGVtZW50ICsgJy1uYXRpdmUtc2Nyb2xsYmFycy1vdmVybGFpZCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZUNvbnRlbnRFbGVtZW50ID0gX2Nhc3NOYW1lc1ByZWZpeCArICdjb250ZW50JztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lQ29udGVudEFycmFuZ2VFbGVtZW50ID0gX2Nhc3NOYW1lc1ByZWZpeCArICdjb250ZW50LWFycmFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVDb250ZW50R2x1ZUVsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ2NvbnRlbnQtZ2x1ZSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNpemVBdXRvT2JzZXJ2ZXJFbGVtZW50ID0gX2Nhc3NOYW1lc1ByZWZpeCArICdzaXplLWF1dG8tb2JzZXJ2ZXInO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVSZXNpemVPYnNlcnZlckVsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ3Jlc2l6ZS1vYnNlcnZlcic7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVySXRlbUVsZW1lbnQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ3Jlc2l6ZS1vYnNlcnZlci1pdGVtJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJJdGVtRmluYWxFbGVtZW50ID0gX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVySXRlbUVsZW1lbnQgKyAnLWZpbmFsJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lVGV4dEluaGVyaXQgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ3RleHQtaW5oZXJpdCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNjcm9sbGJhciA9IF9jYXNzTmFtZXNQcmVmaXggKyBfc3RyU2Nyb2xsYmFyO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJUcmFjayA9IF9jbGFzc05hbWVTY3JvbGxiYXIgKyAnLXRyYWNrJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lU2Nyb2xsYmFyVHJhY2tPZmYgPSBfY2xhc3NOYW1lU2Nyb2xsYmFyVHJhY2sgKyAnLW9mZic7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNjcm9sbGJhckhhbmRsZSA9IF9jbGFzc05hbWVTY3JvbGxiYXIgKyAnLWhhbmRsZSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNjcm9sbGJhckhhbmRsZU9mZiA9IF9jbGFzc05hbWVTY3JvbGxiYXJIYW5kbGUgKyAnLW9mZic7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNjcm9sbGJhclVudXNhYmxlID0gX2NsYXNzTmFtZVNjcm9sbGJhciArICctdW51c2FibGUnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJBdXRvSGlkZGVuID0gX2NsYXNzTmFtZVNjcm9sbGJhciArICctJyArIF9zdHJBdXRvICsgX3N0ck1pbnVzSGlkZGVuO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXIgPSBfY2xhc3NOYW1lU2Nyb2xsYmFyICsgJy1jb3JuZXInO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemUgPSBfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyICsgJy1yZXNpemUnO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVCID0gX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lclJlc2l6ZSArICctYm90aCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lclJlc2l6ZUggPSBfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplICsgX3N0ck1pbnVzSG9yaXpvbnRhbDtcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplViA9IF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemUgKyBfc3RyTWludXNWZXJ0aWNhbDtcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lU2Nyb2xsYmFySG9yaXpvbnRhbCA9IF9jbGFzc05hbWVTY3JvbGxiYXIgKyBfc3RyTWludXNIb3Jpem9udGFsO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVTY3JvbGxiYXJWZXJ0aWNhbCA9IF9jbGFzc05hbWVTY3JvbGxiYXIgKyBfc3RyTWludXNWZXJ0aWNhbDtcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lRHJhZ2dpbmcgPSBfY2Fzc05hbWVzUHJlZml4ICsgJ2RyYWdnaW5nJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lVGhlbWVOb25lID0gX2Nhc3NOYW1lc1ByZWZpeCArICd0aGVtZS1ub25lJztcclxuICAgICAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lc0R5bmFtaWNEZXN0cm95ID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVWaWV3cG9ydE5hdGl2ZVNjcm9sbGJhcnNJbnZpc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZVZpZXdwb3J0TmF0aXZlU2Nyb2xsYmFyc092ZXJsYWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVTY3JvbGxiYXJUcmFja09mZixcclxuICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lU2Nyb2xsYmFySGFuZGxlT2ZmLFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVTY3JvbGxiYXJVbnVzYWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lU2Nyb2xsYmFyQXV0b0hpZGRlbixcclxuICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVCLFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVILFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVWLFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVEcmFnZ2luZ10uam9pbihfc3RyU3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2tzOlx0XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NhbGxiYWNrc0luaXRRZXVldWUgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2F0dHJzIHZpZXdwb3J0IHNoYWxsIGluaGVyaXQgZnJvbSB0YXJnZXRcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF92aWV3cG9ydEF0dHJzRnJvbVRhcmdldCA9IFtMRVhJQ09OLnRpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL29wdGlvbnM6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2N1cnJlbnRPcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jdXJyZW50UHJlcGFyZWRPcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZXh0ZW5zaW9uczpcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9leHRlbnNpb25zID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIgX2V4dGVuc2lvbnNQcml2YXRlTWV0aG9kcyA9ICdhZGRlZCByZW1vdmVkIG9uIGNvbnRyYWN0JztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZVx0XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xhc3RVcGRhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zd2FsbG93ZWRVcGRhdGVIaW50cyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zd2FsbG93ZWRVcGRhdGVUaW1lb3V0O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zd2FsbG93VXBkYXRlTGFnID0gNDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3VwZGF0ZU9uTG9hZEV2ZW50TmFtZSA9ICdsb2FkJztcclxuICAgICAgICAgICAgICAgIHZhciBfdXBkYXRlT25Mb2FkRWxtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vRE9NIGVsZW1lbnRzOlx0XHJcbiAgICAgICAgICAgICAgICB2YXIgX3dpbmRvd0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2RvY3VtZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfaHRtbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2JvZHlFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIF90YXJnZXRFbGVtZW50OyAgICAgICAgICAgICAgICAgICAgIC8vdGhlIHRhcmdldCBlbGVtZW50IG9mIHRoaXMgT3ZlcmxheVNjcm9sbGJhcnMgb2JqZWN0XHRcclxuICAgICAgICAgICAgICAgIHZhciBfaG9zdEVsZW1lbnQ7ICAgICAgICAgICAgICAgICAgICAgICAvL3RoZSBob3N0IGVsZW1lbnQgb2YgdGhpcyBPdmVybGF5U2Nyb2xsYmFycyBvYmplY3QgLT4gbWF5IGJlIHRoZSBzYW1lIGFzIHRhcmdldEVsZW1lbnRcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9zaXplQXV0b09ic2VydmVyRWxlbWVudDsgICAgICAgICAgIC8vb2JzZXJ2ZXMgc2l6ZSBhdXRvIGNoYW5nZXNcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9zaXplT2JzZXJ2ZXJFbGVtZW50OyAgICAgICAgICAgICAgIC8vb2JzZXJ2ZXMgc2l6ZSBhbmQgcGFkZGluZyBjaGFuZ2VzXHRcclxuICAgICAgICAgICAgICAgIHZhciBfcGFkZGluZ0VsZW1lbnQ7ICAgICAgICAgICAgICAgICAgICAvL21hbmFnZXMgdGhlIHBhZGRpbmdcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF92aWV3cG9ydEVsZW1lbnQ7ICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlIHZpZXdwb3J0IG9mIG91ciBzY3JvbGxiYXIgbW9kZWxcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50RWxlbWVudDsgICAgICAgICAgICAgICAgICAgIC8vdGhlIGVsZW1lbnQgd2hpY2ggaG9sZHMgdGhlIGNvbnRlbnRcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50QXJyYW5nZUVsZW1lbnQ7ICAgICAgICAgICAgIC8vaXMgbmVlZGVkIGZvciBjb3JyZWN0IHNpemluZyBvZiB0aGUgY29udGVudCBlbGVtZW50IChvbmx5IGlmIG5hdGl2ZSBzY3JvbGxiYXJzIGFyZSBvdmVybGF5cylcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50R2x1ZUVsZW1lbnQ7ICAgICAgICAgICAgICAgIC8vaGFzIGFsd2F5cyB0aGUgc2l6ZSBvZiB0aGUgY29udGVudCBlbGVtZW50XHRcclxuICAgICAgICAgICAgICAgIHZhciBfdGV4dGFyZWFDb3ZlckVsZW1lbnQ7ICAgICAgICAgICAgICAvL29ubHkgYXBwbGllZCBpZiB0YXJnZXQgaXMgYSB0ZXh0YXJlYSBlbGVtZW50LiBVc2VkIGZvciBjb3JyZWN0IHNpemUgY2FsY3VsYXRpb24gYW5kIGZvciBwcmV2ZW50aW9uIG9mIHVuY29udHJvbGxlZCBzY3JvbGxpbmdcdFxyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJDb3JuZXJFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJIb3Jpem9udGFsRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFySG9yaXpvbnRhbFRyYWNrRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFySG9yaXpvbnRhbEhhbmRsZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhclZlcnRpY2FsRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyVmVydGljYWxUcmFja0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhclZlcnRpY2FsSGFuZGxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfd2luZG93RWxlbWVudE5hdGl2ZTtcclxuICAgICAgICAgICAgICAgIHZhciBfZG9jdW1lbnRFbGVtZW50TmF0aXZlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF90YXJnZXRFbGVtZW50TmF0aXZlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9ob3N0RWxlbWVudE5hdGl2ZTtcclxuICAgICAgICAgICAgICAgIHZhciBfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnROYXRpdmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3NpemVPYnNlcnZlckVsZW1lbnROYXRpdmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3BhZGRpbmdFbGVtZW50TmF0aXZlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF92aWV3cG9ydEVsZW1lbnROYXRpdmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NvbnRlbnRFbGVtZW50TmF0aXZlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vQ2FjaGU6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfaG9zdFNpemVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfY29udGVudFNjcm9sbFNpemVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfYXJyYW5nZUNvbnRlbnRTaXplQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2hhc092ZXJmbG93Q2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2hpZGVPdmVyZmxvd0NhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF93aWR0aEF1dG9DYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfaGVpZ2h0QXV0b0NhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jc3NCb3hTaXppbmdDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfY3NzUGFkZGluZ0NhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jc3NCb3JkZXJDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfY3NzTWFyZ2luQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2Nzc0RpcmVjdGlvbkNhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jc3NEaXJlY3Rpb25EZXRlY3RlZENhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9wYWRkaW5nQWJzb2x1dGVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfY2xpcEFsd2F5c0NhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50R2x1ZVNpemVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfb3ZlcmZsb3dCZWhhdmlvckNhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9vdmVyZmxvd0Ftb3VudENhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9pZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2F1dG9VcGRhdGVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfc2l6ZUF1dG9DYXBhYmxlQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2NvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZUNoYW5nZURldGVjdGVkQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2hvc3RFbGVtZW50U2l6ZUNoYW5nZURldGVjdGVkQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhcnNWaXNpYmlsaXR5Q2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhcnNBdXRvSGlkZUNhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJzQ2xpY2tTY3JvbGxpbmdDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyc0RyYWdTY3JvbGxpbmdDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfcmVzaXplQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX25vcm1hbGl6ZVJUTENhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfb2xkQ2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIF90ZXh0YXJlYUF1dG9XcmFwcGluZ0NhY2hlO1xyXG4gICAgICAgICAgICAgICAgdmFyIF90ZXh0YXJlYUluZm9DYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfdGV4dGFyZWFTaXplQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RleHRhcmVhRHluSGVpZ2h0Q2FjaGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RleHRhcmVhRHluV2lkdGhDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfYm9keU1pblNpemVDYWNoZTtcclxuICAgICAgICAgICAgICAgIHZhciBfdXBkYXRlQXV0b0NhY2hlID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9NdXRhdGlvbk9ic2VydmVyOlx0XHJcbiAgICAgICAgICAgICAgICB2YXIgX211dGF0aW9uT2JzZXJ2ZXJIb3N0O1xyXG4gICAgICAgICAgICAgICAgdmFyIF9tdXRhdGlvbk9ic2VydmVyQ29udGVudDtcclxuICAgICAgICAgICAgICAgIHZhciBfbXV0YXRpb25PYnNlcnZlckhvc3RDYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIHZhciBfbXV0YXRpb25PYnNlcnZlckNvbnRlbnRDYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIHZhciBfbXV0YXRpb25PYnNlcnZlcnNDb25uZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgX211dGF0aW9uT2JzZXJ2ZXJBdHRyc1RleHRhcmVhID0gWyd3cmFwJywgJ2NvbHMnLCAncm93cyddO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9tdXRhdGlvbk9ic2VydmVyQXR0cnNIb3N0ID0gW0xFWElDT04uaSwgTEVYSUNPTi5jLCBMRVhJQ09OLnMsICdvcGVuJ10uY29uY2F0KF92aWV3cG9ydEF0dHJzRnJvbVRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9ldmVudHM6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfZGVzdHJveUV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdGV4dGFyZWE6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfdGV4dGFyZWFIYXNGb2N1cztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Njcm9sbGJhcnM6XHRcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyc0F1dG9IaWRlVGltZW91dElkO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJzQXV0b0hpZGVNb3ZlVGltZW91dElkO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJzQXV0b0hpZGVEZWxheTtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyc0F1dG9IaWRlTmV2ZXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhcnNBdXRvSGlkZVNjcm9sbDtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZTtcclxuICAgICAgICAgICAgICAgIHZhciBfc2Nyb2xsYmFyc0F1dG9IaWRlTGVhdmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Njcm9sbGJhcnNIYW5kbGVIb3ZlcmVkO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Jlc2l6ZVx0XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Jlc2l6ZU5vbmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Jlc2l6ZUJvdGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Jlc2l6ZUhvcml6b250YWw7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3Jlc2l6ZVZlcnRpY2FsO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLz09PT0gRXZlbnQgTGlzdGVuZXIgPT09PS8vXHRcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcdFxyXG4gICAgICAgICAgICAgICAgICogQWRkcyBvciByZW1vdmVzIGEgZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC4gXHRcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSBldmVudCBsaXN0ZW5lciBzaGFsbCBiZSBhcHBsaWVkIG9yIHJlbW92ZWQuXHRcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBldmVudE5hbWVzIFRoZSBuYW1lKHMpIG9mIHRoZSBldmVudHMuXHRcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbWV0aG9kIHdoaWNoIHNoYWxsIGJlIGNhbGxlZC5cdFxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHJlbW92ZSBUcnVlIGlmIHRoZSBoYW5kbGVyIHNoYWxsIGJlIHJlbW92ZWQsIGZhbHNlIG9yIHVuZGVmaW5lZCBpZiB0aGUgaGFuZGxlciBzaGFsbCBiZSBhZGRlZC5cdFxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXR1cFJlc3BvbnNpdmVFdmVudExpc3RlbmVyKGVsZW1lbnQsIGV2ZW50TmFtZXMsIGxpc3RlbmVyLCByZW1vdmUsIHBhc3NpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGVjdGVkID0gQ09NUEFUSUJJTElUWS5pc0EoZXZlbnROYW1lcykgJiYgQ09NUEFUSUJJTElUWS5pc0EobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSByZW1vdmUgPyAncmVtb3ZlRXZlbnRMaXN0ZW5lcicgOiAnYWRkRXZlbnRMaXN0ZW5lcic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uT2ZmID0gcmVtb3ZlID8gJ29mZicgOiAnb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSBjb2xsZWN0ZWQgPyBmYWxzZSA6IGV2ZW50TmFtZXMuc3BsaXQoX3N0clNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGV2ZW50TmFtZXNbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWVzW2ldLCBsaXN0ZW5lcltpXSwgcmVtb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgZXZlbnRzW0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zdXBwb3J0UGFzc2l2ZUV2ZW50cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50WzBdW21ldGhvZF0oZXZlbnRzW2ldLCBsaXN0ZW5lciwgeyBwYXNzaXZlOiBwYXNzaXZlIHx8IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbb25PZmZdKGV2ZW50c1tpXSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGREZXN0cm95RXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWVzLCBsaXN0ZW5lciwgcGFzc2l2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVzcG9uc2l2ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgZXZlbnROYW1lcywgbGlzdGVuZXIsIGZhbHNlLCBwYXNzaXZlKTtcclxuICAgICAgICAgICAgICAgICAgICBfZGVzdHJveUV2ZW50cy5wdXNoKENPTVBBVElCSUxJVFkuYmluZChzZXR1cFJlc3BvbnNpdmVFdmVudExpc3RlbmVyLCAwLCBlbGVtZW50LCBldmVudE5hbWVzLCBsaXN0ZW5lciwgdHJ1ZSwgcGFzc2l2ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vPT09PSBSZXNpemUgT2JzZXJ2ZXIgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBBZGRzIG9yIHJlbW92ZXMgYSByZXNpemUgb2JzZXJ2ZXIgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB0YXJnZXRFbGVtZW50IFRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSByZXNpemUgb2JzZXJ2ZXIgc2hhbGwgYmUgYWRkZWQgb3IgcmVtb3ZlZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBvbkVsZW1lbnRSZXNpemVkQ2FsbGJhY2sgVGhlIGNhbGxiYWNrIHdoaWNoIGlzIGZpcmVkIGV2ZXJ5IHRpbWUgdGhlIHJlc2l6ZSBvYnNlcnZlciByZWdpc3RlcnMgYSBzaXplIGNoYW5nZSBvciBmYWxzZSAvIHVuZGVmaW5lZCBpZiB0aGUgcmVzaXplT2JzZXJ2ZXIgc2hhbGwgYmUgcmVtb3ZlZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBSZXNpemVPYnNlcnZlcih0YXJnZXRFbGVtZW50LCBvbkVsZW1lbnRSZXNpemVkQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzaXplT2JzZXJ2ZXIgPSBDT01QQVRJQklMSVRZLnJPKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHJBbmltYXRpb25TdGFydEV2ZW50ID0gJ2FuaW1hdGlvbnN0YXJ0IG1vekFuaW1hdGlvblN0YXJ0IHdlYmtpdEFuaW1hdGlvblN0YXJ0IE1TQW5pbWF0aW9uU3RhcnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyQ2hpbGROb2RlcyA9ICdjaGlsZE5vZGVzJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0U2Nyb2xsID0gMzMzMzMzMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudFtfc3RyU2Nyb2xsVG9wXShjb25zdFNjcm9sbClbX3N0clNjcm9sbExlZnRdKF9pc1JUTCA/IF9ydGxTY3JvbGxCZWhhdmlvci5uID8gLWNvbnN0U2Nyb2xsIDogX3J0bFNjcm9sbEJlaGF2aW9yLmkgPyAwIDogY29uc3RTY3JvbGwgOiBjb25zdFNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVsZW1lbnRSZXNpemVkQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgcmVzaXplIG9ic2VydmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25FbGVtZW50UmVzaXplZENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3N1cHBvcnRSZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0RWxlbWVudC5hZGRDbGFzcygnb2JzZXJ2ZWQnKS5hcHBlbmQoZ2VuZXJhdGVEaXYoX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVyRWxlbWVudCkpLmNvbnRlbnRzKClbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gZWxlbWVudFtfc3RyUmVzaXplT2JzZXJ2ZXJQcm9wZXJ0eV0gPSBuZXcgcmVzaXplT2JzZXJ2ZXIoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX21zaWVWZXJzaW9uID4gOSB8fCAhX2F1dG9VcGRhdGVSZWNvbW1lbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnByZXBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZURpdihfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRGl2KHsgYzogX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVySXRlbUVsZW1lbnQsIGRpcjogJ2x0cicgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVEaXYoX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVySXRlbUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZURpdihfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJJdGVtRmluYWxFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVEaXYoX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVySXRlbUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZURpdih7IGM6IF9jbGFzc05hbWVSZXNpemVPYnNlcnZlckl0ZW1GaW5hbEVsZW1lbnQsIHN0eWxlOiAnd2lkdGg6IDIwMCU7IGhlaWdodDogMjAwJScgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlckVsZW1lbnQgPSB0YXJnZXRFbGVtZW50WzBdW3N0ckNoaWxkTm9kZXNdWzBdW3N0ckNoaWxkTm9kZXNdWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hyaW5rRWxlbWVudCA9IEZSQU1FV09SSyhvYnNlcnZlckVsZW1lbnRbc3RyQ2hpbGROb2Rlc11bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwYW5kRWxlbWVudCA9IEZSQU1FV09SSyhvYnNlcnZlckVsZW1lbnRbc3RyQ2hpbGROb2Rlc11bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwYW5kRWxlbWVudENoaWxkID0gRlJBTUVXT1JLKGV4cGFuZEVsZW1lbnRbMF1bc3RyQ2hpbGROb2Rlc11bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGhDYWNoZSA9IG9ic2VydmVyRWxlbWVudFtMRVhJQ09OLm9XXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodENhY2hlID0gb2JzZXJ2ZXJFbGVtZW50W0xFWElDT04ub0hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNEaXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJBRklkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyckhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhY3RvciA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTY3JvbGxiYXJTaXplID0gZ2xvYmFscy5uYXRpdmVTY3JvbGxiYXJTaXplOyAvL2NhcmUgZG9uJ3QgbWFrZSBjaGFuZ2VzIHRvIHRoaXMgb2JqZWN0ISEhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVSZXNldFdpZHRoID0gb2JzZXJ2ZXJFbGVtZW50W0xFWElDT04ub1ddICsgbmF0aXZlU2Nyb2xsYmFyU2l6ZS54ICogZmFjdG9yICsgbmF0aXZlU2Nyb2xsYmFyU2l6ZS55ICogZmFjdG9yICsgX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemUueCArIF9vdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVSZXNldEhlaWdodCA9IG9ic2VydmVyRWxlbWVudFtMRVhJQ09OLm9IXSArIG5hdGl2ZVNjcm9sbGJhclNpemUueCAqIGZhY3RvciArIG5hdGl2ZVNjcm9sbGJhclNpemUueSAqIGZhY3RvciArIF9vdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplLnggKyBfb3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZS55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZENoaWxkQ1NTW19zdHJXaWR0aF0gPSBzaXplUmVzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRDaGlsZENTU1tfc3RySGVpZ2h0XSA9IHNpemVSZXNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRFbGVtZW50Q2hpbGQuY3NzKGV4cGFuZENoaWxkQ1NTKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZEVsZW1lbnRbX3N0clNjcm9sbExlZnRdKHNpemVSZXNldFdpZHRoKVtfc3RyU2Nyb2xsVG9wXShzaXplUmVzZXRIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNocmlua0VsZW1lbnRbX3N0clNjcm9sbExlZnRdKHNpemVSZXNldFdpZHRoKVtfc3RyU2Nyb2xsVG9wXShzaXplUmVzZXRIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRFbGVtZW50W19zdHJTY3JvbGxMZWZ0XShjb25zdFNjcm9sbClbX3N0clNjcm9sbFRvcF0oY29uc3RTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hyaW5rRWxlbWVudFtfc3RyU2Nyb2xsTGVmdF0oY29uc3RTY3JvbGwpW19zdHJTY3JvbGxUb3BdKGNvbnN0U2Nyb2xsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uUmVzaXplZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJBRklkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNEaXJ0eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGhDYWNoZSA9IGN1cnJXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodENhY2hlID0gY3VyckhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvblNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycldpZHRoID0gb2JzZXJ2ZXJFbGVtZW50W0xFWElDT04ub1ddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckhlaWdodCA9IG9ic2VydmVyRWxlbWVudFtMRVhJQ09OLm9IXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlydHkgPSBjdXJyV2lkdGggIT0gd2lkdGhDYWNoZSB8fCBjdXJySGVpZ2h0ICE9IGhlaWdodENhY2hlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiBpc0RpcnR5ICYmICFyQUZJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkuY0FGKCkockFGSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJBRklkID0gQ09NUEFUSUJJTElUWS5yQUYoKShvblJlc2l6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV2ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzaXplZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLnBydkQoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkuc3RwUChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJFbGVtZW50Q1NTID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUb3BSaWdodEJvdHRvbUxlZnQob2JzZXJ2ZXJFbGVtZW50Q1NTLCBfc3RyRW1wdHksIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0oKG5hdGl2ZVNjcm9sbGJhclNpemUueSArIDEpICogZmFjdG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVNjcm9sbGJhclNpemUueCAqIC1mYWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVTY3JvbGxiYXJTaXplLnkgKiAtZmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSgobmF0aXZlU2Nyb2xsYmFyU2l6ZS54ICsgMSkgKiBmYWN0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRlJBTUVXT1JLKG9ic2VydmVyRWxlbWVudCkuY3NzKG9ic2VydmVyRWxlbWVudENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZEVsZW1lbnQub24oX3N0clNjcm9sbCwgb25TY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHJpbmtFbGVtZW50Lm9uKF9zdHJTY3JvbGwsIG9uU2Nyb2xsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5vbihzdHJBbmltYXRpb25TdGFydEV2ZW50LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNjcm9sbChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldHMgYXNzdW1lIHRoYXQgdGhlIGRpdnMgd2lsbCBuZXZlciBiZSB0aGF0IGxhcmdlIGFuZCBhIGNvbnN0YW50IHZhbHVlIGlzIGVub3VnaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRDaGlsZENTU1tfc3RyV2lkdGhdID0gY29uc3RTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZENoaWxkQ1NTW19zdHJIZWlnaHRdID0gY29uc3RTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZEVsZW1lbnRDaGlsZC5jc3MoZXhwYW5kQ2hpbGRDU1MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRhY2hFdmVudCA9IF9kb2N1bWVudEVsZW1lbnROYXRpdmUuYXR0YWNoRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0lFID0gX21zaWVWZXJzaW9uICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2hFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5wcmVwZW5kKGdlbmVyYXRlRGl2KF9jbGFzc05hbWVSZXNpemVPYnNlcnZlckVsZW1lbnQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRGaXJzdCh0YXJnZXRFbGVtZW50LCBfc3RyRG90ICsgX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVyRWxlbWVudClbMF0uYXR0YWNoRXZlbnQoJ29ucmVzaXplJywgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IF9kb2N1bWVudEVsZW1lbnROYXRpdmUuY3JlYXRlRWxlbWVudChUWVBFUy5vKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXRBdHRyaWJ1dGUoTEVYSUNPTi50aSwgJy0xJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0QXR0cmlidXRlKExFWElDT04uYywgX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3bmQgPSB0aGlzLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3bmQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHduZC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9ICd0ZXh0L2h0bWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSUUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5wcmVwZW5kKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YSA9ICdhYm91dDpibGFuayc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSUUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5wcmVwZW5kKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50Lm9uKHN0ckFuaW1hdGlvblN0YXJ0RXZlbnQsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RWxlbWVudFswXSA9PT0gX3NpemVPYnNlcnZlckVsZW1lbnROYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpciA9IF9ob3N0RWxlbWVudC5jc3MoJ2RpcmVjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3NzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxMZWZ0VmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXIgIT09IF9jc3NEaXJlY3Rpb25EZXRlY3RlZENhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyID09PSAnbHRyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyTGVmdF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyUmlnaHRdID0gX3N0ckF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdFZhbHVlID0gY29uc3RTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0ckxlZnRdID0gX3N0ckF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJSaWdodF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbExlZnRWYWx1ZSA9IF9ydGxTY3JvbGxCZWhhdmlvci5uID8gLWNvbnN0U2Nyb2xsIDogX3J0bFNjcm9sbEJlaGF2aW9yLmkgPyAwIDogY29uc3RTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2V4ZWN1dGlvbiBvcmRlciBpcyBpbXBvcnRhbnQgZm9yIElFISEhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2l6ZU9ic2VydmVyRWxlbWVudC5jaGlsZHJlbigpLmVxKDApLmNzcyhjc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVPYnNlcnZlckVsZW1lbnRbX3N0clNjcm9sbExlZnRdKHNjcm9sbExlZnRWYWx1ZSlbX3N0clNjcm9sbFRvcF0oY29uc3RTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Nzc0RpcmVjdGlvbkRldGVjdGVkQ2FjaGUgPSBkaXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25DaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIodGFyZ2V0RWxlbWVudCwgX3N0clNjcm9sbCwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUEFUSUJJTElUWS5wcnZEKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUEFUSUJJTElUWS5zdHBQKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHJlc2l6ZSBvYnNlcnZlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3N1cHBvcnRSZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0RWxlbWVudC5jb250ZW50cygpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNpemVPYnNlcnZlck9iaiA9IGVsZW1lbnRbX3N0clJlc2l6ZU9ic2VydmVyUHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNpemVPYnNlcnZlck9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpemVPYnNlcnZlck9iai5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50W19zdHJSZXNpemVPYnNlcnZlclByb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUodGFyZ2V0RWxlbWVudC5jaGlsZHJlbihfc3RyRG90ICsgX2NsYXNzTmFtZVJlc2l6ZU9ic2VydmVyRWxlbWVudCkuZXEoMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogRnJlZXplcyBvciB1bmZyZWV6ZXMgdGhlIGdpdmVuIHJlc2l6ZSBvYnNlcnZlci5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB0YXJnZXRFbGVtZW50IFRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSB0YXJnZXQgcmVzaXplIG9ic2VydmVyIGlzIGFwcGxpZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZnJlZXplIFRydWUgaWYgdGhlIHJlc2l6ZSBvYnNlcnZlciBzaGFsbCBiZSBmcm96ZW4sIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZyZWV6ZVJlc2l6ZU9ic2VydmVyKHRhcmdldEVsZW1lbnQsIGZyZWV6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZnJlZXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3N1cHBvcnRSZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0RWxlbWVudC5jb250ZW50cygpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbX3N0clJlc2l6ZU9ic2VydmVyUHJvcGVydHldLnVub2JzZXJ2ZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQgPSB0YXJnZXRFbGVtZW50LmNoaWxkcmVuKF9zdHJEb3QgKyBfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJFbGVtZW50KS5lcSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHRhcmdldEVsZW1lbnQuY3NzKF9zdHJXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSB0YXJnZXRFbGVtZW50LmNzcyhfc3RySGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3NzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJXaWR0aF0gPSB3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RySGVpZ2h0XSA9IGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5jc3MoY3NzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydFJlc2l6ZU9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0YXJnZXRFbGVtZW50LmNvbnRlbnRzKClbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFtfc3RyUmVzaXplT2JzZXJ2ZXJQcm9wZXJ0eV0ub2JzZXJ2ZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc3MgPSB7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJIZWlnaHRdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyV2lkdGhdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuY2hpbGRyZW4oX3N0ckRvdCArIF9jbGFzc05hbWVSZXNpemVPYnNlcnZlckVsZW1lbnQpLmVxKDApLmNzcyhjc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy89PT09IE11dGF0aW9uIE9ic2VydmVycyA9PT09Ly9cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgTXV0YXRpb25PYnNlcnZlcnMgZm9yIHRoZSBob3N0IGFuZCBjb250ZW50IEVsZW1lbnQgaWYgdGhleSBhcmUgc3VwcG9ydGVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVNdXRhdGlvbk9ic2VydmVycygpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3N1cHBvcnRNdXRhdGlvbk9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtdXRhdGlvbk9ic2VydmVyQ29udGVudExhZyA9IDExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb25PYnNlcnZlciA9IENPTVBBVElCSUxJVFkubU8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRMYXN0VXBkYXRlID0gQ09NUEFUSUJJTElUWS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uVGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb25BdHRyTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uSXNDbGFzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZE11dGF0aW9uVmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2xhc3NWYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3N0Q2xhc3NOYW1lUmVnZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VGltZW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX211dGF0aW9uT2JzZXJ2ZXJIb3N0Q2FsbGJhY2sgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9VcGRhdGVGb3JjZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0ZWRBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaW5pdGlhbGl6ZWQgJiYgIV9zbGVlcGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2gobXV0YXRpb25zLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25UYXJnZXQgPSBtdXRhdGlvbi50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uQXR0ck5hbWUgPSBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbklzQ2xhc3MgPSBtdXRhdGlvbkF0dHJOYW1lID09PSBMRVhJQ09OLmM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZE11dGF0aW9uVmFsID0gbXV0YXRpb24ub2xkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NsYXNzVmFsID0gbXV0YXRpb25UYXJnZXQuY2xhc3NOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kb21FeGlzdHMgJiYgbXV0YXRpb25Jc0NsYXNzICYmICFkb1VwZGF0ZUZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvbGQgY2xhc3MgdmFsdWUgY29udGFpbnMgX2NsYXNzTmFtZUhvc3RFbGVtZW50Rm9yZWlnbiBhbmQgbmV3IGNsYXNzIHZhbHVlIGRvZXNuJ3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRNdXRhdGlvblZhbC5pbmRleE9mKF9jbGFzc05hbWVIb3N0RWxlbWVudEZvcmVpZ24pID4gLTEgJiYgbmV3Q2xhc3NWYWwuaW5kZXhPZihfY2xhc3NOYW1lSG9zdEVsZW1lbnRGb3JlaWduKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0Q2xhc3NOYW1lUmVnZXggPSBjcmVhdGVIb3N0Q2xhc3NOYW1lUmVnRXhwKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudE5hdGl2ZS5jbGFzc05hbWUgPSBuZXdDbGFzc1ZhbC5zcGxpdChfc3RyU3BhY2UpLmNvbmNhdChvbGRNdXRhdGlvblZhbC5zcGxpdChfc3RyU3BhY2UpLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5tYXRjaChob3N0Q2xhc3NOYW1lUmVnZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5qb2luKF9zdHJTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9VcGRhdGUgPSBkb1VwZGF0ZUZvcmNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb1VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9VcGRhdGUgPSBtdXRhdGlvbklzQ2xhc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGhvc3RDbGFzc05hbWVzQ2hhbmdlZChvbGRNdXRhdGlvblZhbCwgbmV3Q2xhc3NWYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtdXRhdGlvbkF0dHJOYW1lID09PSBMRVhJQ09OLnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvbGRNdXRhdGlvblZhbCAhPT0gbXV0YXRpb25UYXJnZXRbTEVYSUNPTi5zXS5jc3NUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEF0dHJzLnB1c2gobXV0YXRpb25BdHRyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdwb3J0QXR0cnNGcm9tVGFyZ2V0KG11dGF0ZWRBdHRycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1VwZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Jhc2UudXBkYXRlKGRvVXBkYXRlRm9yY2UgfHwgX3N0ckF1dG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvVXBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXV0YXRpb25PYnNlcnZlckNvbnRlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaW5pdGlhbGl6ZWQgJiYgIV9zbGVlcGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2gobXV0YXRpb25zLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9VcGRhdGUgPSBpc1Vua25vd25NdXRhdGlvbihtdXRhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZG9VcGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBDT01QQVRJQklMSVRZLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplQXV0byA9IChfaGVpZ2h0QXV0b0NhY2hlIHx8IF93aWR0aEF1dG9DYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRMYXN0VXBkYXRlID0gbm93O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGNvbHMsIHJvd3Mgb3Igd3JhcCBhdHRyIHdhcyBjaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1RleHRhcmVhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYVVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZUF1dG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Jhc2UudXBkYXRlKF9zdHJBdXRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbnRlbnRUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJDb250ZW50TGFnIDw9IDAgfHwgbm93IC0gY29udGVudExhc3RVcGRhdGUgPiBtdXRhdGlvbk9ic2VydmVyQ29udGVudExhZyB8fCAhc2l6ZUF1dG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KGFjdGlvbiwgbXV0YXRpb25PYnNlcnZlckNvbnRlbnRMYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb1VwZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX211dGF0aW9uT2JzZXJ2ZXJIb3N0ID0gbmV3IG11dGF0aW9uT2JzZXJ2ZXIoX211dGF0aW9uT2JzZXJ2ZXJIb3N0Q2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXV0YXRpb25PYnNlcnZlckNvbnRlbnQgPSBuZXcgbXV0YXRpb25PYnNlcnZlcihfbXV0YXRpb25PYnNlcnZlckNvbnRlbnRDYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQ29ubmVjdHMgdGhlIE11dGF0aW9uT2JzZXJ2ZXJzIGlmIHRoZXkgYXJlIHN1cHBvcnRlZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXJzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydE11dGF0aW9uT2JzZXJ2ZXIgJiYgIV9tdXRhdGlvbk9ic2VydmVyc0Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXV0YXRpb25PYnNlcnZlckhvc3Qub2JzZXJ2ZShfaG9zdEVsZW1lbnROYXRpdmUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogX211dGF0aW9uT2JzZXJ2ZXJBdHRyc0hvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXV0YXRpb25PYnNlcnZlckNvbnRlbnQub2JzZXJ2ZShfaXNUZXh0YXJlYSA/IF90YXJnZXRFbGVtZW50TmF0aXZlIDogX2NvbnRlbnRFbGVtZW50TmF0aXZlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlOiAhX2lzVGV4dGFyZWEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3Q6ICFfaXNUZXh0YXJlYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6ICFfaXNUZXh0YXJlYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogX2lzVGV4dGFyZWEgPyBfbXV0YXRpb25PYnNlcnZlckF0dHJzVGV4dGFyZWEgOiBfbXV0YXRpb25PYnNlcnZlckF0dHJzSG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tdXRhdGlvbk9ic2VydmVyc0Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogRGlzY29ubmVjdHMgdGhlIE11dGF0aW9uT2JzZXJ2ZXJzIGlmIHRoZXkgYXJlIHN1cHBvcnRlZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGlzY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXJzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydE11dGF0aW9uT2JzZXJ2ZXIgJiYgX211dGF0aW9uT2JzZXJ2ZXJzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tdXRhdGlvbk9ic2VydmVySG9zdC5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tdXRhdGlvbk9ic2VydmVyQ29udGVudC5kaXNjb25uZWN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXV0YXRpb25PYnNlcnZlcnNDb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vPT09PSBFdmVudHMgb2YgZWxlbWVudHMgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBUaGlzIG1ldGhvZCBnZXRzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBob3N0IGVsZW1lbnQgZ2V0cyByZXNpemVkLiBJTVBPUlRBTlQ6IFBhZGRpbmcgY2hhbmdlcyBhcmUgZGV0ZWN0ZWQgdG9vISFcclxuICAgICAgICAgICAgICAgICAqIEl0IHJlZnJlc2hlcyB0aGUgaG9zdFJlc2l6ZWRFdmVudEFyZ3MgYW5kIHRoZSBob3N0U2l6ZVJlc2l6ZUNhY2hlLlxyXG4gICAgICAgICAgICAgICAgICogSWYgdGhlcmUgYXJlIGFueSBzaXplIGNoYW5nZXMsIHRoZSB1cGRhdGUgbWV0aG9kIGdldHMgY2FsbGVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBob3N0T25SZXNpemVkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3NsZWVwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9zdFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBfc2l6ZU9ic2VydmVyRWxlbWVudE5hdGl2ZVtMRVhJQ09OLnNXXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg6IF9zaXplT2JzZXJ2ZXJFbGVtZW50TmF0aXZlW0xFWElDT04uc0hdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gY2hlY2tDYWNoZShob3N0U2l6ZSwgX2hvc3RFbGVtZW50U2l6ZUNoYW5nZURldGVjdGVkQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaG9zdEVsZW1lbnRTaXplQ2hhbmdlRGV0ZWN0ZWRDYWNoZSA9IGhvc3RTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh7IF9ob3N0U2l6ZUNoYW5nZWQ6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVGhlIG1vdXNlIGVudGVyIGV2ZW50IG9mIHRoZSBob3N0IGVsZW1lbnQuIFRoaXMgZXZlbnQgaXMgb25seSBuZWVkZWQgZm9yIHRoZSBhdXRvSGlkZSBmZWF0dXJlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBob3N0T25Nb3VzZUVudGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc2Nyb2xsYmFyc0F1dG9IaWRlTGVhdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBUaGUgbW91c2UgbGVhdmUgZXZlbnQgb2YgdGhlIGhvc3QgZWxlbWVudC4gVGhpcyBldmVudCBpcyBvbmx5IG5lZWRlZCBmb3IgdGhlIGF1dG9IaWRlIGZlYXR1cmUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhvc3RPbk1vdXNlTGVhdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JvbGxiYXJzQXV0b0hpZGVMZWF2ZSAmJiAhX2JvZHlFbGVtZW50Lmhhc0NsYXNzKF9jbGFzc05hbWVEcmFnZ2luZykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVGhlIG1vdXNlIG1vdmUgZXZlbnQgb2YgdGhlIGhvc3QgZWxlbWVudC4gVGhpcyBldmVudCBpcyBvbmx5IG5lZWRlZCBmb3IgdGhlIGF1dG9IaWRlIFwibW92ZVwiIGZlYXR1cmUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhvc3RPbk1vdXNlTW92ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhcnNBdXRvSGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF9zY3JvbGxiYXJzQXV0b0hpZGVNb3ZlVGltZW91dElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSAmJiAhX2Rlc3Ryb3llZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyc0F1dG9IaWRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBQcmV2ZW50cyB0ZXh0IGZyb20gZGVzZWxlY3Rpb24gaWYgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50IGVsZW1lbnQgb24gdGhlIG1vdXNlZG93biBldmVudCBvZiBhIERPTSBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGV2ZW50IFRoZSBzZWxlY3Qgc3RhcnQgZXZlbnQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50T25TZWxlY3RTdGFydChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkucHJ2RChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlx0XHJcbiAgICAgICAgICAgICAgICAgKiBBIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGEgZWxlbWVudCBoYXMgbG9hZGVkLlx0XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9uTG9hZENhbGxiYWNrKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsbSA9IEZSQU1FV09SSyhldmVudC50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlYWNoVXBkYXRlT25Mb2FkKGZ1bmN0aW9uIChpLCB1cGRhdGVPbkxvYWRTZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxtLmlzKHVwZGF0ZU9uTG9hZFNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHsgX2NvbnRlbnRTaXplQ2hhbmdlZDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgKiBBZGRzIG9yIHJlbW92ZXMgbW91c2UgJiB0b3VjaCBldmVudHMgb2YgdGhlIGhvc3QgZWxlbWVudC4gKGZvciBoYW5kbGluZyBhdXRvLWhpZGluZyBvZiB0aGUgc2Nyb2xsYmFycylcclxuICAgICAgICAgICAgICAgICogQHBhcmFtIGRlc3Ryb3kgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGV2ZW50cyBzaGFsbCBiZSBhZGRlZCBvciByZW1vdmVkLlxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwSG9zdE1vdXNlVG91Y2hFdmVudHMoZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVzdHJveSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBIb3N0TW91c2VUb3VjaEV2ZW50cyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfaG9zdEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJNb3VzZVRvdWNoTW92ZUV2ZW50LnNwbGl0KF9zdHJTcGFjZSlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RPbk1vdXNlTW92ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCFfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSB8fCBkZXN0cm95KSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfaG9zdEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtfc3RyTW91c2VFbnRlciwgX3N0ck1vdXNlTGVhdmVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbaG9zdE9uTW91c2VFbnRlciwgaG9zdE9uTW91c2VMZWF2ZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghX3Njcm9sbGJhcnNBdXRvSGlkZUxlYXZlIHx8IGRlc3Ryb3kpLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGUgcGx1Z2luIGlzIGluaXRpYWxpemVkIGFuZCB0aGUgbW91c2UgaXMgb3ZlciB0aGUgaG9zdCBlbGVtZW50LCBtYWtlIHRoZSBzY3JvbGxiYXJzIHZpc2libGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pbml0aWFsaXplZCAmJiAhZGVzdHJveSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hvc3RFbGVtZW50Lm9uZSgnbW91c2VvdmVyJywgaG9zdE9uTW91c2VFbnRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vPT09PSBVcGRhdGUgRGV0ZWN0aW9uID09PT0vL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogTWVhc3VyZXMgdGhlIG1pbiB3aWR0aCBhbmQgbWluIGhlaWdodCBvZiB0aGUgYm9keSBlbGVtZW50IGFuZCByZWZyZXNoZXMgdGhlIHJlbGF0ZWQgY2FjaGUuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWluIHdpZHRoIG9yIG1pbiBoZWlnaHQgaGFzIGNoYW5nZWQsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYm9keU1pblNpemVDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5TWluU2l6ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNCb2R5ICYmIF9jb250ZW50QXJyYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keU1pblNpemUudyA9IHBhcnNlVG9aZXJvT3JOdW1iZXIoX2NvbnRlbnRBcnJhbmdlRWxlbWVudC5jc3MoX3N0ck1pbk1pbnVzICsgX3N0cldpZHRoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlNaW5TaXplLmggPSBwYXJzZVRvWmVyb09yTnVtYmVyKF9jb250ZW50QXJyYW5nZUVsZW1lbnQuY3NzKF9zdHJNaW5NaW51cyArIF9zdHJIZWlnaHQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keU1pblNpemUuYyA9IGNoZWNrQ2FjaGUoYm9keU1pblNpemUsIF9ib2R5TWluU2l6ZUNhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keU1pblNpemUuZiA9IHRydWU7IC8vZmxhZyBmb3IgXCJtZWFzdXJlZCBhdCBsZWFzdCBvbmNlXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2JvZHlNaW5TaXplQ2FjaGUgPSBib2R5TWluU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFib2R5TWluU2l6ZS5jO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjbGFzcyBuYW1lcyByZWFsbHkgY2hhbmdlZCAobmV3IGNsYXNzIHdpdGhvdXQgcGx1Z2luIGhvc3QgcHJlZml4KVxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG9sZENsYXNzTmFtZXMgVGhlIG9sZCBDbGFzc05hbWUgc3RyaW5nIG9yIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG5ld0NsYXNzTmFtZXMgVGhlIG5ldyBDbGFzc05hbWUgc3RyaW5nIG9yIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNsYXNzIG5hbWVzIGhhcyByZWFsbHkgY2hhbmdlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBob3N0Q2xhc3NOYW1lc0NoYW5nZWQob2xkQ2xhc3NOYW1lcywgbmV3Q2xhc3NOYW1lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyQ2xhc3NlcyA9IHR5cGVvZiBuZXdDbGFzc05hbWVzID09IFRZUEVTLnMgPyBuZXdDbGFzc05hbWVzLnNwbGl0KF9zdHJTcGFjZSkgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IHR5cGVvZiBvbGRDbGFzc05hbWVzID09IFRZUEVTLnMgPyBvbGRDbGFzc05hbWVzLnNwbGl0KF9zdHJTcGFjZSkgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IGdldEFycmF5RGlmZmVyZW5jZXMob2xkQ2xhc3NlcywgY3VyckNsYXNzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgbm9uZSB0aGVtZSBmcm9tIGRpZmYgbGlzdCB0byBwcmV2ZW50IHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBpbkFycmF5KF9jbGFzc05hbWVUaGVtZU5vbmUsIGRpZmYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWdleDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmLnNwbGljZShpZHgsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlmZltMRVhJQ09OLmxdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdleCA9IGNyZWF0ZUhvc3RDbGFzc05hbWVSZWdFeHAodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkaWZmLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRpZmZbaV0ubWF0Y2gocmVnZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtdXRhdGlvbiBpcyBub3QgZnJvbSBhIGZyb20gdGhlIHBsdWdpbiBnZW5lcmF0ZWQgZWxlbWVudC4gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgdGV4dGFyZWEgdGhlIG11dGF0aW9uIGlzIGFsd2F5cyB1bmtub3duLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG11dGF0aW9uIFRoZSBtdXRhdGlvbiB3aGljaCBzaGFsbCBiZSBjaGVja2VkLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG11dGF0aW9uIGlzIGZyb20gYSB1bmtub3duIGVsZW1lbnQsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNVbmtub3duTXV0YXRpb24obXV0YXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uVGFyZ2V0ID0gbXV0YXRpb24udGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtdXRhdGlvblR5cGUgPSBtdXRhdGlvbi50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJDbG9zZXN0ID0gJ2Nsb3Nlc3QnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb25UYXJnZXQgPT09IF9jb250ZW50RWxlbWVudE5hdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgPT09IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uVHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIChhdHRyaWJ1dGVOYW1lID09PSBMRVhJQ09OLmMgfHwgYXR0cmlidXRlTmFtZSA9PT0gTEVYSUNPTi5zKSAmJiAhX2lzVGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2xhc3NOYW1lIGNoYW5nZXMgYnkgdGhlIHBsdWdpblx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSBMRVhJQ09OLmMgJiYgRlJBTUVXT1JLKG11dGF0aW9uVGFyZ2V0KS5oYXNDbGFzcyhfY2xhc3NOYW1lSG9zdEVsZW1lbnQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvc3RDbGFzc05hbWVzQ2hhbmdlZChtdXRhdGlvbi5vbGRWYWx1ZSwgbXV0YXRpb25UYXJnZXQuY2xhc3NOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSBkbyBpdCBvZiBicm93c2VyIHN1cHBvcnQgaXQgbmF0aXZlbHlcdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG11dGF0aW9uVGFyZ2V0W3N0ckNsb3Nlc3RdICE9IFRZUEVTLmYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uVGFyZ2V0W3N0ckNsb3Nlc3RdKF9zdHJEb3QgKyBfY2xhc3NOYW1lUmVzaXplT2JzZXJ2ZXJFbGVtZW50KSAhPT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25UYXJnZXRbc3RyQ2xvc2VzdF0oX3N0ckRvdCArIF9jbGFzc05hbWVTY3JvbGxiYXIpICE9PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblRhcmdldFtzdHJDbG9zZXN0XShfc3RyRG90ICsgX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lcikgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb250ZW50IHNpemUgd2FzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGlzIG1ldGhvZCB3YXMgY2FsbGVkLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbnRlbnQgc2l6ZSB3YXMgY2hhbmdlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVBdXRvQ29udGVudFNpemVDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc2xlZXBpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRNZWFzdXJlRWxlbWVudCA9IGdldENvbnRlbnRNZWFzdXJlRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYVZhbHVlTGVuZ3RoID0gX2lzVGV4dGFyZWEgJiYgX3dpZHRoQXV0b0NhY2hlICYmICFfdGV4dGFyZWFBdXRvV3JhcHBpbmdDYWNoZSA/IF90YXJnZXRFbGVtZW50LnZhbCgpLmxlbmd0aCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldENTUyA9ICFfbXV0YXRpb25PYnNlcnZlcnNDb25uZWN0ZWQgJiYgX3dpZHRoQXV0b0NhY2hlICYmICFfaXNUZXh0YXJlYTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3NzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsb2F0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5TWluU2l6ZUM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldENTUykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCA9IF9jb250ZW50RWxlbWVudC5jc3MoX3N0ckZsb2F0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJGbG9hdF0gPSBfaXNSVEwgPyBfc3RyUmlnaHQgOiBfc3RyTGVmdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJXaWR0aF0gPSBfc3RyQXV0bztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50LmNzcyhjc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudFNjcm9sbFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNXXSArIHRleHRhcmVhVmFsdWVMZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNIXSArIHRleHRhcmVhVmFsdWVMZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXRDU1MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJGbG9hdF0gPSBmbG9hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJXaWR0aF0gPSBfc3RySHVuZHJlZFBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudC5jc3MoY3NzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJvZHlNaW5TaXplQyA9IGJvZHlNaW5TaXplQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBjaGVja0NhY2hlKGNvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZSwgX2NvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZUNoYW5nZURldGVjdGVkQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfY29udGVudEVsZW1lbnRTY3JvbGxTaXplQ2hhbmdlRGV0ZWN0ZWRDYWNoZSA9IGNvbnRlbnRFbGVtZW50U2Nyb2xsU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQgfHwgYm9keU1pblNpemVDO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyB0cnVlIHdoZW4gYSBhdHRyaWJ1dGUgd2hpY2ggdGhlIE11dGF0aW9uT2JzZXJ2ZXIgd291bGQgb2JzZXJ2ZSBoYXMgY2hhbmdlZC4gIFxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBhdHRyaWJ1dGVzIHdoaWNoIGEgTXV0YXRpb25PYnNlcnZlciB3b3VsZCBvYnNlcnZlIGhhcyBjaGFuZ2VkLCBmYWxzZSBvciB1bmRlZmluZWQgb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZWFuaW5nZnVsQXR0cnNDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc2xlZXBpbmcgfHwgX211dGF0aW9uT2JzZXJ2ZXJzQ29ubmVjdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZEF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VsZW06IF9ob3N0RWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hdHRyczogX211dGF0aW9uT2JzZXJ2ZXJBdHRyc0hvc3QuY29uY2F0KCc6dmlzaWJsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lbGVtOiBfaXNUZXh0YXJlYSA/IF90YXJnZXRFbGVtZW50IDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2F0dHJzOiBfbXV0YXRpb25PYnNlcnZlckF0dHJzVGV4dGFyZWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goY2hlY2tzLCBmdW5jdGlvbiAoaW5kZXgsIGNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBjaGVjay5fZWxlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2goY2hlY2suX2F0dHJzLCBmdW5jdGlvbiAoaW5kZXgsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gYXR0ci5jaGFyQXQoMCkgPT09ICc6JyA/IGVsZW0uaXMoYXR0cikgOiBlbGVtLmF0dHIoYXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSBfdXBkYXRlQXV0b0NhY2hlW2F0dHJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tDYWNoZShjdXJyLCBjYWNoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZEF0dHJzLnB1c2goYXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdXBkYXRlQXV0b0NhY2hlW2F0dHJdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdwb3J0QXR0cnNGcm9tVGFyZ2V0KGNoYW5nZWRBdHRycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkQXR0cnNbTEVYSUNPTi5sXSA+IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBDaGVja3MgaXMgYSBDU1MgUHJvcGVydHkgb2YgYSBjaGlsZCBlbGVtZW50IGlzIGFmZmVjdGluZyB0aGUgc2Nyb2xsIHNpemUgb2YgdGhlIGNvbnRlbnQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIFRoZSBDU1MgcHJvcGVydHkgbmFtZS5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm9wZXJ0eSBpcyBhZmZlY3RpbmcgdGhlIGNvbnRlbnQgc2Nyb2xsIHNpemUsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNTaXplQWZmZWN0aW5nQ1NTUHJvcGVydHkocHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaW5pdGlhbGl6ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGV4R3JvdyA9ICdmbGV4LWdyb3cnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGV4U2hyaW5rID0gJ2ZsZXgtc2hyaW5rJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxleEJhc2lzID0gJ2ZsZXgtYmFzaXMnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhZmZlY3RpbmdQcm9wc1ggPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N0ck1pbk1pbnVzICsgX3N0cldpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWF4TWludXMgKyBfc3RyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJNYXJnaW5NaW51cyArIF9zdHJMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWFyZ2luTWludXMgKyBfc3RyUmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyUmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXdlaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd3b3JkLXNwYWNpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGV4R3JvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleFNocmluayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleEJhc2lzXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWZmZWN0aW5nUHJvcHNYQ29udGVudEJveCA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N0clBhZGRpbmdNaW51cyArIF9zdHJMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyUGFkZGluZ01pbnVzICsgX3N0clJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyQm9yZGVyTWludXMgKyBfc3RyTGVmdCArIF9zdHJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N0ckJvcmRlck1pbnVzICsgX3N0clJpZ2h0ICsgX3N0cldpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWZmZWN0aW5nUHJvcHNZID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RySGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWluTWludXMgKyBfc3RySGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWF4TWludXMgKyBfc3RySGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWFyZ2luTWludXMgKyBfc3RyVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTWFyZ2luTWludXMgKyBfc3RyQm90dG9tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyQm90dG9tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGV4R3JvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleFNocmluayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleEJhc2lzXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWZmZWN0aW5nUHJvcHNZQ29udGVudEJveCA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N0clBhZGRpbmdNaW51cyArIF9zdHJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJQYWRkaW5nTWludXMgKyBfc3RyQm90dG9tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyQm9yZGVyTWludXMgKyBfc3RyVG9wICsgX3N0cldpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyQm9yZGVyTWludXMgKyBfc3RyQm90dG9tICsgX3N0cldpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3N0clMgPSAncyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9zdHJWUyA9ICd2LXMnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja1ggPSBfb3ZlcmZsb3dCZWhhdmlvckNhY2hlLnggPT09IF9zdHJTIHx8IF9vdmVyZmxvd0JlaGF2aW9yQ2FjaGUueCA9PT0gX3N0clZTO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja1kgPSBfb3ZlcmZsb3dCZWhhdmlvckNhY2hlLnkgPT09IF9zdHJTIHx8IF9vdmVyZmxvd0JlaGF2aW9yQ2FjaGUueSA9PT0gX3N0clZTO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplSXNBZmZlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja1Byb3BlcnR5TmFtZSA9IGZ1bmN0aW9uIChhcnIsIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJbTEVYSUNPTi5sXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldID09PSBuYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVJc0FmZmVjdGVkID0gY2hlY2tQcm9wZXJ0eU5hbWUoYWZmZWN0aW5nUHJvcHNZLCBwcm9wZXJ0eU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNpemVJc0FmZmVjdGVkICYmICFfaXNCb3JkZXJCb3gpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplSXNBZmZlY3RlZCA9IGNoZWNrUHJvcGVydHlOYW1lKGFmZmVjdGluZ1Byb3BzWUNvbnRlbnRCb3gsIHByb3BlcnR5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja1ggJiYgIXNpemVJc0FmZmVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVJc0FmZmVjdGVkID0gY2hlY2tQcm9wZXJ0eU5hbWUoYWZmZWN0aW5nUHJvcHNYLCBwcm9wZXJ0eU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNpemVJc0FmZmVjdGVkICYmICFfaXNCb3JkZXJCb3gpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplSXNBZmZlY3RlZCA9IGNoZWNrUHJvcGVydHlOYW1lKGFmZmVjdGluZ1Byb3BzWENvbnRlbnRCb3gsIHByb3BlcnR5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaXplSXNBZmZlY3RlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy89PT09IFVwZGF0ZSA9PT09Ly9cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNldHMgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMgb2YgdGhlIHZpZXdwb3J0IGVsZW1lbnQgdG8gdGhlIHZhbHVlcyBmcm9tIHRoZSB0YXJnZXQgZWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIFRoZSB2YWx1ZSBvZiBhIGF0dHJpYnV0ZSBpcyBvbmx5IHNldCBpZiB0aGUgYXR0cmlidXRlIGlzIHdoaXRlbGlzdGVkLlxyXG4gICAgICAgICAgICAgICAgICogQGF0dHJzIGF0dHJzIFRoZSBhcnJheSBvZiBhdHRyaWJ1dGVzIHdoaWNoIHNoYWxsIGJlIHNldCBvciB1bmRlZmluZWQgaWYgYWxsIHdoaXRlbGlzdGVkIHNoYWxsIGJlIHNldC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRBdHRyc0Zyb21UYXJnZXQoYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRycyA9IGF0dHJzIHx8IF92aWV3cG9ydEF0dHJzRnJvbVRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKGF0dHJzLCBmdW5jdGlvbiAoaW5kZXgsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENPTVBBVElCSUxJVFkuaW5BKGF0dHIsIF92aWV3cG9ydEF0dHJzRnJvbVRhcmdldCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEF0dHIgPSBfdGFyZ2V0RWxlbWVudC5hdHRyKGF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUodGFyZ2V0QXR0cikgPT0gVFlQRVMucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQuYXR0cihhdHRyLCB0YXJnZXRBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQucmVtb3ZlQXR0cihhdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVXBkYXRlcyB0aGUgdmFyaWFibGVzIGFuZCBzaXplIG9mIHRoZSB0ZXh0YXJlYSBlbGVtZW50LCBhbmQgbWFuYWdlcyB0aGUgc2Nyb2xsIG9uIG5ldyBsaW5lIG9yIG5ldyBjaGFyYWN0ZXIuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRleHRhcmVhVXBkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3NsZWVwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cmFwQXR0ck9mZiA9ICFfdGV4dGFyZWFBdXRvV3JhcHBpbmdDYWNoZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbldpZHRoID0gX3ZpZXdwb3J0U2l6ZS53O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluSGVpZ2h0ID0gX3ZpZXdwb3J0U2l6ZS5oO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3NzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb01lYXN1cmUgPSBfd2lkdGhBdXRvQ2FjaGUgfHwgd3JhcEF0dHJPZmY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IG1pbiBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyTWluTWludXMgKyBfc3RyV2lkdGhdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0ck1pbk1pbnVzICsgX3N0ckhlaWdodF0gPSBfc3RyRW1wdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NldCB3aWR0aCBhdXRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyV2lkdGhdID0gX3N0ckF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50LmNzcyhjc3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tZWFzdXJlIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdXaWR0aCA9IF90YXJnZXRFbGVtZW50TmF0aXZlW0xFWElDT04ub1ddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGRvTWVhc3VyZSA/IE1BVEgubWF4KG9yaWdXaWR0aCwgX3RhcmdldEVsZW1lbnROYXRpdmVbTEVYSUNPTi5zV10gLSAxKSA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qd2lkdGggKz0gKF93aWR0aEF1dG9DYWNoZSA/IF9tYXJnaW5YICsgKCFfaXNCb3JkZXJCb3ggPyB3cmFwQXR0ck9mZiA/IDAgOiBfcGFkZGluZ1ggKyBfYm9yZGVyWCA6IDApIDogMCk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IG1lYXN1cmVkIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RyV2lkdGhdID0gX3dpZHRoQXV0b0NhY2hlID8gX3N0ckF1dG8gLyp3aWR0aCovIDogX3N0ckh1bmRyZWRQZXJjZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0ck1pbk1pbnVzICsgX3N0cldpZHRoXSA9IF9zdHJIdW5kcmVkUGVyY2VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IGhlaWdodCBhdXRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tfc3RySGVpZ2h0XSA9IF9zdHJBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGFyZ2V0RWxlbWVudC5jc3MoY3NzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVhc3VyZSBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ0hlaWdodCA9IF90YXJnZXRFbGVtZW50TmF0aXZlW0xFWElDT04ub0hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNQVRILm1heChvcmlnSGVpZ2h0LCBfdGFyZ2V0RWxlbWVudE5hdGl2ZVtMRVhJQ09OLnNIXSAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hcHBlbmQgY29ycmVjdCBzaXplIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0cldpZHRoXSA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0ckhlaWdodF0gPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUNvdmVyRWxlbWVudC5jc3MoY3NzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgbWluIHdpZHRoIC8gbWluIGhlaWdodCB0byBwcmV2ZW50IHRleHRhcmVhIGNvbGxhcHNpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW19zdHJNaW5NaW51cyArIF9zdHJXaWR0aF0gPSBtaW5XaWR0aCAvKisgKCFfaXNCb3JkZXJCb3ggJiYgX3dpZHRoQXV0b0NhY2hlID8gX3BhZGRpbmdYICsgX2JvcmRlclggOiAwKSovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NbX3N0ck1pbk1pbnVzICsgX3N0ckhlaWdodF0gPSBtaW5IZWlnaHQgLyorICghX2lzQm9yZGVyQm94ICYmIF9oZWlnaHRBdXRvQ2FjaGUgPyBfcGFkZGluZ1kgKyBfYm9yZGVyWSA6IDApKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50LmNzcyhjc3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcmlnaW5hbFdpZHRoOiBvcmlnV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb3JpZ2luYWxIZWlnaHQ6IG9yaWdIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZHluYW1pY1dpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9keW5hbWljSGVpZ2h0OiBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBVcGRhdGVzIHRoZSBwbHVnaW4gYW5kIERPTSB0byB0aGUgY3VycmVudCBvcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIGEgdXBkYXRlIGlzIDEwMCUgcmVxdWlyZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdXBkYXRlSGludHMgQSBvYmplY3RzIHdoaWNoIGNvbnRhaW5zIGhpbnRzIGZvciB0aGlzIHVwZGF0ZTpcclxuICAgICAgICAgICAgICAgICAqIHtcclxuICAgICAgICAgICAgICAgICAqICAgX2hvc3RTaXplQ2hhbmdlZCA6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgKiAgIF9jb250ZW50U2l6ZUNoYW5nZWQgOiBib29sZWFuLFxyXG4gICAgICAgICAgICAgICAgICogICBfZm9yY2UgOiBib29sZWFuLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT0gcHJldmVudFN3YWxsb3dpbmdcclxuICAgICAgICAgICAgICAgICAqICAgX2NoYW5nZWRPcHRpb25zIDogeyB9LCAgICAgICAgICAgICAgICAgICAgICAgID09IHByZXZlbnRTd2FsbG93aW5nICYmIHByZXZlbnRTbGVlcFxyXG4gICAgICAgICAgICAgICAgKiAgfVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGUodXBkYXRlSGludHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3N3YWxsb3dlZFVwZGF0ZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUhpbnRzID0gdXBkYXRlSGludHMgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgX3N3YWxsb3dlZFVwZGF0ZUhpbnRzLl9ob3N0U2l6ZUNoYW5nZWQgfD0gdXBkYXRlSGludHMuX2hvc3RTaXplQ2hhbmdlZDtcclxuICAgICAgICAgICAgICAgICAgICBfc3dhbGxvd2VkVXBkYXRlSGludHMuX2NvbnRlbnRTaXplQ2hhbmdlZCB8PSB1cGRhdGVIaW50cy5fY29udGVudFNpemVDaGFuZ2VkO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zd2FsbG93ZWRVcGRhdGVIaW50cy5fZm9yY2UgfD0gdXBkYXRlSGludHMuX2ZvcmNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gQ09NUEFUSUJJTElUWS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaG9zdFNpemVDaGFuZ2VkID0gISFfc3dhbGxvd2VkVXBkYXRlSGludHMuX2hvc3RTaXplQ2hhbmdlZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFNpemVDaGFuZ2VkID0gISFfc3dhbGxvd2VkVXBkYXRlSGludHMuX2NvbnRlbnRTaXplQ2hhbmdlZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9yY2UgPSAhIV9zd2FsbG93ZWRVcGRhdGVIaW50cy5fZm9yY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZWRPcHRpb25zID0gdXBkYXRlSGludHMuX2NoYW5nZWRPcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzd2FsbG93ID0gX3N3YWxsb3dVcGRhdGVMYWcgPiAwICYmIF9pbml0aWFsaXplZCAmJiAhX2Rlc3Ryb3llZCAmJiAhZm9yY2UgJiYgIWNoYW5nZWRPcHRpb25zICYmIChub3cgLSBfbGFzdFVwZGF0ZVRpbWUpIDwgX3N3YWxsb3dVcGRhdGVMYWcgJiYgKCFfaGVpZ2h0QXV0b0NhY2hlICYmICFfd2lkdGhBdXRvQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5SXNIaWRkZW47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2FsbG93KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3dhbGxvd2VkVXBkYXRlVGltZW91dCA9IHNldFRpbWVvdXQodXBkYXRlLCBfc3dhbGxvd1VwZGF0ZUxhZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYWJvcnQgdXBkYXRlIGR1ZSB0bzpcclxuICAgICAgICAgICAgICAgICAgICAvL2Rlc3Ryb3llZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3dhbGxvd2luZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2xlZXBpbmdcclxuICAgICAgICAgICAgICAgICAgICAvL2hvc3QgaXMgaGlkZGVuIG9yIGhhcyBmYWxzZSBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kZXN0cm95ZWQgfHwgc3dhbGxvdyB8fCAoX3NsZWVwaW5nICYmICFjaGFuZ2VkT3B0aW9ucykgfHwgKF9pbml0aWFsaXplZCAmJiAhZm9yY2UgJiYgKGRpc3BsYXlJc0hpZGRlbiA9IF9ob3N0RWxlbWVudC5pcygnOmhpZGRlbicpKSkgfHwgX2hvc3RFbGVtZW50LmNzcygnZGlzcGxheScpID09PSAnaW5saW5lJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfbGFzdFVwZGF0ZVRpbWUgPSBub3c7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N3YWxsb3dlZFVwZGF0ZUhpbnRzID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgc2Nyb2xsYmFyIHN0eWxpbmcgaXMgcG9zc2libGUgYW5kIG5hdGl2ZSBzY3JvbGxiYXJzIGFyZW4ndCBvdmVybGFpZCB0aGUgc2Nyb2xsYmFyIHN0eWxpbmcgd2lsbCBiZSBhcHBsaWVkIHdoaWNoIGhpZGVzIHRoZSBuYXRpdmUgc2Nyb2xsYmFycyBjb21wbGV0ZWx5LlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfbmF0aXZlU2Nyb2xsYmFyU3R5bGluZyAmJiAhKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnggJiYgX25hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQueSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uYXRpdmUgc2Nyb2xsYmFycyBhcmUgaGlkZGVuLCBzbyBjaGFuZ2UgdGhlIHZhbHVlcyB0byB6ZXJvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9uYXRpdmVTY3JvbGxiYXJTaXplLnggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbmF0aXZlU2Nyb2xsYmFyU2l6ZS55ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaCBuYXRpdmUgc2Nyb2xsYmFyIHNpemUgKGluIGNhc2Ugb2Ygem9vbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgX25hdGl2ZVNjcm9sbGJhclNpemUgPSBleHRlbmREZWVwKHt9LCBnbG9iYWxzLm5hdGl2ZVNjcm9sbGJhclNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2Nyb2xsYmFyIHBhZGRpbmcgaXMgbmVlZGVkIGZvciBmaXJlZm94LCBiZWNhdXNlIGZpcmVmb3ggaGlkZXMgc2Nyb2xsYmFyIGF1dG9tYXRpY2FsbHkgaWYgdGhlIHNpemUgb2YgdGhlIGRpdiBpcyB0b28gc21hbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGNhbGN1bGF0aW9uOiBbc2Nyb2xsYmFyIHNpemUgKzMgKjNdXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gKCszIGJlY2F1c2Ugb2YgcG9zc2libGUgZGVjb3JhdGlvbiBlLmcuIGJvcmRlcnMsIG1hcmdpbnMgZXRjLiwgYnV0IG9ubHkgaWYgbmF0aXZlIHNjcm9sbGJhciBpcyBOT1QgYSBvdmVybGFpZCBzY3JvbGxiYXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gKCozIGJlY2F1c2UgKDEpaW5jcmVhc2UgLyAoMilkZWNyZWFzZSAtYnV0dG9uIGFuZCAoMylyZXNpemUgaGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgICAgIF9uYXRpdmVTY3JvbGxiYXJNaW5TaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAoX25hdGl2ZVNjcm9sbGJhclNpemUueCArIChfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ID8gMCA6IDMpKSAqIDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IChfbmF0aXZlU2Nyb2xsYmFyU2l6ZS55ICsgKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkgPyAwIDogMykpICogM1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWRPcHRpb25zID0gY2hhbmdlZE9wdGlvbnMgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mcmVlemVSZXNpemVPYnNlcnZlcihfc2l6ZU9ic2VydmVyRWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mcmVlemVSZXNpemVPYnNlcnZlcihfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnQsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tDYWNoZUF1dG9Gb3JjZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrQ2FjaGUuYXBwbHkodGhpcywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLmNvbmNhdChbZm9yY2VdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zYXZlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyU2Nyb2xsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBfdmlld3BvcnRFbGVtZW50W19zdHJTY3JvbGxMZWZ0XSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBfdmlld3BvcnRFbGVtZW50W19zdHJTY3JvbGxUb3BdKClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFByZXBhcmVkT3B0aW9uc1Njcm9sbGJhcnMgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy5zY3JvbGxiYXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UHJlcGFyZWRPcHRpb25zVGV4dGFyZWEgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy50ZXh0YXJlYTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zY3JvbGxiYXJzIHZpc2liaWxpdHk6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhcnNWaXNpYmlsaXR5ID0gY3VycmVudFByZXBhcmVkT3B0aW9uc1Njcm9sbGJhcnMudmlzaWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc1Zpc2liaWxpdHlDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShzY3JvbGxiYXJzVmlzaWJpbGl0eSwgX3Njcm9sbGJhcnNWaXNpYmlsaXR5Q2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Njcm9sbGJhcnMgYXV0b0hpZGU6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhcnNBdXRvSGlkZSA9IGN1cnJlbnRQcmVwYXJlZE9wdGlvbnNTY3JvbGxiYXJzLmF1dG9IaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJzQXV0b0hpZGVDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShzY3JvbGxiYXJzQXV0b0hpZGUsIF9zY3JvbGxiYXJzQXV0b0hpZGVDYWNoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2Nyb2xsYmFycyBjbGljayBzY3JvbGxpbmdcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc0NsaWNrU2Nyb2xsaW5nID0gY3VycmVudFByZXBhcmVkT3B0aW9uc1Njcm9sbGJhcnMuY2xpY2tTY3JvbGxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhcnNDbGlja1Njcm9sbGluZ0NoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKHNjcm9sbGJhcnNDbGlja1Njcm9sbGluZywgX3Njcm9sbGJhcnNDbGlja1Njcm9sbGluZ0NhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zY3JvbGxiYXJzIGRyYWcgc2Nyb2xsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhcnNEcmFnU2Nyb2xsaW5nID0gY3VycmVudFByZXBhcmVkT3B0aW9uc1Njcm9sbGJhcnMuZHJhZ1Njcm9sbGluZztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc0RyYWdTY3JvbGxpbmdDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShzY3JvbGxiYXJzRHJhZ1Njcm9sbGluZywgX3Njcm9sbGJhcnNEcmFnU2Nyb2xsaW5nQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NsYXNzTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZUNoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKGNsYXNzTmFtZSwgX2NsYXNzTmFtZUNhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZXNpemVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzaXplID0gX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMucmVzaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNpemVDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShyZXNpemUsIF9yZXNpemVDYWNoZSkgJiYgIV9pc0JvZHk7IC8vYm9keSBjYW4ndCBiZSByZXNpemVkIHNpbmNlIHRoZSB3aW5kb3cgaXRzZWxmIGFjdHMgYXMgcmVzaXplIHBvc3NpYmlsaXR5LlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3BhZGRpbmdBYnNvbHV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nQWJzb2x1dGUgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy5wYWRkaW5nQWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdBYnNvbHV0ZUNoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKHBhZGRpbmdBYnNvbHV0ZSwgX3BhZGRpbmdBYnNvbHV0ZUNhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGlwQWx3YXlzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsaXBBbHdheXMgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy5jbGlwQWx3YXlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGlwQWx3YXlzQ2hhbmdlZCA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoY2xpcEFsd2F5cywgX2NsaXBBbHdheXNDYWNoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2l6ZUF1dG9DYXBhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVBdXRvQ2FwYWJsZSA9IF9jdXJyZW50UHJlcGFyZWRPcHRpb25zLnNpemVBdXRvQ2FwYWJsZSAmJiAhX2lzQm9keTsgLy9ib2R5IGNhbiBuZXZlciBiZSBzaXplIGF1dG8sIGJlY2F1c2UgaXQgc2hhbGwgYmUgYWx3YXlzIGFzIGJpZyBhcyB0aGUgdmlld3BvcnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVBdXRvQ2FwYWJsZUNoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKHNpemVBdXRvQ2FwYWJsZSwgX3NpemVBdXRvQ2FwYWJsZUNhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zaG93TmF0aXZlU2Nyb2xsYmFyc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nID0gX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMubmF0aXZlU2Nyb2xsYmFyc092ZXJsYWlkLnNob3dOYXRpdmVTY3JvbGxiYXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nQ2hhbmdlZCA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZywgX2lnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDYWNoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXV0b1VwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdXRvVXBkYXRlID0gX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMuYXV0b1VwZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXV0b1VwZGF0ZUNoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKGF1dG9VcGRhdGUsIF9hdXRvVXBkYXRlQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL292ZXJmbG93QmVoYXZpb3JcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3ZlcmZsb3dCZWhhdmlvciA9IF9jdXJyZW50UHJlcGFyZWRPcHRpb25zLm92ZXJmbG93QmVoYXZpb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG92ZXJmbG93QmVoYXZpb3JDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShvdmVyZmxvd0JlaGF2aW9yLCBfb3ZlcmZsb3dCZWhhdmlvckNhY2hlLCBmb3JjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZHluV2lkdGg6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhRHluV2lkdGggPSBjdXJyZW50UHJlcGFyZWRPcHRpb25zVGV4dGFyZWEuZHluV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhRHluV2lkdGhDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShfdGV4dGFyZWFEeW5XaWR0aENhY2hlLCB0ZXh0YXJlYUR5bldpZHRoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9keW5IZWlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhRHluSGVpZ2h0ID0gY3VycmVudFByZXBhcmVkT3B0aW9uc1RleHRhcmVhLmR5bkhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFEeW5IZWlnaHRDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShfdGV4dGFyZWFEeW5IZWlnaHRDYWNoZSwgdGV4dGFyZWFEeW5IZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Njcm9sbGJhcnMgdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzQXV0b0hpZGVOZXZlciA9IHNjcm9sbGJhcnNBdXRvSGlkZSA9PT0gJ24nO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgPSBzY3JvbGxiYXJzQXV0b0hpZGUgPT09ICdzJztcclxuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSA9IHNjcm9sbGJhcnNBdXRvSGlkZSA9PT0gJ20nO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzQXV0b0hpZGVMZWF2ZSA9IHNjcm9sbGJhcnNBdXRvSGlkZSA9PT0gJ2wnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Njcm9sbGJhcnMgYXV0b0hpZGVEZWxheVxyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzQXV0b0hpZGVEZWxheSA9IGN1cnJlbnRQcmVwYXJlZE9wdGlvbnNTY3JvbGxiYXJzLmF1dG9IaWRlRGVsYXk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vb2xkIGNsYXNzTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIF9vbGRDbGFzc05hbWUgPSBfY2xhc3NOYW1lQ2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmVzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc2l6ZU5vbmUgPSByZXNpemUgPT09ICduJztcclxuICAgICAgICAgICAgICAgICAgICBfcmVzaXplQm90aCA9IHJlc2l6ZSA9PT0gJ2InO1xyXG4gICAgICAgICAgICAgICAgICAgIF9yZXNpemVIb3Jpem9udGFsID0gcmVzaXplID09PSAnaCc7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc2l6ZVZlcnRpY2FsID0gcmVzaXplID09PSAndic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbm9ybWFsaXplUlRMXHJcbiAgICAgICAgICAgICAgICAgICAgX25vcm1hbGl6ZVJUTENhY2hlID0gX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMubm9ybWFsaXplUlRMO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lnbm9yZSBvdmVybGF5IHNjcm9sbGJhciBoaWRpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nID0gaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZyAmJiAoX25hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQueCAmJiBfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC55KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZWZyZXNoIG9wdGlvbnMgY2FjaGVcclxuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyc1Zpc2liaWxpdHlDYWNoZSA9IHNjcm9sbGJhcnNWaXNpYmlsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzQXV0b0hpZGVDYWNoZSA9IHNjcm9sbGJhcnNBdXRvSGlkZTtcclxuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyc0NsaWNrU2Nyb2xsaW5nQ2FjaGUgPSBzY3JvbGxiYXJzQ2xpY2tTY3JvbGxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhcnNEcmFnU2Nyb2xsaW5nQ2FjaGUgPSBzY3JvbGxiYXJzRHJhZ1Njcm9sbGluZztcclxuICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lQ2FjaGUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc2l6ZUNhY2hlID0gcmVzaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wYWRkaW5nQWJzb2x1dGVDYWNoZSA9IHBhZGRpbmdBYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgICAgICBfY2xpcEFsd2F5c0NhY2hlID0gY2xpcEFsd2F5cztcclxuICAgICAgICAgICAgICAgICAgICBfc2l6ZUF1dG9DYXBhYmxlQ2FjaGUgPSBzaXplQXV0b0NhcGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgX2lnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDYWNoZSA9IGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX2F1dG9VcGRhdGVDYWNoZSA9IGF1dG9VcGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgX292ZXJmbG93QmVoYXZpb3JDYWNoZSA9IGV4dGVuZERlZXAoe30sIG92ZXJmbG93QmVoYXZpb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUR5bldpZHRoQ2FjaGUgPSB0ZXh0YXJlYUR5bldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUR5bkhlaWdodENhY2hlID0gdGV4dGFyZWFEeW5IZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hhc092ZXJmbG93Q2FjaGUgPSBfaGFzT3ZlcmZsb3dDYWNoZSB8fCB7IHg6IGZhbHNlLCB5OiBmYWxzZSB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3NldCBjb3JyZWN0IGNsYXNzIG5hbWUgdG8gdGhlIGhvc3QgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKF9ob3N0RWxlbWVudCwgX29sZENsYXNzTmFtZSArIF9zdHJTcGFjZSArIF9jbGFzc05hbWVUaGVtZU5vbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfaG9zdEVsZW1lbnQsIGNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkICYmIGNsYXNzTmFtZSAhPT0gbnVsbCAmJiBjbGFzc05hbWUubGVuZ3RoID4gMCA/IGNsYXNzTmFtZSA6IF9jbGFzc05hbWVUaGVtZU5vbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgY29ycmVjdCBhdXRvIFVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRvVXBkYXRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXV0b1VwZGF0ZSA9PT0gdHJ1ZSB8fCAoYXV0b1VwZGF0ZSA9PT0gbnVsbCAmJiBfYXV0b1VwZGF0ZVJlY29tbWVuZGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvVXBkYXRlTG9vcC5hZGQoX2Jhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1VwZGF0ZUxvb3AucmVtb3ZlKF9iYXNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RNdXRhdGlvbk9ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2FjdGl2YXRlIG9yIGRlYWN0aXZhdGUgc2l6ZSBhdXRvIGNhcGFiaWxpdHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZUF1dG9DYXBhYmxlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZUF1dG9DYXBhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnRlbnRHbHVlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZUVsZW1lbnQuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRHbHVlRWxlbWVudCA9IEZSQU1FV09SSyhnZW5lcmF0ZURpdihfY2xhc3NOYW1lQ29udGVudEdsdWVFbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BhZGRpbmdFbGVtZW50LmJlZm9yZShfY29udGVudEdsdWVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2l6ZUF1dG9PYnNlcnZlckFkZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50LnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaXplQXV0b09ic2VydmVyRWxlbWVudCA9IEZSQU1FV09SSyhnZW5lcmF0ZURpdihfY2xhc3NOYW1lU2l6ZUF1dG9PYnNlcnZlckVsZW1lbnQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnROYXRpdmUgPSBfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnRbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZUVsZW1lbnQuYmVmb3JlKF9zaXplQXV0b09ic2VydmVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNpemUgPSB7IHc6IC0xLCBoOiAtMSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwUmVzaXplT2JzZXJ2ZXIoX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdzogX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50TmF0aXZlW0xFWElDT04ub1ddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50TmF0aXZlW0xFWElDT04ub0hdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NhY2hlKG5ld1NpemUsIG9sZFNpemUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2luaXRpYWxpemVkICYmIChfaGVpZ2h0QXV0b0NhY2hlICYmIG5ld1NpemUuaCA+IDApIHx8IChfd2lkdGhBdXRvQ2FjaGUgJiYgbmV3U2l6ZS53ID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pbml0aWFsaXplZCAmJiAoIV9oZWlnaHRBdXRvQ2FjaGUgJiYgbmV3U2l6ZS5oID09PSAwKSB8fCAoIV93aWR0aEF1dG9DYWNoZSAmJiBuZXdTaXplLncgPT09IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU2l6ZSA9IG5ld1NpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVBdXRvT2JzZXJ2ZXJBZGRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maXggaGVpZ2h0QXV0byBkZXRlY3RvciBidWcgaWYgaGVpZ2h0IGlzIGZpeGVkIGJ1dCBjb250ZW50SGVpZ2h0IGlzIDAuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGUgcHJvYmFiaWxpdHkgdGhpcyBidWcgd2lsbCBldmVyIGhhcHBlbiBpcyB2ZXJ5IHZlcnkgbG93LCB0aGF0cyB3aHkgaXRzIG9rIGlmIHdlIHVzZSBjYWxjIHdoaWNoIGlzbid0IHN1cHBvcnRlZCBpbiBJRTguXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jc3NDYWxjICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnQuY3NzKF9zdHJIZWlnaHQsIF9jc3NDYWxjICsgJygxMDAlICsgMXB4KScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zaXplQXV0b09ic2VydmVyQWRkZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50LmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29udGVudEdsdWVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZUVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIGZvcmNlLCB1cGRhdGUgYWxsIHJlc2l6ZU9ic2VydmVycyB0b29cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVPYnNlcnZlckVsZW1lbnQuZmluZCgnKicpLnRyaWdnZXIoX3N0clNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2l6ZUF1dG9PYnNlcnZlckFkZGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50LmZpbmQoJyonKS50cmlnZ2VyKF9zdHJTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kaXNwbGF5IGhpZGRlbjpcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5SXNIaWRkZW4gPSBkaXNwbGF5SXNIaWRkZW4gPT09IHVuZGVmaW5lZCA/IF9ob3N0RWxlbWVudC5pcygnOmhpZGRlbicpIDogZGlzcGxheUlzSGlkZGVuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3RleHRhcmVhIEF1dG9XcmFwcGluZzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFBdXRvV3JhcHBpbmcgPSBfaXNUZXh0YXJlYSA/IF90YXJnZXRFbGVtZW50LmF0dHIoJ3dyYXAnKSAhPT0gJ29mZicgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFBdXRvV3JhcHBpbmdDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZSh0ZXh0YXJlYUF1dG9XcmFwcGluZywgX3RleHRhcmVhQXV0b1dyYXBwaW5nQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVjdCBkaXJlY3Rpb246XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNzc0RpcmVjdGlvbiA9IF9ob3N0RWxlbWVudC5jc3MoJ2RpcmVjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjc3NEaXJlY3Rpb25DaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShjc3NEaXJlY3Rpb24sIF9jc3NEaXJlY3Rpb25DYWNoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZWN0IGJveC1zaXppbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJveFNpemluZyA9IF9ob3N0RWxlbWVudC5jc3MoJ2JveC1zaXppbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm94U2l6aW5nQ2hhbmdlZCA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoYm94U2l6aW5nLCBfY3NzQm94U2l6aW5nQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVjdCBwYWRkaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nID0gZ2V0VG9wUmlnaHRCb3R0b21MZWZ0SG9zdChfc3RyUGFkZGluZ01pbnVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy93aWR0aCArIGhlaWdodCBhdXRvIGRldGVjdGluZyB2YXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVBdXRvT2JzZXJ2ZXJFbGVtZW50QkNSZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZXhjZXB0aW9uIG9jY3VycyBpbiBJRTggc29tZXRpbWVzICh1bmtub3duIGV4Y2VwdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplQXV0b09ic2VydmVyRWxlbWVudEJDUmVjdCA9IF9zaXplQXV0b09ic2VydmVyQWRkZWQgPyBfc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnROYXRpdmVbTEVYSUNPTi5iQ1JdKCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9pc1JUTCA9IGNzc0RpcmVjdGlvbiA9PT0gJ3J0bCc7XHJcbiAgICAgICAgICAgICAgICAgICAgX2lzQm9yZGVyQm94ID0gKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNSVExMZWZ0ID0gX2lzUlRMID8gX3N0ckxlZnQgOiBfc3RyUmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzUlRMUmlnaHQgPSBfaXNSVEwgPyBfc3RyUmlnaHQgOiBfc3RyTGVmdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlY3Qgd2lkdGggYXV0bzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGhBdXRvUmVzaXplRGV0ZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoQXV0b09ic2VydmVyRGV0ZWN0aW9uID0gKF9zaXplQXV0b09ic2VydmVyQWRkZWQgJiYgKF9ob3N0RWxlbWVudC5jc3MoX3N0ckZsb2F0KSAhPT0gJ25vbmUnIC8qfHwgX2lzVGV4dGFyZWEgKi8pKSA/IChNQVRILnJvdW5kKHNpemVBdXRvT2JzZXJ2ZXJFbGVtZW50QkNSZWN0LnJpZ2h0IC0gc2l6ZUF1dG9PYnNlcnZlckVsZW1lbnRCQ1JlY3QubGVmdCkgPT09IDApICYmICghcGFkZGluZ0Fic29sdXRlID8gKF9ob3N0RWxlbWVudE5hdGl2ZVtMRVhJQ09OLmNXXSAtIF9wYWRkaW5nWCkgPiAwIDogdHJ1ZSkgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZUF1dG9DYXBhYmxlICYmICF3aWR0aEF1dG9PYnNlcnZlckRldGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wQ3Vyckhvc3RXaWR0aCA9IF9ob3N0RWxlbWVudE5hdGl2ZVtMRVhJQ09OLm9XXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcEN1cnJDb250ZW50R2x1ZVdpZHRoID0gX2NvbnRlbnRHbHVlRWxlbWVudC5jc3MoX3N0cldpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRHbHVlRWxlbWVudC5jc3MoX3N0cldpZHRoLCBfc3RyQXV0byk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTmV3SG9zdFdpZHRoID0gX2hvc3RFbGVtZW50TmF0aXZlW0xFWElDT04ub1ddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEdsdWVFbGVtZW50LmNzcyhfc3RyV2lkdGgsIHRtcEN1cnJDb250ZW50R2x1ZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGhBdXRvUmVzaXplRGV0ZWN0aW9uID0gdG1wQ3Vyckhvc3RXaWR0aCAhPT0gdG1wTmV3SG9zdFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpZHRoQXV0b1Jlc2l6ZURldGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRHbHVlRWxlbWVudC5jc3MoX3N0cldpZHRoLCB0bXBDdXJySG9zdFdpZHRoICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOZXdIb3N0V2lkdGggPSBfaG9zdEVsZW1lbnROYXRpdmVbTEVYSUNPTi5vV107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEdsdWVFbGVtZW50LmNzcyhfc3RyV2lkdGgsIHRtcEN1cnJDb250ZW50R2x1ZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoQXV0b1Jlc2l6ZURldGVjdGlvbiA9IHRtcEN1cnJIb3N0V2lkdGggIT09IHRtcE5ld0hvc3RXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGhBdXRvID0gKHdpZHRoQXV0b09ic2VydmVyRGV0ZWN0aW9uIHx8IHdpZHRoQXV0b1Jlc2l6ZURldGVjdGlvbikgJiYgc2l6ZUF1dG9DYXBhYmxlICYmICFkaXNwbGF5SXNIaWRkZW47XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoQXV0b0NoYW5nZWQgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKHdpZHRoQXV0bywgX3dpZHRoQXV0b0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2FzV2lkdGhBdXRvID0gIXdpZHRoQXV0byAmJiBfd2lkdGhBdXRvQ2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZWN0IGhlaWdodCBhdXRvOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHRBdXRvID0gX3NpemVBdXRvT2JzZXJ2ZXJBZGRlZCAmJiBzaXplQXV0b0NhcGFibGUgJiYgIWRpc3BsYXlJc0hpZGRlbiA/IChNQVRILnJvdW5kKHNpemVBdXRvT2JzZXJ2ZXJFbGVtZW50QkNSZWN0LmJvdHRvbSAtIHNpemVBdXRvT2JzZXJ2ZXJFbGVtZW50QkNSZWN0LnRvcCkgPT09IDApIC8qICYmICghcGFkZGluZ0Fic29sdXRlICYmIChfbXNpZVZlcnNpb24gPiA5IHx8ICFfbXNpZVZlcnNpb24pID8gdHJ1ZSA6IHRydWUpICovIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodEF1dG9DaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShoZWlnaHRBdXRvLCBfaGVpZ2h0QXV0b0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2FzSGVpZ2h0QXV0byA9ICFoZWlnaHRBdXRvICYmIF9oZWlnaHRBdXRvQ2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZWN0IGJvcmRlcjpcclxuICAgICAgICAgICAgICAgICAgICAvL3dlIG5lZWQgdGhlIGJvcmRlciBvbmx5IGlmIGJvcmRlciBib3ggYW5kIGF1dG8gc2l6ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVCb3JkZXJYID0gKHdpZHRoQXV0byAmJiBfaXNCb3JkZXJCb3gpIHx8ICFfaXNCb3JkZXJCb3g7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUJvcmRlclkgPSAoaGVpZ2h0QXV0byAmJiBfaXNCb3JkZXJCb3gpIHx8ICFfaXNCb3JkZXJCb3g7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvcmRlciA9IGdldFRvcFJpZ2h0Qm90dG9tTGVmdEhvc3QoX3N0ckJvcmRlck1pbnVzLCAnLScgKyBfc3RyV2lkdGgsICF1cGRhdGVCb3JkZXJYLCAhdXBkYXRlQm9yZGVyWSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlY3QgbWFyZ2luOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSBnZXRUb3BSaWdodEJvdHRvbUxlZnRIb3N0KF9zdHJNYXJnaW5NaW51cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFycyB0byBhcHBseSBjb3JyZWN0IGNzc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50RWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50R2x1ZUVsZW1lbnRDU1MgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9mdW5jc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRIb3N0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9oYXMgdG8gYmUgY2xpZW50U2l6ZSBiZWNhdXNlIG9mZnNldFNpemUgcmVzcGVjdCBib3JkZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBfaG9zdEVsZW1lbnROYXRpdmVbTEVYSUNPTi5jV10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoOiBfaG9zdEVsZW1lbnROYXRpdmVbTEVYSUNPTi5jSF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRWaWV3cG9ydFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmlld3BvcnQgc2l6ZSBpcyBwYWRkaW5nIGNvbnRhaW5lciBiZWNhdXNlIGl0IG5ldmVyIGhhcyBwYWRkaW5nLCBtYXJnaW4gYW5kIGEgYm9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIHpvb20gcm91bmRpbmcgZXJyb3IgLT4gc29tZXRpbWVzIHNjcm9sbFdpZHRoL0hlaWdodCBpcyBzbWFsbGVyIHRoYW4gY2xpZW50V2lkdGgvSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhpcyBoYXBwZW5zIGFkZCB0aGUgZGlmZmVyZW5jZSB0byB0aGUgdmlld3BvcnRTaXplIHRvIGNvbXBlbnNhdGUgdGhlIHJvdW5kaW5nIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBfcGFkZGluZ0VsZW1lbnROYXRpdmVbTEVYSUNPTi5vV10gKyBNQVRILm1heCgwLCBfY29udGVudEVsZW1lbnROYXRpdmVbTEVYSUNPTi5jV10gLSBfY29udGVudEVsZW1lbnROYXRpdmVbTEVYSUNPTi5zV10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogX3BhZGRpbmdFbGVtZW50TmF0aXZlW0xFWElDT04ub0hdICsgTUFUSC5tYXgoMCwgX2NvbnRlbnRFbGVtZW50TmF0aXZlW0xFWElDT04uY0hdIC0gX2NvbnRlbnRFbGVtZW50TmF0aXZlW0xFWElDT04uc0hdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0IGluZm8gZm9yIHBhZGRpbmdcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0Fic29sdXRlWCA9IF9wYWRkaW5nWCA9IHBhZGRpbmcubCArIHBhZGRpbmcucjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0Fic29sdXRlWSA9IF9wYWRkaW5nWSA9IHBhZGRpbmcudCArIHBhZGRpbmcuYjtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQWJzb2x1dGVYICo9IHBhZGRpbmdBYnNvbHV0ZSA/IDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdBYnNvbHV0ZVkgKj0gcGFkZGluZ0Fic29sdXRlID8gMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy5jID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShwYWRkaW5nLCBfY3NzUGFkZGluZ0NhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgaW5mbyBmb3IgYm9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgX2JvcmRlclggPSBib3JkZXIubCArIGJvcmRlci5yO1xyXG4gICAgICAgICAgICAgICAgICAgIF9ib3JkZXJZID0gYm9yZGVyLnQgKyBib3JkZXIuYjtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXIuYyA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoYm9yZGVyLCBfY3NzQm9yZGVyQ2FjaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3NldCBpbmZvIGZvciBtYXJnaW5cclxuICAgICAgICAgICAgICAgICAgICBfbWFyZ2luWCA9IG1hcmdpbi5sICsgbWFyZ2luLnI7XHJcbiAgICAgICAgICAgICAgICAgICAgX21hcmdpblkgPSBtYXJnaW4udCArIG1hcmdpbi5iO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi5jID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShtYXJnaW4sIF9jc3NNYXJnaW5DYWNoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaCBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUF1dG9XcmFwcGluZ0NhY2hlID0gdGV4dGFyZWFBdXRvV3JhcHBpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX2Nzc0RpcmVjdGlvbkNhY2hlID0gY3NzRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jc3NCb3hTaXppbmdDYWNoZSA9IGJveFNpemluZztcclxuICAgICAgICAgICAgICAgICAgICBfd2lkdGhBdXRvQ2FjaGUgPSB3aWR0aEF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgX2hlaWdodEF1dG9DYWNoZSA9IGhlaWdodEF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgX2Nzc1BhZGRpbmdDYWNoZSA9IHBhZGRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX2Nzc0JvcmRlckNhY2hlID0gYm9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jc3NNYXJnaW5DYWNoZSA9IG1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9JRUZpeCBkaXJlY3Rpb24gY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3NEaXJlY3Rpb25DaGFuZ2VkICYmIF9zaXplQXV0b09ic2VydmVyQWRkZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaXplQXV0b09ic2VydmVyRWxlbWVudC5jc3MoX3N0ckZsb2F0LCBpc1JUTFJpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hcHBseSBwYWRkaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWRkaW5nLmMgfHwgY3NzRGlyZWN0aW9uQ2hhbmdlZCB8fCBwYWRkaW5nQWJzb2x1dGVDaGFuZ2VkIHx8IHdpZHRoQXV0b0NoYW5nZWQgfHwgaGVpZ2h0QXV0b0NoYW5nZWQgfHwgYm94U2l6aW5nQ2hhbmdlZCB8fCBzaXplQXV0b0NhcGFibGVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nRWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFDU1MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdWYWx1ZXMgPSBbcGFkZGluZy50LCBwYWRkaW5nLnIsIHBhZGRpbmcuYiwgcGFkZGluZy5sXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvcFJpZ2h0Qm90dG9tTGVmdChjb250ZW50R2x1ZUVsZW1lbnRDU1MsIF9zdHJNYXJnaW5NaW51cywgWy1wYWRkaW5nLnQsIC1wYWRkaW5nLnIsIC1wYWRkaW5nLmIsIC1wYWRkaW5nLmxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdBYnNvbHV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VG9wUmlnaHRCb3R0b21MZWZ0KHBhZGRpbmdFbGVtZW50Q1NTLCBfc3RyRW1wdHksIHBhZGRpbmdWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VG9wUmlnaHRCb3R0b21MZWZ0KF9pc1RleHRhcmVhID8gdGV4dGFyZWFDU1MgOiBjb250ZW50RWxlbWVudENTUywgX3N0clBhZGRpbmdNaW51cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUb3BSaWdodEJvdHRvbUxlZnQocGFkZGluZ0VsZW1lbnRDU1MsIF9zdHJFbXB0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUb3BSaWdodEJvdHRvbUxlZnQoX2lzVGV4dGFyZWEgPyB0ZXh0YXJlYUNTUyA6IGNvbnRlbnRFbGVtZW50Q1NTLCBfc3RyUGFkZGluZ01pbnVzLCBwYWRkaW5nVmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BhZGRpbmdFbGVtZW50LmNzcyhwYWRkaW5nRWxlbWVudENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50LmNzcyh0ZXh0YXJlYUNTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3ZpZXdwb3J0IHNpemUgaXMgcGFkZGluZyBjb250YWluZXIgYmVjYXVzZSBpdCBuZXZlciBoYXMgcGFkZGluZywgbWFyZ2luIGFuZCBhIGJvcmRlci5cclxuICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRTaXplID0gZ2V0Vmlld3BvcnRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIFRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhU2l6ZSA9IF9pc1RleHRhcmVhID8gdGV4dGFyZWFVcGRhdGUoKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYVNpemVDaGFuZ2VkID0gX2lzVGV4dGFyZWEgJiYgY2hlY2tDYWNoZUF1dG9Gb3JjZSh0ZXh0YXJlYVNpemUsIF90ZXh0YXJlYVNpemVDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhRHluT3JpZ1NpemUgPSBfaXNUZXh0YXJlYSAmJiB0ZXh0YXJlYVNpemUgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IHRleHRhcmVhRHluV2lkdGggPyB0ZXh0YXJlYVNpemUuX2R5bmFtaWNXaWR0aCA6IHRleHRhcmVhU2l6ZS5fb3JpZ2luYWxXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaDogdGV4dGFyZWFEeW5IZWlnaHQgPyB0ZXh0YXJlYVNpemUuX2R5bmFtaWNIZWlnaHQgOiB0ZXh0YXJlYVNpemUuX29yaWdpbmFsSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYVNpemVDYWNoZSA9IHRleHRhcmVhU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9maXggaGVpZ2h0IGF1dG8gLyB3aWR0aCBhdXRvIGluIGNvb3BlcmF0aW9uIHdpdGggY3VycmVudCBwYWRkaW5nICYgYm94U2l6aW5nIGJlaGF2aW9yOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHRBdXRvICYmIChoZWlnaHRBdXRvQ2hhbmdlZCB8fCBwYWRkaW5nQWJzb2x1dGVDaGFuZ2VkIHx8IGJveFNpemluZ0NoYW5nZWQgfHwgcGFkZGluZy5jIHx8IGJvcmRlci5jKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTU1tfc3RySGVpZ2h0XSA9IF9zdHJBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWlnaHRBdXRvQ2hhbmdlZCB8fCBwYWRkaW5nQWJzb2x1dGVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJIZWlnaHRdID0gX3N0ckh1bmRyZWRQZXJjZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGhBdXRvICYmICh3aWR0aEF1dG9DaGFuZ2VkIHx8IHBhZGRpbmdBYnNvbHV0ZUNoYW5nZWQgfHwgYm94U2l6aW5nQ2hhbmdlZCB8fCBwYWRkaW5nLmMgfHwgYm9yZGVyLmMgfHwgY3NzRGlyZWN0aW9uQ2hhbmdlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnRDU1NbX3N0cldpZHRoXSA9IF9zdHJBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2x1ZUVsZW1lbnRDU1NbX3N0ck1heE1pbnVzICsgX3N0cldpZHRoXSA9IF9zdHJIdW5kcmVkUGVyY2VudDsgLy9JRSBGaXhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod2lkdGhBdXRvQ2hhbmdlZCB8fCBwYWRkaW5nQWJzb2x1dGVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSBfc3RySHVuZHJlZFBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJGbG9hdF0gPSBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tfc3RyTWF4TWludXMgKyBfc3RyV2lkdGhdID0gX3N0ckVtcHR5OyAvL0lFIEZpeFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGhBdXRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGV4dGFyZWFEeW5PcmlnU2l6ZS53IHx8IF9zdHJBdXRvIDo6IGRvZXNudCB3b3JrcyBiZWNhdXNlIGFwcGxpZWQgbWFyZ2luIHdpbGwgc2hpZnQgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdsdWVFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSBfc3RyQXV0bztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSBWRU5ET1JTLl9jc3NQcm9wZXJ0eVZhbHVlKF9zdHJXaWR0aCwgJ21heC1jb250ZW50IGludHJpbnNpYycpIHx8IF9zdHJBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTU1tfc3RyRmxvYXRdID0gaXNSVExSaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tfc3RyV2lkdGhdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0QXV0bykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RleHRhcmVhRHluT3JpZ1NpemUuaCB8fCBfY29udGVudEVsZW1lbnROYXRpdmVbTEVYSUNPTi5jSF0gOjogdXNlIGZvciBhbnRpIHNjcm9sbCBqdW1waW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tfc3RySGVpZ2h0XSA9IHRleHRhcmVhRHluT3JpZ1NpemUuaCB8fCBfY29udGVudEVsZW1lbnROYXRpdmVbTEVYSUNPTi5jSF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2x1ZUVsZW1lbnRDU1NbX3N0ckhlaWdodF0gPSBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplQXV0b0NhcGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZUVsZW1lbnQuY3NzKGNvbnRlbnRHbHVlRWxlbWVudENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50LmNzcyhjb250ZW50RWxlbWVudENTUyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vQ0hFQ0tQT0lOVCBIRVJFIH5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTUyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIFtjb250ZW50KGhvc3QpIGNsaWVudCAvIHNjcm9sbCBzaXplLCBvciB0YXJnZXQgZWxlbWVudCBkaXJlY3Rpb24sIG9yIGNvbnRlbnQoaG9zdCkgbWF4LXNpemVzXSBjaGFuZ2VkLCBvciBmb3JjZSBpcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3RTaXplQ2hhbmdlZCB8fCBjb250ZW50U2l6ZUNoYW5nZWQgfHwgdGV4dGFyZWFTaXplQ2hhbmdlZCB8fCBjc3NEaXJlY3Rpb25DaGFuZ2VkIHx8IGJveFNpemluZ0NoYW5nZWQgfHwgcGFkZGluZ0Fic29sdXRlQ2hhbmdlZCB8fCB3aWR0aEF1dG9DaGFuZ2VkIHx8IHdpZHRoQXV0byB8fCBoZWlnaHRBdXRvQ2hhbmdlZCB8fCBoZWlnaHRBdXRvIHx8IGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDaGFuZ2VkIHx8IG92ZXJmbG93QmVoYXZpb3JDaGFuZ2VkIHx8IGNsaXBBbHdheXNDaGFuZ2VkIHx8IHJlc2l6ZUNoYW5nZWQgfHwgc2Nyb2xsYmFyc1Zpc2liaWxpdHlDaGFuZ2VkIHx8IHNjcm9sbGJhcnNBdXRvSGlkZUNoYW5nZWQgfHwgc2Nyb2xsYmFyc0RyYWdTY3JvbGxpbmdDaGFuZ2VkIHx8IHNjcm9sbGJhcnNDbGlja1Njcm9sbGluZ0NoYW5nZWQgfHwgdGV4dGFyZWFEeW5XaWR0aENoYW5nZWQgfHwgdGV4dGFyZWFEeW5IZWlnaHRDaGFuZ2VkIHx8IHRleHRhcmVhQXV0b1dyYXBwaW5nQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyT3ZlcmZsb3cgPSAnb3ZlcmZsb3cnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyT3ZlcmZsb3dYID0gc3RyT3ZlcmZsb3cgKyAnLXgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyT3ZlcmZsb3dZID0gc3RyT3ZlcmZsb3cgKyAnLXknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RySGlkZGVuID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHJWaXNpYmxlID0gJ3Zpc2libGUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9SZXNldCB0aGUgdmlld3BvcnQgKHZlcnkgaW1wb3J0YW50IGZvciBuYXRpdmVseSBvdmVybGFpZCBzY3JvbGxiYXJzIGFuZCB6b29tIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Rvbid0IGNoYW5nZSB0aGUgb3ZlcmZsb3cgcHJvcCBhcyBpdCBpcyB2ZXJ5IGV4cGVuc2l2ZSBhbmQgYWZmZWN0cyBwZXJmb3JtYW5jZSAhQSBMT1QhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX25hdGl2ZVNjcm9sbGJhclN0eWxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydEVsZW1lbnRSZXNldENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc2V0WFRtcCA9IF9oYXNPdmVyZmxvd0NhY2hlLnkgJiYgX2hpZGVPdmVyZmxvd0NhY2hlLnlzICYmICFpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nID8gKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkgPyBfdmlld3BvcnRFbGVtZW50LmNzcyhpc1JUTExlZnQpIDogLV9uYXRpdmVTY3JvbGxiYXJTaXplLnkpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNldEJvdHRvbVRtcCA9IF9oYXNPdmVyZmxvd0NhY2hlLnggJiYgX2hpZGVPdmVyZmxvd0NhY2hlLnhzICYmICFpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nID8gKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnggPyBfdmlld3BvcnRFbGVtZW50LmNzcyhfc3RyQm90dG9tKSA6IC1fbmF0aXZlU2Nyb2xsYmFyU2l6ZS54KSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUb3BSaWdodEJvdHRvbUxlZnQodmlld3BvcnRFbGVtZW50UmVzZXRDU1MsIF9zdHJFbXB0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRFbGVtZW50LmNzcyh2aWV3cG9ydEVsZW1lbnRSZXNldENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVhc3VyZSBzZXZlcmFsIHNpemVzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudE1lYXN1cmVFbGVtZW50ID0gZ2V0Q29udGVudE1lYXN1cmVFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaW4gRmlyZWZveCBjb250ZW50IGVsZW1lbnQgaGFzIHRvIGhhdmUgb3ZlcmZsb3cgaGlkZGVuLCBlbHNlIGVsZW1lbnQgbWFyZ2lucyBhcmVuJ3QgY2FsY3VsYXRlZCBwcm9wZXJseSwgdGhpcyBlbGVtZW50IHByZXZlbnRzIHRoaXMgYnVnLCBidXQgb25seSBpZiBzY3JvbGxiYXJzIGFyZW4ndCBvdmVybGFpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VzZSBjbGllbnRTaXplIGJlY2F1c2UgbmF0aXZlbHkgb3ZlcmxhaWRTY3JvbGxiYXJzIGFkZCBib3JkZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiB0ZXh0YXJlYUR5bk9yaWdTaXplLncgfHwgY29udGVudE1lYXN1cmVFbGVtZW50W0xFWElDT04uY1ddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogdGV4dGFyZWFEeW5PcmlnU2l6ZS5oIHx8IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLmNIXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsU2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHc6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNXXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNIXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hcHBseSB0aGUgY29ycmVjdCB2aWV3cG9ydCBzdHlsZSBhbmQgbWVhc3VyZSB2aWV3cG9ydCBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX25hdGl2ZVNjcm9sbGJhclN0eWxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudFJlc2V0Q1NTW19zdHJCb3R0b21dID0gd2FzSGVpZ2h0QXV0byA/IF9zdHJFbXB0eSA6IHJlc2V0Qm90dG9tVG1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50UmVzZXRDU1NbaXNSVExMZWZ0XSA9IHdhc1dpZHRoQXV0byA/IF9zdHJFbXB0eSA6IHJlc2V0WFRtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQuY3NzKHZpZXdwb3J0RWxlbWVudFJlc2V0Q1NTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRTaXplID0gZ2V0Vmlld3BvcnRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21lYXN1cmUgYW5kIGNvcnJlY3Qgc2V2ZXJhbCBzaXplc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9zdFNpemUgPSBnZXRIb3N0U2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9zdEFic29sdXRlUmVjdFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBob3N0U2l6ZS53IC0gX21hcmdpblggLSBfYm9yZGVyWCAtIChfaXNCb3JkZXJCb3ggPyAwIDogX3BhZGRpbmdYKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg6IGhvc3RTaXplLmggLSBfbWFyZ2luWSAtIF9ib3JkZXJZIC0gKF9pc0JvcmRlckJveCA/IDAgOiBfcGFkZGluZ1kpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50R2x1ZVNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsaWVudC9zY3JvbGxTaXplICsgQWJzb2x1dGVQYWRkaW5nIC0+IGJlY2F1c2UgcGFkZGluZyBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIHBhZGRpbmdFbGVtZW50IGlmIGl0cyBhYnNvbHV0ZSwgc28geW91IGhhdmUgdG8gYWRkIGl0IG1hbnVhbGx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2hvc3RTaXplIGlzIGNsaWVudFNpemUgLT4gc28gcGFkZGluZyBzaG91bGQgYmUgYWRkZWQgbWFudWFsbHksIHJpZ2h0PyBGQUxTRSEgQmVjYXVzZSBjb250ZW50IGdsdWUgaXMgaW5zaWRlIGhvc3RFbGVtZW50LCBzbyB3ZSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHBhZGRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHc6IE1BVEgubWF4KCh3aWR0aEF1dG8gPyBjb250ZW50U2l6ZS53IDogc2Nyb2xsU2l6ZS53KSArIHBhZGRpbmdBYnNvbHV0ZVgsIGhvc3RBYnNvbHV0ZVJlY3RTaXplLncpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogTUFUSC5tYXgoKGhlaWdodEF1dG8gPyBjb250ZW50U2l6ZS5oIDogc2Nyb2xsU2l6ZS5oKSArIHBhZGRpbmdBYnNvbHV0ZVksIGhvc3RBYnNvbHV0ZVJlY3RTaXplLmgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlU2l6ZS5jID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShjb250ZW50R2x1ZVNpemUsIF9jb250ZW50R2x1ZVNpemVDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZVNpemVDYWNoZSA9IGNvbnRlbnRHbHVlU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgY29ycmVjdCBjb250ZW50R2x1ZSBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplQXV0b0NhcGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2l6ZSBjb250ZW50R2x1ZSBjb3JyZWN0bHkgdG8gbWFrZSBzdXJlIHRoZSBlbGVtZW50IGhhcyBjb3JyZWN0IHNpemUgaWYgdGhlIHNpemluZyBzd2l0Y2hlcyB0byBhdXRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudEdsdWVTaXplLmMgfHwgKGhlaWdodEF1dG8gfHwgd2lkdGhBdXRvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tfc3RyV2lkdGhdID0gY29udGVudEdsdWVTaXplLnc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdsdWVFbGVtZW50Q1NTW19zdHJIZWlnaHRdID0gY29udGVudEdsdWVTaXplLmg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGV4dGFyZWEtc2l6ZXMgYXJlIGFscmVhZHkgY2FsY3VsYXRlZCBjb3JyZWN0bHkgYXQgdGhpcyBwb2ludFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2lzVGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VzZSBjbGllbnRTaXplIGJlY2F1c2UgbmF0aXZlbHkgb3ZlcmxhaWRTY3JvbGxiYXJzIGFkZCBib3JkZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiBjb250ZW50TWVhc3VyZUVsZW1lbnRbTEVYSUNPTi5jV10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoOiBjb250ZW50TWVhc3VyZUVsZW1lbnRbTEVYSUNPTi5jSF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFDb3ZlckNTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldENvbnRlbnRHbHVlRWxlbWVudENTU2Z1bmN0aW9uID0gZnVuY3Rpb24gKGhvcml6b250YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFycyA9IGdldFNjcm9sbGJhclZhcnMoaG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoID0gc2Nyb2xsYmFyVmFycy5fd19oO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHJXSCA9IHNjcm9sbGJhclZhcnMuX3dpZHRoX2hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXV0b1NpemUgPSBob3Jpem9udGFsID8gd2lkdGhBdXRvIDogaGVpZ2h0QXV0bztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9yZGVyU2l6ZSA9IGhvcml6b250YWwgPyBfYm9yZGVyWCA6IF9ib3JkZXJZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nU2l6ZSA9IGhvcml6b250YWwgPyBfcGFkZGluZ1ggOiBfcGFkZGluZ1k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmdpblNpemUgPSBob3Jpem9udGFsID8gX21hcmdpblggOiBfbWFyZ2luWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnRTaXplID0gX3ZpZXdwb3J0U2l6ZVt3aF0gLSBib3JkZXJTaXplIC0gbWFyZ2luU2l6ZSAtIChfaXNCb3JkZXJCb3ggPyAwIDogcGFkZGluZ1NpemUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21ha2UgY29udGVudEdsdWUgc2l6ZSAtMSBpZiBlbGVtZW50IGlzIG5vdCBhdXRvIHNpemVkLCB0byBtYWtlIHN1cmUgdGhhdCBhIHJlc2l6ZSBldmVudCBoYXBwZW5zIHdoZW4gdGhlIGVsZW1lbnQgc2hyaW5rc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXV0b1NpemUgfHwgKCFhdXRvU2l6ZSAmJiBib3JkZXIuYykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tzdHJXSF0gPSBob3N0QWJzb2x1dGVSZWN0U2l6ZVt3aF0gLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHNpemUgaXMgYXV0byBhbmQgaG9zdCBpcyBzbWFsbGVyIHRoYW4gc2l6ZSBhcyBtaW4gc2l6ZSwgbWFrZSBjb250ZW50IGdsdWUgc2l6ZSAtMSB0byBtYWtlIHN1cmUgc2l6ZSBjaGFuZ2VzIHdpbGwgYmUgZGV0ZWN0ZWQgKHRoaXMgaXMgb25seSBuZWVkZWQgaWYgcGFkZGluZyBpcyAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRvU2l6ZSAmJiAoY29udGVudFNpemVbd2hdIDwgdmlld3BvcnRTaXplKSAmJiAoaG9yaXpvbnRhbCAmJiBfaXNUZXh0YXJlYSA/ICF0ZXh0YXJlYUF1dG9XcmFwcGluZyA6IHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhQ292ZXJDU1Nbc3RyV0hdID0gcGFyc2VUb1plcm9Pck51bWJlcihfdGV4dGFyZWFDb3ZlckVsZW1lbnQuY3NzKHN0cldIKSkgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2x1ZUVsZW1lbnRDU1Nbc3RyV0hdIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBjb250ZW50IGdsdWUgc2l6ZSBpcyBhdCBsZWFzdCAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRTaXplW3doXSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHbHVlRWxlbWVudENTU1tzdHJXSF0gPSBNQVRILm1heCgxLCBjb250ZW50R2x1ZUVsZW1lbnRDU1Nbc3RyV0hdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb250ZW50R2x1ZUVsZW1lbnRDU1NmdW5jdGlvbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbnRlbnRHbHVlRWxlbWVudENTU2Z1bmN0aW9uKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzVGV4dGFyZWEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RleHRhcmVhQ292ZXJFbGVtZW50LmNzcyh0ZXh0YXJlYUNvdmVyQ1NTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50R2x1ZUVsZW1lbnQuY3NzKGNvbnRlbnRHbHVlRWxlbWVudENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoQXV0bylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSBfc3RySHVuZHJlZFBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aEF1dG8gJiYgIV9pc0JvcmRlckJveCAmJiAhX211dGF0aW9uT2JzZXJ2ZXJzQ29ubmVjdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnRDU1NbX3N0ckZsb2F0XSA9ICdub25lJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgYW5kIHJlc2V0IGNvbnRlbnQgc3R5bGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50LmNzcyhjb250ZW50RWxlbWVudENTUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21lYXN1cmUgYWdhaW4sIGJ1dCB0aGlzIHRpbWUgYWxsIGNvcnJlY3Qgc2l6ZXM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U2Nyb2xsU2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHc6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNXXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg6IGNvbnRlbnRNZWFzdXJlRWxlbWVudFtMRVhJQ09OLnNIXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFNjcm9sbFNpemUuYyA9IGNvbnRlbnRTaXplQ2hhbmdlZCA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoY29udGVudFNjcm9sbFNpemUsIF9jb250ZW50U2Nyb2xsU2l6ZUNhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRTY3JvbGxTaXplQ2FjaGUgPSBjb250ZW50U2Nyb2xsU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaCB2aWV3cG9ydCBzaXplIGFmdGVyIGNvcnJlY3QgbWVhc3VyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydFNpemUgPSBnZXRWaWV3cG9ydFNpemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RTaXplID0gZ2V0SG9zdFNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFNpemVDaGFuZ2VkID0gY2hlY2tDYWNoZUF1dG9Gb3JjZShob3N0U2l6ZSwgX2hvc3RTaXplQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaG9zdFNpemVDYWNoZSA9IGhvc3RTaXplO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhpZGVPdmVyZmxvd0ZvcmNlVGV4dGFyZWEgPSBfaXNUZXh0YXJlYSAmJiAoX3ZpZXdwb3J0U2l6ZS53ID09PSAwIHx8IF92aWV3cG9ydFNpemUuaCA9PT0gMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c092ZXJmbG93QW1vdW50ID0gX292ZXJmbG93QW1vdW50Q2FjaGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdmVyZmxvd0JlaGF2aW9ySXNWUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3ZlcmZsb3dCZWhhdmlvcklzVkggPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG92ZXJmbG93QmVoYXZpb3JJc1MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG92ZXJmbG93QW1vdW50ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNPdmVyZmxvdyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGlkZU92ZXJmbG93ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYW5TY3JvbGwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXdwb3J0UmVjdCA9IF9wYWRkaW5nRWxlbWVudE5hdGl2ZVtMRVhJQ09OLmJDUl0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldE92ZXJmbG93VmFyaWFibGVzID0gZnVuY3Rpb24gKGhvcml6b250YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzID0gZ2V0U2Nyb2xsYmFyVmFycyhob3Jpem9udGFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzSW52ZXJ0ZWQgPSBnZXRTY3JvbGxiYXJWYXJzKCFob3Jpem9udGFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4eUkgPSBzY3JvbGxiYXJWYXJzSW52ZXJ0ZWQuX3hfeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4eSA9IHNjcm9sbGJhclZhcnMuX3hfeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aCA9IHNjcm9sbGJhclZhcnMuX3dfaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aEhlaWdodCA9IHNjcm9sbGJhclZhcnMuX3dpZHRoX2hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxNYXggPSBfc3RyU2Nyb2xsICsgc2Nyb2xsYmFyVmFycy5fTGVmdF9Ub3AgKyAnTWF4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFjdGlvbmFsT3ZlcmZsb3dBbW91bnQgPSB2aWV3cG9ydFJlY3Rbd2lkdGhIZWlnaHRdID8gTUFUSC5hYnModmlld3BvcnRSZWN0W3dpZHRoSGVpZ2h0XSAtIF92aWV3cG9ydFNpemVbd2hdKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tGcmFjdGlvbmFsT3ZlcmZsb3dBbW91bnQgPSBwcmV2aW91c092ZXJmbG93QW1vdW50ICYmIHByZXZpb3VzT3ZlcmZsb3dBbW91bnRbeHldID4gMCAmJiBfdmlld3BvcnRFbGVtZW50TmF0aXZlW3Njcm9sbE1heF0gPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0JlaGF2aW9ySXNWU1t4eV0gPSBvdmVyZmxvd0JlaGF2aW9yW3h5XSA9PT0gJ3Ytcyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0JlaGF2aW9ySXNWSFt4eV0gPSBvdmVyZmxvd0JlaGF2aW9yW3h5XSA9PT0gJ3YtaCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0JlaGF2aW9ySXNTW3h5XSA9IG92ZXJmbG93QmVoYXZpb3JbeHldID09PSAncyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0Ftb3VudFt4eV0gPSBNQVRILm1heCgwLCBNQVRILnJvdW5kKChjb250ZW50U2Nyb2xsU2l6ZVt3aF0gLSBfdmlld3BvcnRTaXplW3doXSkgKiAxMDApIC8gMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93QW1vdW50W3h5XSAqPSAoaGlkZU92ZXJmbG93Rm9yY2VUZXh0YXJlYSB8fCAoY2hlY2tGcmFjdGlvbmFsT3ZlcmZsb3dBbW91bnQgJiYgZnJhY3Rpb25hbE92ZXJmbG93QW1vdW50ID4gMCAmJiBmcmFjdGlvbmFsT3ZlcmZsb3dBbW91bnQgPCAxKSkgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc092ZXJmbG93W3h5XSA9IG92ZXJmbG93QW1vdW50W3h5XSA+IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9oaWRlT3ZlcmZsb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ggfHwgeSA6IHRydWUgPT09IG92ZXJmbG93IGlzIGhpZGRlbiBieSBcIm92ZXJmbG93OiBzY3JvbGxcIiBPUiBcIm92ZXJmbG93OiBoaWRkZW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy94cyB8fCB5cyA6IHRydWUgPT09IG92ZXJmbG93IGlzIGhpZGRlbiBieSBcIm92ZXJmbG93OiBzY3JvbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZU92ZXJmbG93W3h5XSA9IG92ZXJmbG93QmVoYXZpb3JJc1ZTW3h5XSB8fCBvdmVyZmxvd0JlaGF2aW9ySXNWSFt4eV0gPyAoaGFzT3ZlcmZsb3dbeHlJXSAmJiAhb3ZlcmZsb3dCZWhhdmlvcklzVlNbeHlJXSAmJiAhb3ZlcmZsb3dCZWhhdmlvcklzVkhbeHlJXSkgOiBoYXNPdmVyZmxvd1t4eV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlT3ZlcmZsb3dbeHkgKyAncyddID0gaGlkZU92ZXJmbG93W3h5XSA/IChvdmVyZmxvd0JlaGF2aW9ySXNTW3h5XSB8fCBvdmVyZmxvd0JlaGF2aW9ySXNWU1t4eV0pIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuU2Nyb2xsW3h5XSA9IGhhc092ZXJmbG93W3h5XSAmJiBoaWRlT3ZlcmZsb3dbeHkgKyAncyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRPdmVyZmxvd1ZhcmlhYmxlcyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0T3ZlcmZsb3dWYXJpYWJsZXMoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dBbW91bnQuYyA9IGNoZWNrQ2FjaGVBdXRvRm9yY2Uob3ZlcmZsb3dBbW91bnQsIF9vdmVyZmxvd0Ftb3VudENhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX292ZXJmbG93QW1vdW50Q2FjaGUgPSBvdmVyZmxvd0Ftb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3ZlcmZsb3cuYyA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoaGFzT3ZlcmZsb3csIF9oYXNPdmVyZmxvd0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hhc092ZXJmbG93Q2FjaGUgPSBoYXNPdmVyZmxvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZU92ZXJmbG93LmMgPSBjaGVja0NhY2hlQXV0b0ZvcmNlKGhpZGVPdmVyZmxvdywgX2hpZGVPdmVyZmxvd0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVPdmVyZmxvd0NhY2hlID0gaGlkZU92ZXJmbG93O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBuYXRpdmUgc2Nyb2xsYmFyIGlzIG92ZXJsYXkgYXQgeCBPUiB5IGF4aXMsIHByZXBhcmUgRE9NXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54IHx8IF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib3JkZXJEZXNpZ24gPSAncHggc29saWQgdHJhbnNwYXJlbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRBcnJhbmdlRWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmFuZ2VDb250ZW50ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYW5nZUNoYW5nZWQgPSBmb3JjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXRDb250ZW50RWxlbWVudENTUztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3ZlcmZsb3cueCB8fCBoYXNPdmVyZmxvdy55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZUNvbnRlbnQudyA9IF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkgJiYgaGFzT3ZlcmZsb3cueSA/IGNvbnRlbnRTY3JvbGxTaXplLncgKyBfb3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZS55IDogX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VDb250ZW50LmggPSBfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIGhhc092ZXJmbG93LnggPyBjb250ZW50U2Nyb2xsU2l6ZS5oICsgX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemUueCA6IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlQ2hhbmdlZCA9IGNoZWNrQ2FjaGVBdXRvRm9yY2UoYXJyYW5nZUNvbnRlbnQsIF9hcnJhbmdlQ29udGVudFNpemVDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FycmFuZ2VDb250ZW50U2l6ZUNhY2hlID0gYXJyYW5nZUNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc092ZXJmbG93LmMgfHwgaGlkZU92ZXJmbG93LmMgfHwgY29udGVudFNjcm9sbFNpemUuYyB8fCBjc3NEaXJlY3Rpb25DaGFuZ2VkIHx8IHdpZHRoQXV0b0NoYW5nZWQgfHwgaGVpZ2h0QXV0b0NoYW5nZWQgfHwgd2lkdGhBdXRvIHx8IGhlaWdodEF1dG8gfHwgaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZ0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTU1tfc3RyTWFyZ2luTWludXMgKyBpc1JUTFJpZ2h0XSA9IGNvbnRlbnRFbGVtZW50Q1NTW19zdHJCb3JkZXJNaW51cyArIGlzUlRMUmlnaHRdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbnRlbnRFbGVtZW50Q1NTID0gZnVuY3Rpb24gKGhvcml6b250YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhclZhcnMgPSBnZXRTY3JvbGxiYXJWYXJzKGhvcml6b250YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFyc0ludmVydGVkID0gZ2V0U2Nyb2xsYmFyVmFycyghaG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4eSA9IHNjcm9sbGJhclZhcnMuX3hfeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ckRpcmVjdGlvbiA9IGhvcml6b250YWwgPyBfc3RyQm90dG9tIDogaXNSVExMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW52ZXJ0ZWRBdXRvU2l6ZSA9IGhvcml6b250YWwgPyBoZWlnaHRBdXRvIDogd2lkdGhBdXRvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkW3h5XSAmJiBoYXNPdmVyZmxvd1t4eV0gJiYgaGlkZU92ZXJmbG93W3h5ICsgJ3MnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnRDU1NbX3N0ck1hcmdpbk1pbnVzICsgc3RyRGlyZWN0aW9uXSA9IGludmVydGVkQXV0b1NpemUgPyAoaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZyA/IF9zdHJFbXB0eSA6IF9vdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplW3h5XSkgOiBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTU1tfc3RyQm9yZGVyTWludXMgKyBzdHJEaXJlY3Rpb25dID0gKChob3Jpem9udGFsID8gIWludmVydGVkQXV0b1NpemUgOiB0cnVlKSAmJiAhaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZykgPyAoX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemVbeHldICsgYm9yZGVyRGVzaWduKSA6IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VDb250ZW50W3Njcm9sbGJhclZhcnNJbnZlcnRlZC5fd19oXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnRDU1NbX3N0ck1hcmdpbk1pbnVzICsgc3RyRGlyZWN0aW9uXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnRDU1NbX3N0ckJvcmRlck1pbnVzICsgc3RyRGlyZWN0aW9uXSA9IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbmF0aXZlU2Nyb2xsYmFyU3R5bGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVDbGFzcyhfdmlld3BvcnRFbGVtZW50LCBfY2xhc3NOYW1lVmlld3BvcnROYXRpdmVTY3JvbGxiYXJzSW52aXNpYmxlLCAhaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbnRlbnRFbGVtZW50Q1NTKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb250ZW50RWxlbWVudENTUyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlQ29udGVudC53ID0gYXJyYW5nZUNvbnRlbnQuaCA9IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYW5nZUNoYW5nZWQgJiYgIV9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEFycmFuZ2VFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSBoaWRlT3ZlcmZsb3cueSA/IGFycmFuZ2VDb250ZW50LncgOiBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEFycmFuZ2VFbGVtZW50Q1NTW19zdHJIZWlnaHRdID0gaGlkZU92ZXJmbG93LnggPyBhcnJhbmdlQ29udGVudC5oIDogX3N0ckVtcHR5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9jb250ZW50QXJyYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRBcnJhbmdlRWxlbWVudCA9IEZSQU1FV09SSyhnZW5lcmF0ZURpdihfY2xhc3NOYW1lQ29udGVudEFycmFuZ2VFbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQucHJlcGVuZChfY29udGVudEFycmFuZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRBcnJhbmdlRWxlbWVudC5jc3MoY29udGVudEFycmFuZ2VFbGVtZW50Q1NTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudC5jc3MoY29udGVudEVsZW1lbnRDU1MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnRFbGVtZW50Q1NTID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nRWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2V0Vmlld3BvcnRDU1M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3N0U2l6ZUNoYW5nZWQgfHwgaGFzT3ZlcmZsb3cuYyB8fCBoaWRlT3ZlcmZsb3cuYyB8fCBjb250ZW50U2Nyb2xsU2l6ZS5jIHx8IG92ZXJmbG93QmVoYXZpb3JDaGFuZ2VkIHx8IGJveFNpemluZ0NoYW5nZWQgfHwgaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZ0NoYW5nZWQgfHwgY3NzRGlyZWN0aW9uQ2hhbmdlZCB8fCBjbGlwQWx3YXlzQ2hhbmdlZCB8fCBoZWlnaHRBdXRvQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW2lzUlRMUmlnaHRdID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Vmlld3BvcnRDU1MgPSBmdW5jdGlvbiAoaG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzID0gZ2V0U2Nyb2xsYmFyVmFycyhob3Jpem9udGFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFyc0ludmVydGVkID0gZ2V0U2Nyb2xsYmFyVmFycyghaG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHh5ID0gc2Nyb2xsYmFyVmFycy5feF95O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBYWSA9IHNjcm9sbGJhclZhcnMuX1hfWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyRGlyZWN0aW9uID0gaG9yaXpvbnRhbCA/IF9zdHJCb3R0b20gOiBpc1JUTExlZnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW3N0ckRpcmVjdGlvbl0gPSBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50Qm9yZGVyU2l6ZVtzY3JvbGxiYXJWYXJzSW52ZXJ0ZWQuX3dfaF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc092ZXJmbG93W3h5XSAmJiBoaWRlT3ZlcmZsb3dbeHkgKyAncyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudENTU1tzdHJPdmVyZmxvdyArIFhZXSA9IF9zdHJTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nIHx8IF9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW3N0ckRpcmVjdGlvbl0gPSAtKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkW3h5XSA/IF9vdmVybGF5U2Nyb2xsYmFyRHVtbXlTaXplW3h5XSA6IF9uYXRpdmVTY3JvbGxiYXJTaXplW3h5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEJvcmRlclNpemVbc2Nyb2xsYmFyVmFyc0ludmVydGVkLl93X2hdID0gX25hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWRbeHldID8gX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemVbc2Nyb2xsYmFyVmFyc0ludmVydGVkLl94X3ldIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudENTU1tzdHJPdmVyZmxvdyArIFhZXSA9IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Vmlld3BvcnRDU1ModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWaWV3cG9ydENTUyhmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHNjcm9sbCBjb250YWluZXIgaXMgdG9vIHNtYWxsIGFuZCBpZiB0aGVyZSBpcyBhbnkgb3ZlcmZsb3cgd2l0aCBubyBvdmVybGF5IHNjcm9sbGJhciAoYW5kIHNjcm9sbGJhciBzdHlsaW5nIGlzbid0IHBvc3NpYmxlKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHZpZXdwb3J0IGVsZW1lbnQgZ3JlYXRlciBpbiBzaXplIChGaXJlZm94IGhpZGUgU2Nyb2xsYmFycyBmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGZpcmVmb3ggc3RhcnRzIGhpZGluZyBzY3JvbGxiYXJzIG9uIHRvbyBzbWFsbCBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGlzIGJlaGF2aW9yIHRoZSBvdmVyZmxvdyBjYWxjdWxhdGlvbiBtYXkgYmUgaW5jb3JyZWN0IG9yIHRoZSBzY3JvbGxiYXJzIHdvdWxkIGFwcGVhciBzdWRkZW5seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkyMjg0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKF92aWV3cG9ydFNpemUuaCA8IF9uYXRpdmVTY3JvbGxiYXJNaW5TaXplLnggfHwgX3ZpZXdwb3J0U2l6ZS53IDwgX25hdGl2ZVNjcm9sbGJhck1pblNpemUueSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoKGhhc092ZXJmbG93LnggJiYgaGlkZU92ZXJmbG93LnggJiYgIV9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLngpIHx8IChoYXNPdmVyZmxvdy55ICYmIGhpZGVPdmVyZmxvdy55ICYmICFfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC55KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnRDU1NbX3N0clBhZGRpbmdNaW51cyArIF9zdHJUb3BdID0gX25hdGl2ZVNjcm9sbGJhck1pblNpemUueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnRDU1NbX3N0ck1hcmdpbk1pbnVzICsgX3N0clRvcF0gPSAtX25hdGl2ZVNjcm9sbGJhck1pblNpemUueDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW19zdHJQYWRkaW5nTWludXMgKyBpc1JUTFJpZ2h0XSA9IF9uYXRpdmVTY3JvbGxiYXJNaW5TaXplLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW19zdHJNYXJnaW5NaW51cyArIGlzUlRMUmlnaHRdID0gLV9uYXRpdmVTY3JvbGxiYXJNaW5TaXplLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnRDU1NbX3N0clBhZGRpbmdNaW51cyArIF9zdHJUb3BdID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW19zdHJNYXJnaW5NaW51cyArIF9zdHJUb3BdID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW19zdHJQYWRkaW5nTWludXMgKyBpc1JUTFJpZ2h0XSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudENTU1tfc3RyTWFyZ2luTWludXMgKyBpc1JUTFJpZ2h0XSA9IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudENTU1tfc3RyUGFkZGluZ01pbnVzICsgaXNSVExMZWZ0XSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50Q1NTW19zdHJNYXJnaW5NaW51cyArIGlzUlRMTGVmdF0gPSBfc3RyRW1wdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGVyZSBpcyBhbnkgb3ZlcmZsb3cgKHggT1IgeSBheGlzKSBhbmQgdGhpcyBvdmVyZmxvdyBzaGFsbCBiZSBoaWRkZW4sIG1ha2Ugb3ZlcmZsb3cgaGlkZGVuLCBlbHNlIG92ZXJmbG93IHZpc2libGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaGFzT3ZlcmZsb3cueCAmJiBoaWRlT3ZlcmZsb3cueCkgfHwgKGhhc092ZXJmbG93LnkgJiYgaGlkZU92ZXJmbG93LnkpIHx8IGhpZGVPdmVyZmxvd0ZvcmNlVGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgaGlkZSBpZiBpcyBUZXh0YXJlYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSAmJiBoaWRlT3ZlcmZsb3dGb3JjZVRleHRhcmVhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdFbGVtZW50Q1NTW3N0ck92ZXJmbG93WF0gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0VsZW1lbnRDU1Nbc3RyT3ZlcmZsb3dZXSA9IHN0ckhpZGRlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsaXBBbHdheXMgfHwgKG92ZXJmbG93QmVoYXZpb3JJc1ZILnggfHwgb3ZlcmZsb3dCZWhhdmlvcklzVlMueCB8fCBvdmVyZmxvd0JlaGF2aW9ySXNWSC55IHx8IG92ZXJmbG93QmVoYXZpb3JJc1ZTLnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSB1bi1oaWRlIGlmIFRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0VsZW1lbnRDU1Nbc3RyT3ZlcmZsb3dYXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0VsZW1lbnRDU1Nbc3RyT3ZlcmZsb3dZXSA9IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnRDU1Nbc3RyT3ZlcmZsb3dYXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnRDU1Nbc3RyT3ZlcmZsb3dZXSA9IHN0clZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYWRkaW5nRWxlbWVudC5jc3MocGFkZGluZ0VsZW1lbnRDU1MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudC5jc3Modmlld3BvcnRFbGVtZW50Q1NTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudENTUyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yY2Ugc29mdCByZWRyYXcgaW4gd2Via2l0IGJlY2F1c2Ugd2l0aG91dCB0aGUgc2Nyb2xsYmFycyB3aWxsIG1heSBhcHBlYXIgYmVjYXVzZSBET00gd29udCBiZSByZWRyYXduIHVuZGVyIHNwZWNpYWwgY29uZGl0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChoYXNPdmVyZmxvdy5jIHx8IGJveFNpemluZ0NoYW5nZWQgfHwgd2lkdGhBdXRvQ2hhbmdlZCB8fCBoZWlnaHRBdXRvQ2hhbmdlZCkgJiYgIShfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTdHlsZSA9IF9jb250ZW50RWxlbWVudE5hdGl2ZVtMRVhJQ09OLnNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnc2NhbGUoMSknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTdHlsZS5kaXNwbGF5ID0gJ3J1bi1pbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtcCA9IF9jb250ZW50RWxlbWVudE5hdGl2ZVtMRVhJQ09OLm9IXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50U3R5bGUuZGlzcGxheSA9IF9zdHJFbXB0eTsgLy98fCBkdW1wOyAvL3VzZSBkdW1wIHRvIHByZXZlbnQgaXQgZnJvbSBkZWxldGlvbiBpZiBtaW5pZnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50U3R5bGUud2Via2l0VHJhbnNmb3JtID0gX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yY2UgaGFyZCByZWRyYXcgaW4gd2Via2l0IGlmIG5hdGl2ZSBvdmVybGFpZCBzY3JvbGxiYXJzIHNoYWxsIGFwcGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDaGFuZ2VkICYmIGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaG9zdEVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wID0gX2hvc3RFbGVtZW50TmF0aXZlW0xFWElDT04ub0hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZSB0byBkaXJlY3Rpb24gUlRMIGFuZCB3aWR0aCBhdXRvIEJ1Z2ZpeCBpbiBXZWJraXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy93aXRob3V0IHRoaXMgZml4LCB0aGUgRE9NIHN0aWxsIHRoaW5rcyB0aGUgc2Nyb2xsYmFyIGlzIExUUiBhbmQgdGh1cyB0aGUgY29udGVudCBpcyBzaGlmdGVkIHRvIHRoZSBsZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjc3NEaXJlY3Rpb25DaGFuZ2VkIHx8IHdpZHRoQXV0b0NoYW5nZWQgfHwgaGVpZ2h0QXV0b0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNSVEwgJiYgd2lkdGhBdXRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZsb2F0VG1wID0gX2NvbnRlbnRFbGVtZW50LmNzcyhfc3RyRmxvYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NMZWZ0V2l0aG91dEZsb2F0ID0gTUFUSC5yb3VuZChfY29udGVudEVsZW1lbnQuY3NzKF9zdHJGbG9hdCwgX3N0ckVtcHR5KS5jc3MoX3N0ckxlZnQsIF9zdHJFbXB0eSkucG9zaXRpb24oKS5sZWZ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEVsZW1lbnQuY3NzKF9zdHJGbG9hdCwgZmxvYXRUbXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NMZWZ0V2l0aEZsb2F0ID0gTUFUSC5yb3VuZChfY29udGVudEVsZW1lbnQucG9zaXRpb24oKS5sZWZ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc0xlZnRXaXRob3V0RmxvYXQgIT09IHBvc0xlZnRXaXRoRmxvYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Q1NTW19zdHJMZWZ0XSA9IHBvc0xlZnRXaXRob3V0RmxvYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudENTU1tfc3RyTGVmdF0gPSBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50LmNzcyhjb250ZW50RWxlbWVudENTUyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2hhbmRsZSBzY3JvbGwgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1RleHRhcmVhICYmIGNvbnRlbnRTaXplQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhSW5mbyA9IGdldFRleHRhcmVhSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRhcmVhSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYVJvd3NDaGFuZ2VkID0gX3RleHRhcmVhSW5mb0NhY2hlID09PSB1bmRlZmluZWQgPyB0cnVlIDogdGV4dGFyZWFJbmZvLl9yb3dzICE9PSBfdGV4dGFyZWFJbmZvQ2FjaGUuX3Jvd3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvclJvdyA9IHRleHRhcmVhSW5mby5fY3Vyc29yUm93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JDb2wgPSB0ZXh0YXJlYUluZm8uX2N1cnNvckNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkZXN0Um93ID0gdGV4dGFyZWFJbmZvLl93aWRlc3RSb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RSb3cgPSB0ZXh0YXJlYUluZm8uX3Jvd3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RDb2wgPSB0ZXh0YXJlYUluZm8uX2NvbHVtbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvclBvcyA9IHRleHRhcmVhSW5mby5fY3Vyc29yUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvck1heCA9IHRleHRhcmVhSW5mby5fY3Vyc29yTWF4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JJc0xhc3RQb3NpdGlvbiA9IChjdXJzb3JQb3MgPj0gY3Vyc29yTWF4ICYmIF90ZXh0YXJlYUhhc0ZvY3VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFTY3JvbGxBbW91bnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICghdGV4dGFyZWFBdXRvV3JhcHBpbmcgJiYgKGN1cnNvckNvbCA9PT0gbGFzdENvbCAmJiBjdXJzb3JSb3cgPT09IHdpZGVzdFJvdykpID8gX292ZXJmbG93QW1vdW50Q2FjaGUueCA6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAodGV4dGFyZWFBdXRvV3JhcHBpbmcgPyBjdXJzb3JJc0xhc3RQb3NpdGlvbiB8fCB0ZXh0YXJlYVJvd3NDaGFuZ2VkICYmIChwcmV2aW91c092ZXJmbG93QW1vdW50ID8gKGN1cnJTY3JvbGwueSA9PT0gcHJldmlvdXNPdmVyZmxvd0Ftb3VudC55KSA6IGZhbHNlKSA6IChjdXJzb3JJc0xhc3RQb3NpdGlvbiB8fCB0ZXh0YXJlYVJvd3NDaGFuZ2VkKSAmJiBjdXJzb3JSb3cgPT09IGxhc3RSb3cpID8gX292ZXJmbG93QW1vdW50Q2FjaGUueSA6IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyU2Nyb2xsLnggPSB0ZXh0YXJlYVNjcm9sbEFtb3VudC54ID4gLTEgPyAoX2lzUlRMICYmIF9ub3JtYWxpemVSVExDYWNoZSAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IuaSA/IDAgOiB0ZXh0YXJlYVNjcm9sbEFtb3VudC54KSA6IGN1cnJTY3JvbGwueDsgLy9pZiBpbnZlcnRlZCwgc2Nyb2xsIHRvIDAgLT4gbm9ybWFsaXplZCB0aGlzIG1lYW5zIHRvIG1heCBzY3JvbGwgb2Zmc2V0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJTY3JvbGwueSA9IHRleHRhcmVhU2Nyb2xsQW1vdW50LnkgPiAtMSA/IHRleHRhcmVhU2Nyb2xsQW1vdW50LnkgOiBjdXJyU2Nyb2xsLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGV4dGFyZWFJbmZvQ2FjaGUgPSB0ZXh0YXJlYUluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1JUTCAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IuaSAmJiBfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC55ICYmIGhhc092ZXJmbG93LnggJiYgX25vcm1hbGl6ZVJUTENhY2hlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyclNjcm9sbC54ICs9IF9jb250ZW50Qm9yZGVyU2l6ZS53IHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aEF1dG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaG9zdEVsZW1lbnRbX3N0clNjcm9sbExlZnRdKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0QXV0bylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudFtfc3RyU2Nyb2xsVG9wXSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudFtfc3RyU2Nyb2xsTGVmdF0oY3VyclNjcm9sbC54KVtfc3RyU2Nyb2xsVG9wXShjdXJyU2Nyb2xsLnkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zY3JvbGxiYXJzIG1hbmFnZW1lbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJzVmlzaWJpbGl0eVZpc2libGUgPSBzY3JvbGxiYXJzVmlzaWJpbGl0eSA9PT0gJ3YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc1Zpc2liaWxpdHlIaWRkZW4gPSBzY3JvbGxiYXJzVmlzaWJpbGl0eSA9PT0gJ2gnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyc1Zpc2liaWxpdHlBdXRvID0gc2Nyb2xsYmFyc1Zpc2liaWxpdHkgPT09ICdhJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2hTY3JvbGxiYXJzVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIChzaG93WCwgc2hvd1kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dZID0gc2hvd1kgPT09IHVuZGVmaW5lZCA/IHNob3dYIDogc2hvd1k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyQXBwZWFyYW5jZSh0cnVlLCBzaG93WCwgY2FuU2Nyb2xsLngpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyQXBwZWFyYW5jZShmYWxzZSwgc2hvd1ksIGNhblNjcm9sbC55KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW5hZ2UgY2xhc3MgbmFtZSB3aGljaCBpbmRpY2F0ZXMgc2Nyb2xsYWJsZSBvdmVyZmxvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVDbGFzcyhfaG9zdEVsZW1lbnQsIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3csIGhpZGVPdmVyZmxvdy54IHx8IGhpZGVPdmVyZmxvdy55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3MoX2hvc3RFbGVtZW50LCBfY2xhc3NOYW1lSG9zdE92ZXJmbG93WCwgaGlkZU92ZXJmbG93LngpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVDbGFzcyhfaG9zdEVsZW1lbnQsIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3dZLCBoaWRlT3ZlcmZsb3cueSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBvciByZW1vdmUgcnRsIGNsYXNzIG5hbWUgZm9yIHN0eWxpbmcgcHVycG9zZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNzc0RpcmVjdGlvbkNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJlbW92ZUNsYXNzKF9ob3N0RWxlbWVudCwgX2NsYXNzTmFtZUhvc3RSVEwsIF9pc1JUTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFuYWdlIHRoZSByZXNpemUgZmVhdHVyZSAoQ1NTMyByZXNpemUgXCJwb2x5ZmlsbFwiIGZvciB0aGlzIHBsdWdpbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc0JvZHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfaG9zdEVsZW1lbnQsIF9jbGFzc05hbWVIb3N0UmVzaXplRGlzYWJsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzaXplQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3MoX2hvc3RFbGVtZW50LCBfY2xhc3NOYW1lSG9zdFJlc2l6ZURpc2FibGVkLCBfcmVzaXplTm9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVDbGFzcyhfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudCwgX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lclJlc2l6ZSwgIV9yZXNpemVOb25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJlbW92ZUNsYXNzKF9zY3JvbGxiYXJDb3JuZXJFbGVtZW50LCBfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyUmVzaXplQiwgX3Jlc2l6ZUJvdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3MoX3Njcm9sbGJhckNvcm5lckVsZW1lbnQsIF9jbGFzc05hbWVTY3JvbGxiYXJDb3JuZXJSZXNpemVILCBfcmVzaXplSG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVDbGFzcyhfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudCwgX2NsYXNzTmFtZVNjcm9sbGJhckNvcm5lclJlc2l6ZVYsIF9yZXNpemVWZXJ0aWNhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFuYWdlIHRoZSBzY3JvbGxiYXJzIGdlbmVyYWwgdmlzaWJpbGl0eSArIHRoZSBzY3JvbGxiYXIgaW50ZXJhY3Rpdml0eSAodW51c2FibGUgY2xhc3MgbmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbGJhcnNWaXNpYmlsaXR5Q2hhbmdlZCB8fCBvdmVyZmxvd0JlaGF2aW9yQ2hhbmdlZCB8fCBoaWRlT3ZlcmZsb3cuYyB8fCBoYXNPdmVyZmxvdy5jIHx8IGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhfaG9zdEVsZW1lbnQsIF9jbGFzc05hbWVIb3N0U2Nyb2xsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzVmlzaWJpbGl0eShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzY3JvbGxiYXJzVmlzaWJpbGl0eUF1dG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyc1Zpc2liaWxpdHkoY2FuU2Nyb2xsLngsIGNhblNjcm9sbC55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjcm9sbGJhcnNWaXNpYmlsaXR5VmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzVmlzaWJpbGl0eSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjcm9sbGJhcnNWaXNpYmlsaXR5SGlkZGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhcnNWaXNpYmlsaXR5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW5hZ2UgdGhlIHNjcm9sbGJhcnMgYXV0byBoaWRlIGZlYXR1cmUgKGF1dG8gaGlkZSB0aGVtIGFmdGVyIHNwZWNpZmljIGFjdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxiYXJzQXV0b0hpZGVDaGFuZ2VkIHx8IGlnbm9yZU92ZXJsYXlTY3JvbGxiYXJIaWRpbmdDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cEhvc3RNb3VzZVRvdWNoRXZlbnRzKCFfc2Nyb2xsYmFyc0F1dG9IaWRlTGVhdmUgJiYgIV9zY3JvbGxiYXJzQXV0b0hpZGVNb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUoX3Njcm9sbGJhcnNBdXRvSGlkZU5ldmVyLCAhX3Njcm9sbGJhcnNBdXRvSGlkZU5ldmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW5hZ2Ugc2Nyb2xsYmFycyBoYW5kbGUgbGVuZ3RoICYgb2Zmc2V0IC0gZG9uJ3QgcmVtb3ZlIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9zdFNpemVDaGFuZ2VkIHx8IG92ZXJmbG93QW1vdW50LmMgfHwgaGVpZ2h0QXV0b0NoYW5nZWQgfHwgd2lkdGhBdXRvQ2hhbmdlZCB8fCByZXNpemVDaGFuZ2VkIHx8IGJveFNpemluZ0NoYW5nZWQgfHwgcGFkZGluZ0Fic29sdXRlQ2hhbmdlZCB8fCBpZ25vcmVPdmVybGF5U2Nyb2xsYmFySGlkaW5nQ2hhbmdlZCB8fCBjc3NEaXJlY3Rpb25DaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFySGFuZGxlTGVuZ3RoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhckhhbmRsZU9mZnNldCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVMZW5ndGgoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhckhhbmRsZU9mZnNldChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFuYWdlIGludGVyYWN0aXZpdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbGJhcnNDbGlja1Njcm9sbGluZ0NoYW5nZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyc0ludGVyYWN0aXZlKHRydWUsIHNjcm9sbGJhcnNDbGlja1Njcm9sbGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxiYXJzRHJhZ1Njcm9sbGluZ0NoYW5nZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyc0ludGVyYWN0aXZlKGZhbHNlLCBzY3JvbGxiYXJzRHJhZ1Njcm9sbGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NhbGxiYWNrczpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hDYWxsYmFjaygnb25EaXJlY3Rpb25DaGFuZ2VkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSVEw6IF9pc1JUTCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcjogY3NzRGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNzc0RpcmVjdGlvbkNoYW5nZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvbkhvc3RTaXplQ2hhbmdlZCcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBfaG9zdFNpemVDYWNoZS53LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBfaG9zdFNpemVDYWNoZS5oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGhvc3RTaXplQ2hhbmdlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2FsbGJhY2soJ29uQ29udGVudFNpemVDaGFuZ2VkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF9jb250ZW50U2Nyb2xsU2l6ZUNhY2hlLncsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF9jb250ZW50U2Nyb2xsU2l6ZUNhY2hlLmhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGVudFNpemVDaGFuZ2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hDYWxsYmFjaygnb25PdmVyZmxvd0NoYW5nZWQnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBoYXNPdmVyZmxvdy54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogaGFzT3ZlcmZsb3cueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTY3JvbGxhYmxlOiBoaWRlT3ZlcmZsb3cueHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5U2Nyb2xsYWJsZTogaGlkZU92ZXJmbG93LnlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcHBlZDogaGlkZU92ZXJmbG93LnggfHwgaGlkZU92ZXJmbG93LnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaGFzT3ZlcmZsb3cuYyB8fCBoaWRlT3ZlcmZsb3cuYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2FsbGJhY2soJ29uT3ZlcmZsb3dBbW91bnRDaGFuZ2VkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogb3ZlcmZsb3dBbW91bnQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IG92ZXJmbG93QW1vdW50LnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3ZlcmZsb3dBbW91bnQuYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2ZpeCBib2R5IG1pbiBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pc0JvZHkgJiYgX2JvZHlNaW5TaXplQ2FjaGUgJiYgKF9oYXNPdmVyZmxvd0NhY2hlLmMgfHwgX2JvZHlNaW5TaXplQ2FjaGUuYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pdHMgcG9zc2libGUgdGhhdCBubyBtaW4gc2l6ZSB3YXMgbWVhc3VyZWQgdW50aWwgbm93LCBiZWNhdXNlIHRoZSBjb250ZW50IGFycmFuZ2UgZWxlbWVudCB3YXMganVzdCBhZGRlZCBub3csIGluIHRoaXMgY2FzZSwgbWVhc3VyZSBub3cgdGhlIG1pbiBzaXplLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ib2R5TWluU2l6ZUNhY2hlLmYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5TWluU2l6ZUNoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkgJiYgX2hhc092ZXJmbG93Q2FjaGUueClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudC5jc3MoX3N0ck1pbk1pbnVzICsgX3N0cldpZHRoLCBfYm9keU1pblNpemVDYWNoZS53ICsgX292ZXJsYXlTY3JvbGxiYXJEdW1teVNpemUueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIF9oYXNPdmVyZmxvd0NhY2hlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEVsZW1lbnQuY3NzKF9zdHJNaW5NaW51cyArIF9zdHJIZWlnaHQsIF9ib2R5TWluU2l6ZUNhY2hlLmggKyBfb3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZS54KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2JvZHlNaW5TaXplQ2FjaGUuYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pbml0aWFsaXplZCAmJiBjaGFuZ2VkT3B0aW9ucy51cGRhdGVPbkxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudHNPbkxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZnJlZXplUmVzaXplT2JzZXJ2ZXIoX3NpemVPYnNlcnZlckVsZW1lbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZyZWV6ZVJlc2l6ZU9ic2VydmVyKF9zaXplQXV0b09ic2VydmVyRWxlbWVudCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvblVwZGF0ZWQnLCB7IGZvcmNlZDogZm9yY2UgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBVcGRhdGVzIHRoZSBmb3VuZCBlbGVtZW50cyBvZiB3aGljaCB0aGUgbG9hZCBldmVudCBzaGFsbCBiZSBoYW5kbGVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50c09uTG9hZCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pc1RleHRhcmVhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2hVcGRhdGVPbkxvYWQoZnVuY3Rpb24gKGksIHVwZGF0ZU9uTG9hZFNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudEVsZW1lbnQuZmluZCh1cGRhdGVPbkxvYWRTZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhIHVwZGF0ZU9uTG9hZENhbGxiYWNrIGFwcGxpZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ09NUEFUSUJJTElUWS5pbkEoZWwsIF91cGRhdGVPbkxvYWRFbG1zKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZU9uTG9hZEVsbXMucHVzaChlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZSQU1FV09SSyhlbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoX3VwZGF0ZU9uTG9hZEV2ZW50TmFtZSwgdXBkYXRlT25Mb2FkQ2FsbGJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oX3VwZGF0ZU9uTG9hZEV2ZW50TmFtZSwgdXBkYXRlT25Mb2FkQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy89PT09IE9wdGlvbnMgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBTZXRzIG5ldyBvcHRpb25zIGJ1dCBkb2Vzbid0IGNhbGwgdGhlIHVwZGF0ZSBtZXRob2QuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gbmV3T3B0aW9ucyBUaGUgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSBuZXcgb3B0aW9ucy5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfSBBIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgY2hhbmdlZCBvcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRPcHRpb25zKG5ld09wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdGVkT3B0cyA9IF9wbHVnaW5zT3B0aW9ucy5fdmFsaWRhdGUobmV3T3B0aW9ucywgX3BsdWdpbnNPcHRpb25zLl90ZW1wbGF0ZSwgdHJ1ZSwgX2N1cnJlbnRPcHRpb25zKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBfY3VycmVudE9wdGlvbnMgPSBleHRlbmREZWVwKHt9LCBfY3VycmVudE9wdGlvbnMsIHZhbGlkYXRlZE9wdHMuX2RlZmF1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jdXJyZW50UHJlcGFyZWRPcHRpb25zID0gZXh0ZW5kRGVlcCh7fSwgX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMsIHZhbGlkYXRlZE9wdHMuX3ByZXBhcmVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlZE9wdHMuX3ByZXBhcmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLz09PT0gU3RydWN0dXJlID09PT0vL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQnVpbGRzIG9yIGRlc3Ryb3lzIHRoZSB3cmFwcGVyIGFuZCBoZWxwZXIgRE9NIGVsZW1lbnRzLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGRlc3Ryb3kgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIERPTSBzaGFsbCBiZSBidWlsZCBvciBkZXN0cm95ZWQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQnVpbGRzIG9yIGRlc3Ryb3lzIHRoZSB3cmFwcGVyIGFuZCBoZWxwZXIgRE9NIGVsZW1lbnRzLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGRlc3Ryb3kgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIERPTSBzaGFsbCBiZSBidWlsZCBvciBkZXN0cm95ZWQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwU3RydWN0dXJlRE9NKGRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyUGFyZW50ID0gJ3BhcmVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZVJlc2l6ZU9ic2VydmVySG9zdCA9ICdvcy1yZXNpemUtb2JzZXJ2ZXItaG9zdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZVRleHRhcmVhRWxlbWVudEZ1bGwgPSBfY2xhc3NOYW1lVGV4dGFyZWFFbGVtZW50ICsgX3N0clNwYWNlICsgX2NsYXNzTmFtZVRleHRJbmhlcml0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYUNsYXNzID0gX2lzVGV4dGFyZWEgPyBfc3RyU3BhY2UgKyBfY2xhc3NOYW1lVGV4dEluaGVyaXQgOiBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkb3B0QXR0cnMgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy50ZXh0YXJlYS5pbmhlcml0ZWRBdHRycztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWRvcHRBdHRyc01hcCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcHBseUFkb3B0ZWRBdHRycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFwcGx5QWRvcHRlZEF0dHJzRWxtID0gZGVzdHJveSA/IF90YXJnZXRFbGVtZW50IDogX2hvc3RFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoKGFkb3B0QXR0cnNNYXAsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSh2YWx1ZSkgPT0gVFlQRVMucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gTEVYSUNPTi5jKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUFkb3B0ZWRBdHRyc0VsbS5hZGRDbGFzcyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUFkb3B0ZWRBdHRyc0VsbS5hdHRyKGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBob3N0RWxlbWVudENsYXNzTmFtZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0RWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZUhvc3RFbGVtZW50Rm9yZWlnbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZUhvc3RUZXh0YXJlYUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0UmVzaXplRGlzYWJsZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0UlRMLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lSG9zdFNjcm9sbGJhckhvcml6b250YWxIaWRkZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0U2Nyb2xsYmFyVmVydGljYWxIaWRkZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0VHJhbnNpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZUhvc3RTY3JvbGxpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc05hbWVIb3N0T3ZlcmZsb3dYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lSG9zdE92ZXJmbG93WSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZVRoZW1lTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZVRleHRhcmVhRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzTmFtZVRleHRJbmhlcml0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NOYW1lQ2FjaGVdLmpvaW4oX3N0clNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaG9zdEVsZW1lbnRDU1MgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgaG9zdCBlbGVtZW50IGFzIGZpcnN0IGVsZW1lbnQsIGJlY2F1c2UgdGhhdCdzIHRoZSBtb3N0IHVwcGVyIGVsZW1lbnQgYW5kIHJlcXVpcmVkIGZvciB0aGUgb3RoZXIgZWxlbWVudHNcclxuICAgICAgICAgICAgICAgICAgICBfaG9zdEVsZW1lbnQgPSBfaG9zdEVsZW1lbnQgfHwgKF9pc1RleHRhcmVhID8gKF9kb21FeGlzdHMgPyBfdGFyZ2V0RWxlbWVudFtzdHJQYXJlbnRdKClbc3RyUGFyZW50XSgpW3N0clBhcmVudF0oKVtzdHJQYXJlbnRdKCkgOiBGUkFNRVdPUksoZ2VuZXJhdGVEaXYoX2NsYXNzTmFtZUhvc3RUZXh0YXJlYUVsZW1lbnQpKSkgOiBfdGFyZ2V0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50ID0gX2NvbnRlbnRFbGVtZW50IHx8IHNlbGVjdE9yR2VuZXJhdGVEaXZCeUNsYXNzKF9jbGFzc05hbWVDb250ZW50RWxlbWVudCArIHRleHRhcmVhQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQgPSBfdmlld3BvcnRFbGVtZW50IHx8IHNlbGVjdE9yR2VuZXJhdGVEaXZCeUNsYXNzKF9jbGFzc05hbWVWaWV3cG9ydEVsZW1lbnQgKyB0ZXh0YXJlYUNsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICBfcGFkZGluZ0VsZW1lbnQgPSBfcGFkZGluZ0VsZW1lbnQgfHwgc2VsZWN0T3JHZW5lcmF0ZURpdkJ5Q2xhc3MoX2NsYXNzTmFtZVBhZGRpbmdFbGVtZW50ICsgdGV4dGFyZWFDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NpemVPYnNlcnZlckVsZW1lbnQgPSBfc2l6ZU9ic2VydmVyRWxlbWVudCB8fCBzZWxlY3RPckdlbmVyYXRlRGl2QnlDbGFzcyhjbGFzc05hbWVSZXNpemVPYnNlcnZlckhvc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUNvdmVyRWxlbWVudCA9IF90ZXh0YXJlYUNvdmVyRWxlbWVudCB8fCAoX2lzVGV4dGFyZWEgPyBzZWxlY3RPckdlbmVyYXRlRGl2QnlDbGFzcyhfY2xhc3NOYW1lVGV4dGFyZWFDb3ZlckVsZW1lbnQpIDogdW5kZWZpbmVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgdGhpcyBjbGFzcyB0byB3b3JrYXJvdW5kIGNsYXNzIGNoYW5naW5nIGlzc3VlcyB3aXRoIFVJIGZyYW1ld29ya3MgZXNwZWNpYWxseSBWdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2RvbUV4aXN0cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX2hvc3RFbGVtZW50LCBfY2xhc3NOYW1lSG9zdEVsZW1lbnRGb3JlaWduKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbiBkZXN0cm95LCByZW1vdmUgYWxsIGdlbmVyYXRlZCBjbGFzcyBuYW1lcyBmcm9tIHRoZSBob3N0IGVsZW1lbnQgYmVmb3JlIGNvbGxlY3RpbmcgdGhlIGFkb3B0ZWQgYXR0cmlidXRlcyBcclxuICAgICAgICAgICAgICAgICAgICAvL3RvIHByZXZlbnQgYWRvcHRpbmcgZ2VuZXJhdGVkIGNsYXNzIG5hbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKF9ob3N0RWxlbWVudCwgaG9zdEVsZW1lbnRDbGFzc05hbWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb2xsZWN0IGFsbCBhZG9wdGVkIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBhZG9wdEF0dHJzID0gdHlwZShhZG9wdEF0dHJzKSA9PSBUWVBFUy5zID8gYWRvcHRBdHRycy5zcGxpdChfc3RyU3BhY2UpIDogYWRvcHRBdHRycztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ09NUEFUSUJJTElUWS5pc0EoYWRvcHRBdHRycykgJiYgX2lzVGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaChhZG9wdEF0dHJzLCBmdW5jdGlvbiAoaSwgdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUodikgPT0gVFlQRVMucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkb3B0QXR0cnNNYXBbdl0gPSBkZXN0cm95ID8gX2hvc3RFbGVtZW50LmF0dHIodikgOiBfdGFyZ2V0RWxlbWVudC5hdHRyKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzVGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMuc2l6ZUF1dG9DYXBhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdEVsZW1lbnRDU1NbX3N0cldpZHRoXSA9IF90YXJnZXRFbGVtZW50LmNzcyhfc3RyV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RFbGVtZW50Q1NTW19zdHJIZWlnaHRdID0gX3RhcmdldEVsZW1lbnQuY3NzKF9zdHJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2RvbUV4aXN0cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGFyZ2V0RWxlbWVudC5hZGRDbGFzcyhfY2xhc3NOYW1lVGV4dEluaGVyaXQpLndyYXAoX2hvc3RFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2pRdWVyeSBjbG9uZXMgZWxlbWVudHMgaW4gd3JhcCBmdW5jdGlvbnMsIHNvIHdlIGhhdmUgdG8gc2VsZWN0IHRoZW0gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudCA9IF90YXJnZXRFbGVtZW50W3N0clBhcmVudF0oKS5jc3MoaG9zdEVsZW1lbnRDU1MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9kb21FeGlzdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIHRoZSBjb3JyZWN0IGNsYXNzIHRvIHRoZSB0YXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX3RhcmdldEVsZW1lbnQsIF9pc1RleHRhcmVhID8gY2xhc3NOYW1lVGV4dGFyZWFFbGVtZW50RnVsbCA6IF9jbGFzc05hbWVIb3N0RWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy93cmFwIHRoZSBjb250ZW50IGludG8gdGhlIGdlbmVyYXRlZCBlbGVtZW50cyB0byBjcmVhdGUgdGhlIHJlcXVpcmVkIERPTVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hvc3RFbGVtZW50LndyYXBJbm5lcihfY29udGVudEVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLndyYXBJbm5lcihfdmlld3BvcnRFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53cmFwSW5uZXIoX3BhZGRpbmdFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKF9zaXplT2JzZXJ2ZXJFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2pRdWVyeSBjbG9uZXMgZWxlbWVudHMgaW4gd3JhcCBmdW5jdGlvbnMsIHNvIHdlIGhhdmUgdG8gc2VsZWN0IHRoZW0gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudCA9IGZpbmRGaXJzdChfaG9zdEVsZW1lbnQsIF9zdHJEb3QgKyBfY2xhc3NOYW1lQ29udGVudEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudCA9IGZpbmRGaXJzdChfaG9zdEVsZW1lbnQsIF9zdHJEb3QgKyBfY2xhc3NOYW1lVmlld3BvcnRFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYWRkaW5nRWxlbWVudCA9IGZpbmRGaXJzdChfaG9zdEVsZW1lbnQsIF9zdHJEb3QgKyBfY2xhc3NOYW1lUGFkZGluZ0VsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudC5wcmVwZW5kKF90ZXh0YXJlYUNvdmVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlBZG9wdGVkQXR0cnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9uYXRpdmVTY3JvbGxiYXJTdHlsaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX3ZpZXdwb3J0RWxlbWVudCwgX2NsYXNzTmFtZVZpZXdwb3J0TmF0aXZlU2Nyb2xsYmFyc0ludmlzaWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfdmlld3BvcnRFbGVtZW50LCBfY2xhc3NOYW1lVmlld3BvcnROYXRpdmVTY3JvbGxiYXJzT3ZlcmxhaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzQm9keSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKF9odG1sRWxlbWVudCwgX2NsYXNzTmFtZUhUTUxFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaXplT2JzZXJ2ZXJFbGVtZW50TmF0aXZlID0gX3NpemVPYnNlcnZlckVsZW1lbnRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudE5hdGl2ZSA9IF9ob3N0RWxlbWVudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BhZGRpbmdFbGVtZW50TmF0aXZlID0gX3BhZGRpbmdFbGVtZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRFbGVtZW50TmF0aXZlID0gX3ZpZXdwb3J0RWxlbWVudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRFbGVtZW50TmF0aXZlID0gX2NvbnRlbnRFbGVtZW50WzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlld3BvcnRBdHRyc0Zyb21UYXJnZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZG9tRXhpc3RzICYmIF9pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhciBzaXplIG9ic2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2l6ZU9ic2VydmVyRWxlbWVudC5jaGlsZHJlbigpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBzdHlsZSBwcm9wZXJ0eSBhbmQgY2xhc3NlcyBmcm9tIGFscmVhZHkgZ2VuZXJhdGVkIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoKFtfcGFkZGluZ0VsZW1lbnQsIF92aWV3cG9ydEVsZW1lbnQsIF9jb250ZW50RWxlbWVudCwgX3RleHRhcmVhQ292ZXJFbGVtZW50XSwgZnVuY3Rpb24gKGksIGVsbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxtLnJlbW92ZUF0dHIoTEVYSUNPTi5zKSwgX2NsYXNzTmFtZXNEeW5hbWljRGVzdHJveSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgY2xhc3NlcyB0byB0aGUgaG9zdCBlbGVtZW50IHdoaWNoIHdhcyByZW1vdmVkIHByZXZpb3VzbHkgdG8gbWF0Y2ggdGhlIGV4cGVjdGVkIERPTVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX2hvc3RFbGVtZW50LCBfaXNUZXh0YXJlYSA/IF9jbGFzc05hbWVIb3N0VGV4dGFyZWFFbGVtZW50IDogX2NsYXNzTmFtZUhvc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHNpemUgb2JzZXJ2ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShfc2l6ZU9ic2VydmVyRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91bndyYXAgdGhlIGNvbnRlbnQgdG8gcmVzdG9yZSBET01cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50RWxlbWVudC5jb250ZW50cygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVud3JhcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVud3JhcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVud3JhcCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50LnVud3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShfaG9zdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShfdGV4dGFyZWFDb3ZlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5QWRvcHRlZEF0dHJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50LnJlbW92ZUF0dHIoTEVYSUNPTi5zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNCb2R5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoX2h0bWxFbGVtZW50LCBfY2xhc3NOYW1lSFRNTEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEFkZHMgb3IgcmVtb3ZlcyBhbGwgd3JhcHBlciBlbGVtZW50cyBpbnRlcmFjdGl2aXR5IGV2ZW50cy5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBkZXN0cm95IEluZGljYXRlcyB3aGV0aGVyIHRoZSBFdmVudHMgc2hhbGwgYmUgYWRkZWQgb3IgcmVtb3ZlZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBTdHJ1Y3R1cmVFdmVudHMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhS2V5RG93blJlc3RyaWN0ZWRLZXlDb2RlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjMsICAgIC8vRjEgdG8gRjEyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDMzLCAzNCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3BhZ2UgdXAsIHBhZ2UgZG93blxyXG4gICAgICAgICAgICAgICAgICAgICAgICAzNywgMzgsIDM5LCA0MCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZWZ0LCB1cCwgcmlnaHQsIGRvd24gYXJyb3dzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDE2LCAxNywgMTgsIDE5LCAyMCwgMTQ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1NoaWZ0LCBDdHJsLCBBbHQsIFBhdXNlLCBDYXBzTG9jaywgTnVtTG9ja1xyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhS2V5RG93bktleUNvZGVzTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYVVwZGF0ZUludGVydmFsSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFN0b3BUaW1lb3V0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFN0b3BEZWxheSA9IDE3NTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyRm9jdXMgPSAnZm9jdXMnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0YXJlYShkb0NsZWFySW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Jhc2UudXBkYXRlKF9zdHJBdXRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvQ2xlYXJJbnRlcnZhbCAmJiBfYXV0b1VwZGF0ZVJlY29tbWVuZGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0ZXh0YXJlYVVwZGF0ZUludGVydmFsSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0ZXh0YXJlYU9uU2Nyb2xsKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50W19zdHJTY3JvbGxMZWZ0XShfcnRsU2Nyb2xsQmVoYXZpb3IuaSAmJiBfbm9ybWFsaXplUlRMQ2FjaGUgPyA5OTk5OTk5IDogMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXRFbGVtZW50W19zdHJTY3JvbGxUb3BdKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLnBydkQoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLnN0cFAoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRleHRhcmVhT25Ecm9wKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZGVzdHJveWVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRleHRhcmVhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdGV4dGFyZWFPbkZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGV4dGFyZWFIYXNGb2N1cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKF9ob3N0RWxlbWVudCwgc3RyRm9jdXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0ZXh0YXJlYU9uRm9jdXNvdXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYUhhc0ZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhS2V5RG93bktleUNvZGVzTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhfaG9zdEVsZW1lbnQsIHN0ckZvY3VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dGFyZWEodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRleHRhcmVhT25LZXlEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbkFycmF5KGtleUNvZGUsIHRleHRhcmVhS2V5RG93blJlc3RyaWN0ZWRLZXlDb2RlcykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHRhcmVhS2V5RG93bktleUNvZGVzTGlzdFtMRVhJQ09OLmxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dGFyZWEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYVVwZGF0ZUludGVydmFsSUQgPSBzZXRJbnRlcnZhbCh1cGRhdGVUZXh0YXJlYSwgMTAwMCAvIDYwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbkFycmF5KGtleUNvZGUsIHRleHRhcmVhS2V5RG93bktleUNvZGVzTGlzdCkgPCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhS2V5RG93bktleUNvZGVzTGlzdC5wdXNoKGtleUNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRleHRhcmVhT25LZXlVcChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkoa2V5Q29kZSwgdGV4dGFyZWFLZXlEb3duS2V5Q29kZXNMaXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbkFycmF5KGtleUNvZGUsIHRleHRhcmVhS2V5RG93blJlc3RyaWN0ZWRLZXlDb2RlcykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUtleURvd25LZXlDb2Rlc0xpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGV4dGFyZWFLZXlEb3duS2V5Q29kZXNMaXN0W0xFWElDT04ubF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dGFyZWEodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY29udGVudE9uVHJhbnNpdGlvbkVuZChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2F1dG9VcGRhdGVDYWNoZSA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTaXplQWZmZWN0aW5nQ1NTUHJvcGVydHkoZXZlbnQucHJvcGVydHlOYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iYXNlLnVwZGF0ZShfc3RyQXV0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZpZXdwb3J0T25TY3JvbGwoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfc2xlZXBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxTdG9wVGltZW91dElkICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFN0b3BUaW1lb3V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmF0aXZlT3ZlcmxheVNjcm9sbGJhcnNBcmVBY3RpdmUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX2hvc3RFbGVtZW50LCBfY2xhc3NOYW1lSG9zdFNjcm9sbGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2FsbGJhY2soJ29uU2Nyb2xsU3RhcnQnLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBhIHNjcm9sbGJhcnMgaGFuZGxlIGdldHMgZHJhZ2dlZCwgdGhlIG1vdXNlbW92ZSBldmVudCBpcyByZXNwb25zaWJsZSBmb3IgcmVmcmVzaGluZyB0aGUgaGFuZGxlIG9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9iZWNhdXNlIGlmIENTUyBzY3JvbGwtc25hcCBpcyB1c2VkLCB0aGUgaGFuZGxlIG9mZnNldCBnZXRzIG9ubHkgcmVmcmVzaGVkIG9uIGV2ZXJ5IHNuYXAgcG9pbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBsb29rcyBsYWdneSAmIGNsdW5reSwgaXQgbG9va3MgbXVjaCBiZXR0ZXIgaWYgdGhlIG9mZnNldCByZWZyZXNoZXMgd2l0aCB0aGUgbW91c2Vtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhckhhbmRsZU9mZnNldChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvblNjcm9sbCcsIGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxTdG9wVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vT25TY3JvbGxTdG9wOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsU3RvcFRpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFN0b3BUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhcnNBdXRvSGlkZVNjcm9sbCB8fCBfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuYXRpdmVPdmVybGF5U2Nyb2xsYmFyc0FyZUFjdGl2ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoX2hvc3RFbGVtZW50LCBfY2xhc3NOYW1lSG9zdFNjcm9sbGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvblNjcm9sbFN0b3AnLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2Nyb2xsU3RvcERlbGF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNUZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX21zaWVWZXJzaW9uID4gOSB8fCAhX2F1dG9VcGRhdGVSZWNvbW1lbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIoX3RhcmdldEVsZW1lbnQsICdpbnB1dCcsIHVwZGF0ZVRleHRhcmVhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERlc3Ryb3lFdmVudExpc3RlbmVyKF90YXJnZXRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfc3RyS2V5RG93bkV2ZW50LCBfc3RyS2V5VXBFdmVudF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHRhcmVhT25LZXlEb3duLCB0ZXh0YXJlYU9uS2V5VXBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIoX3RhcmdldEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3N0clNjcm9sbCwgJ2Ryb3AnLCBzdHJGb2N1cywgc3RyRm9jdXMgKyAnb3V0J10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGV4dGFyZWFPblNjcm9sbCwgdGV4dGFyZWFPbkRyb3AsIHRleHRhcmVhT25Gb2N1cywgdGV4dGFyZWFPbkZvY3Vzb3V0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGREZXN0cm95RXZlbnRMaXN0ZW5lcihfY29udGVudEVsZW1lbnQsIF9zdHJUcmFuc2l0aW9uRW5kRXZlbnQsIGNvbnRlbnRPblRyYW5zaXRpb25FbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhZGREZXN0cm95RXZlbnRMaXN0ZW5lcihfdmlld3BvcnRFbGVtZW50LCBfc3RyU2Nyb2xsLCB2aWV3cG9ydE9uU2Nyb2xsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy89PT09IFNjcm9sbGJhcnMgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBCdWlsZHMgb3IgZGVzdHJveXMgYWxsIHNjcm9sbGJhciBET00gZWxlbWVudHMgKHNjcm9sbGJhciwgdHJhY2ssIGhhbmRsZSlcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBkZXN0cm95IEluZGljYXRlcyB3aGV0aGVyIHRoZSBET00gc2hhbGwgYmUgYnVpbGQgb3IgZGVzdHJveWVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXR1cFNjcm9sbGJhcnNET00oZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RPckdlbmVyYXRlU2Nyb2xsYmFyRE9NID0gZnVuY3Rpb24gKGlzSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyQ2xhc3NOYW1lID0gaXNIb3Jpem9udGFsID8gX2NsYXNzTmFtZVNjcm9sbGJhckhvcml6b250YWwgOiBfY2xhc3NOYW1lU2Nyb2xsYmFyVmVydGljYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXIgPSBzZWxlY3RPckdlbmVyYXRlRGl2QnlDbGFzcyhfY2xhc3NOYW1lU2Nyb2xsYmFyICsgX3N0clNwYWNlICsgc2Nyb2xsYmFyQ2xhc3NOYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gc2VsZWN0T3JHZW5lcmF0ZURpdkJ5Q2xhc3MoX2NsYXNzTmFtZVNjcm9sbGJhclRyYWNrLCBzY3JvbGxiYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gc2VsZWN0T3JHZW5lcmF0ZURpdkJ5Q2xhc3MoX2NsYXNzTmFtZVNjcm9sbGJhckhhbmRsZSwgc2Nyb2xsYmFyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2RvbUV4aXN0cyAmJiAhZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyLmFwcGVuZCh0cmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5hcHBlbmQoaGFuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXI6IHNjcm9sbGJhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmFjazogdHJhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGFuZGxlOiBoYW5kbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0U2Nyb2xsYmFyRE9NKGlzSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFycyA9IGdldFNjcm9sbGJhclZhcnMoaXNIb3Jpem9udGFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGJhciA9IHNjcm9sbGJhclZhcnMuX3Njcm9sbGJhcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gc2Nyb2xsYmFyVmFycy5fdHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBzY3JvbGxiYXJWYXJzLl9oYW5kbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RvbUV4aXN0cyAmJiBfaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2goW3Njcm9sbGJhciwgdHJhY2ssIGhhbmRsZV0sIGZ1bmN0aW9uIChpLCBlbG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbG0ucmVtb3ZlQXR0cihMRVhJQ09OLnMpLCBfY2xhc3NOYW1lc0R5bmFtaWNEZXN0cm95KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHNjcm9sbGJhciB8fCBzZWxlY3RPckdlbmVyYXRlU2Nyb2xsYmFyRE9NKGlzSG9yaXpvbnRhbCkuX3Njcm9sbGJhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhvcml6b250YWxFbGVtZW50cztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljYWxFbGVtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxFbGVtZW50cyA9IHNlbGVjdE9yR2VuZXJhdGVTY3JvbGxiYXJET00odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsRWxlbWVudHMgPSBzZWxlY3RPckdlbmVyYXRlU2Nyb2xsYmFyRE9NKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFySG9yaXpvbnRhbEVsZW1lbnQgPSBob3Jpem9udGFsRWxlbWVudHMuX3Njcm9sbGJhcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhckhvcml6b250YWxUcmFja0VsZW1lbnQgPSBob3Jpem9udGFsRWxlbWVudHMuX3RyYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFySG9yaXpvbnRhbEhhbmRsZUVsZW1lbnQgPSBob3Jpem9udGFsRWxlbWVudHMuX2hhbmRsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhclZlcnRpY2FsRWxlbWVudCA9IHZlcnRpY2FsRWxlbWVudHMuX3Njcm9sbGJhcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhclZlcnRpY2FsVHJhY2tFbGVtZW50ID0gdmVydGljYWxFbGVtZW50cy5fdHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJWZXJ0aWNhbEhhbmRsZUVsZW1lbnQgPSB2ZXJ0aWNhbEVsZW1lbnRzLl9oYW5kbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9kb21FeGlzdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYWRkaW5nRWxlbWVudC5hZnRlcihfc2Nyb2xsYmFyVmVydGljYWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYWRkaW5nRWxlbWVudC5hZnRlcihfc2Nyb2xsYmFySG9yaXpvbnRhbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFNjcm9sbGJhckRPTSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRTY3JvbGxiYXJET00oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhbGwgc2Nyb2xsYmFyIGludGVyYWN0aXZpdHkgZXZlbnRzLiAodHJhY2sgYW5kIGhhbmRsZSBkcmFnZ2luZywgY2xpY2tpbmcsIHNjcm9sbGluZylcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBpc0hvcml6b250YWwgVHJ1ZSBpZiB0aGUgdGFyZ2V0IHNjcm9sbGJhciBpcyB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIsIGZhbHNlIGlmIHRoZSB0YXJnZXQgc2Nyb2xsYmFyIGlzIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwU2Nyb2xsYmFyRXZlbnRzKGlzSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzID0gZ2V0U2Nyb2xsYmFyVmFycyhpc0hvcml6b250YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzSW5mbyA9IHNjcm9sbGJhclZhcnMuX2luZm87XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc2lkZUlGcmFtZSA9IF93aW5kb3dFbGVtZW50TmF0aXZlLnRvcCAhPT0gX3dpbmRvd0VsZW1lbnROYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHh5ID0gc2Nyb2xsYmFyVmFycy5feF95O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBYWSA9IHNjcm9sbGJhclZhcnMuX1hfWTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gX3N0clNjcm9sbCArIHNjcm9sbGJhclZhcnMuX0xlZnRfVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJBY3RpdmUgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyU25hcEhhbmRsZSA9ICdzbmFwSGFuZGxlJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRHVyYXRpb25GYWN0b3IgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmNyZWFzZURlY3JlYXNlU2Nyb2xsQW1vdW50S2V5Q29kZXMgPSBbMTYsIDE3XTsgLy9zaGlmdCwgY3RybFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFja1RpbWVvdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlRG93blNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW91c2VEb3duT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb3VzZURvd25JbnZlcnRlZFNjYWxlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9tc2llVmVyc2lvbiAmJiBpbnNpZGVJRnJhbWUgPyBldmVudFsnc2NyZWVuJyArIFhZXSA6IENPTVBBVElCSUxJVFkucGFnZShldmVudClbeHldOyAvL3VzZSBzY3JlZW4gY29vcmRpbmF0ZXMgaW4gRURHRSAmIElFIGJlY2F1c2UgdGhlIHBhZ2UgdmFsdWVzIGFyZSBpbmNvcnJlY3QgaW4gZnJhbWVzLlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQcmVwYXJlZFNjcm9sbGJhcnNPcHRpb24obmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMuc2Nyb2xsYmFyc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5jcmVhc2VUcmFja1Njcm9sbEFtb3VudCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsRHVyYXRpb25GYWN0b3IgPSAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlY3JlYXNlVHJhY2tTY3JvbGxBbW91bnQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbER1cmF0aW9uRmFjdG9yID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRLZXlEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbkFycmF5KGV2ZW50LmtleUNvZGUsIGluY3JlYXNlRGVjcmVhc2VTY3JvbGxBbW91bnRLZXlDb2RlcykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlVHJhY2tTY3JvbGxBbW91bnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRLZXlVcChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5BcnJheShldmVudC5rZXlDb2RlLCBpbmNyZWFzZURlY3JlYXNlU2Nyb2xsQW1vdW50S2V5Q29kZXMpID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNyZWFzZVRyYWNrU2Nyb2xsQW1vdW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uTW91c2VUb3VjaERvd25Db250aW51ZShldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1RvdWNoRXZlbnQgPSBvcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zbGVlcGluZyB8fCBfZGVzdHJveWVkIHx8IG5hdGl2ZU92ZXJsYXlTY3JvbGxiYXJzQXJlQWN0aXZlKCkgfHwgIV9zY3JvbGxiYXJzRHJhZ1Njcm9sbGluZ0NhY2hlIHx8IChpc1RvdWNoRXZlbnQgJiYgIWdldFByZXBhcmVkU2Nyb2xsYmFyc09wdGlvbigndG91Y2hTdXBwb3J0JykpID8gZmFsc2UgOiBDT01QQVRJQklMSVRZLm1CdG4oZXZlbnQpID09PSAxIHx8IGlzVG91Y2hFdmVudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnREcmFnTW92ZShldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25Nb3VzZVRvdWNoRG93bkNvbnRpbnVlKGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrTGVuZ3RoID0gc2Nyb2xsYmFyVmFyc0luZm8uX3RyYWNrTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUxlbmd0aCA9IHNjcm9sbGJhclZhcnNJbmZvLl9oYW5kbGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsUmFuZ2UgPSBzY3JvbGxiYXJWYXJzSW5mby5fbWF4U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFJhdyA9IChnZXRQb2ludGVyUG9zaXRpb24oZXZlbnQpIC0gbW91c2VEb3duT2Zmc2V0KSAqIG1vdXNlRG93bkludmVydGVkU2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGVsdGFQZXJjZW50ID0gc2Nyb2xsUmF3IC8gKHRyYWNrTGVuZ3RoIC0gaGFuZGxlTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxEZWx0YSA9IChzY3JvbGxSYW5nZSAqIHNjcm9sbERlbHRhUGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxEZWx0YSA9IGlzRmluaXRlKHNjcm9sbERlbHRhKSA/IHNjcm9sbERlbHRhIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNSVEwgJiYgaXNIb3Jpem9udGFsICYmICFfcnRsU2Nyb2xsQmVoYXZpb3IuaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxEZWx0YSAqPSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRFbGVtZW50W3Njcm9sbF0oTUFUSC5yb3VuZChtb3VzZURvd25TY3JvbGwgKyBzY3JvbGxEZWx0YSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2Nyb2xsYmFyc0hhbmRsZXNEZWZpbmVTY3JvbGxQb3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhckhhbmRsZU9mZnNldChpc0hvcml6b250YWwsIG1vdXNlRG93blNjcm9sbCArIHNjcm9sbERlbHRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9zdXBwb3J0UGFzc2l2ZUV2ZW50cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLnBydkQoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TW91c2VUb3VjaFVwKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRNb3VzZVRvdWNoVXAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCBldmVudC5vcmlnaW5hbEV2ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW19zdHJNb3VzZVRvdWNoTW92ZUV2ZW50LCBfc3RyTW91c2VUb3VjaFVwRXZlbnQsIF9zdHJLZXlEb3duRXZlbnQsIF9zdHJLZXlVcEV2ZW50LCBfc3RyU2VsZWN0U3RhcnRFdmVudF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZG9jdW1lbnREcmFnTW92ZSwgZG9jdW1lbnRNb3VzZVRvdWNoVXAsIGRvY3VtZW50S2V5RG93biwgZG9jdW1lbnRLZXlVcCwgZG9jdW1lbnRPblNlbGVjdFN0YXJ0XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQoaXNIb3Jpem9udGFsLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhfYm9keUVsZW1lbnQsIF9jbGFzc05hbWVEcmFnZ2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjcm9sbGJhclZhcnMuX2hhbmRsZSwgc3RyQWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2Nyb2xsYmFyVmFycy5fdHJhY2ssIHN0ckFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjcm9sbGJhclZhcnMuX3Njcm9sbGJhciwgc3RyQWN0aXZlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93blNjcm9sbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VEb3duT2Zmc2V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZURvd25JbnZlcnRlZFNjYWxlID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY3JlYXNlVHJhY2tTY3JvbGxBbW91bnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFja1RpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Jhc2Uuc2Nyb2xsU3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRyYWNrVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1RpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBfaG9zdEVsZW1lbnROYXRpdmVbTEVYSUNPTi5iQ1JdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW91c2VJbnNpZGVIb3N0ID0gZXZlbnQuY2xpZW50WCA+PSByZWN0LmxlZnQgJiYgZXZlbnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2ZW50LmNsaWVudFkgPj0gcmVjdC50b3AgJiYgZXZlbnQuY2xpZW50WSA8PSByZWN0LmJvdHRvbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG1vdXNlIGlzIG91dHNpZGUgaG9zdCBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vdXNlSW5zaWRlSG9zdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0T25Nb3VzZUxlYXZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcm9sbGJhcnNBdXRvSGlkZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb25IYW5kbGVNb3VzZVRvdWNoRG93bihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25Nb3VzZVRvdWNoRG93bkNvbnRpbnVlKGV2ZW50KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlTW91c2VUb3VjaERvd25BY3Rpb24oZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvbkhhbmRsZU1vdXNlVG91Y2hEb3duQWN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93blNjcm9sbCA9IF92aWV3cG9ydEVsZW1lbnRbc2Nyb2xsXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZURvd25TY3JvbGwgPSBpc05hTihtb3VzZURvd25TY3JvbGwpID8gMCA6IG1vdXNlRG93blNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1JUTCAmJiBpc0hvcml6b250YWwgJiYgIV9ydGxTY3JvbGxCZWhhdmlvci5uIHx8ICFfaXNSVEwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZURvd25TY3JvbGwgPSBtb3VzZURvd25TY3JvbGwgPCAwID8gMCA6IG1vdXNlRG93blNjcm9sbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93bkludmVydGVkU2NhbGUgPSBnZXRIb3N0RWxlbWVudEludmVydGVkU2NhbGUoKVt4eV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93bk9mZnNldCA9IGdldFBvaW50ZXJQb3NpdGlvbihldmVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyc0hhbmRsZXNEZWZpbmVTY3JvbGxQb3MgPSAhZ2V0UHJlcGFyZWRTY3JvbGxiYXJzT3B0aW9uKHN0clNuYXBIYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfYm9keUVsZW1lbnQsIF9jbGFzc05hbWVEcmFnZ2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjcm9sbGJhclZhcnMuX2hhbmRsZSwgc3RyQWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2Nyb2xsYmFyVmFycy5fc2Nyb2xsYmFyLCBzdHJBY3RpdmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW19zdHJNb3VzZVRvdWNoTW92ZUV2ZW50LCBfc3RyTW91c2VUb3VjaFVwRXZlbnQsIF9zdHJTZWxlY3RTdGFydEV2ZW50XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkb2N1bWVudERyYWdNb3ZlLCBkb2N1bWVudE1vdXNlVG91Y2hVcCwgZG9jdW1lbnRPblNlbGVjdFN0YXJ0XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX21zaWVWZXJzaW9uIHx8ICFfZG9jdW1lbnRNaXhlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkucHJ2RChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkuc3RwUChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uVHJhY2tNb3VzZVRvdWNoRG93bihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25Nb3VzZVRvdWNoRG93bkNvbnRpbnVlKGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpc3RhbmNlID0gTUFUSC5yb3VuZChfdmlld3BvcnRTaXplW3Njcm9sbGJhclZhcnMuX3dfaF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrT2Zmc2V0ID0gc2Nyb2xsYmFyVmFycy5fdHJhY2sub2Zmc2V0KClbc2Nyb2xsYmFyVmFycy5fbGVmdF90b3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmxLZXkgPSBldmVudC5jdHJsS2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbnRTY3JvbGwgPSBldmVudC5zaGlmdEtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW50U2Nyb2xsVHJhbnNpdGlvbiA9IGluc3RhbnRTY3JvbGwgJiYgY3RybEtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0ZpcnN0SXRlcmF0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlYXNpbmcgPSAnbGluZWFyJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNyZWFzZVNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZENvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxBY3Rpb25GaW5zaXNoZWQgPSBmdW5jdGlvbiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2Nyb2xsYmFyc0hhbmRsZXNEZWZpbmVTY3JvbGxQb3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQoaXNIb3Jpem9udGFsLCB0cmFuc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQWN0aW9uSW5zdGFudEZpbmlzaGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEFjdGlvbkZpbnNpc2hlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGFuZGxlTW91c2VUb3VjaERvd25BY3Rpb24oZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3VzZU9mZnNldCA9IChtb3VzZURvd25PZmZzZXQgLSB0cmFja09mZnNldCkgKiBtb3VzZURvd25JbnZlcnRlZFNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlT2Zmc2V0ID0gc2Nyb2xsYmFyVmFyc0luZm8uX2hhbmRsZU9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrTGVuZ3RoID0gc2Nyb2xsYmFyVmFyc0luZm8uX3RyYWNrTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlTGVuZ3RoID0gc2Nyb2xsYmFyVmFyc0luZm8uX2hhbmRsZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFJhbmdlID0gc2Nyb2xsYmFyVmFyc0luZm8uX21heFNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJTY3JvbGwgPSBzY3JvbGxiYXJWYXJzSW5mby5fY3VycmVudFNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbER1cmF0aW9uID0gMjcwICogc2Nyb2xsRHVyYXRpb25GYWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0RGVsYXkgPSBpc0ZpcnN0SXRlcmF0aW9uID8gTUFUSC5tYXgoNDAwLCBzY3JvbGxEdXJhdGlvbikgOiBzY3JvbGxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbnRTY3JvbGxQb3NpdGlvbiA9IHNjcm9sbFJhbmdlICogKChtb3VzZU9mZnNldCAtIChoYW5kbGVMZW5ndGggLyAyKSkgLyAodHJhY2tMZW5ndGggLSBoYW5kbGVMZW5ndGgpKTsgLy8gMTAwJSAqIHBvc2l0aW9uUGVyY2VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnRsSXNOb3JtYWwgPSBfaXNSVEwgJiYgaXNIb3Jpem9udGFsICYmICgoIV9ydGxTY3JvbGxCZWhhdmlvci5pICYmICFfcnRsU2Nyb2xsQmVoYXZpb3IubikgfHwgX25vcm1hbGl6ZVJUTENhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY3JlYXNlU2Nyb2xsQ29uZGl0aW9uID0gcnRsSXNOb3JtYWwgPyBoYW5kbGVPZmZzZXQgPCBtb3VzZU9mZnNldCA6IGhhbmRsZU9mZnNldCA+IG1vdXNlT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25PYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uIChub3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhcnNIYW5kbGVzRGVmaW5lU2Nyb2xsUG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnRbc2Nyb2xsXShub3cpOyAvL2h0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2lzc3Vlcy80MzQwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQoaXNIb3Jpem9udGFsLCBub3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudFNjcm9sbFBvc2l0aW9uID0gaXNGaW5pdGUoaW5zdGFudFNjcm9sbFBvc2l0aW9uKSA/IGluc3RhbnRTY3JvbGxQb3NpdGlvbiA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRTY3JvbGxQb3NpdGlvbiA9IF9pc1JUTCAmJiBpc0hvcml6b250YWwgJiYgIV9ydGxTY3JvbGxCZWhhdmlvci5pID8gKHNjcm9sbFJhbmdlIC0gaW5zdGFudFNjcm9sbFBvc2l0aW9uKSA6IGluc3RhbnRTY3JvbGxQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vX2Jhc2Uuc2Nyb2xsU3RvcCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbnRTY3JvbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnRbc2Nyb2xsXShpbnN0YW50U2Nyb2xsUG9zaXRpb24pOyAvL3Njcm9sbCBpbnN0YW50bHkgdG8gbmV3IHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFudFNjcm9sbFRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFmdGVyIGluc3RhbnQgc2Nyb2xsIChpbiBjYXNlIENTUyBTbmFwIFBvaW50cyBhcmUgdXNlZCkgdG8gZ2V0IHRoZSBjb3JyZWN0IHNuYXBwZWQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbmQgdGhlIGFuaW1hdGlvbiBzdG9wcyBhdCB0aGUgY29ycmVjdCBwb2ludFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRTY3JvbGxQb3NpdGlvbiA9IF92aWV3cG9ydEVsZW1lbnRbc2Nyb2xsXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Nyb2xsIGJhY2sgdG8gdGhlIHBvc2l0aW9uIGJlZm9yZSBpbnN0YW50IHNjcm9sbGluZyBzbyBhbmltYXRpb24gY2FuIGJlIHBlcmZvcm1lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnRbc2Nyb2xsXShjdXJyU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudFNjcm9sbFBvc2l0aW9uID0gcnRsSXNOb3JtYWwgJiYgX3J0bFNjcm9sbEJlaGF2aW9yLmkgPyAoc2Nyb2xsUmFuZ2UgLSBpbnN0YW50U2Nyb2xsUG9zaXRpb24pIDogaW5zdGFudFNjcm9sbFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRTY3JvbGxQb3NpdGlvbiA9IHJ0bElzTm9ybWFsICYmIF9ydGxTY3JvbGxCZWhhdmlvci5uID8gLWluc3RhbnRTY3JvbGxQb3NpdGlvbiA6IGluc3RhbnRTY3JvbGxQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsT2JqW3h5XSA9IGluc3RhbnRTY3JvbGxQb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYmFzZS5zY3JvbGwoc2Nyb2xsT2JqLCBleHRlbmREZWVwKGFuaW1hdGlvbk9iaiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTMwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogc2Nyb2xsQWN0aW9uSW5zdGFudEZpbmlzaGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEFjdGlvbkluc3RhbnRGaW5pc2hlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVhc2VTY3JvbGwgPSBpc0ZpcnN0SXRlcmF0aW9uID8gZGVjcmVhc2VTY3JvbGxDb25kaXRpb24gOiBkZWNyZWFzZVNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkQ29uZGl0aW9uID0gcnRsSXNOb3JtYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkZWNyZWFzZVNjcm9sbCA/IGhhbmRsZU9mZnNldCArIGhhbmRsZUxlbmd0aCA+PSBtb3VzZU9mZnNldCA6IGhhbmRsZU9mZnNldCA8PSBtb3VzZU9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChkZWNyZWFzZVNjcm9sbCA/IGhhbmRsZU9mZnNldCA8PSBtb3VzZU9mZnNldCA6IGhhbmRsZU9mZnNldCArIGhhbmRsZUxlbmd0aCA+PSBtb3VzZU9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRyYWNrVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Jhc2Uuc2Nyb2xsU3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrVGltZW91dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxBY3Rpb25GaW5zaXNoZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1RpbWVvdXQgPSBzZXRUaW1lb3V0KHNjcm9sbEFjdGlvbiwgdGltZW91dERlbGF5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsT2JqW3h5XSA9IChkZWNyZWFzZVNjcm9sbCA/ICctPScgOiAnKz0nKSArIHNjcm9sbERpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iYXNlLnNjcm9sbChzY3JvbGxPYmosIGV4dGVuZERlZXAoYW5pbWF0aW9uT2JqLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzY3JvbGxEdXJhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRmlyc3RJdGVyYXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybEtleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZVRyYWNrU2Nyb2xsQW1vdW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VEb3duSW52ZXJ0ZWRTY2FsZSA9IGdldEhvc3RFbGVtZW50SW52ZXJ0ZWRTY2FsZSgpW3h5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93bk9mZnNldCA9IENPTVBBVElCSUxJVFkucGFnZShldmVudClbeHldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzSGFuZGxlc0RlZmluZVNjcm9sbFBvcyA9ICFnZXRQcmVwYXJlZFNjcm9sbGJhcnNPcHRpb24oc3RyU25hcEhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfYm9keUVsZW1lbnQsIF9jbGFzc05hbWVEcmFnZ2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhzY3JvbGxiYXJWYXJzLl90cmFjaywgc3RyQWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjcm9sbGJhclZhcnMuX3Njcm9sbGJhciwgc3RyQWN0aXZlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFJlc3BvbnNpdmVFdmVudExpc3RlbmVyKF9kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW19zdHJNb3VzZVRvdWNoVXBFdmVudCwgX3N0cktleURvd25FdmVudCwgX3N0cktleVVwRXZlbnQsIF9zdHJTZWxlY3RTdGFydEV2ZW50XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZG9jdW1lbnRNb3VzZVRvdWNoVXAsIGRvY3VtZW50S2V5RG93biwgZG9jdW1lbnRLZXlVcCwgZG9jdW1lbnRPblNlbGVjdFN0YXJ0XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QQVRJQklMSVRZLnBydkQoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUEFUSUJJTElUWS5zdHBQKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvblRyYWNrTW91c2VUb3VjaEVudGVyKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGJvdGggc2Nyb2xsYmFycyB3aWxsIHN0YXkgdmlzaWJsZSBpZiBvbmUgc2Nyb2xsYmFyIGlzIGhvdmVyZWQgaWYgYXV0b0hpZGUgaXMgXCJzY3JvbGxcIiBvciBcIm1vdmVcIi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhcnNIYW5kbGVIb3ZlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFyc0F1dG9IaWRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvblRyYWNrTW91c2VUb3VjaExlYXZlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxiYXJzSGFuZGxlSG92ZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhcnNBdXRvSGlkZVNjcm9sbCB8fCBfc2Nyb2xsYmFyc0F1dG9IaWRlTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJzQXV0b0hpZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvblNjcm9sbGJhck1vdXNlVG91Y2hEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkuc3RwUChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBhZGREZXN0cm95RXZlbnRMaXN0ZW5lcihzY3JvbGxiYXJWYXJzLl9oYW5kbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHJNb3VzZVRvdWNoRG93bkV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkhhbmRsZU1vdXNlVG91Y2hEb3duKTtcclxuICAgICAgICAgICAgICAgICAgICBhZGREZXN0cm95RXZlbnRMaXN0ZW5lcihzY3JvbGxiYXJWYXJzLl90cmFjayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW19zdHJNb3VzZVRvdWNoRG93bkV2ZW50LCBfc3RyTW91c2VFbnRlciwgX3N0ck1vdXNlTGVhdmVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbb25UcmFja01vdXNlVG91Y2hEb3duLCBvblRyYWNrTW91c2VUb3VjaEVudGVyLCBvblRyYWNrTW91c2VUb3VjaExlYXZlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIoc2Nyb2xsYmFyVmFycy5fc2Nyb2xsYmFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyTW91c2VUb3VjaERvd25FdmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY3JvbGxiYXJNb3VzZVRvdWNoRG93bik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydFRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIoc2Nyb2xsYmFyVmFycy5fc2Nyb2xsYmFyLCBfc3RyVHJhbnNpdGlvbkVuZEV2ZW50LCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHNjcm9sbGJhclZhcnMuX3Njcm9sbGJhclswXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFySGFuZGxlTGVuZ3RoKGlzSG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2Nyb2xsYmFySGFuZGxlT2Zmc2V0KGlzSG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBzY3JvbGxiYXIgYW5kIGFwcGxpZWQgYSBjbGFzcyBuYW1lIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgc2Nyb2xsYmFyIGlzIHNjcm9sbGFibGUgb3Igbm90LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbCBUcnVlIGlmIHRoZSBob3Jpem9udGFsIHNjcm9sbGJhciBpcyB0aGUgdGFyZ2V0LCBmYWxzZSBpZiB0aGUgdmVydGljYWwgc2Nyb2xsYmFyIGlzIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gc2hhbGxCZVZpc2libGUgVHJ1ZSBpZiB0aGUgc2Nyb2xsYmFyIHNoYWxsIGJlIHNob3duLCBmYWxzZSBpZiBoaWRkZW4uXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY2FuU2Nyb2xsIFRydWUgaWYgdGhlIHNjcm9sbGJhciBpcyBzY3JvbGxhYmxlLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hTY3JvbGxiYXJBcHBlYXJhbmNlKGlzSG9yaXpvbnRhbCwgc2hhbGxCZVZpc2libGUsIGNhblNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJIaWRkZW5DbGFzc05hbWUgPSBpc0hvcml6b250YWwgPyBfY2xhc3NOYW1lSG9zdFNjcm9sbGJhckhvcml6b250YWxIaWRkZW4gOiBfY2xhc3NOYW1lSG9zdFNjcm9sbGJhclZlcnRpY2FsSGlkZGVuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJFbGVtZW50ID0gaXNIb3Jpem9udGFsID8gX3Njcm9sbGJhckhvcml6b250YWxFbGVtZW50IDogX3Njcm9sbGJhclZlcnRpY2FsRWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3MoX2hvc3RFbGVtZW50LCBzY3JvbGxiYXJIaWRkZW5DbGFzc05hbWUsICFzaGFsbEJlVmlzaWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3Moc2Nyb2xsYmFyRWxlbWVudCwgX2NsYXNzTmFtZVNjcm9sbGJhclVudXNhYmxlLCAhY2FuU2Nyb2xsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEF1dG9zaG93cyAvIGF1dG9oaWRlcyBib3RoIHNjcm9sbGJhcnMgd2l0aC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBzaGFsbEJlVmlzaWJsZSBUcnVlIGlmIHRoZSBzY3JvbGxiYXJzIHNoYWxsIGJlIGF1dG9zaG93biAob25seSB0aGUgY2FzZSBpZiB0aGV5IGFyZSBoaWRkZW4gYnkgYSBhdXRvaGlkZSksIGZhbHNlIGlmIHRoZSBzaGFsbCBiZSBhdXRvIGhpZGRlbi5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBkZWxheWZyZWUgVHJ1ZSBpZiB0aGUgc2Nyb2xsYmFycyBzaGFsbCBiZSBoaWRkZW4gd2l0aG91dCBhIGRlbGF5LCBmYWxzZSBvciB1bmRlZmluZWQgb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZWZyZXNoU2Nyb2xsYmFyc0F1dG9IaWRlKHNoYWxsQmVWaXNpYmxlLCBkZWxheWZyZWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3Njcm9sbGJhcnNBdXRvSGlkZVRpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWxsQmVWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoX2hhc092ZXJmbG93Q2FjaGUueCAmJiBfaGlkZU92ZXJmbG93Q2FjaGUueHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKF9zY3JvbGxiYXJIb3Jpem9udGFsRWxlbWVudCwgX2NsYXNzTmFtZVNjcm9sbGJhckF1dG9IaWRkZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKF9oYXNPdmVyZmxvd0NhY2hlLnkgJiYgX2hpZGVPdmVyZmxvd0NhY2hlLnlzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhfc2Nyb2xsYmFyVmVydGljYWxFbGVtZW50LCBfY2xhc3NOYW1lU2Nyb2xsYmFyQXV0b0hpZGRlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW55QWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyQWN0aXZlID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfc2Nyb2xsYmFyc0hhbmRsZUhvdmVyZWQgJiYgIV9kZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlBY3RpdmUgPSBfc2Nyb2xsYmFySG9yaXpvbnRhbEhhbmRsZUVsZW1lbnQuaGFzQ2xhc3Moc3RyQWN0aXZlKSB8fCBfc2Nyb2xsYmFyVmVydGljYWxIYW5kbGVFbGVtZW50Lmhhc0NsYXNzKHN0ckFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbnlBY3RpdmUgJiYgKF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZUxlYXZlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX3Njcm9sbGJhckhvcml6b250YWxFbGVtZW50LCBfY2xhc3NOYW1lU2Nyb2xsYmFyQXV0b0hpZGRlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbnlBY3RpdmUgJiYgKF9zY3JvbGxiYXJzQXV0b0hpZGVTY3JvbGwgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZU1vdmUgfHwgX3Njcm9sbGJhcnNBdXRvSGlkZUxlYXZlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoX3Njcm9sbGJhclZlcnRpY2FsRWxlbWVudCwgX2NsYXNzTmFtZVNjcm9sbGJhckF1dG9IaWRkZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhcnNBdXRvSGlkZURlbGF5ID4gMCAmJiBkZWxheWZyZWUgIT09IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyc0F1dG9IaWRlVGltZW91dElkID0gc2V0VGltZW91dChoaWRlLCBfc2Nyb2xsYmFyc0F1dG9IaWRlRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmVmcmVzaGVzIHRoZSBoYW5kbGUgbGVuZ3RoIG9mIHRoZSBnaXZlbiBzY3JvbGxiYXIuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsIFRydWUgaWYgdGhlIGhvcml6b250YWwgc2Nyb2xsYmFyIGhhbmRsZSBzaGFsbCBiZSByZWZyZXNoZWQsIGZhbHNlIGlmIHRoZSB2ZXJ0aWNhbCBvbmUgc2hhbGwgYmUgcmVmcmVzaGVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZWZyZXNoU2Nyb2xsYmFySGFuZGxlTGVuZ3RoKGlzSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVDU1MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFycyA9IGdldFNjcm9sbGJhclZhcnMoaXNIb3Jpem9udGFsKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyVmFyc0luZm8gPSBzY3JvbGxiYXJWYXJzLl9pbmZvO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdCA9IDEwMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgYW5kIGFwcGx5IGludGVuZGVkIGhhbmRsZSBsZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlUmF0aW8gPSBNQVRILm1pbigxLCAoX2hvc3RTaXplQ2FjaGVbc2Nyb2xsYmFyVmFycy5fd19oXSAtIChfcGFkZGluZ0Fic29sdXRlQ2FjaGUgPyAoaXNIb3Jpem9udGFsID8gX3BhZGRpbmdYIDogX3BhZGRpbmdZKSA6IDApKSAvIF9jb250ZW50U2Nyb2xsU2l6ZUNhY2hlW3Njcm9sbGJhclZhcnMuX3dfaF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUNTU1tzY3JvbGxiYXJWYXJzLl93aWR0aF9oZWlnaHRdID0gKE1BVEguZmxvb3IoaGFuZGxlUmF0aW8gKiAxMDAgKiBkaWdpdCkgLyBkaWdpdCkgKyAnJSc7IC8vdGhlIGxhc3QgKiBkaWdpdCAvIGRpZ2l0IGlzIGZvciBmbG9vcmluZyB0byB0aGUgNHRoIGRpZ2l0XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmF0aXZlT3ZlcmxheVNjcm9sbGJhcnNBcmVBY3RpdmUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFycy5faGFuZGxlLmNzcyhoYW5kbGVDU1MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL21lYXN1cmUgdGhlIGhhbmRsZSBsZW5ndGggdG8gcmVzcGVjdCBtaW4gJiBtYXggbGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFyc0luZm8uX2hhbmRsZUxlbmd0aCA9IHNjcm9sbGJhclZhcnMuX2hhbmRsZVswXVsnb2Zmc2V0JyArIHNjcm9sbGJhclZhcnMuX1dpZHRoX0hlaWdodF07XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFyc0luZm8uX2hhbmRsZUxlbmd0aFJhdGlvID0gaGFuZGxlUmF0aW87XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZWZyZXNoZXMgdGhlIGhhbmRsZSBvZmZzZXQgb2YgdGhlIGdpdmVuIHNjcm9sbGJhci5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBpc0hvcml6b250YWwgVHJ1ZSBpZiB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIgaGFuZGxlIHNoYWxsIGJlIHJlZnJlc2hlZCwgZmFsc2UgaWYgdGhlIHZlcnRpY2FsIG9uZSBzaGFsbCBiZSByZWZyZXNoZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gc2Nyb2xsT3JUcmFuc2l0aW9uIFRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGdpdmVuIHNjcm9sbGJhciBheGlzIHRvIHdoaWNoIHRoZSBoYW5kbGUgc2hhbGwgYmUgbW92ZWQgb3IgYSBib29sZWFuIHdoaWNoIGluZGljYXRlcyB3aGV0aGVyIGEgdHJhbnNpdGlvbiBzaGFsbCBiZSBhcHBsaWVkLiBJZiB1bmRlZmluZWQgb3IgYm9vbGVhbiBpZiB0aGUgY3VycmVudCBzY3JvbGwtb2Zmc2V0IGlzIHRha2VuLiAoaWYgaXNIb3Jpem9udGFsID8gc2Nyb2xsTGVmdCA6IHNjcm9sbFRvcClcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVmcmVzaFNjcm9sbGJhckhhbmRsZU9mZnNldChpc0hvcml6b250YWwsIHNjcm9sbE9yVHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uID0gdHlwZShzY3JvbGxPclRyYW5zaXRpb24pID09IFRZUEVTLmI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IDI1MDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNSVExpc0hvcml6b250YWwgPSBfaXNSVEwgJiYgaXNIb3Jpem9udGFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzID0gZ2V0U2Nyb2xsYmFyVmFycyhpc0hvcml6b250YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxiYXJWYXJzSW5mbyA9IHNjcm9sbGJhclZhcnMuX2luZm87XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0clRyYW5zbGF0ZUJyYWNlID0gJ3RyYW5zbGF0ZSgnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJUcmFuc2Zvcm0gPSBWRU5ET1JTLl9jc3NQcm9wZXJ0eSgndHJhbnNmb3JtJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0clRyYW5zaXRpb24gPSBWRU5ET1JTLl9jc3NQcm9wZXJ0eSgndHJhbnNpdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTY3JvbGwgPSBpc0hvcml6b250YWwgPyBfdmlld3BvcnRFbGVtZW50W19zdHJTY3JvbGxMZWZ0XSgpIDogX3ZpZXdwb3J0RWxlbWVudFtfc3RyU2Nyb2xsVG9wXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsT3JUcmFuc2l0aW9uID09PSB1bmRlZmluZWQgfHwgdHJhbnNpdGlvbiA/IG5hdGl2ZVNjcm9sbCA6IHNjcm9sbE9yVHJhbnNpdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9tZWFzdXJlIHRoZSBoYW5kbGUgbGVuZ3RoIHRvIHJlc3BlY3QgbWluICYgbWF4IGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVMZW5ndGggPSBzY3JvbGxiYXJWYXJzSW5mby5faGFuZGxlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFja0xlbmd0aCA9IHNjcm9sbGJhclZhcnMuX3RyYWNrWzBdWydvZmZzZXQnICsgc2Nyb2xsYmFyVmFycy5fV2lkdGhfSGVpZ2h0XTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlVHJhY2tEaWZmID0gdHJhY2tMZW5ndGggLSBoYW5kbGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUNTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1PZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL0RPTlQgdXNlIHRoZSB2YXJpYWJsZSAnX2NvbnRlbnRTY3JvbGxTaXplQ2FjaGVbc2Nyb2xsYmFyVmFycy5fd19oXScgaW5zdGVhZCBvZiAnX3ZpZXdwb3J0RWxlbWVudFswXVsnc2Nyb2xsJyArIHNjcm9sbGJhclZhcnMuX1dpZHRoX0hlaWdodF0nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpdHMgYSBiaXQgYmVoaW5kIGR1cmluZyB0aGUgc21hbGwgZGVsYXkgd2hlbiBjb250ZW50IHNpemUgdXBkYXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vKGRlbGF5ID0gbXV0YXRpb25PYnNlcnZlckNvbnRlbnRMYWcsIGlmIGl0cyAwIHRoZW4gdGhpcyB2YXIgY291bGQgYmUgdXNlZClcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4U2Nyb2xsID0gKF92aWV3cG9ydEVsZW1lbnROYXRpdmVbX3N0clNjcm9sbCArIHNjcm9sbGJhclZhcnMuX1dpZHRoX0hlaWdodF0gLSBfdmlld3BvcnRFbGVtZW50TmF0aXZlWydjbGllbnQnICsgc2Nyb2xsYmFyVmFycy5fV2lkdGhfSGVpZ2h0XSkgKiAoX3J0bFNjcm9sbEJlaGF2aW9yLm4gJiYgaXNSVExpc0hvcml6b250YWwgPyAtMSA6IDEpOyAvLyogLTEgaWYgcnRsIHNjcm9sbCBtYXggaXMgbmVnYXRpdmVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0U2Nyb2xsUmF0aW8gPSBmdW5jdGlvbiAoYmFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oYmFzZSAvIG1heFNjcm9sbCkgPyAwIDogTUFUSC5tYXgoMCwgTUFUSC5taW4oMSwgYmFzZSAvIG1heFNjcm9sbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdldEhhbmRsZU9mZnNldCA9IGZ1bmN0aW9uIChzY3JvbGxSYXRpbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gaGFuZGxlVHJhY2tEaWZmICogc2Nyb2xsUmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGlzTmFOKG9mZnNldCkgPyAwIDogb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAoaXNSVExpc0hvcml6b250YWwgJiYgIV9ydGxTY3JvbGxCZWhhdmlvci5pKSA/ICh0cmFja0xlbmd0aCAtIGhhbmRsZUxlbmd0aCAtIG9mZnNldCkgOiBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1BVEgubWF4KDAsIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsUmF0aW8gPSBnZXRTY3JvbGxSYXRpbyhuYXRpdmVTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bnNuYXBwZWRTY3JvbGxSYXRpbyA9IGdldFNjcm9sbFJhdGlvKGN1cnJlbnRTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPZmZzZXQgPSBnZXRIYW5kbGVPZmZzZXQodW5zbmFwcGVkU2Nyb2xsUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbmFwcGVkSGFuZGxlT2Zmc2V0ID0gZ2V0SGFuZGxlT2Zmc2V0KHNjcm9sbFJhdGlvKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFyc0luZm8uX21heFNjcm9sbCA9IG1heFNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJWYXJzSW5mby5fY3VycmVudFNjcm9sbCA9IG5hdGl2ZVNjcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJWYXJzSW5mby5fY3VycmVudFNjcm9sbFJhdGlvID0gc2Nyb2xsUmF0aW87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydFRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PZmZzZXQgPSBpc1JUTGlzSG9yaXpvbnRhbCA/IC0odHJhY2tMZW5ndGggLSBoYW5kbGVMZW5ndGggLSBoYW5kbGVPZmZzZXQpIDogaGFuZGxlT2Zmc2V0OyAvL2luIHB4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJhbnNmb3JtT2Zmc2V0ID0gKHRyYW5zZm9ybU9mZnNldCAvIHRyYWNrTGVuZ3RoICogMTAwKSAqICh0cmFja0xlbmd0aCAvIGhhbmRsZUxlbmd0aCk7IC8vaW4gJVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVWYWx1ZSA9IGlzSG9yaXpvbnRhbCA/IHN0clRyYW5zbGF0ZUJyYWNlICsgdHJhbnNmb3JtT2Zmc2V0ICsgJ3B4LCAwKScgOiBzdHJUcmFuc2xhdGVCcmFjZSArICcwLCAnICsgdHJhbnNmb3JtT2Zmc2V0ICsgJ3B4KSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDU1Nbc3RyVHJhbnNmb3JtXSA9IHRyYW5zbGF0ZVZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hcHBseSBvciBjbGVhciB1cCB0cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydFRyYW5zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDU1Nbc3RyVHJhbnNpdGlvbl0gPSB0cmFuc2l0aW9uICYmIE1BVEguYWJzKGhhbmRsZU9mZnNldCAtIHNjcm9sbGJhclZhcnNJbmZvLl9oYW5kbGVPZmZzZXQpID4gMSA/IGdldENTU1RyYW5zaXRpb25TdHJpbmcoc2Nyb2xsYmFyVmFycy5faGFuZGxlKSArICcsICcgKyAoc3RyVHJhbnNmb3JtICsgX3N0clNwYWNlICsgdHJhbnNpdGlvbkR1cmF0aW9uICsgJ21zJykgOiBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ1NTW3Njcm9sbGJhclZhcnMuX2xlZnRfdG9wXSA9IGhhbmRsZU9mZnNldDtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBhcHBseSBjc3MgaWYgb2Zmc2V0IGhhcyBjaGFuZ2VkIGFuZCBvdmVyZmxvdyBleGlzdHMuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYXRpdmVPdmVybGF5U2Nyb2xsYmFyc0FyZUFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclZhcnMuX2hhbmRsZS5jc3MoaGFuZGxlQ1NTKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXIgdXAgdHJhbnNpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3N1cHBvcnRUcmFuc2Zvcm0gJiYgX3N1cHBvcnRUcmFuc2l0aW9uICYmIHRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclZhcnMuX2hhbmRsZS5vbmUoX3N0clRyYW5zaXRpb25FbmRFdmVudCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2Rlc3Ryb3llZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFycy5faGFuZGxlLmNzcyhzdHJUcmFuc2l0aW9uLCBfc3RyRW1wdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclZhcnNJbmZvLl9oYW5kbGVPZmZzZXQgPSBoYW5kbGVPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyVmFyc0luZm8uX3NuYXBwZWRIYW5kbGVPZmZzZXQgPSBzbmFwcGVkSGFuZGxlT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclZhcnNJbmZvLl90cmFja0xlbmd0aCA9IHRyYWNrTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmVmcmVzaGVzIHRoZSBpbnRlcmFjdGl2aXR5IG9mIHRoZSBnaXZlbiBzY3JvbGxiYXIgZWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBpc1RyYWNrIFRydWUgaWYgdGhlIHRyYWNrIGVsZW1lbnQgaXMgdGhlIHRhcmdldCwgZmFsc2UgaWYgdGhlIGhhbmRsZSBlbGVtZW50IGlzIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWUgVHJ1ZSBmb3IgaW50ZXJhY3Rpdml0eSBmYWxzZSBmb3Igbm8gaW50ZXJhY3Rpdml0eS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVmcmVzaFNjcm9sbGJhcnNJbnRlcmFjdGl2ZShpc1RyYWNrLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB2YWx1ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50MSA9IGlzVHJhY2sgPyBfc2Nyb2xsYmFySG9yaXpvbnRhbFRyYWNrRWxlbWVudCA6IF9zY3JvbGxiYXJIb3Jpem9udGFsSGFuZGxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudDIgPSBpc1RyYWNrID8gX3Njcm9sbGJhclZlcnRpY2FsVHJhY2tFbGVtZW50IDogX3Njcm9sbGJhclZlcnRpY2FsSGFuZGxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gaXNUcmFjayA/IF9jbGFzc05hbWVTY3JvbGxiYXJUcmFja09mZiA6IF9jbGFzc05hbWVTY3JvbGxiYXJIYW5kbGVPZmY7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQxW2FjdGlvbl0oY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50MlthY3Rpb25dKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgb2JqZWN0IHdoaWNoIGlzIHVzZWQgZm9yIGZhc3QgYWNjZXNzIGZvciBzcGVjaWZpYyB2YXJpYWJsZXMuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsIFRydWUgaWYgdGhlIGhvcml6b250YWwgc2Nyb2xsYmFyIHZhcnMgc2hhbGwgYmUgYWNjZXNzZWQsIGZhbHNlIGlmIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIgdmFycyBzaGFsbCBiZSBhY2Nlc3NlZC5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHt7d2g6IHN0cmluZywgV0g6IHN0cmluZywgbHQ6IHN0cmluZywgX3doOiBzdHJpbmcsIF9sdDogc3RyaW5nLCB0OiAqLCBoOiAqLCBjOiB7fSwgczogKn19XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNjcm9sbGJhclZhcnMoaXNIb3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3dpZHRoX2hlaWdodDogaXNIb3Jpem9udGFsID8gX3N0cldpZHRoIDogX3N0ckhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX1dpZHRoX0hlaWdodDogaXNIb3Jpem9udGFsID8gJ1dpZHRoJyA6ICdIZWlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGVmdF90b3A6IGlzSG9yaXpvbnRhbCA/IF9zdHJMZWZ0IDogX3N0clRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX0xlZnRfVG9wOiBpc0hvcml6b250YWwgPyAnTGVmdCcgOiAnVG9wJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3hfeTogaXNIb3Jpem9udGFsID8gX3N0clggOiBfc3RyWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX1hfWTogaXNIb3Jpem9udGFsID8gJ1gnIDogJ1knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfd19oOiBpc0hvcml6b250YWwgPyAndycgOiAnaCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sX3Q6IGlzSG9yaXpvbnRhbCA/ICdsJyA6ICd0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyYWNrOiBpc0hvcml6b250YWwgPyBfc2Nyb2xsYmFySG9yaXpvbnRhbFRyYWNrRWxlbWVudCA6IF9zY3JvbGxiYXJWZXJ0aWNhbFRyYWNrRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hhbmRsZTogaXNIb3Jpem9udGFsID8gX3Njcm9sbGJhckhvcml6b250YWxIYW5kbGVFbGVtZW50IDogX3Njcm9sbGJhclZlcnRpY2FsSGFuZGxlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhcjogaXNIb3Jpem9udGFsID8gX3Njcm9sbGJhckhvcml6b250YWxFbGVtZW50IDogX3Njcm9sbGJhclZlcnRpY2FsRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2luZm86IGlzSG9yaXpvbnRhbCA/IF9zY3JvbGxIb3Jpem9udGFsSW5mbyA6IF9zY3JvbGxWZXJ0aWNhbEluZm9cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLz09PT0gU2Nyb2xsYmFyIENvcm5lciA9PT09Ly9cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEJ1aWxkcyBvciBkZXN0cm95cyB0aGUgc2Nyb2xsYmFyIGNvcm5lciBET00gZWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBkZXN0cm95IEluZGljYXRlcyB3aGV0aGVyIHRoZSBET00gc2hhbGwgYmUgYnVpbGQgb3IgZGVzdHJveWVkLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXR1cFNjcm9sbGJhckNvcm5lckRPTShkZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Njcm9sbGJhckNvcm5lckVsZW1lbnQgPSBfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudCB8fCBzZWxlY3RPckdlbmVyYXRlRGl2QnlDbGFzcyhfY2xhc3NOYW1lU2Nyb2xsYmFyQ29ybmVyLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2RvbUV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hvc3RFbGVtZW50LmFwcGVuZChfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZG9tRXhpc3RzICYmIF9pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoX3Njcm9sbGJhckNvcm5lckVsZW1lbnQucmVtb3ZlQXR0cihMRVhJQ09OLnMpLCBfY2xhc3NOYW1lc0R5bmFtaWNEZXN0cm95KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhbGwgc2Nyb2xsYmFyIGNvcm5lciBpbnRlcmFjdGl2aXR5IGV2ZW50cy5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBTY3JvbGxiYXJDb3JuZXJFdmVudHMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc2lkZUlGcmFtZSA9IF93aW5kb3dFbGVtZW50TmF0aXZlLnRvcCAhPT0gX3dpbmRvd0VsZW1lbnROYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlRG93blBvc2l0aW9uID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlRG93blNpemUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW91c2VEb3duSW52ZXJ0ZWRTY2FsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWNvbm5lY3RNdXRhdGlvbk9ic2VydmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudERyYWdNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbk1vdXNlVG91Y2hEb3duQ29udGludWUoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldENvb3JkaW5hdGVzKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3N0RWxlbWVudENTUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yZXNpemVIb3Jpem9udGFsIHx8IF9yZXNpemVCb3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RFbGVtZW50Q1NTW19zdHJXaWR0aF0gPSAobW91c2VEb3duU2l6ZS53ICsgKHBhZ2VPZmZzZXQueCAtIG1vdXNlRG93blBvc2l0aW9uLngpICogbW91c2VEb3duSW52ZXJ0ZWRTY2FsZS54KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmVzaXplVmVydGljYWwgfHwgX3Jlc2l6ZUJvdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdEVsZW1lbnRDU1NbX3N0ckhlaWdodF0gPSAobW91c2VEb3duU2l6ZS5oICsgKHBhZ2VPZmZzZXQueSAtIG1vdXNlRG93blBvc2l0aW9uLnkpICogbW91c2VEb3duSW52ZXJ0ZWRTY2FsZS55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0RWxlbWVudC5jc3MoaG9zdEVsZW1lbnRDU1MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUEFUSUJJTElUWS5zdHBQKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TW91c2VUb3VjaFVwKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudE1vdXNlVG91Y2hVcChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRJc1RydXN0ZWQgPSBldmVudCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW19zdHJTZWxlY3RTdGFydEV2ZW50LCBfc3RyTW91c2VUb3VjaE1vdmVFdmVudCwgX3N0ck1vdXNlVG91Y2hVcEV2ZW50XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkb2N1bWVudE9uU2VsZWN0U3RhcnQsIGRvY3VtZW50RHJhZ01vdmUsIGRvY3VtZW50TW91c2VUb3VjaFVwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoX2JvZHlFbGVtZW50LCBfY2xhc3NOYW1lRHJhZ2dpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhckNvcm5lckVsZW1lbnQucmVsZWFzZUNhcHR1cmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudC5yZWxlYXNlQ2FwdHVyZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50SXNUcnVzdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb25uZWN0TXV0YXRpb25PYnNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0TXV0YXRpb25PYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iYXNlLnVwZGF0ZShfc3RyQXV0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0TXV0YXRpb25PYnNlcnZlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvbk1vdXNlVG91Y2hEb3duQ29udGludWUoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaEV2ZW50ID0gb3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfc2xlZXBpbmcgfHwgX2Rlc3Ryb3llZCA/IGZhbHNlIDogQ09NUEFUSUJJTElUWS5tQnRuKGV2ZW50KSA9PT0gMSB8fCBpc1RvdWNoRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldENvb3JkaW5hdGVzKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfbXNpZVZlcnNpb24gJiYgaW5zaWRlSUZyYW1lID8geyB4OiBldmVudC5zY3JlZW5YLCB5OiBldmVudC5zY3JlZW5ZIH0gOiBDT01QQVRJQklMSVRZLnBhZ2UoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkRGVzdHJveUV2ZW50TGlzdGVuZXIoX3Njcm9sbGJhckNvcm5lckVsZW1lbnQsIF9zdHJNb3VzZVRvdWNoRG93bkV2ZW50LCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uTW91c2VUb3VjaERvd25Db250aW51ZShldmVudCkgJiYgIV9yZXNpemVOb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX211dGF0aW9uT2JzZXJ2ZXJzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0TXV0YXRpb25PYnNlcnZlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdE11dGF0aW9uT2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VEb3duUG9zaXRpb24gPSBnZXRDb29yZGluYXRlcyhldmVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VEb3duU2l6ZS53ID0gX2hvc3RFbGVtZW50TmF0aXZlW0xFWElDT04ub1ddIC0gKCFfaXNCb3JkZXJCb3ggPyBfcGFkZGluZ1ggOiAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlRG93blNpemUuaCA9IF9ob3N0RWxlbWVudE5hdGl2ZVtMRVhJQ09OLm9IXSAtICghX2lzQm9yZGVyQm94ID8gX3BhZGRpbmdZIDogMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZURvd25JbnZlcnRlZFNjYWxlID0gZ2V0SG9zdEVsZW1lbnRJbnZlcnRlZFNjYWxlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfc3RyU2VsZWN0U3RhcnRFdmVudCwgX3N0ck1vdXNlVG91Y2hNb3ZlRXZlbnQsIF9zdHJNb3VzZVRvdWNoVXBFdmVudF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2RvY3VtZW50T25TZWxlY3RTdGFydCwgZG9jdW1lbnREcmFnTW92ZSwgZG9jdW1lbnRNb3VzZVRvdWNoVXBdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfYm9keUVsZW1lbnQsIF9jbGFzc05hbWVEcmFnZ2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Njcm9sbGJhckNvcm5lckVsZW1lbnQuc2V0Q2FwdHVyZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsYmFyQ29ybmVyRWxlbWVudC5zZXRDYXB0dXJlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUEFUSUJJTElUWS5wcnZEKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkuc3RwUChldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy89PT09IFV0aWxzID09PT0vL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIGdpdmVuIG5hbWUuIFRoZSBDb250ZXh0IG9mIHRoaXMgY2FsbGJhY2sgaXMgYWx3YXlzIF9iYXNlICh0aGlzKS5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgd2hpY2ggc2hhbGwgYmUgY2FsbGVkLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGFyZ3MgVGhlIGFyZ3Mgd2l0aCB3aGljaCB0aGUgY2FsbGJhY2sgc2hhbGwgYmUgY2FsbGVkLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGRlcGVuZGVudCBCb29sZWFuIHdoaWNoIGRlY2lkZXMgd2hldGhlciB0aGUgY2FsbGJhY2sgc2hhbGwgYmUgZmlyZWQsIHVuZGVmaW5lZCBpcyBsaWtlIGEgXCJ0cnVlXCIgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRpc3BhdGNoQ2FsbGJhY2sobmFtZSwgYXJncywgZGVwZW5kZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVudCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9jdXJyZW50UHJlcGFyZWRPcHRpb25zLmNhbGxiYWNrc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbk9uTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uT25OYW1lLnN1YnN0cigwLCAyKSA9PT0gJ29uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbk9uTmFtZSA9IGV4dGVuc2lvbk9uTmFtZS5zdWJzdHIoMiwgMSkudG9Mb3dlckNhc2UoKSArIGV4dGVuc2lvbk9uTmFtZS5zdWJzdHIoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShjYWxsYmFjaykgPT0gVFlQRVMuZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoX2Jhc2UsIGFyZ3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaChfZXh0ZW5zaW9ucywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlKGV4dC5vbikgPT0gVFlQRVMuZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHQub24oZXh0ZW5zaW9uT25OYW1lLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFfZGVzdHJveWVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2tzSW5pdFFldWV1ZS5wdXNoKHsgbjogbmFtZSwgYTogYXJncyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNldHMgdGhlIFwidG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XCIgcHJvcGVydGllcywgd2l0aCBhIGdpdmVuIHByZWZpeCwgb2YgdGhlIGdpdmVuIGNzcyBvYmplY3QuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0Q1NTT2JqZWN0IFRoZSBjc3Mgb2JqZWN0IHRvIHdoaWNoIHRoZSB2YWx1ZXMgc2hhbGwgYmUgYXBwbGllZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBwcmVmaXggVGhlIHByZWZpeCBvZiB0aGUgXCJ0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRcIiBjc3MgcHJvcGVydGllcy4gKGV4YW1wbGU6ICdwYWRkaW5nLScgaXMgYSB2YWxpZCBwcmVmaXgpXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWVzIEEgYXJyYXkgb2YgdmFsdWVzIHdoaWNoIHNoYWxsIGJlIGFwcGxpZWQgdG8gdGhlIFwidG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XCIgLXByb3BlcnRpZXMuIFRoZSBhcnJheSBvcmRlciBpcyBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5cclxuICAgICAgICAgICAgICAgICAqIElmIHRoaXMgYXJndW1lbnQgaXMgdW5kZWZpbmVkIHRoZSB2YWx1ZSAnJyAoZW1wdHkgc3RyaW5nKSB3aWxsIGJlIGFwcGxpZWQgdG8gYWxsIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldFRvcFJpZ2h0Qm90dG9tTGVmdCh0YXJnZXRDU1NPYmplY3QsIHByZWZpeCwgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gcHJlZml4IHx8IF9zdHJFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMgfHwgW19zdHJFbXB0eSwgX3N0ckVtcHR5LCBfc3RyRW1wdHksIF9zdHJFbXB0eV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldENTU09iamVjdFtwcmVmaXggKyBfc3RyVG9wXSA9IHZhbHVlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRDU1NPYmplY3RbcHJlZml4ICsgX3N0clJpZ2h0XSA9IHZhbHVlc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRDU1NPYmplY3RbcHJlZml4ICsgX3N0ckJvdHRvbV0gPSB2YWx1ZXNbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q1NTT2JqZWN0W3ByZWZpeCArIF9zdHJMZWZ0XSA9IHZhbHVlc1szXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIFwidG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XCIgQ1NTIHByb3BlcnRpZXMgb2YgdGhlIENTUyBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBwcmVmaXggZnJvbSB0aGUgaG9zdCBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHByZWZpeCBUaGUgcHJlZml4IG9mIHRoZSBcInRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFwiIGNzcyBwcm9wZXJ0aWVzLiAoZXhhbXBsZTogJ3BhZGRpbmctJyBpcyBhIHZhbGlkIHByZWZpeClcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBzdWZmaXggVGhlIHN1ZmZpeCBvZiB0aGUgXCJ0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRcIiBjc3MgcHJvcGVydGllcy4gKGV4YW1wbGU6ICdib3JkZXItJyBpcyBhIHZhbGlkIHByZWZpeCB3aXRoICctd2lkdGgnIGlzIGEgdmFsaWQgc3VmZml4KVxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHplcm9YIFRydWUgaWYgdGhlIHggYXhpcyBzaGFsbCBiZSAwLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHplcm9ZIFRydWUgaWYgdGhlIHkgYXhpcyBzaGFsbCBiZSAwLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge3t9fSBUaGUgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSBudW1iZXJzIG9mIHRoZSByZWFkIENTUyBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRUb3BSaWdodEJvdHRvbUxlZnRIb3N0KHByZWZpeCwgc3VmZml4LCB6ZXJvWCwgemVyb1kpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBzdWZmaXggfHwgX3N0ckVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeCB8fCBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdDogemVyb1kgPyAwIDogcGFyc2VUb1plcm9Pck51bWJlcihfaG9zdEVsZW1lbnQuY3NzKHByZWZpeCArIF9zdHJUb3AgKyBzdWZmaXgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcjogemVyb1ggPyAwIDogcGFyc2VUb1plcm9Pck51bWJlcihfaG9zdEVsZW1lbnQuY3NzKHByZWZpeCArIF9zdHJSaWdodCArIHN1ZmZpeCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiOiB6ZXJvWSA/IDAgOiBwYXJzZVRvWmVyb09yTnVtYmVyKF9ob3N0RWxlbWVudC5jc3MocHJlZml4ICsgX3N0ckJvdHRvbSArIHN1ZmZpeCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsOiB6ZXJvWCA/IDAgOiBwYXJzZVRvWmVyb09yTnVtYmVyKF9ob3N0RWxlbWVudC5jc3MocHJlZml4ICsgX3N0ckxlZnQgKyBzdWZmaXgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjb21wdXRlZCBDU1MgdHJhbnNpdGlvbiBzdHJpbmcgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdGhlIHRyYW5zaXRpb24gc3RyaW5nIHNoYWxsIGJlIHJldHVybmVkLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIENTUyB0cmFuc2l0aW9uIHN0cmluZyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDU1NUcmFuc2l0aW9uU3RyaW5nKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdGlvblN0ciA9IFZFTkRPUlMuX2Nzc1Byb3BlcnR5KCd0cmFuc2l0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2VtYmxlZFZhbHVlID0gZWxlbWVudC5jc3ModHJhbnNpdGlvblN0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2VtYmxlZFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNzZW1ibGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ0V4cFN0cmluZyA9ICdcXFxccyooJyArICcoW14sKF0rKFxcXFwoLis/XFxcXCkpPykrJyArICcpW1xcXFxzLF0qJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnRXhwTWFpbiA9IG5ldyBSZWdFeHAocmVnRXhwU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnRXhwVmFsaWRhdGUgPSBuZXcgUmVnRXhwKCdeKCcgKyByZWdFeHBTdHJpbmcgKyAnKSskJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAncHJvcGVydHkgZHVyYXRpb24gdGltaW5nLWZ1bmN0aW9uIGRlbGF5Jy5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgajtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRDc3NTdHlsZUJ5Q29tbWEgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ci5tYXRjaChyZWdFeHBWYWxpZGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLm1hdGNoKHJlZ0V4cE1haW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXN1bHQucHVzaChSZWdFeHAuJDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UocmVnRXhwTWFpbiwgX3N0ckVtcHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0clJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgcHJvcGVydGllc1tMRVhJQ09OLmxdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBcnJheSA9IHNwbGl0Q3NzU3R5bGVCeUNvbW1hKGVsZW1lbnQuY3NzKHRyYW5zaXRpb25TdHIgKyAnLScgKyBwcm9wZXJ0aWVzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB2YWx1ZUFycmF5W0xFWElDT04ubF07IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtqXSA9IChyZXN1bHRbal0gPyByZXN1bHRbal0gKyBfc3RyU3BhY2UgOiBfc3RyRW1wdHkpICsgdmFsdWVBcnJheVtqXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcsICcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogR2VuZXJhdGVzIGEgUmVndWxhciBFeHByZXNzaW9uIHdoaWNoIG1hdGNoZXMgd2l0aCBhIHN0cmluZyB3aGljaCBzdGFydHMgd2l0aCAnb3MtaG9zdCcuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHdpdGhDdXJyQ2xhc3NOYW1lT3B0aW9uIFRoZSBSZWd1bGFyIEV4cHJlc3Npb24gYWxzbyBtYXRjaGVzIGlmIHRoZSBzdHJpbmcgaXMgdGhlIGN1cnJlbnQgQ2xhc3NOYW1lIG9wdGlvbiAobXVsdGlwbGUgdmFsdWVzIHNwbGl0dGVkIGJ5IHNwYWNlIHBvc3NpYmxlKS5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aE9sZENsYXNzTmFtZU9wdGlvbiBUaGUgUmVndWxhciBFeHByZXNzaW9uIGFsc28gbWF0Y2hlcyBpZiB0aGUgc3RyaW5nIGlzIHRoZSBvbGQgQ2xhc3NOYW1lIG9wdGlvbiAobXVsdGlwbGUgdmFsdWVzIHNwbGl0dGVkIGJ5IHNwYWNlIHBvc3NpYmxlKS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlSG9zdENsYXNzTmFtZVJlZ0V4cCh3aXRoQ3VyckNsYXNzTmFtZU9wdGlvbiwgd2l0aE9sZENsYXNzTmFtZU9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGxpdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwcGVuZENsYXNzZXMgPSBmdW5jdGlvbiAoY2xhc3NlcywgY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZGl4ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24gJiYgdHlwZW9mIGNsYXNzZXMgPT0gVFlQRVMucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBjbGFzc2VzLnNwbGl0KF9zdHJTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3BsaXRbTEVYSUNPTi5sXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZGl4ICs9ICd8JyArIHNwbGl0W2ldICsgJyQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BsaXRbaV0ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKSBmb3IgZXNjYXBpbmcgcmVnZXggY2hhcmFjdGVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcHBlbmRpeDtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyheJyArIF9jbGFzc05hbWVIb3N0RWxlbWVudCArICcoWy1fXS4rfCkkKScgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRDbGFzc2VzKF9jbGFzc05hbWVDYWNoZSwgd2l0aEN1cnJDbGFzc05hbWVPcHRpb24pICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kQ2xhc3Nlcyhfb2xkQ2xhc3NOYW1lLCB3aXRoT2xkQ2xhc3NOYW1lT3B0aW9uKSwgJ2cnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGhvc3QtZWxlbWVudHMgaW52ZXJ0ZWQgc2NhbGUuIChpbnZlcnRlZFNjYWxlID0gMSAvIHNjYWxlKVxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19IFRoZSBzY2FsZSBvZiB0aGUgaG9zdC1lbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIb3N0RWxlbWVudEludmVydGVkU2NhbGUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBfcGFkZGluZ0VsZW1lbnROYXRpdmVbTEVYSUNPTi5iQ1JdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogX3N1cHBvcnRUcmFuc2Zvcm0gPyAxIC8gKE1BVEgucm91bmQocmVjdC53aWR0aCkgLyBfcGFkZGluZ0VsZW1lbnROYXRpdmVbTEVYSUNPTi5vV10pIHx8IDEgOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBfc3VwcG9ydFRyYW5zZm9ybSA/IDEgLyAoTUFUSC5yb3VuZChyZWN0LmhlaWdodCkgLyBfcGFkZGluZ0VsZW1lbnROYXRpdmVbTEVYSUNPTi5vSF0pIHx8IDEgOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBIVE1MRWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBvIFRoZSBvYmplY3Qgd2hpY2ggc2hhbGwgYmUgY2hlY2tlZC5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBIVE1MRWxlbWVudCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0hUTUxFbGVtZW50KG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyT3duZXJEb2N1bWVudCA9ICdvd25lckRvY3VtZW50JztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RySFRNTEVsZW1lbnQgPSAnSFRNTEVsZW1lbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3bmQgPSBvICYmIG9bc3RyT3duZXJEb2N1bWVudF0gPyAob1tzdHJPd25lckRvY3VtZW50XS5wYXJlbnRXaW5kb3cgfHwgd2luZG93KSA6IHdpbmRvdztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd25kW3N0ckhUTUxFbGVtZW50XSA9PSBUWVBFUy5vID8gbyBpbnN0YW5jZW9mIHduZFtzdHJIVE1MRWxlbWVudF0gOiAvL0RPTTJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgdHlwZW9mIG8gPT0gVFlQRVMubyAmJiBvICE9PSBudWxsICYmIG8ubm9kZVR5cGUgPT09IDEgJiYgdHlwZW9mIG8ubm9kZU5hbWUgPT0gVFlQRVMuc1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBDb21wYXJlcyAyIGFycmF5cyBhbmQgcmV0dXJucyB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVtIGFzIGEgYXJyYXkuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gYTEgVGhlIGZpcnN0IGFycmF5IHdoaWNoIHNoYWxsIGJlIGNvbXBhcmVkLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGEyIFRoZSBzZWNvbmQgYXJyYXkgd2hpY2ggc2hhbGwgYmUgY29tcGFyZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRBcnJheURpZmZlcmVuY2VzKGExLCBhMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYTEubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFbYTFbaV1dID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYTIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFbYTJbaV1dKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFbYTJbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2EyW2ldXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayBpbiBhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmLnB1c2goayk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpZmY7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFplcm8gb3IgdGhlIG51bWJlciB0byB3aGljaCB0aGUgdmFsdWUgY2FuIGJlIHBhcnNlZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgd2hpY2ggc2hhbGwgYmUgcGFyc2VkLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHRvRmxvYXQgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIG51bWJlciBzaGFsbCBiZSBwYXJzZWQgdG8gYSBmbG9hdC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VUb1plcm9Pck51bWJlcih2YWx1ZSwgdG9GbG9hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudW0gPSB0b0Zsb2F0ID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiBwYXJzZUludCh2YWx1ZSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihudW0pID8gMCA6IG51bTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgc2V2ZXJhbCBpbmZvcm1hdGlvbiBvZiB0aGUgdGV4dGFyZWEgYW5kIHJldHVybnMgdGhlbSBhcyBhIG9iamVjdCBvciB1bmRlZmluZWQgaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGl0LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge3tjdXJzb3JSb3c6IE51bWJlciwgY3Vyc29yQ29sLCByb3dzOiBOdW1iZXIsIGNvbHM6IG51bWJlciwgd1JvdzogbnVtYmVyLCBwb3M6IG51bWJlciwgbWF4IDogbnVtYmVyfX0gb3IgdW5kZWZpbmVkIGlmIG5vdCBzdXBwb3J0ZWQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRleHRhcmVhSW5mbygpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3JlYWQgbmVlZGVkIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYUN1cnNvclBvc2l0aW9uID0gX3RhcmdldEVsZW1lbnROYXRpdmUuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRhcmVhQ3Vyc29yUG9zaXRpb24gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFWYWx1ZSA9IF90YXJnZXRFbGVtZW50LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYUxlbmd0aCA9IHRleHRhcmVhVmFsdWVbTEVYSUNPTi5sXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dGFyZWFSb3dTcGxpdCA9IHRleHRhcmVhVmFsdWUuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYUxhc3RSb3cgPSB0ZXh0YXJlYVJvd1NwbGl0W0xFWElDT04ubF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhQ3VycmVudEN1cnNvclJvd1NwbGl0ID0gdGV4dGFyZWFWYWx1ZS5zdWJzdHIoMCwgdGV4dGFyZWFDdXJzb3JQb3NpdGlvbikuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWRlc3RSb3cgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYUxhc3RDb2wgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JSb3cgPSB0ZXh0YXJlYUN1cnJlbnRDdXJzb3JSb3dTcGxpdFtMRVhJQ09OLmxdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JDb2wgPSB0ZXh0YXJlYUN1cnJlbnRDdXJzb3JSb3dTcGxpdFt0ZXh0YXJlYUN1cnJlbnRDdXJzb3JSb3dTcGxpdFtMRVhJQ09OLmxdIC0gMV1bTEVYSUNPTi5sXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93Q29scztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgd2lkZXN0IFJvdyBhbmQgdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZXh0YXJlYVJvd1NwbGl0W0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dDb2xzID0gdGV4dGFyZWFSb3dTcGxpdFtpXVtMRVhJQ09OLmxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93Q29scyA+IHRleHRhcmVhTGFzdENvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZXN0Um93ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUxhc3RDb2wgPSByb3dDb2xzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3Vyc29yUm93OiBjdXJzb3JSb3csIC8vY3Vyc29yUm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXJzb3JDb2x1bW46IGN1cnNvckNvbCwgLy9jdXJzb3JDb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jvd3M6IHRleHRhcmVhTGFzdFJvdywgLy9yb3dzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb2x1bW5zOiB0ZXh0YXJlYUxhc3RDb2wsIC8vY29sc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfd2lkZXN0Um93OiB3aWRlc3RSb3csIC8vd1Jvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3Vyc29yUG9zaXRpb246IHRleHRhcmVhQ3Vyc29yUG9zaXRpb24sIC8vcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXJzb3JNYXg6IHRleHRhcmVhTGVuZ3RoIC8vbWF4XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIERldGVybWluZXMgd2hldGhlciBuYXRpdmUgb3ZlcmxheSBzY3JvbGxiYXJzIGFyZSBhY3RpdmUuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBuYXRpdmUgb3ZlcmxheSBzY3JvbGxiYXJzIGFyZSBhY3RpdmUsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbmF0aXZlT3ZlcmxheVNjcm9sbGJhcnNBcmVBY3RpdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfaWdub3JlT3ZlcmxheVNjcm9sbGJhckhpZGluZ0NhY2hlICYmIChfbmF0aXZlU2Nyb2xsYmFySXNPdmVybGFpZC54ICYmIF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGVsZW1lbnQgd2hpY2ggaXMgdXNlZCB0byBtZWFzdXJlIHRoZSBjb250ZW50IHNpemUuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Kn0gVGV4dGFyZWFDb3ZlciBpZiB0YXJnZXQgZWxlbWVudCBpcyB0ZXh0YXJlYSBlbHNlIHRoZSBDb250ZW50RWxlbWVudC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGVudE1lYXN1cmVFbGVtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfaXNUZXh0YXJlYSA/IF90ZXh0YXJlYUNvdmVyRWxlbWVudFswXSA6IF9jb250ZW50RWxlbWVudE5hdGl2ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEdlbmVyYXRlcyBhIHN0cmluZyB3aGljaCByZXByZXNlbnRzIGEgSFRNTCBkaXYgd2l0aCB0aGUgZ2l2ZW4gY2xhc3NlcyBvciBhdHRyaWJ1dGVzLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGNsYXNzZXNPckF0dHJzIFRoZSBjbGFzcyBvZiB0aGUgZGl2IGFzIHN0cmluZyBvciBhIG9iamVjdCB3aGljaCByZXByZXNlbnRzIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBkaXYuIChUaGUgY2xhc3MgYXR0cmlidXRlIGNhbiBhbHNvIGJlIHdyaXR0ZW4gYXMgXCJjbGFzc05hbWVcIi4pXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudCBvZiB0aGUgZGl2IGFzIHN0cmluZy5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb25jYXRlZCBzdHJpbmcgd2hpY2ggcmVwcmVzZW50cyBhIEhUTUwgZGl2IGFuZCBpdHMgY29udGVudC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVEaXYoY2xhc3Nlc09yQXR0cnMsIGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgJyArIChjbGFzc2VzT3JBdHRycyA/IHR5cGUoY2xhc3Nlc09yQXR0cnMpID09IFRZUEVTLnMgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3M9XCInICsgY2xhc3Nlc09yQXR0cnMgKyAnXCInIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSBfc3RyRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRlJBTUVXT1JLLmlzUGxhaW5PYmplY3QoY2xhc3Nlc09yQXR0cnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gY2xhc3Nlc09yQXR0cnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzICs9IChrZXkgPT09ICdjJyA/ICdjbGFzcycgOiBrZXkpICsgJz1cIicgKyBjbGFzc2VzT3JBdHRyc1trZXldICsgJ1wiICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RyRW1wdHkpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnRlbnQgfHwgX3N0ckVtcHR5KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogU2VsZWN0cyBvciBnZW5lcmF0ZXMgYSBkaXYgd2l0aCB0aGUgZ2l2ZW4gY2xhc3MgYXR0cmlidXRlLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZXMgKGRpdmlkZWQgYnkgc3BhY2VzKSBvZiB0aGUgZGl2IHdoaWNoIHNoYWxsIGJlIHNlbGVjdGVkIG9yIGdlbmVyYXRlZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBzZWxlY3RQYXJlbnRPck9ubHlDaGlsZHJlbiBUaGUgcGFyZW50IGVsZW1lbnQgZnJvbSB3aGljaCBvZiB0aGUgZWxlbWVudCBzaGFsbCBiZSBzZWxlY3RlZC4gKGlmIHVuZGVmaW5lZCBvciBib29sZWFuIGl0cyBob3N0RWxlbWVudClcclxuICAgICAgICAgICAgICAgICAqIElmIGl0cyBhIGJvb2xlYW4gaXQgZGVjaWRlcyB3aGV0aGVyIG9ubHkgdGhlIGNoaWxkcmVuIG9mIHRoZSBob3N0IGVsZW1lbnQgc2hhbGwgYmUgc2VsZWN0ZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGdlbmVyYXRlZCBvciBzZWxlY3RlZCBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RPckdlbmVyYXRlRGl2QnlDbGFzcyhjbGFzc05hbWUsIHNlbGVjdFBhcmVudE9yT25seUNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ubHlDaGlsZHJlbiA9IHR5cGUoc2VsZWN0UGFyZW50T3JPbmx5Q2hpbGRyZW4pID09IFRZUEVTLmI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdFBhcmVudCA9IG9ubHlDaGlsZHJlbiA/IF9ob3N0RWxlbWVudCA6IChzZWxlY3RQYXJlbnRPck9ubHlDaGlsZHJlbiB8fCBfaG9zdEVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9kb21FeGlzdHMgJiYgIXNlbGVjdFBhcmVudFtMRVhJQ09OLmxdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfZG9tRXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGVjdFBhcmVudFtvbmx5Q2hpbGRyZW4gPyAnY2hpbGRyZW4nIDogJ2ZpbmQnXShfc3RyRG90ICsgY2xhc3NOYW1lLnJlcGxhY2UoL1xccy9nLCBfc3RyRG90KSkuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRlJBTUVXT1JLKGdlbmVyYXRlRGl2KGNsYXNzTmFtZSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gcHJvcGVydHkgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IGZyb20gd2hpY2ggdGhlIHByb3BlcnR5IHZhbHVlIHNoYWxsIGJlIGdvdC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwcm9wZXJ0eSBvZiB3aGljaCB0aGUgdmFsdWUgc2hhbGwgYmUgZ290LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBzZWFyY2hlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWQgb2YgdGhlIHByb3BlcnR5IHdhc24ndCBmb3VuZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0T2JqZWN0UHJvcFZhbChvYmosIHBhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRzID0gcGF0aC5zcGxpdChfc3RyRG90KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IHNwbGl0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9ialtMRVhJQ09OLmhPUF0oc3BsaXRzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gb2JqW3NwbGl0c1tpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgc3BsaXRzLmxlbmd0aCAmJiB0eXBlKHZhbCkgPT0gVFlQRVMubylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBmcm9tIHRoZSBnaXZlbiBvYmplY3QuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgZnJvbSB3aGljaCB0aGUgcHJvcGVydHkgdmFsdWUgc2hhbGwgYmUgc2V0LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHBhdGggVGhlIHByb3BlcnR5IG9mIHdoaWNoIHRoZSB2YWx1ZSBzaGFsbCBiZSBzZXQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgd2hpY2ggc2hhbGwgYmUgc2V0LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRPYmplY3RQcm9wVmFsKG9iaiwgcGF0aCwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0cyA9IHBhdGguc3BsaXQoX3N0ckRvdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0c0xlbmd0aCA9IHNwbGl0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHRlbmRPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ZW5kT2JqUm9vdCA9IGV4dGVuZE9iajtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IHNwbGl0c0xlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRPYmogPSBleHRlbmRPYmpbc3BsaXRzW2ldXSA9IGkgKyAxIDwgc3BsaXRzTGVuZ3RoID8ge30gOiB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgRlJBTUVXT1JLLmV4dGVuZChvYmosIGV4dGVuZE9ialJvb3QsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlx0XHJcbiAgICAgICAgICAgICAgICAgKiBSdW5zIGEgYWN0aW9uIGZvciBlYWNoIHNlbGVjdG9yIGluc2lkZSB0aGUgdXBkYXRlT25Mb2FkIG9wdGlvbi5cdFxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYWN0aW9uIFRoZSBhY3Rpb24gZm9yIGVhY2ggdXBkYXRlT25Mb2FkIHNlbGVjdG9yLCB0aGUgYXJndW1lbnRzIHRoZSBmdW5jdGlvbiB0YWtlcyBpcyB0aGUgaW5kZXggYW5kIHRoZSB2YWx1ZSAodGhlIHNlbGVjdG9yKS5cdFxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlYWNoVXBkYXRlT25Mb2FkKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVPbkxvYWQgPSBfY3VycmVudFByZXBhcmVkT3B0aW9ucy51cGRhdGVPbkxvYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlT25Mb2FkID0gdHlwZSh1cGRhdGVPbkxvYWQpID09IFRZUEVTLnMgPyB1cGRhdGVPbkxvYWQuc3BsaXQoX3N0clNwYWNlKSA6IHVwZGF0ZU9uTG9hZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENPTVBBVElCSUxJVFkuaXNBKHVwZGF0ZU9uTG9hZCkgJiYgIV9kZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCh1cGRhdGVPbkxvYWQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLz09PT0gVXRpbHMgQ2FjaGUgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBDb21wYXJlcyB0d28gdmFsdWVzIG9yIG9iamVjdHMgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGV5IGFyZW4ndCBlcXVhbC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBjdXJyZW50IFRoZSBmaXJzdCB2YWx1ZSBvciBvYmplY3Qgd2hpY2ggc2hhbGwgYmUgY29tcGFyZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY2FjaGUgVGhlIHNlY29uZCB2YWx1ZSBvciBvYmplY3Qgd2hpY2ggc2hhbGwgYmUgY29tcGFyZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZm9yY2UgSWYgdHJ1ZSB0aGUgcmV0dXJuZWQgdmFsdWUgaXMgYWx3YXlzIHRydWUuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBib3RoIHZhbHVlcyBvciBvYmplY3RzIGFyZW4ndCBlcXVhbCBvciBmb3JjZSBpcyB0cnVlLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrQ2FjaGUoY3VycmVudCwgY2FjaGUsIGZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUoY3VycmVudCkgPT0gVFlQRVMubyAmJiB0eXBlKGNhY2hlKSA9PSBUWVBFUy5vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgIT09ICdjJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50W0xFWElDT04uaE9QXShwcm9wKSAmJiBjYWNoZVtMRVhJQ09OLmhPUF0ocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQ2FjaGUoY3VycmVudFtwcm9wXSwgY2FjaGVbcHJvcF0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50ICE9PSBjYWNoZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLz09PT0gU2hvcnRjdXRzID09PT0vL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogalF1ZXJ5IGV4dGVuZCBtZXRob2Qgc2hvcnRjdXQgd2l0aCBhIGFwcGVuZGVkIFwidHJ1ZVwiIGFzIGZpcnN0IGFyZ3VtZW50LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBleHRlbmREZWVwKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGUkFNRVdPUksuZXh0ZW5kLmFwcGx5KHRoaXMsIFt0cnVlXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBqUXVlcnkgYWRkQ2xhc3MgbWV0aG9kIHNob3J0Y3V0LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWV3b3JrUHJvdG8uYWRkQ2xhc3MuY2FsbChlbCwgY2xhc3Nlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBqUXVlcnkgcmVtb3ZlQ2xhc3MgbWV0aG9kIHNob3J0Y3V0LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWV3b3JrUHJvdG8ucmVtb3ZlQ2xhc3MuY2FsbChlbCwgY2xhc3Nlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBBZGRzIG9yIHJlbW92ZXMgdGhlIGdpdmVuIGNsYXNzZXMgZGVwZW5kZW50IG9uIHRoZSBib29sZWFuIHZhbHVlLiBUcnVlIGZvciBhZGQsIGZhbHNlIGZvciByZW1vdmUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFJlbW92ZUNsYXNzKGVsLCBjbGFzc2VzLCBkb0FkZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb0FkZCA/IGFkZENsYXNzKGVsLCBjbGFzc2VzKSA6IHJlbW92ZUNsYXNzKGVsLCBjbGFzc2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIGpRdWVyeSByZW1vdmUgbWV0aG9kIHNob3J0Y3V0LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmUoZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2ZyYW1ld29ya1Byb3RvLnJlbW92ZS5jYWxsKGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEZpbmRzIHRoZSBmaXJzdCBjaGlsZCBlbGVtZW50IHdpdGggdGhlIGdpdmVuIHNlbGVjdG9yIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGVsIFRoZSByb290IGVsZW1lbnQgZnJvbSB3aGljaCB0aGUgc2VsZWN0b3Igc2hhbGwgYmUgdmFsaWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gc2VsZWN0b3IgVGhlIHNlbGVjdG9yIG9mIHRoZSBzZWFyY2hlZCBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMgeyp9IFRoZSBmaXJzdCBlbGVtZW50IHdoaWNoIGlzIGEgY2hpbGQgb2YgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIG1hdGNoZXMgdGhlIGdpdmVucyBzZWxlY3Rvci5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmluZEZpcnN0KGVsLCBzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWV3b3JrUHJvdG8uZmluZC5jYWxsKGVsLCBzZWxlY3RvcikuZXEoMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vPT09PSBBUEkgPT09PS8vXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBQdXRzIHRoZSBpbnN0YW5jZSB0byBzbGVlcC4gSXQgd29udCByZXNwb25kIHRvIGFueSBjaGFuZ2VzIGluIHRoZSBET00gYW5kIHdvbid0IHVwZGF0ZS4gU2Nyb2xsYmFyIEludGVyYWN0aXZpdHkgaXMgYWxzbyBkaXNhYmxlZCBhcyB3ZWxsIGFzIHRoZSByZXNpemUgaGFuZGxlLlxyXG4gICAgICAgICAgICAgICAgICogVGhpcyBiZWhhdmlvciBjYW4gYmUgcmVzZXQgYnkgY2FsbGluZyB0aGUgdXBkYXRlIG1ldGhvZC5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgX2Jhc2Uuc2xlZXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NsZWVwaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBVcGRhdGVzIHRoZSBwbHVnaW4gYW5kIERPTSB0byB0aGUgY3VycmVudCBvcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIGEgdXBkYXRlIGlzIDEwMCUgcmVxdWlyZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZm9yY2UgVHJ1ZSBpZiBldmVyeSBwcm9wZXJ0eSBzaGFsbCBiZSB1cGRhdGVkIGFuZCB0aGUgY2FjaGUgc2hhbGwgYmUgaWdub3JlZC5cclxuICAgICAgICAgICAgICAgICAqICFJTlRFUk5BTCBVU0FHRSEgOiBmb3JjZSBjYW4gYmUgYSBzdHJpbmcgXCJhdXRvXCIsIFwic3luY1wiIG9yIFwiem9vbVwiIHRvb1xyXG4gICAgICAgICAgICAgICAgICogaWYgXCJhdXRvXCIgdGhlbiBiZWZvcmUgYSByZWFsIHVwZGF0ZSB0aGUgY29udGVudCBzaXplIGFuZCBob3N0IGVsZW1lbnQgYXR0cmlidXRlcyBnZXRzIGNoZWNrZWQsIGFuZCBpZiB0aGV5IGNoYW5nZWQgb25seSB0aGVuIHRoZSB1cGRhdGUgbWV0aG9kIHdpbGwgYmUgY2FsbGVkLlxyXG4gICAgICAgICAgICAgICAgICogaWYgXCJzeW5jXCIgdGhlbiB0aGUgYXN5bmMgdXBkYXRlIHByb2Nlc3MgKE11dGF0aW9uT2JzZXJ2ZXIgb3IgVXBkYXRlTG9vcCkgZ2V0cyBzeW5jaHJvbml6ZWQgYW5kIGEgY29ycmVzcG9uZGluZyB1cGRhdGUgdGFrZXMgcGxhY2UgaWYgb25lIHdhcyBuZWVkZWQgZHVlIHRvIHBlbmRpbmcgY2hhbmdlcy5cclxuICAgICAgICAgICAgICAgICAqIGlmIFwiem9vbVwiIHRoZW4gYSB1cGRhdGUgdGFrZXMgcGxhY2Ugd2hlcmUgaXQncyBhc3N1bWVkIHRoYXQgY29udGVudCBhbmQgaG9zdCBzaXplIGNoYW5nZWRcclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufHVuZGVmaW5lZH0gXHJcbiAgICAgICAgICAgICAgICAgKiBJZiBmb3JjZSBpcyBcInN5bmNcIiB0aGVuIGEgYm9vbGVhbiBpcyByZXR1cm5lZCB3aGljaCBpbmRpY2F0ZXMgd2hldGhlciBhIHVwZGF0ZSB3YXMgbmVlZGVkIGR1ZSB0byBwZW5kaW5nIGNoYW5nZXMuXHJcbiAgICAgICAgICAgICAgICAgKiBJZiBmb3JjZSBpcyBcImF1dG9cIiB0aGVuIGEgYm9vbGVhbiBpcyByZXR1cm5lZCB3aGV0aGVyIGEgdXBkYXRlIHdhcyBuZWVkZWQgZHVlIHRvIGF0dHJpYnV0ZSBvciBzaXplIGNoYW5nZXMuXHJcbiAgICAgICAgICAgICAgICAgKiB1bmRlZmluZWQgb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS51cGRhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2Rlc3Ryb3llZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnNDaGFuZ2VkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U2l6ZUM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZShmb3JjZSkgPT0gVFlQRVMucztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZG9VcGRhdGVBdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtdXRIb3N0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtdXRDb250ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlID09PSBfc3RyQXV0bykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNDaGFuZ2VkID0gbWVhbmluZ2Z1bEF0dHJzQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFNpemVDID0gdXBkYXRlQXV0b0NvbnRlbnRTaXplQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9VcGRhdGVBdXRvID0gYXR0cnNDaGFuZ2VkIHx8IGNvbnRlbnRTaXplQztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1VwZGF0ZUF1dG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudFNpemVDaGFuZ2VkOiBjb250ZW50U2l6ZUMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGFuZ2VkT3B0aW9uczogX2luaXRpYWxpemVkID8gdW5kZWZpbmVkIDogX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmb3JjZSA9PT0gX3N0clN5bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbXV0YXRpb25PYnNlcnZlcnNDb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRIb3N0ID0gX211dGF0aW9uT2JzZXJ2ZXJIb3N0Q2FsbGJhY2soX211dGF0aW9uT2JzZXJ2ZXJIb3N0LnRha2VSZWNvcmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dENvbnRlbnQgPSBfbXV0YXRpb25PYnNlcnZlckNvbnRlbnRDYWxsYmFjayhfbXV0YXRpb25PYnNlcnZlckNvbnRlbnQudGFrZVJlY29yZHMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRIb3N0ID0gX2Jhc2UudXBkYXRlKF9zdHJBdXRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmb3JjZSA9PT0gJ3pvb20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ob3N0U2l6ZUNoYW5nZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRTaXplQ2hhbmdlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlID0gX3NsZWVwaW5nIHx8IGZvcmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2xlZXBpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfYmFzZS51cGRhdGUoX3N0clN5bmMpIHx8IGZvcmNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHsgX2ZvcmNlOiBmb3JjZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRzT25Mb2FkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb1VwZGF0ZUF1dG8gfHwgbXV0SG9zdCB8fCBtdXRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICBHZXRzIG9yIHNldHMgdGhlIGN1cnJlbnQgb3B0aW9ucy4gVGhlIHVwZGF0ZSBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgYXV0b21hdGljYWxseSBpZiBuZXcgb3B0aW9ucyB3ZXJlIHNldC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBuZXdPcHRpb25zIElmIG5ldyBvcHRpb25zIGFyZSBnaXZlbiwgdGhlbiB0aGUgbmV3IG9wdGlvbnMgd2lsbCBiZSBzZXQsIGlmIG5ldyBvcHRpb25zIGFyZW4ndCBnaXZlbiAodW5kZWZpbmVkIG9yIGEgbm90IGEgcGxhaW4gb2JqZWN0KSB0aGVuIHRoZSBjdXJyZW50IG9wdGlvbnMgd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBJZiBuZXcgb3B0aW9ucyBpcyBhIHByb3BlcnR5IHBhdGggc3RyaW5nLCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIHRvIHNldCB0aGUgb3B0aW9uIHRvIHdoaWNoIHRoZSBwcm9wZXJ0eSBwYXRoIHN0cmluZyBsZWFkcy5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS5vcHRpb25zID0gZnVuY3Rpb24gKG5ld09wdGlvbnMsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkT3BzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBjdXJyZW50IG9wdGlvbnMgaWYgbmV3T3B0aW9ucyBhcmUgdW5kZWZpbmVkIG9yIGVtcHR5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZSQU1FV09SSy5pc0VtcHR5T2JqZWN0KG5ld09wdGlvbnMpIHx8ICFGUkFNRVdPUksuaXNQbGFpbk9iamVjdChuZXdPcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShuZXdPcHRpb25zKSA9PSBUWVBFUy5zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRPYmplY3RQcm9wVmFsKG9wdGlvbiwgbmV3T3B0aW9ucywgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRPcHMgPSBzZXRPcHRpb25zKG9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE9iamVjdFByb3BWYWwoX2N1cnJlbnRPcHRpb25zLCBuZXdPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2N1cnJlbnRPcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZE9wcyA9IHNldE9wdGlvbnMobmV3T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIUZSQU1FV09SSy5pc0VtcHR5T2JqZWN0KGNoYW5nZWRPcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh7IF9jaGFuZ2VkT3B0aW9uczogY2hhbmdlZE9wcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmVzdG9yZSB0aGUgRE9NLCBkaXNjb25uZWN0cyBhbGwgb2JzZXJ2ZXJzLCByZW1vdmUgYWxsIHJlc2l6ZSBvYnNlcnZlcnMgYW5kIHB1dCB0aGUgaW5zdGFuY2UgdG8gc2xlZXAuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kZXN0cm95ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhpcyBpbnN0YW5jZSBmcm9tIGF1dG8gdXBkYXRlIGxvb3BcclxuICAgICAgICAgICAgICAgICAgICBhdXRvVXBkYXRlTG9vcC5yZW1vdmUoX2Jhc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Rpc2Nvbm5lY3QgYWxsIG11dGF0aW9uIG9ic2VydmVyc1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3RNdXRhdGlvbk9ic2VydmVycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBhbGwgcmVzaXplIG9ic2VydmVyc1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVzaXplT2JzZXJ2ZXIoX3NpemVPYnNlcnZlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVzaXplT2JzZXJ2ZXIoX3NpemVBdXRvT2JzZXJ2ZXJFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIGV4dGVuc2lvbnNcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBleHROYW1lIGluIF9leHRlbnNpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYmFzZS5yZW1vdmVFeHQoZXh0TmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCAnZGVzdHJveScgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKF9kZXN0cm95RXZlbnRzW0xFWElDT04ubF0gPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveUV2ZW50cy5wb3AoKSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBhbGwgZXZlbnRzIGZyb20gaG9zdCBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBIb3N0TW91c2VUb3VjaEV2ZW50cyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIGhlbHBlciAvIGRldGVjdGlvbiBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfY29udGVudEdsdWVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoX2NvbnRlbnRHbHVlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jb250ZW50QXJyYW5nZUVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShfY29udGVudEFycmFuZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3NpemVBdXRvT2JzZXJ2ZXJBZGRlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKF9zaXplQXV0b09ic2VydmVyRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBnZW5lcmF0ZWQgRE9NXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBTY3JvbGxiYXJzRE9NKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwU2Nyb2xsYmFyQ29ybmVyRE9NKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwU3RydWN0dXJlRE9NKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBhbGwgZ2VuZXJhdGVkIGltYWdlIGxvYWQgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdXBkYXRlT25Mb2FkRWxtc1tMRVhJQ09OLmxdOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZSQU1FV09SSyhfdXBkYXRlT25Mb2FkRWxtc1tpXSkub2ZmKF91cGRhdGVPbkxvYWRFdmVudE5hbWUsIHVwZGF0ZU9uTG9hZENhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICBfdXBkYXRlT25Mb2FkRWxtcyA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NsZWVwaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhpcyBpbnN0YW5jZSBmcm9tIHRoZSBpbnN0YW5jZXMgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIElOU1RBTkNFUyhwbHVnaW5UYXJnZXRFbGVtZW50LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvbkRlc3Ryb3llZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yICh2YXIgcHJvcGVydHkgaW4gX2Jhc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZGVsZXRlIF9iYXNlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgICAgICAvL19iYXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNjcm9sbHMgdG8gYSBnaXZlbiBwb3NpdGlvbiBvciBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGVzXHJcbiAgICAgICAgICAgICAgICAgKiAxLiBDYW4gYmUgXCJjb29yZGluYXRlc1wiIHdoaWNoIGxvb2tzIGxpa2U6XHJcbiAgICAgICAgICAgICAgICAgKiAgICB7IHggOiA/LCB5IDogPyB9IE9SICAgICAgICAgIE9iamVjdCB3aXRoIHggYW5kIHkgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICogICAgeyBsZWZ0IDogPywgdG9wIDogPyB9IE9SICAgICBPYmplY3Qgd2l0aCBsZWZ0IGFuZCB0b3AgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICogICAgeyBsIDogPywgdCA6ID8gfSBPUiAgICAgICAgICBPYmplY3Qgd2l0aCBsIGFuZCB0IHByb3BlcnRpZXNcclxuICAgICAgICAgICAgICAgICAqICAgIFsgPywgPyBdIE9SICAgICAgICAgICAgICAgICAgQXJyYXkgd2hlcmUgdGhlIGZpcnN0IHR3byBlbGVtZW50IGFyZSB0aGUgY29vcmRpbmF0ZXMgKGZpcnN0IGlzIHgsIHNlY29uZCBpcyB5KVxyXG4gICAgICAgICAgICAgICAgICogICAgPyAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHNpbmdsZSB2YWx1ZSB3aGljaCBzdGF5cyBmb3IgYm90aCBheGlzXHJcbiAgICAgICAgICAgICAgICAgKiAgICBBIHZhbHVlIGNhbiBiZSBhIG51bWJlciwgYSBzdHJpbmcgb3IgYSBjYWxjdWxhdGlvbi5cclxuICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgKiAgICBPcGVyYXRvcnM6XHJcbiAgICAgICAgICAgICAgICAgKiAgICBbTk9ORV0gIFRoZSBjdXJyZW50IHNjcm9sbCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAqICAgICcrPScgICAgVGhlIHZhbHVlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldFxyXG4gICAgICAgICAgICAgICAgICogICAgJy09JyAgICBUaGUgdmFsdWUgd2lsbCBiZSBzdWJ0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldFxyXG4gICAgICAgICAgICAgICAgICogICAgJyo9JyAgICBUaGUgY3VycmVudCBzY3JvbGwgd2lsIGJlIG11bHRpcGxpY2F0ZWQgYnkgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICogICAgJy89JyAgICBUaGUgY3VycmVudCBzY3JvbGwgd2lsIGJlIGRpdmlkZWQgYnkgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqICAgIFVuaXRzOlxyXG4gICAgICAgICAgICAgICAgICogICAgW05PTkVdICBUaGUgdmFsdWUgaXMgdGhlIGZpbmFsIHNjcm9sbCBhbW91bnQuICAgICAgICAgICAgICAgICAgIGZpbmFsID0gKHZhbHVlICogMSlcclxuICAgICAgICAgICAgICAgICAqICAgICdweCcgICAgU2FtZSBhcyBub25lXHJcbiAgICAgICAgICAgICAgICAgKiAgICAnJScgICAgIFRoZSB2YWx1ZSBpcyBkZXBlbmRlbnQgb24gdGhlIGN1cnJlbnQgc2Nyb2xsIHZhbHVlLiAgICAgZmluYWwgPSAoKGN1cnJlbnRTY3JvbGxWYWx1ZSAvIDEwMCkgKiB2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAqICAgICd2dycgICAgVGhlIHZhbHVlIGlzIG11bHRpcGxpY2F0ZWQgYnkgdGhlIHZpZXdwb3J0IHdpZHRoLiAgICAgICBmaW5hbCA9ICh2YWx1ZSAqIHZpZXdwb3J0V2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgKiAgICAndmgnICAgIFRoZSB2YWx1ZSBpcyBtdWx0aXBsaWNhdGVkIGJ5IHRoZSB2aWV3cG9ydCBoZWlnaHQuICAgICAgZmluYWwgPSAodmFsdWUgKiB2aWV3cG9ydEhlaWdodClcclxuICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgKiAgICBleGFtcGxlIGZpbmFsIHZhbHVlczpcclxuICAgICAgICAgICAgICAgICAqICAgIDIwMCwgJzIwMHB4JywgJzUwJScsICcxdncnLCAnMXZoJywgJys9MjAwJywgJy89MXZ3JywgJyo9MnB4JywgJy09NXZoJywgJys9MzMlJywgJys9IDUwJSAtIDJweCcsICctPSAxdncgLSA1MCUnXHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogMi4gQ2FuIGJlIGEgSFRNTCBvciBqUXVlcnkgZWxlbWVudDpcclxuICAgICAgICAgICAgICAgICAqICAgIFRoZSBmaW5hbCBzY3JvbGwgb2Zmc2V0IGlzIHRoZSBvZmZzZXQgKHdpdGhvdXQgbWFyZ2luKSBvZiB0aGUgZ2l2ZW4gSFRNTCAvIGpRdWVyeSBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIDMuIENhbiBiZSBhIG9iamVjdCB3aXRoIGEgSFRNTCBvciBqUXVlcnkgZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgc2V0dGluZ3M6XHJcbiAgICAgICAgICAgICAgICAgKiAgICB7XHJcbiAgICAgICAgICAgICAgICAgKiAgICAgIGVsIDogW0hUTUxFbGVtZW50LCBqUXVlcnkgZWxlbWVudF0sICAgICAgICAgICAgIE1VU1QgYmUgc3BlY2lmaWVkLCBlbHNlIHRoaXMgb2JqZWN0IGlzbid0IHZhbGlkLlxyXG4gICAgICAgICAgICAgICAgICogICAgICBzY3JvbGwgOiBbc3RyaW5nLCBhcnJheSwgb2JqZWN0XSwgICAgICAgICAgICAgICBEZWZhdWx0IHZhbHVlIGlzICdhbHdheXMnLlxyXG4gICAgICAgICAgICAgICAgICogICAgICBibG9jayA6IFtzdHJpbmcsIGFycmF5LCBvYmplY3RdLCAgICAgICAgICAgICAgICBEZWZhdWx0IHZhbHVlIGlzICdiZWdpbicuXHJcbiAgICAgICAgICAgICAgICAgKiAgICAgIG1hcmdpbiA6IFtudW1iZXIsIGJvb2xlYW4sIGFycmF5LCBvYmplY3RdICAgICAgIERlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXHJcbiAgICAgICAgICAgICAgICAgKiAgICB9XHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogICAgUG9zc2libGUgc2Nyb2xsIHNldHRpbmdzIGFyZTpcclxuICAgICAgICAgICAgICAgICAqICAgICdhbHdheXMnICAgICAgU2Nyb2xscyBhbHdheXMuXHJcbiAgICAgICAgICAgICAgICAgKiAgICAnaWZuZWVkZWQnICAgIFNjcm9sbHMgb25seSBpZiB0aGUgZWxlbWVudCBpc250IGZ1bGx5IGluIHZpZXcuXHJcbiAgICAgICAgICAgICAgICAgKiAgICAnbmV2ZXInICAgICAgIFNjcm9sbHMgbmV2ZXIuXHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogICAgUG9zc2libGUgYmxvY2sgc2V0dGluZ3MgYXJlOlxyXG4gICAgICAgICAgICAgICAgICogICAgJ2JlZ2luJyAgIEJvdGggYXhpcyBzaGFsbCBiZSBkb2NrZWQgdG8gdGhlIFwiYmVnaW5cIiBlZGdlLiAtIFRoZSBlbGVtZW50IHdpbGwgYmUgZG9ja2VkIHRvIHRoZSB0b3AgYW5kIGxlZnQgZWRnZSBvZiB0aGUgdmlld3BvcnQuXHJcbiAgICAgICAgICAgICAgICAgKiAgICAnZW5kJyAgICAgQm90aCBheGlzIHNoYWxsIGJlIGRvY2tlZCB0byB0aGUgXCJlbmRcIiBlZGdlLiAtIFRoZSBlbGVtZW50IHdpbGwgYmUgZG9ja2VkIHRvIHRoZSBib3R0b20gYW5kIHJpZ2h0IGVkZ2Ugb2YgdGhlIHZpZXdwb3J0LiAoSWYgZGlyZWN0aW9uIGlzIFJUTCB0byB0aGUgYm90dG9tIGFuZCBsZWZ0IGVkZ2UuKVxyXG4gICAgICAgICAgICAgICAgICogICAgJ2NlbnRlcicgIEJvdGggYXhpcyBzaGFsbCBiZSBkb2NrZWQgdG8gXCJjZW50ZXJcIi4gLSBUaGUgZWxlbWVudCB3aWxsIGJlIGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydC5cclxuICAgICAgICAgICAgICAgICAqICAgICduZWFyZXN0JyBUaGUgZWxlbWVudCB3aWxsIGJlIGRvY2tlZCB0byB0aGUgbmVhcmVzdCBlZGdlKHMpLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqICAgIFBvc3NpYmxlIG1hcmdpbiBzZXR0aW5ncyBhcmU6IC0tIFRoZSBhY3R1YWwgbWFyZ2luIG9mIHRoZSBlbGVtZW50IHdvbnQgYmUgYWZmZWN0LCB0aGlzIG9wdGlvbiBhZmZlY3RzIG9ubHkgdGhlIGZpbmFsIHNjcm9sbCBvZmZzZXQuXHJcbiAgICAgICAgICAgICAgICAgKiAgICBbQk9PTEVBTl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRydWUgdGhlIGNzcyBtYXJnaW4gb2YgdGhlIGVsZW1lbnQgd2lsbCBiZSB1c2VkLCBpZiBmYWxzZSBubyBtYXJnaW4gd2lsbCBiZSB1c2VkLlxyXG4gICAgICAgICAgICAgICAgICogICAgW05VTUJFUl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgbWFyZ2luIHdpbGwgYmUgdXNlZCBmb3IgYWxsIGVkZ2VzLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIHNjcm9sbCBhbmltYXRpb24sIE9SIGEgalF1ZXJ5IGFuaW1hdGlvbiBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBlYXNpbmcgVGhlIGFuaW1hdGlvbiBlYXNpbmcuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY29tcGxldGUgVGhlIGFuaW1hdGlvbiBjb21wbGV0ZSBjYWxsYmFjay5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHt7XHJcbiAgICAgICAgICAgICAgICAgKiAgIHBvc2l0aW9uOiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9LFxyXG4gICAgICAgICAgICAgICAgICogICByYXRpbzoge3g6IG51bWJlciwgeTogbnVtYmVyfSxcclxuICAgICAgICAgICAgICAgICAqICAgbWF4OiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9LFxyXG4gICAgICAgICAgICAgICAgICogICBoYW5kbGVPZmZzZXQ6IHt4OiBudW1iZXIsIHk6IG51bWJlcn0sXHJcbiAgICAgICAgICAgICAgICAgKiAgIGhhbmRsZUxlbmd0aDoge3g6IG51bWJlciwgeTogbnVtYmVyfSxcclxuICAgICAgICAgICAgICAgICAqICAgaGFuZGxlTGVuZ3RoUmF0aW86IHt4OiBudW1iZXIsIHk6IG51bWJlcn0sIHRcclxuICAgICAgICAgICAgICAgICAqICAgcmFja0xlbmd0aDoge3g6IG51bWJlciwgeTogbnVtYmVyfSxcclxuICAgICAgICAgICAgICAgICAqICAgaXNSVEw6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgKiAgIGlzUlRMTm9ybWFsaXplZDogYm9vbGVhblxyXG4gICAgICAgICAgICAgICAgICogIH19XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLnNjcm9sbCA9IGZ1bmN0aW9uIChjb29yZGluYXRlcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCBjb29yZGluYXRlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmZvWCA9IF9zY3JvbGxIb3Jpem9udGFsSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm9ZID0gX3Njcm9sbFZlcnRpY2FsSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZUludmVydCA9IF9ub3JtYWxpemVSVExDYWNoZSAmJiBfaXNSVEwgJiYgX3J0bFNjcm9sbEJlaGF2aW9yLmk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVOZWdhdGUgPSBfbm9ybWFsaXplUlRMQ2FjaGUgJiYgX2lzUlRMICYmIF9ydGxTY3JvbGxCZWhhdmlvci5uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsWCA9IGluZm9YLl9jdXJyZW50U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsWFJhdGlvID0gaW5mb1guX2N1cnJlbnRTY3JvbGxSYXRpbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heFNjcm9sbFggPSBpbmZvWC5fbWF4U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxYUmF0aW8gPSBub3JtYWxpemVJbnZlcnQgPyAxIC0gc2Nyb2xsWFJhdGlvIDogc2Nyb2xsWFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxYID0gbm9ybWFsaXplSW52ZXJ0ID8gbWF4U2Nyb2xsWCAtIHNjcm9sbFggOiBzY3JvbGxYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxYICo9IG5vcm1hbGl6ZU5lZ2F0ZSA/IC0xIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2Nyb2xsWCAqPSBub3JtYWxpemVOZWdhdGUgPyAtMSA6IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBzY3JvbGxYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGluZm9ZLl9jdXJyZW50U2Nyb2xsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW86IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBzY3JvbGxYUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogaW5mb1kuX2N1cnJlbnRTY3JvbGxSYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IG1heFNjcm9sbFgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogaW5mb1kuX21heFNjcm9sbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU9mZnNldDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGluZm9YLl9oYW5kbGVPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogaW5mb1kuX2hhbmRsZU9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUxlbmd0aDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGluZm9YLl9oYW5kbGVMZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogaW5mb1kuX2hhbmRsZUxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUxlbmd0aFJhdGlvOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogaW5mb1guX2hhbmRsZUxlbmd0aFJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGluZm9ZLl9oYW5kbGVMZW5ndGhSYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrTGVuZ3RoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogaW5mb1guX3RyYWNrTGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGluZm9ZLl90cmFja0xlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNuYXBwZWRIYW5kbGVPZmZzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBpbmZvWC5fc25hcHBlZEhhbmRsZU9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpbmZvWS5fc25hcHBlZEhhbmRsZU9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUlRMOiBfaXNSVEwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JUTE5vcm1hbGl6ZWQ6IF9ub3JtYWxpemVSVExDYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Jhc2UudXBkYXRlKF9zdHJTeW5jKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZVJUTCA9IF9ub3JtYWxpemVSVExDYWNoZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXNYQXhpc1Byb3BzID0gW19zdHJYLCBfc3RyTGVmdCwgJ2wnXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXNZQXhpc1Byb3BzID0gW19zdHJZLCBfc3RyVG9wLCAndCddO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZGluYXRlc09wZXJhdG9ycyA9IFsnKz0nLCAnLT0nLCAnKj0nLCAnLz0nXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb25Jc09iamVjdCA9IHR5cGUoZHVyYXRpb24pID09IFRZUEVTLm87XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlQ2FsbGJhY2sgPSBkdXJhdGlvbklzT2JqZWN0ID8gZHVyYXRpb24uY29tcGxldGUgOiBjb21wbGV0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxTY3JvbGwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY2lhbEVhc2luZyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkb1Njcm9sbExlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvU2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25PcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJFbmQgPSAnZW5kJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyQmVnaW4gPSAnYmVnaW4nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJDZW50ZXIgPSAnY2VudGVyJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyTmVhcmVzdCA9ICduZWFyZXN0JztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyQWx3YXlzID0gJ2Fsd2F5cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ck5ldmVyID0gJ25ldmVyJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RySWZOZWVkZWQgPSAnaWZuZWVkZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJMZW5ndGggPSBMRVhJQ09OLmw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzQXhpcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3NTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzQmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzTWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRPYmpTZXR0aW5nc0F4aXNWYWx1ZXMgPSBbX3N0clgsIF9zdHJZLCAneHknLCAneXgnXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudE9ialNldHRpbmdzQmxvY2tWYWx1ZXMgPSBbc3RyQmVnaW4sIHN0ckVuZCwgc3RyQ2VudGVyLCBzdHJOZWFyZXN0XTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudE9ialNldHRpbmdzU2Nyb2xsVmFsdWVzID0gW3N0ckFsd2F5cywgc3RyTmV2ZXIsIHN0cklmTmVlZGVkXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXNJc0VsZW1lbnRPYmogPSBjb29yZGluYXRlc1tMRVhJQ09OLmhPUF0oJ2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3NpYmxlRWxlbWVudCA9IGNvb3JkaW5hdGVzSXNFbGVtZW50T2JqID8gY29vcmRpbmF0ZXMuZWwgOiBjb29yZGluYXRlcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zc2libGVFbGVtZW50SXNKUXVlcnkgPSBwb3NzaWJsZUVsZW1lbnQgaW5zdGFuY2VvZiBGUkFNRVdPUksgfHwgSlFVRVJZID8gcG9zc2libGVFbGVtZW50IGluc3RhbmNlb2YgSlFVRVJZIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3NpYmxlRWxlbWVudElzSFRNTEVsZW1lbnQgPSBwb3NzaWJsZUVsZW1lbnRJc0pRdWVyeSA/IGZhbHNlIDogaXNIVE1MRWxlbWVudChwb3NzaWJsZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVTY3JvbGxiYXJJbmZvcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvU2Nyb2xsTGVmdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1Njcm9sbFRvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JvbGxiYXJIYW5kbGVPZmZzZXQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3h5Q29tcGxldGVDYWxsYmFjayA9IHR5cGUoY29tcGxldGVDYWxsYmFjaykgIT0gVFlQRVMuZiA/IHVuZGVmaW5lZCA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsYmFySW5mb3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tTZXR0aW5nc1N0cmluZ1ZhbHVlKGN1cnJWYWx1ZSwgYWxsb3dlZFZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsb3dlZFZhbHVlc1tzdHJMZW5ndGhdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyVmFsdWUgPT09IGFsbG93ZWRWYWx1ZXNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRSYXdTY3JvbGwoaXNYLCBjb29yZGluYXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZVByb3BzID0gaXNYID8gY29vcmRpbmF0ZXNYQXhpc1Byb3BzIDogY29vcmRpbmF0ZXNZQXhpc1Byb3BzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IHR5cGUoY29vcmRpbmF0ZXMpID09IFRZUEVTLnMgfHwgdHlwZShjb29yZGluYXRlcykgPT0gVFlQRVMubiA/IFtjb29yZGluYXRlcywgY29vcmRpbmF0ZXNdIDogY29vcmRpbmF0ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ09NUEFUSUJJTElUWS5pc0EoY29vcmRpbmF0ZXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzWCA/IGNvb3JkaW5hdGVzWzBdIDogY29vcmRpbmF0ZXNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUoY29vcmRpbmF0ZXMpID09IFRZUEVTLm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVjaWRlcyBSVEwgbm9ybWFsaXphdGlvbiBcImhhY2tcIiB3aXRoIC5uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vcm1hbGl6ZVJUTCA9IHR5cGUoY29vcmRpbmF0ZXMubikgPT0gVFlQRVMuYiA/IGNvb3JkaW5hdGVzLm4gOiBub3JtYWxpemVSVEw7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb3JkaW5hdGVQcm9wc1tzdHJMZW5ndGhdOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGVQcm9wc1tpXSBpbiBjb29yZGluYXRlcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVQcm9wc1tpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RmluYWxTY3JvbGwoaXNYLCByYXdTY3JvbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZShyYXdTY3JvbGwpID09IFRZUEVTLnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcGVyYXRvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEluZm8gPSBpc1ggPyBfc2Nyb2xsSG9yaXpvbnRhbEluZm8gOiBfc2Nyb2xsVmVydGljYWxJbmZvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyclNjcm9sbCA9IHNjcm9sbEluZm8uX2N1cnJlbnRTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXhTY3JvbGwgPSBzY3JvbGxJbmZvLl9tYXhTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtdWx0ID0gJyAqICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNSVExpc1ggPSBfaXNSVEwgJiYgaXNYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplU2hvcnRjdXRzID0gaXNSVExpc1ggJiYgX3J0bFNjcm9sbEJlaGF2aW9yLm4gJiYgIW5vcm1hbGl6ZVJUTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0clJlcGxhY2UgPSAncmVwbGFjZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmFsRnVuYyA9IGV2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NzaWJsZU9wZXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgb3BlcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdTY3JvbGxbc3RyTGVuZ3RoXSA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU9wZXJhdG9yID0gcmF3U2Nyb2xsLnN1YnN0cigwLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5BcnJheShwb3NzaWJsZU9wZXJhdG9yLCBjb29yZGluYXRlc09wZXJhdG9ycykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IgPSBwb3NzaWJsZU9wZXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRlIHVuaXRzIGFuZCBzaG9ydGN1dHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1Njcm9sbCA9IG9wZXJhdG9yID8gcmF3U2Nyb2xsLnN1YnN0cigyKSA6IHJhd1Njcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1Njcm9sbCA9IHJhd1Njcm9sbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0clJlcGxhY2VdKC9taW4vZywgMCkgLy8nbWluJyA9IDAlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyUmVwbGFjZV0oLzwvZywgMCkgICAvLyc8JyAgID0gMCVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdHJSZXBsYWNlXSgvbWF4L2csIChub3JtYWxpemVTaG9ydGN1dHMgPyAnLScgOiBfc3RyRW1wdHkpICsgX3N0ckh1bmRyZWRQZXJjZW50KSAgICAvLydtYXgnID0gMTAwJVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0clJlcGxhY2VdKC8+L2csIChub3JtYWxpemVTaG9ydGN1dHMgPyAnLScgOiBfc3RyRW1wdHkpICsgX3N0ckh1bmRyZWRQZXJjZW50KSAgICAgIC8vJz4nICAgPSAxMDAlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyUmVwbGFjZV0oL3B4L2csIF9zdHJFbXB0eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdHJSZXBsYWNlXSgvJS9nLCBtdWx0ICsgKG1heFNjcm9sbCAqIChpc1JUTGlzWCAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IubiA/IC0xIDogMSkgLyAxMDAuMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyUmVwbGFjZV0oL3Z3L2csIG11bHQgKyBfdmlld3BvcnRTaXplLncpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyUmVwbGFjZV0oL3ZoL2csIG11bHQgKyBfdmlld3BvcnRTaXplLmgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gcGFyc2VUb1plcm9Pck51bWJlcihpc05hTihyYXdTY3JvbGwpID8gcGFyc2VUb1plcm9Pck51bWJlcihldmFsRnVuYyhyYXdTY3JvbGwpLCB0cnVlKS50b0ZpeGVkKCkgOiByYXdTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gcmF3U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW1vdW50ICE9PSB1bmRlZmluZWQgJiYgIWlzTmFOKGFtb3VudCkgJiYgdHlwZShhbW91bnQpID09IFRZUEVTLm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVJc1JUTGlzWCA9IG5vcm1hbGl6ZVJUTCAmJiBpc1JUTGlzWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcGVyYXRvckN1cnJTY3JvbGwgPSBjdXJyU2Nyb2xsICogKG5vcm1hbGl6ZUlzUlRMaXNYICYmIF9ydGxTY3JvbGxCZWhhdmlvci5uID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnZlcnQgPSBub3JtYWxpemVJc1JUTGlzWCAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IuaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZWdhdGUgPSBub3JtYWxpemVJc1JUTGlzWCAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IubjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yQ3VyclNjcm9sbCA9IGludmVydCA/IChtYXhTY3JvbGwgLSBvcGVyYXRvckN1cnJTY3JvbGwpIDogb3BlcmF0b3JDdXJyU2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJys9JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IG9wZXJhdG9yQ3VyclNjcm9sbCArIGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLT0nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gb3BlcmF0b3JDdXJyU2Nyb2xsIC0gYW1vdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcqPSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBvcGVyYXRvckN1cnJTY3JvbGwgKiBhbW91bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy89JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IG9wZXJhdG9yQ3VyclNjcm9sbCAvIGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gaW52ZXJ0ID8gbWF4U2Nyb2xsIC0gZmluYWxWYWx1ZSA6IGZpbmFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlICo9IG5lZ2F0ZSA/IC0xIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBpc1JUTGlzWCAmJiBfcnRsU2Nyb2xsQmVoYXZpb3IubiA/IE1BVEgubWluKDAsIE1BVEgubWF4KG1heFNjcm9sbCwgZmluYWxWYWx1ZSkpIDogTUFUSC5tYXgoMCwgTUFUSC5taW4obWF4U2Nyb2xsLCBmaW5hbFZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmFsVmFsdWUgPT09IGN1cnJTY3JvbGwgPyB1bmRlZmluZWQgOiBmaW5hbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQZXJBeGlzVmFsdWUodmFsdWUsIHZhbHVlSW50ZXJuYWxUeXBlLCBkZWZhdWx0VmFsdWUsIGFsbG93ZWRWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdERlZmF1bHQgPSBbZGVmYXVsdFZhbHVlLCBkZWZhdWx0VmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdHlwZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUFyckxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlQXJySXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFsdWUgY2FuIGJlIFsgc3RyaW5nLCBvciBhcnJheSBvZiB0d28gc3RyaW5ncyBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT0gdmFsdWVJbnRlcm5hbFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW3ZhbHVlLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWVUeXBlID09IFRZUEVTLmEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQXJyTGVuZ3RoID0gdmFsdWVbc3RyTGVuZ3RoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUFyckxlbmd0aCA+IDIgfHwgdmFsdWVBcnJMZW5ndGggPCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0RGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUFyckxlbmd0aCA9PT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbMV0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbHVlQXJyTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBcnJJdGVtID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlKHZhbHVlQXJySXRlbSkgIT0gdmFsdWVJbnRlcm5hbFR5cGUgfHwgIWNoZWNrU2V0dGluZ3NTdHJpbmdWYWx1ZSh2YWx1ZUFyckl0ZW0sIGFsbG93ZWRWYWx1ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdERlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gVFlQRVMubylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW3ZhbHVlW19zdHJYXSB8fCBkZWZhdWx0VmFsdWUsIHZhbHVlW19zdHJZXSB8fCBkZWZhdWx0VmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdERlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IHZhbHVlWzBdLCB5OiB2YWx1ZVsxXSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hcmdpbihtYXJnaW5Ub3BSaWdodEJvdHRvbUxlZnRBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyVmFsdWVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVEaXJlY3Rpb25zID0gW19zdHJUb3AsIF9zdHJSaWdodCwgX3N0ckJvdHRvbSwgX3N0ckxlZnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWFyZ2luVG9wUmlnaHRCb3R0b21MZWZ0QXJyYXlbc3RyTGVuZ3RoXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdmFsdWVEaXJlY3Rpb25zW3N0ckxlbmd0aF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyVmFsdWUgPSBtYXJnaW5Ub3BSaWdodEJvdHRvbUxlZnRBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJWYWx1ZVR5cGUgPSB0eXBlKGN1cnJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyclZhbHVlVHlwZSA9PSBUWVBFUy5iKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJWYWx1ZSA/IHBhcnNlVG9aZXJvT3JOdW1iZXIoZmluYWxFbGVtZW50LmNzcyhfc3RyTWFyZ2luTWludXMgKyB2YWx1ZURpcmVjdGlvbnNbaV0pKSA6IDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJWYWx1ZVR5cGUgPT0gVFlQRVMubiA/IGN1cnJWYWx1ZSA6IDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zc2libGVFbGVtZW50SXNKUXVlcnkgfHwgcG9zc2libGVFbGVtZW50SXNIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBzZXR0aW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gY29vcmRpbmF0ZXNJc0VsZW1lbnRPYmogPyBjb29yZGluYXRlcy5tYXJnaW4gOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXhpcyA9IGNvb3JkaW5hdGVzSXNFbGVtZW50T2JqID8gY29vcmRpbmF0ZXMuYXhpcyA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGwgPSBjb29yZGluYXRlc0lzRWxlbWVudE9iaiA/IGNvb3JkaW5hdGVzLnNjcm9sbCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGNvb3JkaW5hdGVzSXNFbGVtZW50T2JqID8gY29vcmRpbmF0ZXMuYmxvY2sgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2luRGVmYXVsdCA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmdpblR5cGUgPSB0eXBlKG1hcmdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJnaW5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRWxlbWVudCA9IHBvc3NpYmxlRWxlbWVudElzSlF1ZXJ5ID8gcG9zc2libGVFbGVtZW50IDogRlJBTUVXT1JLKHBvc3NpYmxlRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmluYWxFbGVtZW50W3N0ckxlbmd0aF0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21hcmdpbiBjYW4gYmUgWyBib29sZWFuLCBudW1iZXIsIGFycmF5IG9mIDIsIGFycmF5IG9mIDQsIG9iamVjdCBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyZ2luVHlwZSA9PSBUWVBFUy5uIHx8IG1hcmdpblR5cGUgPT0gVFlQRVMuYilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSBnZW5lcmF0ZU1hcmdpbihbbWFyZ2luLCBtYXJnaW4sIG1hcmdpbiwgbWFyZ2luXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXJnaW5UeXBlID09IFRZUEVTLmEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZW5ndGggPSBtYXJnaW5bc3RyTGVuZ3RoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyZ2luTGVuZ3RoID09PSAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSBnZW5lcmF0ZU1hcmdpbihbbWFyZ2luWzBdLCBtYXJnaW5bMV0sIG1hcmdpblswXSwgbWFyZ2luWzFdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWFyZ2luTGVuZ3RoID49IDQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IGdlbmVyYXRlTWFyZ2luKG1hcmdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSBtYXJnaW5EZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWFyZ2luVHlwZSA9PSBUWVBFUy5vKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IGdlbmVyYXRlTWFyZ2luKFttYXJnaW5bX3N0clRvcF0sIG1hcmdpbltfc3RyUmlnaHRdLCBtYXJnaW5bX3N0ckJvdHRvbV0sIG1hcmdpbltfc3RyTGVmdF1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSBtYXJnaW5EZWZhdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYmxvY2sgPSB0eXBlKGJsb2NrKSA9PT0gVFlQRVMuYiA/IGJsb2NrID8gWyBzdHJOZWFyZXN0LCBzdHJCZWdpbiBdIDogWyBzdHJOZWFyZXN0LCBzdHJFbmQgXSA6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NBeGlzID0gY2hlY2tTZXR0aW5nc1N0cmluZ1ZhbHVlKGF4aXMsIGVsZW1lbnRPYmpTZXR0aW5nc0F4aXNWYWx1ZXMpID8gYXhpcyA6ICd4eSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc1Njcm9sbCA9IGdldFBlckF4aXNWYWx1ZShzY3JvbGwsIFRZUEVTLnMsIHN0ckFsd2F5cywgZWxlbWVudE9ialNldHRpbmdzU2Nyb2xsVmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzQmxvY2sgPSBnZXRQZXJBeGlzVmFsdWUoYmxvY2ssIFRZUEVTLnMsIHN0ckJlZ2luLCBlbGVtZW50T2JqU2V0dGluZ3NCbG9ja1ZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc01hcmdpbiA9IG1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnRTY3JvbGwgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbDogX3Njcm9sbEhvcml6b250YWxJbmZvLl9jdXJyZW50U2Nyb2xsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQ6IF9zY3JvbGxWZXJ0aWNhbEluZm8uX2N1cnJlbnRTY3JvbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2UgcGFkZGluZyBlbGVtZW50IGluc3RlYWQgb2Ygdmlld3BvcnQgZWxlbWVudCBiZWNhdXNlIHBhZGRpbmcgZWxlbWVudCBoYXMgbmV2ZXIgcGFkZGluZywgbWFyZ2luIG9yIHBvc2l0aW9uIGFwcGxpZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnRPZmZzZXQgPSBfcGFkZGluZ0VsZW1lbnQub2Zmc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgY29vcmRpbmF0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50T2Zmc2V0ID0gZmluYWxFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvTm90U2Nyb2xsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNldHRpbmdzU2Nyb2xsLnggPT0gc3RyTmV2ZXIgfHwgc2V0dGluZ3NBeGlzID09IF9zdHJZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHNldHRpbmdzU2Nyb2xsLnkgPT0gc3RyTmV2ZXIgfHwgc2V0dGluZ3NBeGlzID09IF9zdHJYXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudE9mZnNldFtfc3RyVG9wXSAtPSBzZXR0aW5nc01hcmdpblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRPZmZzZXRbX3N0ckxlZnRdIC09IHNldHRpbmdzTWFyZ2luWzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTY3JvbGxDb29yZGluYXRlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBNQVRILnJvdW5kKGVsZW1lbnRPZmZzZXRbX3N0ckxlZnRdIC0gdmlld3BvcnRPZmZzZXRbX3N0ckxlZnRdICsgdmlld3BvcnRTY3JvbGwubCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogTUFUSC5yb3VuZChlbGVtZW50T2Zmc2V0W19zdHJUb3BdIC0gdmlld3BvcnRPZmZzZXRbX3N0clRvcF0gKyB2aWV3cG9ydFNjcm9sbC50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNSVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ydGxTY3JvbGxCZWhhdmlvci5uICYmICFfcnRsU2Nyb2xsQmVoYXZpb3IuaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFNjcm9sbENvb3JkaW5hdGVzLnggPSBNQVRILnJvdW5kKHZpZXdwb3J0T2Zmc2V0W19zdHJMZWZ0XSAtIGVsZW1lbnRPZmZzZXRbX3N0ckxlZnRdICsgdmlld3BvcnRTY3JvbGwubCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9ydGxTY3JvbGxCZWhhdmlvci5uICYmIG5vcm1hbGl6ZVJUTClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFNjcm9sbENvb3JkaW5hdGVzLnggKj0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9ydGxTY3JvbGxCZWhhdmlvci5pICYmIG5vcm1hbGl6ZVJUTClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFNjcm9sbENvb3JkaW5hdGVzLnggPSBNQVRILnJvdW5kKHZpZXdwb3J0T2Zmc2V0W19zdHJMZWZ0XSAtIGVsZW1lbnRPZmZzZXRbX3N0ckxlZnRdICsgKF9zY3JvbGxIb3Jpem9udGFsSW5mby5fbWF4U2Nyb2xsIC0gdmlld3BvcnRTY3JvbGwubCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVhc3VyaW5nIGlzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3NCbG9jay54ICE9IHN0ckJlZ2luIHx8IHNldHRpbmdzQmxvY2sueSAhPSBzdHJCZWdpbiB8fCBzZXR0aW5nc1Njcm9sbC54ID09IHN0cklmTmVlZGVkIHx8IHNldHRpbmdzU2Nyb2xsLnkgPT0gc3RySWZOZWVkZWQgfHwgX2lzUlRMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lYXN1cmluZ0VsbSA9IGZpbmFsRWxlbWVudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3RWxlbWVudFNpemUgPSBfc3VwcG9ydFRyYW5zZm9ybSA/IG1lYXN1cmluZ0VsbVtMRVhJQ09OLmJDUl0oKSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG1lYXN1cmluZ0VsbVtMRVhJQ09OLm9XXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtZWFzdXJpbmdFbG1bTEVYSUNPTi5vSF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdzogcmF3RWxlbWVudFNpemVbX3N0cldpZHRoXSArIHNldHRpbmdzTWFyZ2luWzNdICsgc2V0dGluZ3NNYXJnaW5bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg6IHJhd0VsZW1lbnRTaXplW19zdHJIZWlnaHRdICsgc2V0dGluZ3NNYXJnaW5bMF0gKyBzZXR0aW5nc01hcmdpblsyXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplQmxvY2sgPSBmdW5jdGlvbiAoaXNYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YXJzID0gZ2V0U2Nyb2xsYmFyVmFycyhpc1gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2ggPSB2YXJzLl93X2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdCA9IHZhcnMuX2xlZnRfdG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeHkgPSB2YXJzLl94X3k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9ja0lzRW5kID0gc2V0dGluZ3NCbG9ja1t4eV0gPT0gKGlzWCA/IF9pc1JUTCA/IHN0ckJlZ2luIDogc3RyRW5kIDogc3RyRW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrSXNDZW50ZXIgPSBzZXR0aW5nc0Jsb2NrW3h5XSA9PSBzdHJDZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9ja0lzTmVhcmVzdCA9IHNldHRpbmdzQmxvY2tbeHldID09IHN0ck5lYXJlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxOZXZlciA9IHNldHRpbmdzU2Nyb2xsW3h5XSA9PSBzdHJOZXZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbElmTmVlZGVkID0gc2V0dGluZ3NTY3JvbGxbeHldID09IHN0cklmTmVlZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnBTaXplID0gX3ZpZXdwb3J0U2l6ZVt3aF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cE9mZnNldCA9IHZpZXdwb3J0T2Zmc2V0W2x0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsU2l6ZSA9IGVsZW1lbnRTaXplW3doXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsT2Zmc2V0ID0gZWxlbWVudE9mZnNldFtsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXZpZGUgPSBibG9ja0lzQ2VudGVyID8gMiA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50Q2VudGVyT2Zmc2V0ID0gZWxPZmZzZXQgKyAoZWxTaXplIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydENlbnRlck9mZnNldCA9IHZwT2Zmc2V0ICsgKHZwU2l6ZSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNJblZpZXcgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxTaXplIDw9IHZwU2l6ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgZWxPZmZzZXQgPj0gdnBPZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGVsT2Zmc2V0ICsgZWxTaXplIDw9IHZwT2Zmc2V0ICsgdnBTaXplO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbE5ldmVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Ob3RTY3JvbGxbeHldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWRvTm90U2Nyb2xsW3h5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrSXNOZWFyZXN0IHx8IHNjcm9sbElmTmVlZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Ob3RTY3JvbGxbeHldID0gc2Nyb2xsSWZOZWVkZWQgPyBpc0luVmlldyA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSXNFbmQgPSBlbFNpemUgPCB2cFNpemUgPyBlbGVtZW50Q2VudGVyT2Zmc2V0ID4gdmlld3BvcnRDZW50ZXJPZmZzZXQgOiBlbGVtZW50Q2VudGVyT2Zmc2V0IDwgdmlld3BvcnRDZW50ZXJPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50U2Nyb2xsQ29vcmRpbmF0ZXNbeHldIC09IGJsb2NrSXNFbmQgfHwgYmxvY2tJc0NlbnRlciA/ICgodnBTaXplIC8gZGl2aWRlKSAtIChlbFNpemUgLyBkaXZpZGUpKSAqIChpc1ggJiYgX2lzUlRMICYmIG5vcm1hbGl6ZVJUTCA/IC0xIDogMSkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGl6ZUJsb2NrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsaXplQmxvY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb05vdFNjcm9sbC55KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50U2Nyb2xsQ29vcmRpbmF0ZXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb05vdFNjcm9sbC54KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50U2Nyb2xsQ29vcmRpbmF0ZXMueDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IGVsZW1lbnRTY3JvbGxDb29yZGluYXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTY3JvbGxbX3N0clNjcm9sbExlZnRdID0gZ2V0RmluYWxTY3JvbGwodHJ1ZSwgZ2V0UmF3U2Nyb2xsKHRydWUsIGNvb3JkaW5hdGVzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTY3JvbGxbX3N0clNjcm9sbFRvcF0gPSBnZXRGaW5hbFNjcm9sbChmYWxzZSwgZ2V0UmF3U2Nyb2xsKGZhbHNlLCBjb29yZGluYXRlcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvU2Nyb2xsTGVmdCA9IGZpbmFsU2Nyb2xsW19zdHJTY3JvbGxMZWZ0XSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvU2Nyb2xsVG9wID0gZmluYWxTY3JvbGxbX3N0clNjcm9sbFRvcF0gIT09IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChkb1Njcm9sbExlZnQgfHwgZG9TY3JvbGxUb3ApICYmIChkdXJhdGlvbiA+IDAgfHwgZHVyYXRpb25Jc09iamVjdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uSXNPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uLmNvbXBsZXRlID0gcHJveHlDb21wbGV0ZUNhbGxiYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudC5hbmltYXRlKGZpbmFsU2Nyb2xsLCBkdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25PcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogcHJveHlDb21wbGV0ZUNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENPTVBBVElCSUxJVFkuaXNBKGVhc2luZykgfHwgRlJBTUVXT1JLLmlzUGxhaW5PYmplY3QoZWFzaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxFYXNpbmdbX3N0clNjcm9sbExlZnRdID0gZWFzaW5nWzBdIHx8IGVhc2luZy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxFYXNpbmdbX3N0clNjcm9sbFRvcF0gPSBlYXNpbmdbMV0gfHwgZWFzaW5nLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy5zcGVjaWFsRWFzaW5nID0gc3BlY2lhbEVhc2luZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk9wdGlvbnMuZWFzaW5nID0gZWFzaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudC5hbmltYXRlKGZpbmFsU2Nyb2xsLCBhbmltYXRpb25PcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvU2Nyb2xsTGVmdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnRbX3N0clNjcm9sbExlZnRdKGZpbmFsU2Nyb2xsW19zdHJTY3JvbGxMZWZ0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1Njcm9sbFRvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnRbX3N0clNjcm9sbFRvcF0oZmluYWxTY3JvbGxbX3N0clNjcm9sbFRvcF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxiYXJJbmZvcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBTdG9wcyBhbGwgc2Nyb2xsIGFuaW1hdGlvbnMuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGN1cnJlbnQgT3ZlcmxheVNjcm9sbGJhcnMgaW5zdGFuY2UgKGZvciBjaGFpbmluZykuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLnNjcm9sbFN0b3AgPSBmdW5jdGlvbiAocGFyYW0xLCBwYXJhbTIsIHBhcmFtMykge1xyXG4gICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQuc3RvcChwYXJhbTEsIHBhcmFtMiwgcGFyYW0zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2Jhc2U7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyBhbGwgcmVsZXZhbnQgZWxlbWVudHMuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZWxlbWVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgd2hpY2ggc2hhbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7e3RhcmdldDogKiwgaG9zdDogKiwgcGFkZGluZzogKiwgdmlld3BvcnQ6ICosIGNvbnRlbnQ6ICosIHNjcm9sbGJhckhvcml6b250YWw6IHtzY3JvbGxiYXI6ICosIHRyYWNrOiAqLCBoYW5kbGU6ICp9LCBzY3JvbGxiYXJWZXJ0aWNhbDoge3Njcm9sbGJhcjogKiwgdHJhY2s6ICosIGhhbmRsZTogKn0sIHNjcm9sbGJhckNvcm5lcjogKn0gfCAqfVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS5nZXRFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogX3RhcmdldEVsZW1lbnROYXRpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IF9ob3N0RWxlbWVudE5hdGl2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogX3BhZGRpbmdFbGVtZW50TmF0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydDogX3ZpZXdwb3J0RWxlbWVudE5hdGl2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogX2NvbnRlbnRFbGVtZW50TmF0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJIb3Jpem9udGFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXI6IF9zY3JvbGxiYXJIb3Jpem9udGFsRWxlbWVudFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrOiBfc2Nyb2xsYmFySG9yaXpvbnRhbFRyYWNrRWxlbWVudFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZTogX3Njcm9sbGJhckhvcml6b250YWxIYW5kbGVFbGVtZW50WzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclZlcnRpY2FsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXI6IF9zY3JvbGxiYXJWZXJ0aWNhbEVsZW1lbnRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjazogX3Njcm9sbGJhclZlcnRpY2FsVHJhY2tFbGVtZW50WzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlOiBfc2Nyb2xsYmFyVmVydGljYWxIYW5kbGVFbGVtZW50WzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhckNvcm5lcjogX3Njcm9sbGJhckNvcm5lckVsZW1lbnRbMF1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlKGVsZW1lbnROYW1lKSA9PSBUWVBFUy5zID8gZ2V0T2JqZWN0UHJvcFZhbChvYmosIGVsZW1lbnROYW1lKSA6IG9iajtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgb2JqZWN0IHdoaWNoIGRlc2NyaWJlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIGluc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHN0YXRlUHJvcGVydHkgQSBzcGVjaWZpYyBwcm9wZXJ0eSBmcm9tIHRoZSBzdGF0ZSBvYmplY3Qgd2hpY2ggc2hhbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7e3dpZHRoQXV0bywgaGVpZ2h0QXV0bywgb3ZlcmZsb3dBbW91bnQsIGhpZGVPdmVyZmxvdywgaGFzT3ZlcmZsb3csIGNvbnRlbnRTY3JvbGxTaXplLCB2aWV3cG9ydFNpemUsIGhvc3RTaXplLCBhdXRvVXBkYXRlfSB8ICp9XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLmdldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlUHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUZSQU1FV09SSy5pc1BsYWluT2JqZWN0KG9iaikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ZW5kZWQgPSBleHRlbmREZWVwKHt9LCBvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kZWRbTEVYSUNPTi5oT1BdKGZyb20pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRbdG9dID0gZXh0ZW5kZWRbZnJvbV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGV4dGVuZGVkW2Zyb21dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VQcm9wZXJ0eU5hbWUoJ3cnLCBfc3RyV2lkdGgpOyAvL2NoYW5nZSB3IHRvIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVByb3BlcnR5TmFtZSgnaCcsIF9zdHJIZWlnaHQpOyAvL2NoYW5nZSBoIHRvIGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXh0ZW5kZWQuYzsgLy9kZWxldGUgYyAodGhlICdjaGFuZ2VkJyBwcm9wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5kZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQ6ICEhcHJlcGFyZShfZGVzdHJveWVkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXBpbmc6ICEhcHJlcGFyZShfc2xlZXBpbmcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvVXBkYXRlOiBwcmVwYXJlKCFfbXV0YXRpb25PYnNlcnZlcnNDb25uZWN0ZWQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aEF1dG86IHByZXBhcmUoX3dpZHRoQXV0b0NhY2hlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0QXV0bzogcHJlcGFyZShfaGVpZ2h0QXV0b0NhY2hlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogcHJlcGFyZShfY3NzUGFkZGluZ0NhY2hlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dBbW91bnQ6IHByZXBhcmUoX292ZXJmbG93QW1vdW50Q2FjaGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlT3ZlcmZsb3c6IHByZXBhcmUoX2hpZGVPdmVyZmxvd0NhY2hlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3ZlcmZsb3c6IHByZXBhcmUoX2hhc092ZXJmbG93Q2FjaGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U2Nyb2xsU2l6ZTogcHJlcGFyZShfY29udGVudFNjcm9sbFNpemVDYWNoZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0U2l6ZTogcHJlcGFyZShfdmlld3BvcnRTaXplKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFNpemU6IHByZXBhcmUoX2hvc3RTaXplQ2FjaGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudE1peGVkOiBwcmVwYXJlKF9kb2N1bWVudE1peGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUoc3RhdGVQcm9wZXJ0eSkgPT0gVFlQRVMucyA/IGdldE9iamVjdFByb3BWYWwob2JqLCBzdGF0ZVByb3BlcnR5KSA6IG9iajtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBHZXRzIGFsbCBvciBzcGVjaWZpYyBleHRlbnNpb24gaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZXh0TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXh0ZW5zaW9uIGZyb20gd2hpY2ggdGhlIGluc3RhbmNlIHNoYWxsIGJlIGdvdC5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHt7fX0gVGhlIGluc3RhbmNlIG9mIHRoZSBleHRlbnNpb24gd2l0aCB0aGUgZ2l2ZW4gbmFtZSBvciB1bmRlZmluZWQgaWYgdGhlIGluc3RhbmNlIGNvdWxkbid0IGJlIGZvdW5kLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS5leHQgPSBmdW5jdGlvbiAoZXh0TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaXZhdGVNZXRob2RzID0gX2V4dGVuc2lvbnNQcml2YXRlTWV0aG9kcy5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShleHROYW1lKSA9PSBUWVBFUy5zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZXh0ZW5zaW9uc1tMRVhJQ09OLmhPUF0oZXh0TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGV4dGVuZERlZXAoe30sIF9leHRlbnNpb25zW2V4dE5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgcHJpdmF0ZU1ldGhvZHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFtwcml2YXRlTWV0aG9kc1tpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gX2V4dGVuc2lvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBleHRlbmREZWVwKHt9LCBfYmFzZS5leHQoaSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEFkZHMgYSBleHRlbnNpb24gdG8gdGhpcyBpbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBleHROYW1lIFRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb24gd2hpY2ggc2hhbGwgYmUgYWRkZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uT3B0aW9ucyBUaGUgZXh0ZW5zaW9uIG9wdGlvbnMgd2hpY2ggc2hhbGwgYmUgdXNlZC5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHt7fX0gVGhlIGluc3RhbmNlIG9mIHRoZSBhZGRlZCBleHRlbnNpb24gb3IgdW5kZWZpbmVkIGlmIHRoZSBleHRlbnNpb24gY291bGRuJ3QgYmUgYWRkZWQgcHJvcGVybHkuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIF9iYXNlLmFkZEV4dCA9IGZ1bmN0aW9uIChleHROYW1lLCBleHRlbnNpb25PcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWRFeHRlbnNpb25PYmogPSBfcGx1Z2luLmV4dGVuc2lvbihleHROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlQWRkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlQ29udHJhY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyYWN0UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250cmFjdEZ1bGZpbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWRFeHRlbnNpb25PYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZXh0ZW5zaW9uc1tMRVhJQ09OLmhPUF0oZXh0TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gcmVnaXN0ZXJlZEV4dGVuc2lvbk9iai5leHRlbnNpb25GYWN0b3J5LmNhbGwoX2Jhc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRGVlcCh7fSwgcmVnaXN0ZXJlZEV4dGVuc2lvbk9iai5kZWZhdWx0T3B0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRlJBTUVXT1JLLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBBVElCSUxJVFkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlQ29udHJhY3QgPSBpbnN0YW5jZS5jb250cmFjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShpbnN0YW5jZUNvbnRyYWN0KSA9PSBUWVBFUy5mKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0UmVzdWx0ID0gaW5zdGFuY2VDb250cmFjdCh3aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdEZ1bGZpbGxlZCA9IHR5cGUoY29udHJhY3RSZXN1bHQpID09IFRZUEVTLmIgPyBjb250cmFjdFJlc3VsdCA6IGNvbnRyYWN0RnVsZmlsbGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RGdWxmaWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuc2lvbnNbZXh0TmFtZV0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VBZGRlZCA9IGluc3RhbmNlLmFkZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShpbnN0YW5jZUFkZGVkKSA9PSBUWVBFUy5mKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VBZGRlZChleHRlbnNpb25PcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYmFzZS5leHQoZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYmFzZS5leHQoZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQSBleHRlbnNpb24gd2l0aCB0aGUgbmFtZSBcXFwiXCIgKyBleHROYW1lICsgXCJcXFwiIGlzbid0IHJlZ2lzdGVyZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFJlbW92ZXMgYSBleHRlbnNpb24gZnJvbSB0aGlzIGluc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGV4dE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV4dGVuc2lvbiB3aGljaCBzaGFsbCBiZSByZW1vdmVkLlxyXG4gICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV4dGVuc2lvbiB3YXMgcmVtb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlIGUuZy4gaWYgdGhlIGV4dGVuc2lvbiB3YXNuJ3QgYWRkZWQgYmVmb3JlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBfYmFzZS5yZW1vdmVFeHQgPSBmdW5jdGlvbiAoZXh0TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IF9leHRlbnNpb25zW2V4dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZVJlbW92ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfZXh0ZW5zaW9uc1tleHROYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlUmVtb3ZlZCA9IGluc3RhbmNlLnJlbW92ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlKGluc3RhbmNlUmVtb3ZlZCkgPT0gVFlQRVMuZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlUmVtb3ZlZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBwbHVnaW4uXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0RWxlbWVudCBUaGUgZWxlbWVudCB0byB3aGljaCB0aGUgcGx1Z2luIHNoYWxsIGJlIGFwcGxpZWQuXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgaW5pdGlhbCBvcHRpb25zIG9mIHRoZSBwbHVnaW4uXHJcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyBUaGUgZXh0ZW5zaW9uKHMpIHdoaWNoIHNoYWxsIGJlIGFkZGVkIHJpZ2h0IGFmdGVyIHRoZSBpbml0aWFsaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwbHVnaW4gd2FzIHN1Y2Nlc3NmdWxseSBpbml0aWFsaXplZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb25zdHJ1Y3QodGFyZ2V0RWxlbWVudCwgb3B0aW9ucywgZXh0ZW5zaW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIF9kZWZhdWx0T3B0aW9ucyA9IGdsb2JhbHMuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgX25hdGl2ZVNjcm9sbGJhclN0eWxpbmcgPSBnbG9iYWxzLm5hdGl2ZVNjcm9sbGJhclN0eWxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX25hdGl2ZVNjcm9sbGJhclNpemUgPSBleHRlbmREZWVwKHt9LCBnbG9iYWxzLm5hdGl2ZVNjcm9sbGJhclNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkID0gZXh0ZW5kRGVlcCh7fSwgZ2xvYmFscy5uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkKTtcclxuICAgICAgICAgICAgICAgICAgICBfb3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZSA9IGV4dGVuZERlZXAoe30sIGdsb2JhbHMub3ZlcmxheVNjcm9sbGJhckR1bW15U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3J0bFNjcm9sbEJlaGF2aW9yID0gZXh0ZW5kRGVlcCh7fSwgZ2xvYmFscy5ydGxTY3JvbGxCZWhhdmlvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vcGFyc2UgJiBzZXQgb3B0aW9ucyBidXQgZG9uJ3QgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9ucyhleHRlbmREZWVwKHt9LCBfZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Nzc0NhbGMgPSBnbG9iYWxzLmNzc0NhbGM7XHJcbiAgICAgICAgICAgICAgICAgICAgX21zaWVWZXJzaW9uID0gZ2xvYmFscy5tc2llO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hdXRvVXBkYXRlUmVjb21tZW5kZWQgPSBnbG9iYWxzLmF1dG9VcGRhdGVSZWNvbW1lbmRlZDtcclxuICAgICAgICAgICAgICAgICAgICBfc3VwcG9ydFRyYW5zaXRpb24gPSBnbG9iYWxzLnN1cHBvcnRUcmFuc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zdXBwb3J0VHJhbnNmb3JtID0gZ2xvYmFscy5zdXBwb3J0VHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zdXBwb3J0UGFzc2l2ZUV2ZW50cyA9IGdsb2JhbHMuc3VwcG9ydFBhc3NpdmVFdmVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N1cHBvcnRSZXNpemVPYnNlcnZlciA9IGdsb2JhbHMuc3VwcG9ydFJlc2l6ZU9ic2VydmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zdXBwb3J0TXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbHMuc3VwcG9ydE11dGF0aW9uT2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3RyaWN0ZWRNZWFzdXJpbmcgPSBnbG9iYWxzLnJlc3RyaWN0ZWRNZWFzdXJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RvY3VtZW50RWxlbWVudCA9IEZSQU1FV09SSyh0YXJnZXRFbGVtZW50Lm93bmVyRG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9kb2N1bWVudEVsZW1lbnROYXRpdmUgPSBfZG9jdW1lbnRFbGVtZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIF93aW5kb3dFbGVtZW50ID0gRlJBTUVXT1JLKF9kb2N1bWVudEVsZW1lbnROYXRpdmUuZGVmYXVsdFZpZXcgfHwgX2RvY3VtZW50RWxlbWVudE5hdGl2ZS5wYXJlbnRXaW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIF93aW5kb3dFbGVtZW50TmF0aXZlID0gX3dpbmRvd0VsZW1lbnRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgX2h0bWxFbGVtZW50ID0gZmluZEZpcnN0KF9kb2N1bWVudEVsZW1lbnQsICdodG1sJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2JvZHlFbGVtZW50ID0gZmluZEZpcnN0KF9odG1sRWxlbWVudCwgJ2JvZHknKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGFyZ2V0RWxlbWVudCA9IEZSQU1FV09SSyh0YXJnZXRFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGFyZ2V0RWxlbWVudE5hdGl2ZSA9IF90YXJnZXRFbGVtZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pc1RleHRhcmVhID0gX3RhcmdldEVsZW1lbnQuaXMoJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2lzQm9keSA9IF90YXJnZXRFbGVtZW50LmlzKCdib2R5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RvY3VtZW50TWl4ZWQgPSBfZG9jdW1lbnRFbGVtZW50TmF0aXZlICE9PSBkb2N1bWVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLyogT24gYSBkaXYgRWxlbWVudCBUaGUgaWYgY2hlY2tzIG9ubHkgd2hldGhlcjpcclxuICAgICAgICAgICAgICAgICAgICAgKiAtIHRoZSB0YXJnZXRFbGVtZW50IGhhcyB0aGUgY2xhc3MgXCJvcy1ob3N0XCJcclxuICAgICAgICAgICAgICAgICAgICAgKiAtIHRoZSB0YXJnZXRFbGVtZW50IGhhcyBhIGEgY2hpbGQgd2l0aCB0aGUgY2xhc3MgXCJvcy1wYWRkaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGF0J3MgdGhlIGNhc2UsIGl0cyBhc3N1bWVkIHRoZSBET00gaGFzIGFscmVhZHkgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICogKFRoZSBcIi5vcy1ob3N0XCIgZWxlbWVudCBpcyB0aGUgdGFyZ2V0RWxlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICAgICAqICA8ZGl2IGNsYXNzPVwib3MtaG9zdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPGRpdiBjbGFzcz1cIm9zLXJlc2l6ZS1vYnNlcnZlci1ob3N0XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8ZGl2IGNsYXNzPVwib3MtcGFkZGluZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcy12aWV3cG9ydFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3MtY29udGVudFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8ZGl2IGNsYXNzPVwib3Mtc2Nyb2xsYmFyIG9zLXNjcm9sbGJhci1ob3Jpem9udGFsIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcy1zY3JvbGxiYXItdHJhY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9zLXNjcm9sbGJhci1oYW5kbGVcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPGRpdiBjbGFzcz1cIm9zLXNjcm9sbGJhciBvcy1zY3JvbGxiYXItdmVydGljYWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICA8ZGl2IGNsYXNzPVwib3Mtc2Nyb2xsYmFyLXRyYWNrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcy1zY3JvbGxiYXItaGFuZGxlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgIDxkaXYgY2xhc3M9XCJvcy1zY3JvbGxiYXItY29ybmVyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgICAgICAgICAgICAgICAqIFxyXG4gICAgICAgICAgICAgICAgICAgICAqIE9uIGEgVGV4dGFyZWEgRWxlbWVudCBUaGUgaWYgY2hlY2tzIG9ubHkgd2hldGhlcjpcclxuICAgICAgICAgICAgICAgICAgICAgKiAtIHRoZSB0YXJnZXRFbGVtZW50IGhhcyB0aGUgY2xhc3MgXCJvcy10ZXh0YXJlYVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAqIC0gdGhlIHRhcmdldEVsZW1lbnQgaXMgaW5zaWRlIGEgZWxlbWVudCB3aXRoIHRoZSBjbGFzcyBcIm9zLWNvbnRlbnRcIiBcclxuICAgICAgICAgICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGF0J3MgdGhlIGNhc2UsIGl0cyBhc3N1bWVkIHRoZSBET00gaGFzIGFscmVhZHkgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICogKFRoZSBcIi5vcy10ZXh0YXJlYVwiICh0ZXh0YXJlYSkgZWxlbWVudCBpcyB0aGUgdGFyZ2V0RWxlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICAgICAqICA8ZGl2IGNsYXNzPVwib3MtaG9zdC10ZXh0YXJlYVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPGRpdiBjbGFzcz1cIm9zLXJlc2l6ZS1vYnNlcnZlci1ob3N0XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8ZGl2IGNsYXNzPVwib3MtcGFkZGluZyBvcy10ZXh0LWluaGVyaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICA8ZGl2IGNsYXNzPVwib3Mtdmlld3BvcnQgb3MtdGV4dC1pbmhlcml0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcy1jb250ZW50IG9zLXRleHQtaW5oZXJpdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9zLXRleHRhcmVhLWNvdmVyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJvcy10ZXh0YXJlYSBvcy10ZXh0LWluaGVyaXRcIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPGRpdiBjbGFzcz1cIm9zLXNjcm9sbGJhciBvcy1zY3JvbGxiYXItaG9yaXpvbnRhbCBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICA8ZGl2IGNsYXNzPVwib3Mtc2Nyb2xsYmFyLXRyYWNrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcy1zY3JvbGxiYXItaGFuZGxlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKiAgICAgIDxkaXYgY2xhc3M9XCJvcy1zY3JvbGxiYXIgb3Mtc2Nyb2xsYmFyLXZlcnRpY2FsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgPGRpdiBjbGFzcz1cIm9zLXNjcm9sbGJhci10cmFja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3Mtc2Nyb2xsYmFyLWhhbmRsZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICogICAgICA8ZGl2IGNsYXNzPVwib3Mtc2Nyb2xsYmFyLWNvcm5lclwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAqICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICBfZG9tRXhpc3RzID0gX2lzVGV4dGFyZWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdGFyZ2V0RWxlbWVudC5oYXNDbGFzcyhfY2xhc3NOYW1lVGV4dGFyZWFFbGVtZW50KSAmJiBfdGFyZ2V0RWxlbWVudC5wYXJlbnQoKS5oYXNDbGFzcyhfY2xhc3NOYW1lQ29udGVudEVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogX3RhcmdldEVsZW1lbnQuaGFzQ2xhc3MoX2NsYXNzTmFtZUhvc3RFbGVtZW50KSAmJiBfdGFyZ2V0RWxlbWVudC5jaGlsZHJlbihfc3RyRG90ICsgX2NsYXNzTmFtZVBhZGRpbmdFbGVtZW50KVtMRVhJQ09OLmxdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdEJvZHlTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHlNb3VzZVRvdWNoRG93bkxpc3RlbmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIHRoZSBwbHVnaW4gaGFzbid0IHRvIGJlIGluaXRpYWxpemVkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9uYXRpdmVTY3JvbGxiYXJJc092ZXJsYWlkLnggJiYgX25hdGl2ZVNjcm9sbGJhcklzT3ZlcmxhaWQueSAmJiAhX2N1cnJlbnRQcmVwYXJlZE9wdGlvbnMubmF0aXZlU2Nyb2xsYmFyc092ZXJsYWlkLmluaXRpYWxpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hDYWxsYmFjaygnb25Jbml0aWFsaXphdGlvbldpdGhkcmF3bicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RvbUV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBTdHJ1Y3R1cmVET00odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFNjcm9sbGJhcnNET00odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFNjcm9sbGJhckNvcm5lckRPTSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zbGVlcGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2Jhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2lzQm9keSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0Qm9keVNjcm9sbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0Qm9keVNjcm9sbC5sID0gTUFUSC5tYXgoX3RhcmdldEVsZW1lbnRbX3N0clNjcm9sbExlZnRdKCksIF9odG1sRWxlbWVudFtfc3RyU2Nyb2xsTGVmdF0oKSwgX3dpbmRvd0VsZW1lbnRbX3N0clNjcm9sbExlZnRdKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0Qm9keVNjcm9sbC50ID0gTUFUSC5tYXgoX3RhcmdldEVsZW1lbnRbX3N0clNjcm9sbFRvcF0oKSwgX2h0bWxFbGVtZW50W19zdHJTY3JvbGxUb3BdKCksIF93aW5kb3dFbGVtZW50W19zdHJTY3JvbGxUb3BdKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keU1vdXNlVG91Y2hEb3duTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmlld3BvcnRFbGVtZW50LnJlbW92ZUF0dHIoTEVYSUNPTi50aSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFJlc3BvbnNpdmVFdmVudExpc3RlbmVyKF92aWV3cG9ydEVsZW1lbnQsIF9zdHJNb3VzZVRvdWNoRG93bkV2ZW50LCBib2R5TW91c2VUb3VjaERvd25MaXN0ZW5lciwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYnVpbGQgT3ZlcmxheVNjcm9sbGJhcnMgRE9NXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBTdHJ1Y3R1cmVET00oKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR1cFNjcm9sbGJhcnNET00oKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR1cFNjcm9sbGJhckNvcm5lckRPTSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBPdmVybGF5U2Nyb2xsYmFycyBldmVudHNcclxuICAgICAgICAgICAgICAgICAgICBzZXR1cFN0cnVjdHVyZUV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwU2Nyb2xsYmFyRXZlbnRzKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwU2Nyb2xsYmFyRXZlbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR1cFNjcm9sbGJhckNvcm5lckV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBtdXRhdGlvbiBvYnNlcnZlcnNcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVNdXRhdGlvbk9ic2VydmVycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2J1aWxkIHJlc2l6ZSBvYnNlcnZlciBmb3IgdGhlIGhvc3QgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVzaXplT2JzZXJ2ZXIoX3NpemVPYnNlcnZlckVsZW1lbnQsIGhvc3RPblJlc2l6ZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2lzQm9keSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGx5IHRoZSBib2R5IHNjcm9sbCB0byBoYW5kbGUgaXQgcmlnaHQgaW4gdGhlIHVwZGF0ZSBtZXRob2RcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZpZXdwb3J0RWxlbWVudFtfc3RyU2Nyb2xsTGVmdF0oaW5pdEJvZHlTY3JvbGwubClbX3N0clNjcm9sbFRvcF0oaW5pdEJvZHlTY3JvbGwudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NldCB0aGUgZm9jdXMgb24gdGhlIHZpZXdwb3J0IGVsZW1lbnQgc28geW91IGRvbnQgaGF2ZSB0byBjbGljayBvbiB0aGUgcGFnZSB0byB1c2Uga2V5Ym9hcmQga2V5cyAodXAgLyBkb3duIC8gc3BhY2UpIGZvciBzY3JvbGxpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT0gdGFyZ2V0RWxlbWVudCAmJiBfdmlld3BvcnRFbGVtZW50TmF0aXZlLmZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldCBhIHRhYmluZGV4IHRvIG1ha2UgdGhlIHZpZXdwb3J0RWxlbWVudCBmb2N1c2FibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnQuYXR0cihMRVhJQ09OLnRpLCAnLTEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWV3cG9ydEVsZW1lbnROYXRpdmUuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB0aGUgdGFiaW5kZXggaGFzIHRvIGJlIHJlbW92ZWQgZHVlIHRvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgeW91IHNldCB0aGUgdGFiaW5kZXggYXR0cmlidXRlIG9uIGFuIDxkaXY+LCB0aGVuIGl0cyBjaGlsZCBjb250ZW50IGNhbm5vdCBiZSBzY3JvbGxlZCB3aXRoIHRoZSBhcnJvdyBrZXlzIHVubGVzcyB5b3Ugc2V0IHRhYmluZGV4IG9uIHRoZSBjb250ZW50LCB0b29cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBSZXNwb25zaXZlRXZlbnRMaXN0ZW5lcihfdmlld3BvcnRFbGVtZW50LCBfc3RyTW91c2VUb3VjaERvd25FdmVudCwgYm9keU1vdXNlVG91Y2hEb3duTGlzdGVuZXIsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgZm9yIHRoZSBmaXJzdCB0aW1lICYgaW5pdGlhbGl6ZSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgIF9iYXNlLnVwZGF0ZShfc3RyQXV0byk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIHBsdWdpbiBpcyBpbml0aWFsaXplZCBub3chXHJcbiAgICAgICAgICAgICAgICAgICAgX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENhbGxiYWNrKCdvbkluaXRpYWxpemVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2FsbCBhbGwgY2FsbGJhY2tzIHdoaWNoIHdvdWxkIGZpcmUgYmVmb3JlIHRoZSBpbml0aWFsaXplZCB3YXMgY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKF9jYWxsYmFja3NJbml0UWV1ZXVlLCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7IGRpc3BhdGNoQ2FsbGJhY2sodmFsdWUubiwgdmFsdWUuYSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jYWxsYmFja3NJbml0UWV1ZXVlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYWRkIGV4dGVuc2lvbnNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShleHRlbnNpb25zKSA9PSBUWVBFUy5zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zID0gW2V4dGVuc2lvbnNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDT01QQVRJQklMSVRZLmlzQShleHRlbnNpb25zKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaChleHRlbnNpb25zLCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7IF9iYXNlLmFkZEV4dCh2YWx1ZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEZSQU1FV09SSy5pc1BsYWluT2JqZWN0KGV4dGVuc2lvbnMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoKGV4dGVuc2lvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IF9iYXNlLmFkZEV4dChrZXksIHZhbHVlKTsgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYWRkIHRoZSB0cmFuc2l0aW9uIGNsYXNzIGZvciB0cmFuc2l0aW9ucyBBRlRFUiB0aGUgZmlyc3QgdXBkYXRlICYgQUZURVIgdGhlIGFwcGxpZWQgZXh0ZW5zaW9ucyAoZm9yIHByZXZlbnRpbmcgdW53YW50ZWQgdHJhbnNpdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydFRyYW5zaXRpb24gJiYgIV9kZXN0cm95ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhfaG9zdEVsZW1lbnQsIF9jbGFzc05hbWVIb3N0VHJhbnNpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMzMzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9iYXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfcGx1Z2luLnZhbGlkKGNvbnN0cnVjdChwbHVnaW5UYXJnZXRFbGVtZW50LCBvcHRpb25zLCBleHRlbnNpb25zKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBJTlNUQU5DRVMocGx1Z2luVGFyZ2V0RWxlbWVudCwgX2Jhc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfYmFzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3IE92ZXJsYXlTY3JvbGxiYXJzSW5zdGFuY2Ugb2JqZWN0IG9yIGNoYW5nZXMgb3B0aW9ucyBpZiBhbHJlYWR5IGluaXRpYWxpemVkIG9yIHJldHVybnMgdGhlIGN1cnJlbnQgaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBwbHVnaW5UYXJnZXRFbGVtZW50cyBUaGUgZWxlbWVudHMgdG8gd2hpY2ggdGhlIFBsdWdpbiBzaGFsbCBiZSBpbml0aWFsaXplZC5cclxuICAgICAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGN1c3RvbSBvcHRpb25zIHdpdGggd2hpY2ggdGhlIHBsdWdpbiBzaGFsbCBiZSBpbml0aWFsaXplZC5cclxuICAgICAgICAgICAgICogQHBhcmFtIGV4dGVuc2lvbnMgVGhlIGV4dGVuc2lvbihzKSB3aGljaCBzaGFsbCBiZSBhZGRlZCByaWdodCBhZnRlciBpbml0aWFsaXphdGlvbi5cclxuICAgICAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfcGx1Z2luID0gd2luZG93W1BMVUdJTk5BTUVdID0gZnVuY3Rpb24gKHBsdWdpblRhcmdldEVsZW1lbnRzLCBvcHRpb25zLCBleHRlbnNpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW0xFWElDT04ubF0gPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdHNJc1BsYWluT2JqID0gRlJBTUVXT1JLLmlzUGxhaW5PYmplY3Qob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdDtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9wbHVnaW5UYXJnZXRFbGVtZW50cyBpcyBudWxsIG9yIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwbHVnaW5UYXJnZXRFbGVtZW50cylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0c0lzUGxhaW5PYmogfHwgIW9wdGlvbnMgPyByZXN1bHQgOiBhcnI7XHJcblxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgIHBsdWdpblRhcmdldEVsZW1lbnRzIHdpbGwgYmUgY29udmVydGVkIHRvOlxyXG4gICAgICAgICAgICAgICAgICAgMS4gQSBqUXVlcnlFbGVtZW50IEFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAyLiBBIEhUTUxFbGVtZW50IEFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAzLiBBIEFycmF5IHdpdGggYSBzaW5nbGUgSFRNTCBFbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICBzbyBwbHVnaW5UYXJnZXRFbGVtZW50cyBpcyBhbHdheXMgYSBhcnJheS5cclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5UYXJnZXRFbGVtZW50cyA9IHBsdWdpblRhcmdldEVsZW1lbnRzW0xFWElDT04ubF0gIT0gdW5kZWZpbmVkID8gcGx1Z2luVGFyZ2V0RWxlbWVudHMgOiBbcGx1Z2luVGFyZ2V0RWxlbWVudHNbMF0gfHwgcGx1Z2luVGFyZ2V0RWxlbWVudHNdO1xyXG4gICAgICAgICAgICAgICAgaW5pdE92ZXJsYXlTY3JvbGxiYXJzU3RhdGljcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5UYXJnZXRFbGVtZW50c1tMRVhJQ09OLmxdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzSXNQbGFpbk9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGUkFNRVdPUksuZWFjaChwbHVnaW5UYXJnZXRFbGVtZW50cywgZnVuY3Rpb24gKGksIHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3QgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3QgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChPdmVybGF5U2Nyb2xsYmFyc0luc3RhbmNlKGluc3QsIG9wdGlvbnMsIGV4dGVuc2lvbnMsIF9wbHVnaW5zR2xvYmFscywgX3BsdWdpbnNBdXRvVXBkYXRlTG9vcCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZSQU1FV09SSy5lYWNoKHBsdWdpblRhcmdldEVsZW1lbnRzLCBmdW5jdGlvbiAoaSwgdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdCA9IElOU1RBTkNFUyh2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0aW9ucyA9PT0gJyEnICYmIF9wbHVnaW4udmFsaWQoaW5zdCkpIHx8IChDT01QQVRJQklMSVRZLnR5cGUob3B0aW9ucykgPT0gVFlQRVMuZiAmJiBvcHRpb25zKHYsIGluc3QpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChpbnN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChpbnN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFycltMRVhJQ09OLmxdID09PSAxID8gYXJyWzBdIDogYXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBSZXR1cm5zIGEgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGdsb2JhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGx1Z2luIGFuZCBlYWNoIGluc3RhbmNlIG9mIGl0LlxyXG4gICAgICAgICAgICAgKiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGp1c3QgYSBjb3B5LCB0aGF0IG1lYW5zIHRoYXQgY2hhbmdlcyB0byB0aGUgcmV0dXJuZWQgb2JqZWN0IHdvbid0IGhhdmUgYW55IGVmZmVjdCB0byB0aGUgb3JpZ2luYWwgb2JqZWN0LlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3BsdWdpbi5nbG9iYWxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5pdE92ZXJsYXlTY3JvbGxiYXJzU3RhdGljcygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGdsb2JhbHMgPSBGUkFNRVdPUksuZXh0ZW5kKHRydWUsIHt9LCBfcGx1Z2luc0dsb2JhbHMpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGdsb2JhbHNbJ21zaWUnXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEdldHMgb3IgU2V0cyB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciBlYWNoIG5ldyBwbHVnaW4gaW5pdGlhbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBuZXdEZWZhdWx0T3B0aW9ucyBUaGUgb2JqZWN0IHdpdGggd2hpY2ggdGhlIGRlZmF1bHQgb3B0aW9ucyBzaGFsbCBiZSBleHRlbmRlZC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF9wbHVnaW4uZGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAobmV3RGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGluaXRPdmVybGF5U2Nyb2xsYmFyc1N0YXRpY3MoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyRGVmYXVsdE9wdGlvbnMgPSBfcGx1Z2luc0dsb2JhbHMuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3RGVmYXVsdE9wdGlvbnMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRlJBTUVXT1JLLmV4dGVuZCh0cnVlLCB7fSwgY3VyckRlZmF1bHRPcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3NldCB0aGUgbmV3IGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgX3BsdWdpbnNHbG9iYWxzLmRlZmF1bHRPcHRpb25zID0gRlJBTUVXT1JLLmV4dGVuZCh0cnVlLCB7fSwgY3VyckRlZmF1bHRPcHRpb25zLCBfcGx1Z2luc09wdGlvbnMuX3ZhbGlkYXRlKG5ld0RlZmF1bHRPcHRpb25zLCBfcGx1Z2luc09wdGlvbnMuX3RlbXBsYXRlLCB0cnVlLCBjdXJyRGVmYXVsdE9wdGlvbnMpLl9kZWZhdWx0KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgcGFzc2VkIGluc3RhbmNlIGlzIGEgbm9uLWRlc3Ryb3llZCBPdmVybGF5U2Nyb2xsYmFycyBpbnN0YW5jZS5cclxuICAgICAgICAgICAgICogQHBhcmFtIG9zSW5zdGFuY2UgVGhlIHBvdGVudGlhbCBPdmVybGF5U2Nyb2xsYmFycyBpbnN0YW5jZSB3aGljaCBzaGFsbCBiZSBjaGVja2VkLlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIGEgbm9uLWRlc3Ryb3llZCBPdmVybGF5U2Nyb2xsYmFycyBpbnN0YW5jZSwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3BsdWdpbi52YWxpZCA9IGZ1bmN0aW9uIChvc0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3NJbnN0YW5jZSBpbnN0YW5jZW9mIF9wbHVnaW4gJiYgIW9zSW5zdGFuY2UuZ2V0U3RhdGUoKS5kZXN0cm95ZWQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogUmVnaXN0ZXJzLCBVbnJlZ2lzdGVycyBvciByZXR1cm5zIGEgZXh0ZW5zaW9uLlxyXG4gICAgICAgICAgICAgKiBSZWdpc3RlcjogUGFzcyB0aGUgbmFtZSBhbmQgdGhlIGV4dGVuc2lvbi4gKGRlZmF1bHRPcHRpb25zIGlzIG9wdGlvbmFsKVxyXG4gICAgICAgICAgICAgKiBVbnJlZ2lzdGVyOiBQYXNzIHRoZSBuYW1lIGFuZCBhbnl0aGluZyBleGNlcHQgYSBmdW5jdGlvbiBhcyBleHRlbnNpb24gcGFyYW1ldGVyLlxyXG4gICAgICAgICAgICAgKiBHZXQgZXh0ZW5zaW9uOiBQYXNzIHRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb24gd2hpY2ggc2hhbGwgYmUgZ290LlxyXG4gICAgICAgICAgICAgKiBHZXQgYWxsIGV4dGVuc2lvbnM6IFBhc3Mgbm8gYXJndW1lbnRzLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uTmFtZSBUaGUgbmFtZSBvZiB0aGUgZXh0ZW5zaW9uIHdoaWNoIHNoYWxsIGJlIHJlZ2lzdGVyZWQsIHVucmVnaXN0ZXJlZCBvciByZXR1cm5lZC5cclxuICAgICAgICAgICAgICogQHBhcmFtIGV4dGVuc2lvbiBBIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB0aGUgaW5zdGFuY2Ugb2YgdGhlIGV4dGVuc2lvbiBvciBhbnl0aGluZyBvdGhlciB0byByZW1vdmUgYSBhbHJlYWR5IHJlZ2lzdGVyZWQgZXh0ZW5zaW9uLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gZGVmYXVsdE9wdGlvbnMgVGhlIGRlZmF1bHQgb3B0aW9ucyB3aGljaCBzaGFsbCBiZSB1c2VkIGZvciB0aGUgcmVnaXN0ZXJlZCBleHRlbnNpb24uXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfcGx1Z2luLmV4dGVuc2lvbiA9IGZ1bmN0aW9uIChleHRlbnNpb25OYW1lLCBleHRlbnNpb24sIGRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXh0TmFtZVR5cGVTdHJpbmcgPSBDT01QQVRJQklMSVRZLnR5cGUoZXh0ZW5zaW9uTmFtZSkgPT0gVFlQRVMucztcclxuICAgICAgICAgICAgICAgIHZhciBhcmdMZW4gPSBhcmd1bWVudHNbTEVYSUNPTi5sXTtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChhcmdMZW4gPCAxIHx8ICFleHROYW1lVHlwZVN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIGEgY29weSBvZiBhbGwgZXh0ZW5zaW9uIG9iamVjdHNcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRlJBTUVXT1JLLmV4dGVuZCh0cnVlLCB7IGxlbmd0aDogX3BsdWdpbnNFeHRlbnNpb25zW0xFWElDT04ubF0gfSwgX3BsdWdpbnNFeHRlbnNpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV4dE5hbWVUeXBlU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENPTVBBVElCSUxJVFkudHlwZShleHRlbnNpb24pID09IFRZUEVTLmYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZWdpc3RlciBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BsdWdpbnNFeHRlbnNpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkZhY3Rvcnk6IGV4dGVuc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgX3BsdWdpbnNFeHRlbnNpb25zW0xFWElDT04ubF07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wbHVnaW5zRXh0ZW5zaW9uc1tpXS5uYW1lID09PSBleHRlbnNpb25OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ0xlbiA+IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wbHVnaW5zRXh0ZW5zaW9ucy5zcGxpY2UoaSwgMSk7IC8vcmVtb3ZlIGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZSQU1FV09SSy5leHRlbmQodHJ1ZSwge30sIF9wbHVnaW5zRXh0ZW5zaW9uc1tpXSk7IC8vcmV0dXJuIGV4dGVuc2lvbiB3aXRoIHRoZSBnaXZlbiBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3BsdWdpbjtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICBpZiAoSlFVRVJZICYmIEpRVUVSWS5mbikge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGhlIGpRdWVyeSBpbml0aWFsaXphdGlvbiBpbnRlcmZhY2UuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBpbml0aWFsIG9wdGlvbnMgZm9yIHRoZSBjb25zdHJ1Y3Rpb24gb2YgdGhlIHBsdWdpbi4gVG8gaW5pdGlhbGl6ZSB0aGUgcGx1Z2luLCB0aGlzIG9wdGlvbiBoYXMgdG8gYmUgYSBvYmplY3QhIElmIGl0IGlzbid0IGEgb2JqZWN0LCB0aGUgaW5zdGFuY2UocykgYXJlIHJldHVybmVkIGFuZCB0aGUgcGx1Z2luIHdvbnQgYmUgaW5pdGlhbGl6ZWQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBleHRlbnNpb25zIFRoZSBleHRlbnNpb24ocykgd2hpY2ggc2hhbGwgYmUgYWRkZWQgcmlnaHQgYWZ0ZXIgaW5pdGlhbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfSBBZnRlciBpbml0aWFsaXphdGlvbiBpdCByZXR1cm5zIHRoZSBqUXVlcnkgZWxlbWVudCBhcnJheSwgZWxzZSBpdCByZXR1cm5zIHRoZSBpbnN0YW5jZShzKSBvZiB0aGUgZWxlbWVudHMgd2hpY2ggYXJlIHNlbGVjdGVkLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgSlFVRVJZLmZuLm92ZXJsYXlTY3JvbGxiYXJzID0gZnVuY3Rpb24gKG9wdGlvbnMsIGV4dGVuc2lvbnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZWxlbWVudHMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgaWYgKEpRVUVSWS5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSlFVRVJZLmVhY2goX2VsZW1lbnRzLCBmdW5jdGlvbiAoKSB7IFBMVUdJTih0aGlzLCBvcHRpb25zLCBleHRlbnNpb25zKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUExVR0lOKF9lbGVtZW50cywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQTFVHSU47XHJcbiAgICB9XHJcbikpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/overlayscrollbars/js/OverlayScrollbars.js\n");

/***/ }),

/***/ "./node_modules/tippy.js/dist/tippy.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/tippy.js/dist/tippy.esm.js ***!
  \*************************************************/
/*! exports provided: default, animateFill, createSingleton, delegate, followCursor, hideAll, inlinePositioning, roundArrow, sticky */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animateFill\", function() { return animateFill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSingleton\", function() { return createSingleton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delegate\", function() { return delegate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"followCursor\", function() { return followCursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hideAll\", function() { return hideAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inlinePositioning\", function() { return inlinePositioning; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"roundArrow\", function() { return ROUND_ARROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sticky\", function() { return sticky; });\n/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ \"./node_modules/@popperjs/core/lib/popper.js\");\n/**!\n* tippy.js v6.2.5\n* (c) 2017-2020 atomiks\n* MIT License\n*/\n\nvar ROUND_ARROW = '<svg width=\"16\" height=\"6\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z\"></svg>';\nvar BOX_CLASS = \"tippy-box\";\nvar CONTENT_CLASS = \"tippy-content\";\nvar BACKDROP_CLASS = \"tippy-backdrop\";\nvar ARROW_CLASS = \"tippy-arrow\";\nvar SVG_ARROW_CLASS = \"tippy-svg-arrow\";\nvar TOUCH_OPTIONS = {\n  passive: true,\n  capture: true\n};\n\nfunction hasOwnProperty(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\n\nfunction getValueAtIndexOrReturn(value, index, defaultValue) {\n  if (Array.isArray(value)) {\n    var v = value[index];\n    return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;\n  }\n\n  return value;\n}\n\nfunction isType(value, type) {\n  var str = {}.toString.call(value);\n  return str.indexOf('[object') === 0 && str.indexOf(type + \"]\") > -1;\n}\n\nfunction invokeWithArgsOrReturn(value, args) {\n  return typeof value === 'function' ? value.apply(void 0, args) : value;\n}\n\nfunction debounce(fn, ms) {\n  // Avoid wrapping in `setTimeout` if ms is 0 anyway\n  if (ms === 0) {\n    return fn;\n  }\n\n  var timeout;\n  return function (arg) {\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      fn(arg);\n    }, ms);\n  };\n}\n\nfunction removeProperties(obj, keys) {\n  var clone = Object.assign({}, obj);\n  keys.forEach(function (key) {\n    delete clone[key];\n  });\n  return clone;\n}\n\nfunction splitBySpaces(value) {\n  return value.split(/\\s+/).filter(Boolean);\n}\n\nfunction normalizeToArray(value) {\n  return [].concat(value);\n}\n\nfunction pushIfUnique(arr, value) {\n  if (arr.indexOf(value) === -1) {\n    arr.push(value);\n  }\n}\n\nfunction unique(arr) {\n  return arr.filter(function (item, index) {\n    return arr.indexOf(item) === index;\n  });\n}\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\nfunction arrayFrom(value) {\n  return [].slice.call(value);\n}\n\nfunction removeUndefinedProps(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction div() {\n  return document.createElement('div');\n}\n\nfunction isElement(value) {\n  return ['Element', 'Fragment'].some(function (type) {\n    return isType(value, type);\n  });\n}\n\nfunction isNodeList(value) {\n  return isType(value, 'NodeList');\n}\n\nfunction isMouseEvent(value) {\n  return isType(value, 'MouseEvent');\n}\n\nfunction isReferenceElement(value) {\n  return !!(value && value._tippy && value._tippy.reference === value);\n}\n\nfunction getArrayOfElements(value) {\n  if (isElement(value)) {\n    return [value];\n  }\n\n  if (isNodeList(value)) {\n    return arrayFrom(value);\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return arrayFrom(document.querySelectorAll(value));\n}\n\nfunction setTransitionDuration(els, value) {\n  els.forEach(function (el) {\n    if (el) {\n      el.style.transitionDuration = value + \"ms\";\n    }\n  });\n}\n\nfunction setVisibilityState(els, state) {\n  els.forEach(function (el) {\n    if (el) {\n      el.setAttribute('data-state', state);\n    }\n  });\n}\n\nfunction getOwnerDocument(elementOrElements) {\n  var _normalizeToArray = normalizeToArray(elementOrElements),\n      element = _normalizeToArray[0];\n\n  return element ? element.ownerDocument || document : document;\n}\n\nfunction isCursorOutsideInteractiveBorder(popperTreeData, event) {\n  var clientX = event.clientX,\n      clientY = event.clientY;\n  return popperTreeData.every(function (_ref) {\n    var popperRect = _ref.popperRect,\n        popperState = _ref.popperState,\n        props = _ref.props;\n    var interactiveBorder = props.interactiveBorder;\n    var basePlacement = getBasePlacement(popperState.placement);\n    var offsetData = popperState.modifiersData.offset;\n\n    if (!offsetData) {\n      return true;\n    }\n\n    var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;\n    var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;\n    var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;\n    var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;\n    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;\n    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;\n    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;\n    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;\n    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;\n  });\n}\n\nfunction updateTransitionEndListener(box, action, listener) {\n  var method = action + \"EventListener\"; // some browsers apparently support `transition` (unprefixed) but only fire\n  // `webkitTransitionEnd`...\n\n  ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {\n    box[method](event, listener);\n  });\n}\n\nvar currentInput = {\n  isTouch: false\n};\nvar lastMouseMoveTime = 0;\n/**\n * When a `touchstart` event is fired, it's assumed the user is using touch\n * input. We'll bind a `mousemove` event listener to listen for mouse input in\n * the future. This way, the `isTouch` property is fully dynamic and will handle\n * hybrid devices that use a mix of touch + mouse input.\n */\n\nfunction onDocumentTouchStart() {\n  if (currentInput.isTouch) {\n    return;\n  }\n\n  currentInput.isTouch = true;\n\n  if (window.performance) {\n    document.addEventListener('mousemove', onDocumentMouseMove);\n  }\n}\n/**\n * When two `mousemove` event are fired consecutively within 20ms, it's assumed\n * the user is using mouse input again. `mousemove` can fire on touch devices as\n * well, but very rarely that quickly.\n */\n\n\nfunction onDocumentMouseMove() {\n  var now = performance.now();\n\n  if (now - lastMouseMoveTime < 20) {\n    currentInput.isTouch = false;\n    document.removeEventListener('mousemove', onDocumentMouseMove);\n  }\n\n  lastMouseMoveTime = now;\n}\n/**\n * When an element is in focus and has a tippy, leaving the tab/window and\n * returning causes it to show again. For mouse users this is unexpected, but\n * for keyboard use it makes sense.\n * TODO: find a better technique to solve this problem\n */\n\n\nfunction onWindowBlur() {\n  var activeElement = document.activeElement;\n\n  if (isReferenceElement(activeElement)) {\n    var instance = activeElement._tippy;\n\n    if (activeElement.blur && !instance.state.isVisible) {\n      activeElement.blur();\n    }\n  }\n}\n\nfunction bindGlobalEventListeners() {\n  document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);\n  window.addEventListener('blur', onWindowBlur);\n}\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nvar ua = isBrowser ? navigator.userAgent : '';\nvar isIE = /MSIE |Trident\\//.test(ua);\n\nfunction createMemoryLeakWarning(method) {\n  var txt = method === 'destroy' ? 'n already-' : ' ';\n  return [method + \"() was called on a\" + txt + \"destroyed instance. This is a no-op but\", 'indicates a potential memory leak.'].join(' ');\n}\n\nfunction clean(value) {\n  var spacesAndTabs = /[ \\t]{2,}/g;\n  var lineStartWithSpaces = /^[ \\t]*/gm;\n  return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();\n}\n\nfunction getDevMessage(message) {\n  return clean(\"\\n  %ctippy.js\\n\\n  %c\" + clean(message) + \"\\n\\n  %c\\uD83D\\uDC77\\u200D This is a development-only message. It will be removed in production.\\n  \");\n}\n\nfunction getFormattedMessage(message) {\n  return [getDevMessage(message), // title\n  'color: #00C584; font-size: 1.3em; font-weight: bold;', // message\n  'line-height: 1.5', // footer\n  'color: #a6a095;'];\n} // Assume warnings and errors never have the same message\n\n\nvar visitedMessages;\n\nif (true) {\n  resetVisitedMessages();\n}\n\nfunction resetVisitedMessages() {\n  visitedMessages = new Set();\n}\n\nfunction warnWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console;\n\n    visitedMessages.add(message);\n\n    (_console = console).warn.apply(_console, getFormattedMessage(message));\n  }\n}\n\nfunction errorWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console2;\n\n    visitedMessages.add(message);\n\n    (_console2 = console).error.apply(_console2, getFormattedMessage(message));\n  }\n}\n\nfunction validateTargets(targets) {\n  var didPassFalsyValue = !targets;\n  var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;\n  errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));\n  errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));\n}\n\nvar pluginProps = {\n  animateFill: false,\n  followCursor: false,\n  inlinePositioning: false,\n  sticky: false\n};\nvar renderProps = {\n  allowHTML: false,\n  animation: 'fade',\n  arrow: true,\n  content: '',\n  inertia: false,\n  maxWidth: 350,\n  role: 'tooltip',\n  theme: '',\n  zIndex: 9999\n};\nvar defaultProps = Object.assign({\n  appendTo: function appendTo() {\n    return document.body;\n  },\n  aria: {\n    content: 'auto',\n    expanded: 'auto'\n  },\n  delay: 0,\n  duration: [300, 250],\n  getReferenceClientRect: null,\n  hideOnClick: true,\n  ignoreAttributes: false,\n  interactive: false,\n  interactiveBorder: 2,\n  interactiveDebounce: 0,\n  moveTransition: '',\n  offset: [0, 10],\n  onAfterUpdate: function onAfterUpdate() {},\n  onBeforeUpdate: function onBeforeUpdate() {},\n  onCreate: function onCreate() {},\n  onDestroy: function onDestroy() {},\n  onHidden: function onHidden() {},\n  onHide: function onHide() {},\n  onMount: function onMount() {},\n  onShow: function onShow() {},\n  onShown: function onShown() {},\n  onTrigger: function onTrigger() {},\n  onUntrigger: function onUntrigger() {},\n  onClickOutside: function onClickOutside() {},\n  placement: 'top',\n  plugins: [],\n  popperOptions: {},\n  render: null,\n  showOnCreate: false,\n  touch: true,\n  trigger: 'mouseenter focus',\n  triggerTarget: null\n}, pluginProps, {}, renderProps);\nvar defaultKeys = Object.keys(defaultProps);\n\nvar setDefaultProps = function setDefaultProps(partialProps) {\n  /* istanbul ignore else */\n  if (true) {\n    validateProps(partialProps, []);\n  }\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (key) {\n    defaultProps[key] = partialProps[key];\n  });\n};\n\nfunction getExtendedPassedProps(passedProps) {\n  var plugins = passedProps.plugins || [];\n  var pluginProps = plugins.reduce(function (acc, plugin) {\n    var name = plugin.name,\n        defaultValue = plugin.defaultValue;\n\n    if (name) {\n      acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;\n    }\n\n    return acc;\n  }, {});\n  return Object.assign({}, passedProps, {}, pluginProps);\n}\n\nfunction getDataAttributeProps(reference, plugins) {\n  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {\n    plugins: plugins\n  }))) : defaultKeys;\n  var props = propKeys.reduce(function (acc, key) {\n    var valueAsString = (reference.getAttribute(\"data-tippy-\" + key) || '').trim();\n\n    if (!valueAsString) {\n      return acc;\n    }\n\n    if (key === 'content') {\n      acc[key] = valueAsString;\n    } else {\n      try {\n        acc[key] = JSON.parse(valueAsString);\n      } catch (e) {\n        acc[key] = valueAsString;\n      }\n    }\n\n    return acc;\n  }, {});\n  return props;\n}\n\nfunction evaluateProps(reference, props) {\n  var out = Object.assign({}, props, {\n    content: invokeWithArgsOrReturn(props.content, [reference])\n  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));\n  out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);\n  out.aria = {\n    expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,\n    content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content\n  };\n  return out;\n}\n\nfunction validateProps(partialProps, plugins) {\n  if (partialProps === void 0) {\n    partialProps = {};\n  }\n\n  if (plugins === void 0) {\n    plugins = [];\n  }\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (prop) {\n    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));\n    var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`\n\n    if (didPassUnknownProp) {\n      didPassUnknownProp = plugins.filter(function (plugin) {\n        return plugin.name === prop;\n      }).length === 0;\n    }\n\n    warnWhen(didPassUnknownProp, [\"`\" + prop + \"`\", \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));\n  });\n}\n\nvar innerHTML = function innerHTML() {\n  return 'innerHTML';\n};\n\nfunction dangerouslySetInnerHTML(element, html) {\n  element[innerHTML()] = html;\n}\n\nfunction createArrowElement(value) {\n  var arrow = div();\n\n  if (value === true) {\n    arrow.className = ARROW_CLASS;\n  } else {\n    arrow.className = SVG_ARROW_CLASS;\n\n    if (isElement(value)) {\n      arrow.appendChild(value);\n    } else {\n      dangerouslySetInnerHTML(arrow, value);\n    }\n  }\n\n  return arrow;\n}\n\nfunction setContent(content, props) {\n  if (isElement(props.content)) {\n    dangerouslySetInnerHTML(content, '');\n    content.appendChild(props.content);\n  } else if (typeof props.content !== 'function') {\n    if (props.allowHTML) {\n      dangerouslySetInnerHTML(content, props.content);\n    } else {\n      content.textContent = props.content;\n    }\n  }\n}\n\nfunction getChildren(popper) {\n  var box = popper.firstElementChild;\n  var boxChildren = arrayFrom(box.children);\n  return {\n    box: box,\n    content: boxChildren.find(function (node) {\n      return node.classList.contains(CONTENT_CLASS);\n    }),\n    arrow: boxChildren.find(function (node) {\n      return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);\n    }),\n    backdrop: boxChildren.find(function (node) {\n      return node.classList.contains(BACKDROP_CLASS);\n    })\n  };\n}\n\nfunction render(instance) {\n  var popper = div();\n  var box = div();\n  box.className = BOX_CLASS;\n  box.setAttribute('data-state', 'hidden');\n  box.setAttribute('tabindex', '-1');\n  var content = div();\n  content.className = CONTENT_CLASS;\n  content.setAttribute('data-state', 'hidden');\n  setContent(content, instance.props);\n  popper.appendChild(box);\n  box.appendChild(content);\n  onUpdate(instance.props, instance.props);\n\n  function onUpdate(prevProps, nextProps) {\n    var _getChildren = getChildren(popper),\n        box = _getChildren.box,\n        content = _getChildren.content,\n        arrow = _getChildren.arrow;\n\n    if (nextProps.theme) {\n      box.setAttribute('data-theme', nextProps.theme);\n    } else {\n      box.removeAttribute('data-theme');\n    }\n\n    if (typeof nextProps.animation === 'string') {\n      box.setAttribute('data-animation', nextProps.animation);\n    } else {\n      box.removeAttribute('data-animation');\n    }\n\n    if (nextProps.inertia) {\n      box.setAttribute('data-inertia', '');\n    } else {\n      box.removeAttribute('data-inertia');\n    }\n\n    box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + \"px\" : nextProps.maxWidth;\n\n    if (nextProps.role) {\n      box.setAttribute('role', nextProps.role);\n    } else {\n      box.removeAttribute('role');\n    }\n\n    if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {\n      setContent(content, instance.props);\n    }\n\n    if (nextProps.arrow) {\n      if (!arrow) {\n        box.appendChild(createArrowElement(nextProps.arrow));\n      } else if (prevProps.arrow !== nextProps.arrow) {\n        box.removeChild(arrow);\n        box.appendChild(createArrowElement(nextProps.arrow));\n      }\n    } else if (arrow) {\n      box.removeChild(arrow);\n    }\n  }\n\n  return {\n    popper: popper,\n    onUpdate: onUpdate\n  };\n} // Runtime check to identify if the render function is the default one; this\n// way we can apply default CSS transitions logic and it can be tree-shaken away\n\n\nrender.$$tippy = true;\nvar idCounter = 1;\nvar mouseMoveListeners = []; // Used by `hideAll()`\n\nvar mountedInstances = [];\n\nfunction createTippy(reference, passedProps) {\n  var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================\n  // 🔒 Private members\n  // ===========================================================================\n\n  var showTimeout;\n  var hideTimeout;\n  var scheduleHideAnimationFrame;\n  var isVisibleFromClick = false;\n  var didHideDueToDocumentMouseDown = false;\n  var didTouchMove = false;\n  var ignoreOnFirstUpdate = false;\n  var lastTriggerEvent;\n  var currentTransitionEndListener;\n  var onFirstUpdate;\n  var listeners = [];\n  var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);\n  var currentTarget;\n  var doc = getOwnerDocument(props.triggerTarget || reference); // ===========================================================================\n  // 🔑 Public members\n  // ===========================================================================\n\n  var id = idCounter++;\n  var popperInstance = null;\n  var plugins = unique(props.plugins);\n  var state = {\n    // Is the instance currently enabled?\n    isEnabled: true,\n    // Is the tippy currently showing and not transitioning out?\n    isVisible: false,\n    // Has the instance been destroyed?\n    isDestroyed: false,\n    // Is the tippy currently mounted to the DOM?\n    isMounted: false,\n    // Has the tippy finished transitioning in?\n    isShown: false\n  };\n  var instance = {\n    // properties\n    id: id,\n    reference: reference,\n    popper: div(),\n    popperInstance: popperInstance,\n    props: props,\n    state: state,\n    plugins: plugins,\n    // methods\n    clearDelayTimeouts: clearDelayTimeouts,\n    setProps: setProps,\n    setContent: setContent,\n    show: show,\n    hide: hide,\n    hideWithInteractivity: hideWithInteractivity,\n    enable: enable,\n    disable: disable,\n    unmount: unmount,\n    destroy: destroy\n  }; // TODO: Investigate why this early return causes a TDZ error in the tests —\n  // it doesn't seem to happen in the browser\n\n  /* istanbul ignore if */\n\n  if (!props.render) {\n    if (true) {\n      errorWhen(true, 'render() function has not been supplied.');\n    }\n\n    return instance;\n  } // ===========================================================================\n  // Initial mutations\n  // ===========================================================================\n\n\n  var _props$render = props.render(instance),\n      popper = _props$render.popper,\n      onUpdate = _props$render.onUpdate;\n\n  popper.setAttribute('data-tippy-root', '');\n  popper.id = \"tippy-\" + instance.id;\n  instance.popper = popper;\n  reference._tippy = instance;\n  popper._tippy = instance;\n  var pluginsHooks = plugins.map(function (plugin) {\n    return plugin.fn(instance);\n  });\n  var hasAriaExpanded = reference.hasAttribute('aria-expanded');\n  addListeners();\n  handleAriaExpandedAttribute();\n  handleStyles();\n  invokeHook('onCreate', [instance]);\n\n  if (props.showOnCreate) {\n    scheduleShow();\n  } // Prevent a tippy with a delay from hiding if the cursor left then returned\n  // before it started hiding\n\n\n  popper.addEventListener('mouseenter', function () {\n    if (instance.props.interactive && instance.state.isVisible) {\n      instance.clearDelayTimeouts();\n    }\n  });\n  popper.addEventListener('mouseleave', function (event) {\n    if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {\n      doc.addEventListener('mousemove', debouncedOnMouseMove);\n      debouncedOnMouseMove(event);\n    }\n  });\n  return instance; // ===========================================================================\n  // 🔒 Private methods\n  // ===========================================================================\n\n  function getNormalizedTouchSettings() {\n    var touch = instance.props.touch;\n    return Array.isArray(touch) ? touch : [touch, 0];\n  }\n\n  function getIsCustomTouchBehavior() {\n    return getNormalizedTouchSettings()[0] === 'hold';\n  }\n\n  function getIsDefaultRenderFn() {\n    var _instance$props$rende; // @ts-ignore\n\n\n    return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);\n  }\n\n  function getCurrentTarget() {\n    return currentTarget || reference;\n  }\n\n  function getDefaultTemplateChildren() {\n    return getChildren(popper);\n  }\n\n  function getDelay(isShow) {\n    // For touch or keyboard input, force `0` delay for UX reasons\n    // Also if the instance is mounted but not visible (transitioning out),\n    // ignore delay\n    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {\n      return 0;\n    }\n\n    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);\n  }\n\n  function handleStyles() {\n    popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';\n    popper.style.zIndex = \"\" + instance.props.zIndex;\n  }\n\n  function invokeHook(hook, args, shouldInvokePropsHook) {\n    if (shouldInvokePropsHook === void 0) {\n      shouldInvokePropsHook = true;\n    }\n\n    pluginsHooks.forEach(function (pluginHooks) {\n      if (pluginHooks[hook]) {\n        pluginHooks[hook].apply(void 0, args);\n      }\n    });\n\n    if (shouldInvokePropsHook) {\n      var _instance$props;\n\n      (_instance$props = instance.props)[hook].apply(_instance$props, args);\n    }\n  }\n\n  function handleAriaContentAttribute() {\n    var aria = instance.props.aria;\n\n    if (!aria.content) {\n      return;\n    }\n\n    var attr = \"aria-\" + aria.content;\n    var id = popper.id;\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      var currentValue = node.getAttribute(attr);\n\n      if (instance.state.isVisible) {\n        node.setAttribute(attr, currentValue ? currentValue + \" \" + id : id);\n      } else {\n        var nextValue = currentValue && currentValue.replace(id, '').trim();\n\n        if (nextValue) {\n          node.setAttribute(attr, nextValue);\n        } else {\n          node.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  function handleAriaExpandedAttribute() {\n    if (hasAriaExpanded || !instance.props.aria.expanded) {\n      return;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      if (instance.props.interactive) {\n        node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');\n      } else {\n        node.removeAttribute('aria-expanded');\n      }\n    });\n  }\n\n  function cleanupInteractiveMouseListeners() {\n    doc.removeEventListener('mousemove', debouncedOnMouseMove);\n    mouseMoveListeners = mouseMoveListeners.filter(function (listener) {\n      return listener !== debouncedOnMouseMove;\n    });\n  }\n\n  function onDocumentPress(event) {\n    // Moved finger to scroll instead of an intentional tap outside\n    if (currentInput.isTouch) {\n      if (didTouchMove || event.type === 'mousedown') {\n        return;\n      }\n    } // Clicked on interactive popper\n\n\n    if (instance.props.interactive && popper.contains(event.target)) {\n      return;\n    } // Clicked on the event listeners target\n\n\n    if (getCurrentTarget().contains(event.target)) {\n      if (currentInput.isTouch) {\n        return;\n      }\n\n      if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {\n        return;\n      }\n    } else {\n      invokeHook('onClickOutside', [instance, event]);\n    }\n\n    if (instance.props.hideOnClick === true) {\n      isVisibleFromClick = false;\n      instance.clearDelayTimeouts();\n      instance.hide(); // `mousedown` event is fired right before `focus` if pressing the\n      // currentTarget. This lets a tippy with `focus` trigger know that it\n      // should not show\n\n      didHideDueToDocumentMouseDown = true;\n      setTimeout(function () {\n        didHideDueToDocumentMouseDown = false;\n      }); // The listener gets added in `scheduleShow()`, but this may be hiding it\n      // before it shows, and hide()'s early bail-out behavior can prevent it\n      // from being cleaned up\n\n      if (!instance.state.isMounted) {\n        removeDocumentPress();\n      }\n    }\n  }\n\n  function onTouchMove() {\n    didTouchMove = true;\n  }\n\n  function onTouchStart() {\n    didTouchMove = false;\n  }\n\n  function addDocumentPress() {\n    doc.addEventListener('mousedown', onDocumentPress, true);\n    doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function removeDocumentPress() {\n    doc.removeEventListener('mousedown', onDocumentPress, true);\n    doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function onTransitionedOut(duration, callback) {\n    onTransitionEnd(duration, function () {\n      if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {\n        callback();\n      }\n    });\n  }\n\n  function onTransitionedIn(duration, callback) {\n    onTransitionEnd(duration, callback);\n  }\n\n  function onTransitionEnd(duration, callback) {\n    var box = getDefaultTemplateChildren().box;\n\n    function listener(event) {\n      if (event.target === box) {\n        updateTransitionEndListener(box, 'remove', listener);\n        callback();\n      }\n    } // Make callback synchronous if duration is 0\n    // `transitionend` won't fire otherwise\n\n\n    if (duration === 0) {\n      return callback();\n    }\n\n    updateTransitionEndListener(box, 'remove', currentTransitionEndListener);\n    updateTransitionEndListener(box, 'add', listener);\n    currentTransitionEndListener = listener;\n  }\n\n  function on(eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      node.addEventListener(eventType, handler, options);\n      listeners.push({\n        node: node,\n        eventType: eventType,\n        handler: handler,\n        options: options\n      });\n    });\n  }\n\n  function addListeners() {\n    if (getIsCustomTouchBehavior()) {\n      on('touchstart', onTrigger, {\n        passive: true\n      });\n      on('touchend', onMouseLeave, {\n        passive: true\n      });\n    }\n\n    splitBySpaces(instance.props.trigger).forEach(function (eventType) {\n      if (eventType === 'manual') {\n        return;\n      }\n\n      on(eventType, onTrigger);\n\n      switch (eventType) {\n        case 'mouseenter':\n          on('mouseleave', onMouseLeave);\n          break;\n\n        case 'focus':\n          on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);\n          break;\n\n        case 'focusin':\n          on('focusout', onBlurOrFocusOut);\n          break;\n      }\n    });\n  }\n\n  function removeListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function onTrigger(event) {\n    var _lastTriggerEvent;\n\n    var shouldScheduleClickHide = false;\n\n    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {\n      return;\n    }\n\n    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';\n    lastTriggerEvent = event;\n    currentTarget = event.currentTarget;\n    handleAriaExpandedAttribute();\n\n    if (!instance.state.isVisible && isMouseEvent(event)) {\n      // If scrolling, `mouseenter` events can be fired if the cursor lands\n      // over a new target, but `mousemove` events don't get fired. This\n      // causes interactive tooltips to get stuck open until the cursor is\n      // moved\n      mouseMoveListeners.forEach(function (listener) {\n        return listener(event);\n      });\n    } // Toggle show/hide when clicking click-triggered tooltips\n\n\n    if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {\n      shouldScheduleClickHide = true;\n    } else {\n      scheduleShow(event);\n    }\n\n    if (event.type === 'click') {\n      isVisibleFromClick = !shouldScheduleClickHide;\n    }\n\n    if (shouldScheduleClickHide && !wasFocused) {\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseMove(event) {\n    var target = event.target;\n    var isCursorOverReferenceOrPopper = reference.contains(target) || popper.contains(target);\n\n    if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {\n      return;\n    }\n\n    var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {\n      var _instance$popperInsta;\n\n      var instance = popper._tippy;\n      var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;\n\n      if (state) {\n        return {\n          popperRect: popper.getBoundingClientRect(),\n          popperState: state,\n          props: props\n        };\n      }\n\n      return null;\n    }).filter(Boolean);\n\n    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {\n      cleanupInteractiveMouseListeners();\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseLeave(event) {\n    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;\n\n    if (shouldBail) {\n      return;\n    }\n\n    if (instance.props.interactive) {\n      instance.hideWithInteractivity(event);\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function onBlurOrFocusOut(event) {\n    if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {\n      return;\n    } // If focus was moved to within the popper\n\n\n    if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function isEventListenerStopped(event) {\n    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;\n  }\n\n  function createPopperInstance() {\n    destroyPopperInstance();\n    var _instance$props2 = instance.props,\n        popperOptions = _instance$props2.popperOptions,\n        placement = _instance$props2.placement,\n        offset = _instance$props2.offset,\n        getReferenceClientRect = _instance$props2.getReferenceClientRect,\n        moveTransition = _instance$props2.moveTransition;\n    var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;\n    var computedReference = getReferenceClientRect ? {\n      getBoundingClientRect: getReferenceClientRect,\n      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()\n    } : reference;\n    var tippyModifier = {\n      name: '$$tippy',\n      enabled: true,\n      phase: 'beforeWrite',\n      requires: ['computeStyles'],\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (getIsDefaultRenderFn()) {\n          var _getDefaultTemplateCh = getDefaultTemplateChildren(),\n              box = _getDefaultTemplateCh.box;\n\n          ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {\n            if (attr === 'placement') {\n              box.setAttribute('data-placement', state.placement);\n            } else {\n              if (state.attributes.popper[\"data-popper-\" + attr]) {\n                box.setAttribute(\"data-\" + attr, '');\n              } else {\n                box.removeAttribute(\"data-\" + attr);\n              }\n            }\n          });\n          state.attributes.popper = {};\n        }\n      }\n    };\n    var modifiers = [{\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5\n        }\n      }\n    }, {\n      name: 'flip',\n      options: {\n        padding: 5\n      }\n    }, {\n      name: 'computeStyles',\n      options: {\n        adaptive: !moveTransition\n      }\n    }, tippyModifier];\n\n    if (getIsDefaultRenderFn() && arrow) {\n      modifiers.push({\n        name: 'arrow',\n        options: {\n          element: arrow,\n          padding: 3\n        }\n      });\n    }\n\n    modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);\n    instance.popperInstance = Object(_popperjs_core__WEBPACK_IMPORTED_MODULE_0__[\"createPopper\"])(computedReference, popper, Object.assign({}, popperOptions, {\n      placement: placement,\n      onFirstUpdate: onFirstUpdate,\n      modifiers: modifiers\n    }));\n  }\n\n  function destroyPopperInstance() {\n    if (instance.popperInstance) {\n      instance.popperInstance.destroy();\n      instance.popperInstance = null;\n    }\n  }\n\n  function mount() {\n    var appendTo = instance.props.appendTo;\n    var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so\n    // it's directly after the reference element so the elements inside the\n    // tippy can be tabbed to\n    // If there are clipping issues, the user can specify a different appendTo\n    // and ensure focus management is handled correctly manually\n\n    var node = getCurrentTarget();\n\n    if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {\n      parentNode = node.parentNode;\n    } else {\n      parentNode = invokeWithArgsOrReturn(appendTo, [node]);\n    } // The popper element needs to exist on the DOM before its position can be\n    // updated as Popper needs to read its dimensions\n\n\n    if (!parentNode.contains(popper)) {\n      parentNode.appendChild(popper);\n    }\n\n    createPopperInstance();\n    /* istanbul ignore else */\n\n    if (true) {\n      // Accessibility check\n      warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\\n\\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\\n\\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\\n\\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));\n    }\n  }\n\n  function getNestedPopperTree() {\n    return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));\n  }\n\n  function scheduleShow(event) {\n    instance.clearDelayTimeouts();\n\n    if (event) {\n      invokeHook('onTrigger', [instance, event]);\n    }\n\n    addDocumentPress();\n    var delay = getDelay(true);\n\n    var _getNormalizedTouchSe = getNormalizedTouchSettings(),\n        touchValue = _getNormalizedTouchSe[0],\n        touchDelay = _getNormalizedTouchSe[1];\n\n    if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {\n      delay = touchDelay;\n    }\n\n    if (delay) {\n      showTimeout = setTimeout(function () {\n        instance.show();\n      }, delay);\n    } else {\n      instance.show();\n    }\n  }\n\n  function scheduleHide(event) {\n    instance.clearDelayTimeouts();\n    invokeHook('onUntrigger', [instance, event]);\n\n    if (!instance.state.isVisible) {\n      removeDocumentPress();\n      return;\n    } // For interactive tippies, scheduleHide is added to a document.body handler\n    // from onMouseLeave so must intercept scheduled hides from mousemove/leave\n    // events when trigger contains mouseenter and click, and the tip is\n    // currently shown as a result of a click.\n\n\n    if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {\n      return;\n    }\n\n    var delay = getDelay(false);\n\n    if (delay) {\n      hideTimeout = setTimeout(function () {\n        if (instance.state.isVisible) {\n          instance.hide();\n        }\n      }, delay);\n    } else {\n      // Fixes a `transitionend` problem when it fires 1 frame too\n      // late sometimes, we don't want hide() to be called.\n      scheduleHideAnimationFrame = requestAnimationFrame(function () {\n        instance.hide();\n      });\n    }\n  } // ===========================================================================\n  // 🔑 Public methods\n  // ===========================================================================\n\n\n  function enable() {\n    instance.state.isEnabled = true;\n  }\n\n  function disable() {\n    // Disabling the instance should also hide it\n    // https://github.com/atomiks/tippy.js-react/issues/106\n    instance.hide();\n    instance.state.isEnabled = false;\n  }\n\n  function clearDelayTimeouts() {\n    clearTimeout(showTimeout);\n    clearTimeout(hideTimeout);\n    cancelAnimationFrame(scheduleHideAnimationFrame);\n  }\n\n  function setProps(partialProps) {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));\n    }\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    invokeHook('onBeforeUpdate', [instance, partialProps]);\n    removeListeners();\n    var prevProps = instance.props;\n    var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {\n      ignoreAttributes: true\n    }));\n    instance.props = nextProps;\n    addListeners();\n\n    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {\n      cleanupInteractiveMouseListeners();\n      debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);\n    } // Ensure stale aria-expanded attributes are removed\n\n\n    if (prevProps.triggerTarget && !nextProps.triggerTarget) {\n      normalizeToArray(prevProps.triggerTarget).forEach(function (node) {\n        node.removeAttribute('aria-expanded');\n      });\n    } else if (nextProps.triggerTarget) {\n      reference.removeAttribute('aria-expanded');\n    }\n\n    handleAriaExpandedAttribute();\n    handleStyles();\n\n    if (onUpdate) {\n      onUpdate(prevProps, nextProps);\n    }\n\n    if (instance.popperInstance) {\n      createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,\n      // and the nested ones get re-rendered first.\n      // https://github.com/atomiks/tippyjs-react/issues/177\n      // TODO: find a cleaner / more efficient solution(!)\n\n      getNestedPopperTree().forEach(function (nestedPopper) {\n        // React (and other UI libs likely) requires a rAF wrapper as it flushes\n        // its work in one\n        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);\n      });\n    }\n\n    invokeHook('onAfterUpdate', [instance, partialProps]);\n  }\n\n  function setContent(content) {\n    instance.setProps({\n      content: content\n    });\n  }\n\n  function show() {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));\n    } // Early bail-out\n\n\n    var isAlreadyVisible = instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);\n\n    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {\n      return;\n    } // Normalize `disabled` behavior across browsers.\n    // Firefox allows events on disabled elements, but Chrome doesn't.\n    // Using a wrapper element (i.e. <span>) is recommended.\n\n\n    if (getCurrentTarget().hasAttribute('disabled')) {\n      return;\n    }\n\n    invokeHook('onShow', [instance], false);\n\n    if (instance.props.onShow(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = true;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'visible';\n    }\n\n    handleStyles();\n    addDocumentPress();\n\n    if (!instance.state.isMounted) {\n      popper.style.transition = 'none';\n    } // If flipping to the opposite side after hiding at least once, the\n    // animation will use the wrong placement without resetting the duration\n\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh2.box,\n          content = _getDefaultTemplateCh2.content;\n\n      setTransitionDuration([box, content], 0);\n    }\n\n    onFirstUpdate = function onFirstUpdate() {\n      if (!instance.state.isVisible || ignoreOnFirstUpdate) {\n        return;\n      }\n\n      ignoreOnFirstUpdate = true; // reflow\n\n      void popper.offsetHeight;\n      popper.style.transition = instance.props.moveTransition;\n\n      if (getIsDefaultRenderFn() && instance.props.animation) {\n        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),\n            _box = _getDefaultTemplateCh3.box,\n            _content = _getDefaultTemplateCh3.content;\n\n        setTransitionDuration([_box, _content], duration);\n        setVisibilityState([_box, _content], 'visible');\n      }\n\n      handleAriaContentAttribute();\n      handleAriaExpandedAttribute();\n      pushIfUnique(mountedInstances, instance);\n      instance.state.isMounted = true;\n      invokeHook('onMount', [instance]);\n\n      if (instance.props.animation && getIsDefaultRenderFn()) {\n        onTransitionedIn(duration, function () {\n          instance.state.isShown = true;\n          invokeHook('onShown', [instance]);\n        });\n      }\n    };\n\n    mount();\n  }\n\n  function hide() {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));\n    } // Early bail-out\n\n\n    var isAlreadyHidden = !instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);\n\n    if (isAlreadyHidden || isDestroyed || isDisabled) {\n      return;\n    }\n\n    invokeHook('onHide', [instance], false);\n\n    if (instance.props.onHide(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = false;\n    instance.state.isShown = false;\n    ignoreOnFirstUpdate = false;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'hidden';\n    }\n\n    cleanupInteractiveMouseListeners();\n    removeDocumentPress();\n    handleStyles();\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh4.box,\n          content = _getDefaultTemplateCh4.content;\n\n      if (instance.props.animation) {\n        setTransitionDuration([box, content], duration);\n        setVisibilityState([box, content], 'hidden');\n      }\n    }\n\n    handleAriaContentAttribute();\n    handleAriaExpandedAttribute();\n\n    if (instance.props.animation) {\n      if (getIsDefaultRenderFn()) {\n        onTransitionedOut(duration, instance.unmount);\n      }\n    } else {\n      instance.unmount();\n    }\n  }\n\n  function hideWithInteractivity(event) {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));\n    }\n\n    doc.addEventListener('mousemove', debouncedOnMouseMove);\n    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);\n    debouncedOnMouseMove(event);\n  }\n\n  function unmount() {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));\n    }\n\n    if (instance.state.isVisible) {\n      instance.hide();\n    }\n\n    if (!instance.state.isMounted) {\n      return;\n    }\n\n    destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper\n    // tree by default. This seems mainly for interactive tippies, but we should\n    // find a workaround if possible\n\n    getNestedPopperTree().forEach(function (nestedPopper) {\n      nestedPopper._tippy.unmount();\n    });\n\n    if (popper.parentNode) {\n      popper.parentNode.removeChild(popper);\n    }\n\n    mountedInstances = mountedInstances.filter(function (i) {\n      return i !== instance;\n    });\n    instance.state.isMounted = false;\n    invokeHook('onHidden', [instance]);\n  }\n\n  function destroy() {\n    /* istanbul ignore else */\n    if (true) {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));\n    }\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    instance.clearDelayTimeouts();\n    instance.unmount();\n    removeListeners();\n    delete reference._tippy;\n    instance.state.isDestroyed = true;\n    invokeHook('onDestroy', [instance]);\n  }\n}\n\nfunction tippy(targets, optionalProps) {\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n\n  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);\n  /* istanbul ignore else */\n\n  if (true) {\n    validateTargets(targets);\n    validateProps(optionalProps, plugins);\n  }\n\n  bindGlobalEventListeners();\n  var passedProps = Object.assign({}, optionalProps, {\n    plugins: plugins\n  });\n  var elements = getArrayOfElements(targets);\n  /* istanbul ignore else */\n\n  if (true) {\n    var isSingleContentElement = isElement(passedProps.content);\n    var isMoreThanOneReferenceElement = elements.length > 1;\n    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\\n\\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\\n\\n', '1) content: element.innerHTML\\n', '2) content: () => element.cloneNode(true)'].join(' '));\n  }\n\n  var instances = elements.reduce(function (acc, reference) {\n    var instance = reference && createTippy(reference, passedProps);\n\n    if (instance) {\n      acc.push(instance);\n    }\n\n    return acc;\n  }, []);\n  return isElement(targets) ? instances[0] : instances;\n}\n\ntippy.defaultProps = defaultProps;\ntippy.setDefaultProps = setDefaultProps;\ntippy.currentInput = currentInput;\n\nvar hideAll = function hideAll(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      excludedReferenceOrInstance = _ref.exclude,\n      duration = _ref.duration;\n\n  mountedInstances.forEach(function (instance) {\n    var isExcluded = false;\n\n    if (excludedReferenceOrInstance) {\n      isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;\n    }\n\n    if (!isExcluded) {\n      var originalDuration = instance.props.duration;\n      instance.setProps({\n        duration: duration\n      });\n      instance.hide();\n\n      if (!instance.state.isDestroyed) {\n        instance.setProps({\n          duration: originalDuration\n        });\n      }\n    }\n  });\n};\n\nvar createSingleton = function createSingleton(tippyInstances, optionalProps) {\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n  /* istanbul ignore else */\n\n\n  if (true) {\n    errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));\n  }\n\n  var mutTippyInstances = tippyInstances;\n  var references = [];\n  var currentTarget;\n  var overrides = optionalProps.overrides;\n\n  function setReferences() {\n    references = mutTippyInstances.map(function (instance) {\n      return instance.reference;\n    });\n  }\n\n  function enableInstances(isEnabled) {\n    mutTippyInstances.forEach(function (instance) {\n      if (isEnabled) {\n        instance.enable();\n      } else {\n        instance.disable();\n      }\n    });\n  }\n\n  enableInstances(false);\n  setReferences();\n  var singleton = {\n    fn: function fn() {\n      return {\n        onDestroy: function onDestroy() {\n          enableInstances(true);\n        },\n        onTrigger: function onTrigger(instance, event) {\n          var target = event.currentTarget;\n          var index = references.indexOf(target); // bail-out\n\n          if (target === currentTarget) {\n            return;\n          }\n\n          currentTarget = target;\n          var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {\n            acc[prop] = mutTippyInstances[index].props[prop];\n            return acc;\n          }, {});\n          instance.setProps(Object.assign({}, overrideProps, {\n            getReferenceClientRect: function getReferenceClientRect() {\n              return target.getBoundingClientRect();\n            }\n          }));\n        }\n      };\n    }\n  };\n  var instance = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {\n    plugins: [singleton].concat(optionalProps.plugins || []),\n    triggerTarget: references\n  }));\n  var originalSetProps = instance.setProps;\n\n  instance.setProps = function (props) {\n    overrides = props.overrides || overrides;\n    originalSetProps(props);\n  };\n\n  instance.setInstances = function (nextInstances) {\n    enableInstances(true);\n    mutTippyInstances = nextInstances;\n    enableInstances(false);\n    setReferences();\n    instance.setProps({\n      triggerTarget: references\n    });\n  };\n\n  return instance;\n};\n\nvar BUBBLING_EVENTS_MAP = {\n  mouseover: 'mouseenter',\n  focusin: 'focus',\n  click: 'click'\n};\n/**\n * Creates a delegate instance that controls the creation of tippy instances\n * for child elements (`target` CSS selector).\n */\n\nfunction delegate(targets, props) {\n  /* istanbul ignore else */\n  if (true) {\n    errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));\n  }\n\n  var listeners = [];\n  var childTippyInstances = [];\n  var target = props.target;\n  var nativeProps = removeProperties(props, ['target']);\n  var parentProps = Object.assign({}, nativeProps, {\n    trigger: 'manual',\n    touch: false\n  });\n  var childProps = Object.assign({}, nativeProps, {\n    showOnCreate: true\n  });\n  var returnValue = tippy(targets, parentProps);\n  var normalizedReturnValue = normalizeToArray(returnValue);\n\n  function onTrigger(event) {\n    if (!event.target) {\n      return;\n    }\n\n    var targetNode = event.target.closest(target);\n\n    if (!targetNode) {\n      return;\n    } // Get relevant trigger with fallbacks:\n    // 1. Check `data-tippy-trigger` attribute on target node\n    // 2. Fallback to `trigger` passed to `delegate()`\n    // 3. Fallback to `defaultProps.trigger`\n\n\n    var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore\n\n    if (targetNode._tippy) {\n      return;\n    }\n\n    if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {\n      return;\n    }\n\n    if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type])) {\n      return;\n    }\n\n    var instance = tippy(targetNode, childProps);\n\n    if (instance) {\n      childTippyInstances = childTippyInstances.concat(instance);\n    }\n  }\n\n  function on(node, eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    node.addEventListener(eventType, handler, options);\n    listeners.push({\n      node: node,\n      eventType: eventType,\n      handler: handler,\n      options: options\n    });\n  }\n\n  function addEventListeners(instance) {\n    var reference = instance.reference;\n    on(reference, 'touchstart', onTrigger);\n    on(reference, 'mouseover', onTrigger);\n    on(reference, 'focusin', onTrigger);\n    on(reference, 'click', onTrigger);\n  }\n\n  function removeEventListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function applyMutations(instance) {\n    var originalDestroy = instance.destroy;\n\n    instance.destroy = function (shouldDestroyChildInstances) {\n      if (shouldDestroyChildInstances === void 0) {\n        shouldDestroyChildInstances = true;\n      }\n\n      if (shouldDestroyChildInstances) {\n        childTippyInstances.forEach(function (instance) {\n          instance.destroy();\n        });\n      }\n\n      childTippyInstances = [];\n      removeEventListeners();\n      originalDestroy();\n    };\n\n    addEventListeners(instance);\n  }\n\n  normalizedReturnValue.forEach(applyMutations);\n  return returnValue;\n}\n\nvar animateFill = {\n  name: 'animateFill',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var _instance$props$rende; // @ts-ignore\n\n\n    if (!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy)) {\n      if (true) {\n        errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');\n      }\n\n      return {};\n    }\n\n    var _getChildren = getChildren(instance.popper),\n        box = _getChildren.box,\n        content = _getChildren.content;\n\n    var backdrop = instance.props.animateFill ? createBackdropElement() : null;\n    return {\n      onCreate: function onCreate() {\n        if (backdrop) {\n          box.insertBefore(backdrop, box.firstElementChild);\n          box.setAttribute('data-animatefill', '');\n          box.style.overflow = 'hidden';\n          instance.setProps({\n            arrow: false,\n            animation: 'shift-away'\n          });\n        }\n      },\n      onMount: function onMount() {\n        if (backdrop) {\n          var transitionDuration = box.style.transitionDuration;\n          var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the\n          // tooltip element. `clip-path` is the other alternative but is not\n          // well-supported and is buggy on some devices.\n\n          content.style.transitionDelay = Math.round(duration / 10) + \"ms\";\n          backdrop.style.transitionDuration = transitionDuration;\n          setVisibilityState([backdrop], 'visible');\n        }\n      },\n      onShow: function onShow() {\n        if (backdrop) {\n          backdrop.style.transitionDuration = '0ms';\n        }\n      },\n      onHide: function onHide() {\n        if (backdrop) {\n          setVisibilityState([backdrop], 'hidden');\n        }\n      }\n    };\n  }\n};\n\nfunction createBackdropElement() {\n  var backdrop = div();\n  backdrop.className = BACKDROP_CLASS;\n  setVisibilityState([backdrop], 'hidden');\n  return backdrop;\n}\n\nvar mouseCoords = {\n  clientX: 0,\n  clientY: 0\n};\nvar activeInstances = [];\n\nfunction storeMouseCoords(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  mouseCoords = {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\n\nfunction addMouseCoordsListener(doc) {\n  doc.addEventListener('mousemove', storeMouseCoords);\n}\n\nfunction removeMouseCoordsListener(doc) {\n  doc.removeEventListener('mousemove', storeMouseCoords);\n}\n\nvar followCursor = {\n  name: 'followCursor',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n    var doc = getOwnerDocument(instance.props.triggerTarget || reference);\n    var isInternalUpdate = false;\n    var wasFocusEvent = false;\n    var isUnmounted = true;\n    var prevProps = instance.props;\n\n    function getIsInitialBehavior() {\n      return instance.props.followCursor === 'initial' && instance.state.isVisible;\n    }\n\n    function addListener() {\n      doc.addEventListener('mousemove', onMouseMove);\n    }\n\n    function removeListener() {\n      doc.removeEventListener('mousemove', onMouseMove);\n    }\n\n    function unsetGetReferenceClientRect() {\n      isInternalUpdate = true;\n      instance.setProps({\n        getReferenceClientRect: null\n      });\n      isInternalUpdate = false;\n    }\n\n    function onMouseMove(event) {\n      // If the instance is interactive, avoid updating the position unless it's\n      // over the reference element\n      var isCursorOverReference = event.target ? reference.contains(event.target) : true;\n      var followCursor = instance.props.followCursor;\n      var clientX = event.clientX,\n          clientY = event.clientY;\n      var rect = reference.getBoundingClientRect();\n      var relativeX = clientX - rect.left;\n      var relativeY = clientY - rect.top;\n\n      if (isCursorOverReference || !instance.props.interactive) {\n        instance.setProps({\n          getReferenceClientRect: function getReferenceClientRect() {\n            var rect = reference.getBoundingClientRect();\n            var x = clientX;\n            var y = clientY;\n\n            if (followCursor === 'initial') {\n              x = rect.left + relativeX;\n              y = rect.top + relativeY;\n            }\n\n            var top = followCursor === 'horizontal' ? rect.top : y;\n            var right = followCursor === 'vertical' ? rect.right : x;\n            var bottom = followCursor === 'horizontal' ? rect.bottom : y;\n            var left = followCursor === 'vertical' ? rect.left : x;\n            return {\n              width: right - left,\n              height: bottom - top,\n              top: top,\n              right: right,\n              bottom: bottom,\n              left: left\n            };\n          }\n        });\n      }\n    }\n\n    function create() {\n      if (instance.props.followCursor) {\n        activeInstances.push({\n          instance: instance,\n          doc: doc\n        });\n        addMouseCoordsListener(doc);\n      }\n    }\n\n    function destroy() {\n      activeInstances = activeInstances.filter(function (data) {\n        return data.instance !== instance;\n      });\n\n      if (activeInstances.filter(function (data) {\n        return data.doc === doc;\n      }).length === 0) {\n        removeMouseCoordsListener(doc);\n      }\n    }\n\n    return {\n      onCreate: create,\n      onDestroy: destroy,\n      onBeforeUpdate: function onBeforeUpdate() {\n        prevProps = instance.props;\n      },\n      onAfterUpdate: function onAfterUpdate(_, _ref2) {\n        var followCursor = _ref2.followCursor;\n\n        if (isInternalUpdate) {\n          return;\n        }\n\n        if (followCursor !== undefined && prevProps.followCursor !== followCursor) {\n          destroy();\n\n          if (followCursor) {\n            create();\n\n            if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {\n              addListener();\n            }\n          } else {\n            removeListener();\n            unsetGetReferenceClientRect();\n          }\n        }\n      },\n      onMount: function onMount() {\n        if (instance.props.followCursor) {\n          if (isUnmounted) {\n            onMouseMove(mouseCoords);\n            isUnmounted = false;\n          }\n\n          if (!wasFocusEvent && !getIsInitialBehavior()) {\n            addListener();\n          }\n        }\n      },\n      onTrigger: function onTrigger(_, _ref3) {\n        var type = _ref3.type;\n        wasFocusEvent = type === 'focus';\n      },\n      onHidden: function onHidden() {\n        if (instance.props.followCursor) {\n          unsetGetReferenceClientRect();\n          removeListener();\n          isUnmounted = true;\n        }\n      }\n    };\n  }\n};\n\nfunction getProps(props, modifier) {\n  var _props$popperOptions;\n\n  return {\n    popperOptions: Object.assign({}, props.popperOptions, {\n      modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {\n        var name = _ref.name;\n        return name !== modifier.name;\n      }), [modifier])\n    })\n  };\n}\n\nvar inlinePositioning = {\n  name: 'inlinePositioning',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n\n    function isEnabled() {\n      return !!instance.props.inlinePositioning;\n    }\n\n    var placement;\n    var cursorRectIndex = -1;\n    var isInternalUpdate = false;\n    var modifier = {\n      name: 'tippyInlinePositioning',\n      enabled: true,\n      phase: 'afterWrite',\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (isEnabled()) {\n          if (placement !== state.placement) {\n            instance.setProps({\n              getReferenceClientRect: function getReferenceClientRect() {\n                return _getReferenceClientRect(state.placement);\n              }\n            });\n          }\n\n          placement = state.placement;\n        }\n      }\n    };\n\n    function _getReferenceClientRect(placement) {\n      return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);\n    }\n\n    function setInternalProps(partialProps) {\n      isInternalUpdate = true;\n      instance.setProps(partialProps);\n      isInternalUpdate = false;\n    }\n\n    function addModifier() {\n      if (!isInternalUpdate) {\n        setInternalProps(getProps(instance.props, modifier));\n      }\n    }\n\n    return {\n      onCreate: addModifier,\n      onAfterUpdate: addModifier,\n      onTrigger: function onTrigger(_, event) {\n        if (isMouseEvent(event)) {\n          var rects = arrayFrom(instance.reference.getClientRects());\n          var cursorRect = rects.find(function (rect) {\n            return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;\n          });\n          cursorRectIndex = rects.indexOf(cursorRect);\n        }\n      },\n      onUntrigger: function onUntrigger() {\n        cursorRectIndex = -1;\n      }\n    };\n  }\n};\n\nfunction getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {\n  // Not an inline element, or placement is not yet known\n  if (clientRects.length < 2 || currentBasePlacement === null) {\n    return boundingRect;\n  } // There are two rects and they are disjoined\n\n\n  if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {\n    return clientRects[cursorRectIndex] || boundingRect;\n  }\n\n  switch (currentBasePlacement) {\n    case 'top':\n    case 'bottom':\n      {\n        var firstRect = clientRects[0];\n        var lastRect = clientRects[clientRects.length - 1];\n        var isTop = currentBasePlacement === 'top';\n        var top = firstRect.top;\n        var bottom = lastRect.bottom;\n        var left = isTop ? firstRect.left : lastRect.left;\n        var right = isTop ? firstRect.right : lastRect.right;\n        var width = right - left;\n        var height = bottom - top;\n        return {\n          top: top,\n          bottom: bottom,\n          left: left,\n          right: right,\n          width: width,\n          height: height\n        };\n      }\n\n    case 'left':\n    case 'right':\n      {\n        var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {\n          return rects.left;\n        }));\n        var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {\n          return rects.right;\n        }));\n        var measureRects = clientRects.filter(function (rect) {\n          return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;\n        });\n        var _top = measureRects[0].top;\n        var _bottom = measureRects[measureRects.length - 1].bottom;\n        var _left = minLeft;\n        var _right = maxRight;\n\n        var _width = _right - _left;\n\n        var _height = _bottom - _top;\n\n        return {\n          top: _top,\n          bottom: _bottom,\n          left: _left,\n          right: _right,\n          width: _width,\n          height: _height\n        };\n      }\n\n    default:\n      {\n        return boundingRect;\n      }\n  }\n}\n\nvar sticky = {\n  name: 'sticky',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference,\n        popper = instance.popper;\n\n    function getReference() {\n      return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;\n    }\n\n    function shouldCheck(value) {\n      return instance.props.sticky === true || instance.props.sticky === value;\n    }\n\n    var prevRefRect = null;\n    var prevPopRect = null;\n\n    function updatePosition() {\n      var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;\n      var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;\n\n      if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {\n        if (instance.popperInstance) {\n          instance.popperInstance.update();\n        }\n      }\n\n      prevRefRect = currentRefRect;\n      prevPopRect = currentPopRect;\n\n      if (instance.state.isMounted) {\n        requestAnimationFrame(updatePosition);\n      }\n    }\n\n    return {\n      onMount: function onMount() {\n        if (instance.props.sticky) {\n          updatePosition();\n        }\n      }\n    };\n  }\n};\n\nfunction areRectsDifferent(rectA, rectB) {\n  if (rectA && rectB) {\n    return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;\n  }\n\n  return true;\n}\n\ntippy.setDefaultProps({\n  render: render\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (tippy);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tippy.js/dist/tippy.esm.js\n");

/***/ })

/******/ });